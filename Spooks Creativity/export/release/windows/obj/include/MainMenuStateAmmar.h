// Generated by Haxe 4.3.2
#ifndef INCLUDED_MainMenuStateAmmar
#define INCLUDED_MainMenuStateAmmar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
HX_DECLARE_CLASS0(AttachedSprite)
HX_DECLARE_CLASS0(MainMenuStateAmmar)
HX_DECLARE_CLASS0(MusicBeatState)
HX_DECLARE_CLASS0(StorySprite)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,addons,display,FlxBackdrop)
HX_DECLARE_CLASS3(flixel,addons,text,FlxTypeText)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,transition,TransitionData)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,math,FlxBasePoint)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,tweens,FlxTween)
HX_DECLARE_CLASS2(flixel,ui,FlxBar)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)



class HXCPP_CLASS_ATTRIBUTES MainMenuStateAmmar_obj : public  ::MusicBeatState_obj
{
	public:
		typedef  ::MusicBeatState_obj super;
		typedef MainMenuStateAmmar_obj OBJ_;
		MainMenuStateAmmar_obj();

	public:
		enum { _hx_ClassId = 0x5dda833d };

		void __construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="MainMenuStateAmmar")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"MainMenuStateAmmar"); }
		static ::hx::ObjectPtr< MainMenuStateAmmar_obj > __new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static ::hx::ObjectPtr< MainMenuStateAmmar_obj > __alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MainMenuStateAmmar_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MainMenuStateAmmar",19,96,22,9f); }

		static void __boot();
		static  ::haxe::ds::StringMap sounds;
		static ::Array< ::String > difficultyArray;
		static ::Array< ::Dynamic> songsList;
		static bool difficultyChosen;
		int curSelected;
		 ::flixel::group::FlxTypedGroup menuItems;
		 ::flixel::group::FlxTypedGroup menuItemChecks;
		 ::flixel::group::FlxTypedGroup menuIcons;
		 ::flixel::group::FlxTypedGroup menuChecks;
		 ::flixel::FlxSprite bg;
		 ::flixel::addons::display::FlxBackdrop dots;
		 ::flixel::FlxSprite ammar;
		 ::flixel::FlxSprite border;
		 ::flixel::tweens::FlxTween ammarTalkingTween;
		 ::flixel::tweens::FlxTween borderTween;
		 ::flixel::FlxSprite songBGDesc;
		 ::flixel::tweens::FlxTween songBGDescTween;
		 ::flixel::FlxSprite diffBGDesc;
		 ::flixel::text::FlxText songDescTxt;
		 ::flixel::group::FlxTypedGroup weeksSprites;
		::Array< ::Dynamic> weekDiscordAnnoyer;
		::Array< ::Dynamic> weekKaijuParadise;
		::Array< ::Dynamic> weekDebug;
		::Array< ::Dynamic> weekHatingProblem;
		::Array< ::Dynamic> weeks;
		::String difficulty;
		 ::flixel::FlxSprite difficultySprite;
		 ::flixel::tweens::FlxTween diffSpriteTween;
		bool hoverDifficulty;
		 ::flixel::FlxSprite difficultyLeft;
		Float diffLOffset;
		 ::flixel::tweens::FlxTween diffLTween;
		 ::flixel::FlxSprite difficultyRight;
		Float diffROffset;
		 ::flixel::tweens::FlxTween diffRTween;
		int diffSelect;
		 ::flixel::FlxSprite diffLock;
		Float diffLockYOffset;
		 ::flixel::tweens::FlxTween diffLockTween;
		 ::haxe::ds::StringMap menuColor;
		::Array< ::Dynamic> menuList;
		::Array< ::String > optionsMode;
		::Array< ::Dynamic> optionsList;
		 ::haxe::ds::StringMap songsDifficulty;
		::Array< ::String > weeksList;
		::Array< ::Dynamic> badgesList;
		::Array< ::Dynamic> creditsList;
		::String curPage;
		 ::flixel::FlxSprite difficultyChart;
		 ::flixel::tweens::FlxTween difficultyChartTween;
		int difficultyPoint;
		Float difficultyPointLerp;
		int lastDiffPoint;
		 ::flixel::FlxCamera camBG;
		 ::flixel::FlxCamera camHUD;
		 ::flixel::FlxCamera camOther;
		 ::flixel::FlxObject bgFollow;
		 ::flixel::FlxObject hudFollow;
		 ::flixel::addons::text::FlxTypeText ammarText;
		 ::flixel::tweens::FlxTween bgColorTween;
		 ::flixel::text::FlxText progressTxt;
		 ::flixel::ui::FlxBar progressBar;
		 ::AttachedSprite progressBG;
		 ::flixel::FlxSprite modifierBG;
		 ::flixel::text::FlxText modifierText;
		bool selectedSomething;
		Float progress;
		Float holdOptionTime;
		 ::flixel::FlxSprite locked;
		 ::flixel::text::FlxText requiredText;
		bool openWithCute;
		 ::flixel::text::FlxText cheatText;
		 ::flixel::FlxSprite exitButton;
		 ::flixel::group::FlxTypedGroup mobileButtons;
		::Array< ::Dynamic> storyMobileButtons;
		void create();

		void destroy();

		void transProgress(::hx::Null< bool >  inTrans);
		::Dynamic transProgress_dyn();

		void setSongDesc(::String text);
		::Dynamic setSongDesc_dyn();

		::String prevTalk;
		void talking(::String text,::hx::Null< bool >  noRepeat,::hx::Null< Float >  textSpeedMul);
		::Dynamic talking_dyn();

		void createMenu();
		::Dynamic createMenu_dyn();

		void createFreeplay();
		::Dynamic createFreeplay_dyn();

		void createOptions(::hx::Null< int >  page);
		::Dynamic createOptions_dyn();

		void createBadges();
		::Dynamic createBadges_dyn();

		void createCredits();
		::Dynamic createCredits_dyn();

		void update(Float elapsed);

		void backItem();
		::Dynamic backItem_dyn();

		void holdOption();
		::Dynamic holdOption_dyn();

		bool haveToReset;
		void selectOption(int select);
		::Dynamic selectOption_dyn();

		void selectItem();
		::Dynamic selectItem_dyn();

		void itemMove();
		::Dynamic itemMove_dyn();

		void changeStoryScene(::hx::Null< int >  select);
		::Dynamic changeStoryScene_dyn();

		void createStorySprites();
		::Dynamic createStorySprites_dyn();

		int sortByOrder(int Order, ::StorySprite Obj1, ::StorySprite Obj2);
		::Dynamic sortByOrder_dyn();

		void playSong();
		::Dynamic playSong_dyn();

		void playStory();
		::Dynamic playStory_dyn();

		void changeItem(::hx::Null< int >  amount,::hx::Null< bool >  noChangeColor,::hx::Null< bool >  canTalk);
		::Dynamic changeItem_dyn();

		void changeDiff(::hx::Null< int >  amount);
		::Dynamic changeDiff_dyn();

		bool checkSongFinish(::String songName,::hx::Null< int >  diff);
		::Dynamic checkSongFinish_dyn();

		void beatHit();

		 ::flixel::tweens::FlxTween lockedTween;
		 ::flixel::tweens::FlxTween lockedTextTween;
		void popLocked(::String text);
		::Dynamic popLocked_dyn();

		void difficultyDraw();
		::Dynamic difficultyDraw_dyn();

		int lastCurSelect;
		void displayList();
		::Dynamic displayList_dyn();

		int holdOptionPass;
		void buttonControls();
		::Dynamic buttonControls_dyn();

		bool mouseJustClick;
		Float swipeDistance;
		int lastSelect;
		bool isSwiping;
		bool dragEnable;
		 ::flixel::math::FlxBasePoint lastHoldPos;
		::Array< ::String > swipeAvaiable;
		void dragSystem();
		::Dynamic dragSystem_dyn();

		bool getSwipeEnable();
		::Dynamic getSwipeEnable_dyn();

		void closeSubState();

};


#endif /* INCLUDED_MainMenuStateAmmar */ 
