// Generated by Haxe 4.3.2
#ifndef INCLUDED_mobile_HitboxControl
#define INCLUDED_mobile_HitboxControl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(mobile,HitboxControl)

namespace mobile{


class HXCPP_CLASS_ATTRIBUTES HitboxControl_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef HitboxControl_obj OBJ_;
		HitboxControl_obj();

	public:
		enum { _hx_ClassId = 0x001554e3 };

		void __construct(int order);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="mobile.HitboxControl")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"mobile.HitboxControl"); }
		static ::hx::ObjectPtr< HitboxControl_obj > __new(int order);
		static ::hx::ObjectPtr< HitboxControl_obj > __alloc(::hx::Ctx *_hx_ctx,int order);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HitboxControl_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HitboxControl",85,58,16,c4); }

		::Array< ::String > facer;
		::String hitboxPath;
		int noteData;
		 ::flixel::FlxSprite hitbox;
		 ::flixel::FlxSprite hint;
		bool onPress;
		bool onJustPress;
		bool onJustRelease;
		Float framePasses;
		Float maxX;
		Float minX;
		void update(Float elapsed);

		bool checkInTouch();
		::Dynamic checkInTouch_dyn();

};

} // end namespace mobile

#endif /* INCLUDED_mobile_HitboxControl */ 
