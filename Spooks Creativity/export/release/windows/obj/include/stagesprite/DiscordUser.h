// Generated by Haxe 4.3.2
#ifndef INCLUDED_stagesprite_DiscordUser
#define INCLUDED_stagesprite_DiscordUser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(MusicBeatState)
HX_DECLARE_CLASS0(Note)
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,addons,transition,FlxTransitionableState)
HX_DECLARE_CLASS3(flixel,addons,ui,FlxUIState)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IEventGetter)
HX_DECLARE_CLASS4(flixel,addons,ui,interfaces,IFlxUIState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(stagesprite,AttachedNormalText)
HX_DECLARE_CLASS1(stagesprite,DiscordUser)

namespace stagesprite{


class HXCPP_CLASS_ATTRIBUTES DiscordUser_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef DiscordUser_obj OBJ_;
		DiscordUser_obj();

	public:
		enum { _hx_ClassId = 0x248a1f00 };

		void __construct(::hx::Null< bool >  __o_isOpponent,::String imageName);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="stagesprite.DiscordUser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"stagesprite.DiscordUser"); }
		static ::hx::ObjectPtr< DiscordUser_obj > __new(::hx::Null< bool >  __o_isOpponent,::String imageName);
		static ::hx::ObjectPtr< DiscordUser_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_isOpponent,::String imageName);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DiscordUser_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DiscordUser",f7,55,aa,63); }

		static ::Array< ::Dynamic> vocals;
		 ::stagesprite::AttachedNormalText message;
		bool myTurn;
		 ::stagesprite::DiscordUser otherUser;
		::Array< ::Dynamic> lyrics;
		::String emptyText;
		::String typingText;
		Float timer;
		bool noteIsNear;
		::String curCharacter;
		 ::haxe::ds::StringMap chars;
		bool isOpponent;
		bool deletingMsg;
		Float targetY;
		Float discordSpace;
		 ::PlayState game;
		void update(Float elapsed);

		::Array< ::Dynamic> lastNotes;
		void addText( ::Note note);
		::Dynamic addText_dyn();

		void deleteMessage();
		::Dynamic deleteMessage_dyn();

		void changeChar(::String charName);
		::Dynamic changeChar_dyn();

		bool isSameStrumTime( ::Note note);
		::Dynamic isSameStrumTime_dyn();

		bool isNotAMessage();
		::Dynamic isNotAMessage_dyn();

};

} // end namespace stagesprite

#endif /* INCLUDED_stagesprite_DiscordUser */ 
