// Generated by Haxe 4.3.2
#ifndef INCLUDED_antidebug_DebugSave
#define INCLUDED_antidebug_DebugSave

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(antidebug,DebugSave)

namespace antidebug{


class HXCPP_CLASS_ATTRIBUTES DebugSave_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DebugSave_obj OBJ_;
		DebugSave_obj();

	public:
		enum { _hx_ClassId = 0x131430cf };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="antidebug.DebugSave")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"antidebug.DebugSave"); }

		inline static ::hx::ObjectPtr< DebugSave_obj > __new() {
			::hx::ObjectPtr< DebugSave_obj > __this = new DebugSave_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< DebugSave_obj > __alloc(::hx::Ctx *_hx_ctx) {
			DebugSave_obj *__this = (DebugSave_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DebugSave_obj), false, "antidebug.DebugSave"));
			*(void **)__this = DebugSave_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DebugSave_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DebugSave",10,0f,6c,d1); }

		static void __boot();
		static ::Array< ::String > folderInSongData;
		static ::Array< ::String > filesInStages;
		static bool anticheat;
		static void loadAntiDebug();
		static ::Dynamic loadAntiDebug_dyn();

		static void reloadFilesOnSource();
		static ::Dynamic reloadFilesOnSource_dyn();

		static void updateFolder(::String _songName);
		static ::Dynamic updateFolder_dyn();

		static ::String scriptPath;
		static ::Array< ::String > scripts;
		static ::Array< ::String > scriptsModule;
		static void updateScriptsMod();
		static ::Dynamic updateScriptsMod_dyn();

		static ::String stagesPath;
		static ::Array< ::String > stages;
		static void updateStages();
		static ::Dynamic updateStages_dyn();

};

} // end namespace antidebug

#endif /* INCLUDED_antidebug_DebugSave */ 
