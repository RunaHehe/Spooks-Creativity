// Generated by Haxe 4.3.2
#ifndef INCLUDED_modchart_events_CallbackEvent
#define INCLUDED_modchart_events_CallbackEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_modchart_events_BaseEvent
#include <modchart/events/BaseEvent.h>
#endif
HX_DECLARE_CLASS1(modchart,ModManager)
HX_DECLARE_CLASS2(modchart,events,BaseEvent)
HX_DECLARE_CLASS2(modchart,events,CallbackEvent)

namespace modchart{
namespace events{


class HXCPP_CLASS_ATTRIBUTES CallbackEvent_obj : public  ::modchart::events::BaseEvent_obj
{
	public:
		typedef  ::modchart::events::BaseEvent_obj super;
		typedef CallbackEvent_obj OBJ_;
		CallbackEvent_obj();

	public:
		enum { _hx_ClassId = 0x18d15d60 };

		void __construct(Float step, ::Dynamic callback, ::modchart::ModManager modMgr);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="modchart.events.CallbackEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"modchart.events.CallbackEvent"); }
		static ::hx::ObjectPtr< CallbackEvent_obj > __new(Float step, ::Dynamic callback, ::modchart::ModManager modMgr);
		static ::hx::ObjectPtr< CallbackEvent_obj > __alloc(::hx::Ctx *_hx_ctx,Float step, ::Dynamic callback, ::modchart::ModManager modMgr);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CallbackEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CallbackEvent",f5,63,9f,fa); }

		 ::Dynamic callback;
		Dynamic callback_dyn() { return callback;}
		virtual void run(Float curStep);

};

} // end namespace modchart
} // end namespace events

#endif /* INCLUDED_modchart_events_CallbackEvent */ 
