// Generated by Haxe 4.3.2
#ifndef INCLUDED_modchart_events_BaseEvent
#define INCLUDED_modchart_events_BaseEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(modchart,ModManager)
HX_DECLARE_CLASS2(modchart,events,BaseEvent)

namespace modchart{
namespace events{


class HXCPP_CLASS_ATTRIBUTES BaseEvent_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BaseEvent_obj OBJ_;
		BaseEvent_obj();

	public:
		enum { _hx_ClassId = 0x01e47a14 };

		void __construct(Float step, ::modchart::ModManager manager);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="modchart.events.BaseEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"modchart.events.BaseEvent"); }
		static ::hx::ObjectPtr< BaseEvent_obj > __new(Float step, ::modchart::ModManager manager);
		static ::hx::ObjectPtr< BaseEvent_obj > __alloc(::hx::Ctx *_hx_ctx,Float step, ::modchart::ModManager manager);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BaseEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BaseEvent",29,52,7c,27); }

		 ::modchart::ModManager manager;
		Float executionStep;
		bool ignoreExecution;
		bool finished;
		virtual void run(Float curStep);
		::Dynamic run_dyn();

};

} // end namespace modchart
} // end namespace events

#endif /* INCLUDED_modchart_events_BaseEvent */ 
