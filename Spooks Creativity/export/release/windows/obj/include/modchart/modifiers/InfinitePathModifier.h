// Generated by Haxe 4.3.2
#ifndef INCLUDED_modchart_modifiers_InfinitePathModifier
#define INCLUDED_modchart_modifiers_InfinitePathModifier

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_modchart_modifiers_PathModifier
#include <modchart/modifiers/PathModifier.h>
#endif
HX_DECLARE_CLASS1(math,Vector3)
HX_DECLARE_CLASS1(modchart,ModManager)
HX_DECLARE_CLASS1(modchart,Modifier)
HX_DECLARE_CLASS1(modchart,NoteModifier)
HX_DECLARE_CLASS2(modchart,modifiers,InfinitePathModifier)
HX_DECLARE_CLASS2(modchart,modifiers,PathModifier)

namespace modchart{
namespace modifiers{


class HXCPP_CLASS_ATTRIBUTES InfinitePathModifier_obj : public  ::modchart::modifiers::PathModifier_obj
{
	public:
		typedef  ::modchart::modifiers::PathModifier_obj super;
		typedef InfinitePathModifier_obj OBJ_;
		InfinitePathModifier_obj();

	public:
		enum { _hx_ClassId = 0x08defc50 };

		void __construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="modchart.modifiers.InfinitePathModifier")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"modchart.modifiers.InfinitePathModifier"); }
		static ::hx::ObjectPtr< InfinitePathModifier_obj > __new( ::modchart::ModManager modMgr, ::modchart::Modifier parent);
		static ::hx::ObjectPtr< InfinitePathModifier_obj > __alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~InfinitePathModifier_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("InfinitePathModifier",30,e7,e8,f9); }

		::String getName();

		int getMoveSpeed();

		::Array< ::Dynamic> getPath();

};

} // end namespace modchart
} // end namespace modifiers

#endif /* INCLUDED_modchart_modifiers_InfinitePathModifier */ 
