// Generated by Haxe 4.3.2
#ifndef INCLUDED_modchart_modifiers_TransformModifier
#define INCLUDED_modchart_modifiers_TransformModifier

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(math,Vector3)
HX_DECLARE_CLASS1(modchart,ModManager)
HX_DECLARE_CLASS1(modchart,Modifier)
HX_DECLARE_CLASS1(modchart,NoteModifier)
HX_DECLARE_CLASS2(modchart,modifiers,TransformModifier)

namespace modchart{
namespace modifiers{


class HXCPP_CLASS_ATTRIBUTES TransformModifier_obj : public  ::modchart::NoteModifier_obj
{
	public:
		typedef  ::modchart::NoteModifier_obj super;
		typedef TransformModifier_obj OBJ_;
		TransformModifier_obj();

	public:
		enum { _hx_ClassId = 0x768747a3 };

		void __construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="modchart.modifiers.TransformModifier")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"modchart.modifiers.TransformModifier"); }
		static ::hx::ObjectPtr< TransformModifier_obj > __new( ::modchart::ModManager modMgr, ::modchart::Modifier parent);
		static ::hx::ObjectPtr< TransformModifier_obj > __alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TransformModifier_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TransformModifier",c3,d0,df,8f); }

		Float lerp(Float a,Float b,Float c);
		::Dynamic lerp_dyn();

		::String getName();

		int getOrder();

		 ::math::Vector3 getPos(Float time,Float visualDiff,Float timeDiff,Float beat, ::math::Vector3 pos,int data,int player, ::flixel::FlxSprite obj);

		::Array< ::String > getSubmods();

};

} // end namespace modchart
} // end namespace modifiers

#endif /* INCLUDED_modchart_modifiers_TransformModifier */ 
