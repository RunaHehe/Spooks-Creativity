// Generated by Haxe 4.3.2
#ifndef INCLUDED_modchart_EventTimeline
#define INCLUDED_modchart_EventTimeline

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(modchart,EventTimeline)
HX_DECLARE_CLASS2(modchart,events,BaseEvent)

namespace modchart{


class HXCPP_CLASS_ATTRIBUTES EventTimeline_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef EventTimeline_obj OBJ_;
		EventTimeline_obj();

	public:
		enum { _hx_ClassId = 0x29c142db };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="modchart.EventTimeline")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"modchart.EventTimeline"); }
		static ::hx::ObjectPtr< EventTimeline_obj > __new();
		static ::hx::ObjectPtr< EventTimeline_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~EventTimeline_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("EventTimeline",9b,ec,2e,ff); }

		 ::haxe::ds::StringMap modEvents;
		::Array< ::Dynamic> events;
		void addMod(::String modName);
		::Dynamic addMod_dyn();

		void addEvent( ::modchart::events::BaseEvent event);
		::Dynamic addEvent_dyn();

		void update(Float step);
		::Dynamic update_dyn();

};

} // end namespace modchart

#endif /* INCLUDED_modchart_EventTimeline */ 
