// Generated by Haxe 4.3.2
#ifndef INCLUDED_hxvlc_openfl_Video
#define INCLUDED_hxvlc_openfl_Video

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_f6e4a6bd16e728f7
#define INCLUDED_f6e4a6bd16e728f7
#include "vlc/vlc.h"
#endif
HX_DECLARE_CLASS2(hxvlc,openfl,Stats)
HX_DECLARE_CLASS2(hxvlc,openfl,Video)
HX_DECLARE_CLASS2(lime,app,_Event_Int_Void)
HX_DECLARE_CLASS2(lime,app,_Event_Single_Void)
HX_DECLARE_CLASS2(lime,app,_Event_String_Void)
HX_DECLARE_CLASS2(lime,app,_Event_Void_Void)
HX_DECLARE_CLASS2(lime,app,_Event_haxe_Int64_Void)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS3(openfl,display3D,textures,RectangleTexture)
HX_DECLARE_CLASS3(openfl,display3D,textures,TextureBase)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(sys,thread,Mutex)

namespace hxvlc{
namespace openfl{


class HXCPP_CLASS_ATTRIBUTES Video_obj : public  ::openfl::display::Bitmap_obj
{
	public:
		typedef  ::openfl::display::Bitmap_obj super;
		typedef Video_obj OBJ_;
		Video_obj();

	public:
		enum { _hx_ClassId = 0x5c91a94e };

		void __construct(::hx::Null< bool >  __o_smoothing);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxvlc.openfl.Video")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxvlc.openfl.Video"); }
		static ::hx::ObjectPtr< Video_obj > __new(::hx::Null< bool >  __o_smoothing);
		static ::hx::ObjectPtr< Video_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_smoothing);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Video_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Video",5b,84,29,ca); }

		static void __boot();
		static bool useTexture;
		bool forceRendering;
		 ::lime::app::_Event_Void_Void onOpening;
		 ::lime::app::_Event_Void_Void onPlaying;
		 ::lime::app::_Event_Void_Void onStopped;
		 ::lime::app::_Event_Void_Void onPaused;
		 ::lime::app::_Event_Void_Void onEndReached;
		 ::lime::app::_Event_String_Void onEncounteredError;
		 ::lime::app::_Event_Void_Void onMediaChanged;
		 ::lime::app::_Event_Void_Void onCorked;
		 ::lime::app::_Event_Void_Void onUncorked;
		 ::lime::app::_Event_haxe_Int64_Void onTimeChanged;
		 ::lime::app::_Event_Single_Void onPositionChanged;
		 ::lime::app::_Event_haxe_Int64_Void onLengthChanged;
		 ::lime::app::_Event_Int_Void onChapterChanged;
		 ::lime::app::_Event_Void_Void onMediaMetaChanged;
		 ::lime::app::_Event_Int_Void onMediaParsedChanged;
		 ::lime::app::_Event_Void_Void onFormatSetup;
		 ::sys::thread::Mutex mediaMutex;
		 ::sys::thread::Mutex eventsMutex;
		 ::sys::thread::Mutex textureMutex;
		::Array< bool > events;
		unsigned char* mediaData;
		::cpp::UInt64 mediaSize;
		::cpp::UInt64 mediaOffset;
		 libvlc_media_player_t* mediaPlayer;
		 ::openfl::display3D::textures::RectangleTexture texture;
		unsigned int textureWidth;
		unsigned int textureHeight;
		unsigned char* texturePlanes;
		::Array< unsigned char > texturePlanesBuffer;
		virtual bool load( ::Dynamic location,::Array< ::String > options);
		::Dynamic load_dyn();

		bool loadFromSubItem(int index,::Array< ::String > options);
		::Dynamic loadFromSubItem_dyn();

		bool parseWithOptions(int parse_flag,int timeout);
		::Dynamic parseWithOptions_dyn();

		void parseStop();
		::Dynamic parseStop_dyn();

		bool play();
		::Dynamic play_dyn();

		void stop();
		::Dynamic stop_dyn();

		void pause();
		::Dynamic pause_dyn();

		void resume();
		::Dynamic resume_dyn();

		void togglePaused();
		::Dynamic togglePaused_dyn();

		void previousChapter();
		::Dynamic previousChapter_dyn();

		void nextChapter();
		::Dynamic nextChapter_dyn();

		::String getMeta(int e_meta);
		::Dynamic getMeta_dyn();

		void setMeta(int e_meta,::String value);
		::Dynamic setMeta_dyn();

		bool saveMeta();
		::Dynamic saveMeta_dyn();

		virtual void dispose();
		::Dynamic dispose_dyn();

		virtual void update(int deltaTime);
		::Dynamic update_dyn();

		::String get_mrl();
		::Dynamic get_mrl_dyn();

		 ::hxvlc::openfl::Stats get_stats();
		::Dynamic get_stats_dyn();

		::cpp::Int64 get_duration();
		::Dynamic get_duration_dyn();

		bool get_isPlaying();
		::Dynamic get_isPlaying_dyn();

		::cpp::Int64 get_length();
		::Dynamic get_length_dyn();

		::cpp::Int64 get_time();
		::Dynamic get_time_dyn();

		::cpp::Int64 set_time(::cpp::Int64 value);
		::Dynamic set_time_dyn();

		float get_position();
		::Dynamic get_position_dyn();

		float set_position(float value);
		::Dynamic set_position_dyn();

		int get_chapter();
		::Dynamic get_chapter_dyn();

		int set_chapter(int value);
		::Dynamic set_chapter_dyn();

		int get_chapterCount();
		::Dynamic get_chapterCount_dyn();

		bool get_willPlay();
		::Dynamic get_willPlay_dyn();

		float get_rate();
		::Dynamic get_rate_dyn();

		float set_rate(float value);
		::Dynamic set_rate_dyn();

		bool get_isSeekable();
		::Dynamic get_isSeekable_dyn();

		bool get_canPause();
		::Dynamic get_canPause_dyn();

		::Array< ::Dynamic> get_outputModules();
		::Dynamic get_outputModules_dyn();

		::String set_output(::String value);
		::Dynamic set_output_dyn();

		bool get_mute();
		::Dynamic get_mute_dyn();

		bool set_mute(bool value);
		::Dynamic set_mute_dyn();

		int get_volume();
		::Dynamic get_volume_dyn();

		int set_volume(int value);
		::Dynamic set_volume_dyn();

		int get_trackCount();
		::Dynamic get_trackCount_dyn();

		int get_track();
		::Dynamic get_track_dyn();

		int set_track(int value);
		::Dynamic set_track_dyn();

		int get_channel();
		::Dynamic get_channel_dyn();

		int set_channel(int value);
		::Dynamic set_channel_dyn();

		::cpp::Int64 get_delay();
		::Dynamic get_delay_dyn();

		::cpp::Int64 set_delay(::cpp::Int64 value);
		::Dynamic set_delay_dyn();

		int get_role();
		::Dynamic get_role_dyn();

		int set_role(int value);
		::Dynamic set_role_dyn();

		void _hx___enterFrame(int deltaTime);

		 ::openfl::display::BitmapData set_bitmapData( ::openfl::display::BitmapData value);

		void* videoLock(void** planes);

		void videoUnlock( void *const * planes);

		void videoDisplay(void* picture);

		int videoFormatSetup(char* chroma,unsigned int* width,unsigned int* height,unsigned int* pitches,unsigned int* lines);

		void audioPlay(unsigned char* samples,unsigned int count,::cpp::Int64 pts);

		void audioPause(::cpp::Int64 pts);

		void audioResume(::cpp::Int64 pts);

		int audioSetup(char* format,unsigned int* rate,unsigned int* channels);

		void audioSetVolume(float volume,bool mute);

};

} // end namespace hxvlc
} // end namespace openfl

#endif /* INCLUDED_hxvlc_openfl_Video */ 
