// Generated by Haxe 4.3.2
#ifndef INCLUDED_hxvlc_flixel_FlxVideoSprite
#define INCLUDED_hxvlc_flixel_FlxVideoSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(hxvlc,flixel,FlxVideoSprite)
HX_DECLARE_CLASS2(hxvlc,openfl,Video)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace hxvlc{
namespace flixel{


class HXCPP_CLASS_ATTRIBUTES FlxVideoSprite_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef FlxVideoSprite_obj OBJ_;
		FlxVideoSprite_obj();

	public:
		enum { _hx_ClassId = 0x072b8727 };

		void __construct( ::Dynamic __o_x, ::Dynamic __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="hxvlc.flixel.FlxVideoSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"hxvlc.flixel.FlxVideoSprite"); }
		static ::hx::ObjectPtr< FlxVideoSprite_obj > __new( ::Dynamic __o_x, ::Dynamic __o_y);
		static ::hx::ObjectPtr< FlxVideoSprite_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic __o_x, ::Dynamic __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		static void __alloc_dynamic_functions(::hx::Ctx *_hx_alloc,FlxVideoSprite_obj *_hx_obj);
		//~FlxVideoSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxVideoSprite",ae,2b,c5,9a); }

		bool autoPause;
		bool autoVolumeHandle;
		 ::hxvlc::openfl::Video bitmap;
		bool load( ::Dynamic location,::Array< ::String > options);
		::Dynamic load_dyn();

		bool loadFromSubItem(int index,::Array< ::String > options);
		::Dynamic loadFromSubItem_dyn();

		bool parseWithOptions(int parse_flag,int timeout);
		::Dynamic parseWithOptions_dyn();

		void parseStop();
		::Dynamic parseStop_dyn();

		bool play();
		::Dynamic play_dyn();

		void stop();
		::Dynamic stop_dyn();

		void pause();
		::Dynamic pause_dyn();

		void resume();
		::Dynamic resume_dyn();

		void togglePaused();
		::Dynamic togglePaused_dyn();

		::Dynamic getCalculatedVolume;
		inline ::Dynamic &getCalculatedVolume_dyn() {return getCalculatedVolume; }

		void destroy();

		void kill();

		void revive();

		void update(Float elapsed);

		bool set_antialiasing(bool value);

};

} // end namespace hxvlc
} // end namespace flixel

#endif /* INCLUDED_hxvlc_flixel_FlxVideoSprite */ 
