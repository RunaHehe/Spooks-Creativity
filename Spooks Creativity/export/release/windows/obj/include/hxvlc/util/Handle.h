// Generated by Haxe 4.3.2
#ifndef INCLUDED_hxvlc_util_Handle
#define INCLUDED_hxvlc_util_Handle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_d6563ee84dfb2373
#define INCLUDED_d6563ee84dfb2373
#include "stdio.h"
#endif
#ifndef INCLUDED_f6e4a6bd16e728f7
#define INCLUDED_f6e4a6bd16e728f7
#include "vlc/vlc.h"
#endif
HX_DECLARE_CLASS2(hxvlc,util,Handle)
HX_DECLARE_CLASS2(sys,thread,Mutex)

namespace hxvlc{
namespace util{


class HXCPP_CLASS_ATTRIBUTES Handle_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Handle_obj OBJ_;
		Handle_obj();

	public:
		enum { _hx_ClassId = 0x54c9e9c3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="hxvlc.util.Handle")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"hxvlc.util.Handle"); }

		inline static ::hx::ObjectPtr< Handle_obj > __new() {
			::hx::ObjectPtr< Handle_obj > __this = new Handle_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Handle_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Handle_obj *__this = (Handle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Handle_obj), false, "hxvlc.util.Handle"));
			*(void **)__this = Handle_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Handle_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Handle",c8,f7,91,ec); }

		static void __boot();
		static  libvlc_instance_t* instance;
		static bool loading;
		static  ::sys::thread::Mutex instanceMutex;
		static  cpp::Pointer<FILE> logFile;
		static bool init(::Array< ::String > options);
		static ::Dynamic init_dyn();

		static void initAsync(::Array< ::String > options, ::Dynamic finishCallback);
		static ::Dynamic initAsync_dyn();

		static void dispose();
		static ::Dynamic dispose_dyn();

		static bool initWithRetry(::Array< ::String > options, ::Dynamic resetCache);
		static ::Dynamic initWithRetry_dyn();

		static ::String get_version();
		static ::Dynamic get_version_dyn();

		static ::String get_compiler();
		static ::Dynamic get_compiler_dyn();

		static ::String get_changeset();
		static ::Dynamic get_changeset_dyn();

		static ::cpp::Int64 get_clock();
		static ::Dynamic get_clock_dyn();

};

} // end namespace hxvlc
} // end namespace util

#endif /* INCLUDED_hxvlc_util_Handle */ 
