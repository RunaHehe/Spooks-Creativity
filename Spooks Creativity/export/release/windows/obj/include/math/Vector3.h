// Generated by Haxe 4.3.2
#ifndef INCLUDED_math_Vector3
#define INCLUDED_math_Vector3

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(math,Vector3)

namespace math{


class HXCPP_CLASS_ATTRIBUTES Vector3_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Vector3_obj OBJ_;
		Vector3_obj();

	public:
		enum { _hx_ClassId = 0x63dc21a8 };

		void __construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="math.Vector3")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"math.Vector3"); }
		static ::hx::ObjectPtr< Vector3_obj > __new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z);
		static ::hx::ObjectPtr< Vector3_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Vector3_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Vector3",f0,21,ee,a7); }

		static Float angleBetween( ::math::Vector3 a, ::math::Vector3 b);
		static ::Dynamic angleBetween_dyn();

		static Float distance( ::math::Vector3 pt1, ::math::Vector3 pt2);
		static ::Dynamic distance_dyn();

		static Float distanceSquared( ::math::Vector3 pt1, ::math::Vector3 pt2);
		static ::Dynamic distanceSquared_dyn();

		static  ::math::Vector3 get_X_AXIS();
		static ::Dynamic get_X_AXIS_dyn();

		static  ::math::Vector3 get_Y_AXIS();
		static ::Dynamic get_Y_AXIS_dyn();

		static  ::math::Vector3 get_Z_AXIS();
		static ::Dynamic get_Z_AXIS_dyn();

		Float x;
		Float y;
		Float z;
		 ::math::Vector3 add( ::math::Vector3 a, ::math::Vector3 result);
		::Dynamic add_dyn();

		 ::math::Vector3 clone();
		::Dynamic clone_dyn();

		 ::math::Vector3 lerp( ::math::Vector3 goal,Float alpha);
		::Dynamic lerp_dyn();

		void copyFrom( ::math::Vector3 sourceVector3);
		::Dynamic copyFrom_dyn();

		 ::math::Vector3 crossProduct( ::math::Vector3 a, ::math::Vector3 result);
		::Dynamic crossProduct_dyn();

		void decrementBy( ::math::Vector3 a);
		::Dynamic decrementBy_dyn();

		Float dotProduct( ::math::Vector3 a);
		::Dynamic dotProduct_dyn();

		bool equals( ::math::Vector3 toCompare);
		::Dynamic equals_dyn();

		void incrementBy( ::math::Vector3 a);
		::Dynamic incrementBy_dyn();

		bool nearEquals( ::math::Vector3 toCompare,Float tolerance);
		::Dynamic nearEquals_dyn();

		void negate();
		::Dynamic negate_dyn();

		Float normalize();
		::Dynamic normalize_dyn();

		void scaleBy(Float s);
		::Dynamic scaleBy_dyn();

		void setTo(Float xa,Float ya,Float za);
		::Dynamic setTo_dyn();

		 ::math::Vector3 subtract( ::math::Vector3 a, ::math::Vector3 result);
		::Dynamic subtract_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		Float get_length();
		::Dynamic get_length_dyn();

		Float get_lengthSquared();
		::Dynamic get_lengthSquared_dyn();

};

} // end namespace math

#endif /* INCLUDED_math_Vector3 */ 
