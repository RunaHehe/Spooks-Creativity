// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_CheckSprite
#include <CheckSprite.h>
#endif
#ifndef INCLUDED_MenuSprite
#include <MenuSprite.h>
#endif
#ifndef INCLUDED_MenuText
#include <MenuText.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_224a86b8ee77a7ba_2175_new,"MenuText","new",0xb7384cfe,"MenuText.new","MainMenuStateAmmar.hx",2175,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_224a86b8ee77a7ba_2195_setLastPos,"MenuText","setLastPos",0x948f3c7e,"MenuText.setLastPos","MainMenuStateAmmar.hx",2195,0x38c8c245)

void MenuText_obj::__construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_FieldWidth,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		Float FieldWidth = __o_FieldWidth.Default(0);
            		int Size = __o_Size.Default(8);
            		bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_224a86b8ee77a7ba_2175_new)
HXLINE(2186)		this->checks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2182)		this->extraData =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(2181)		this->noMove = false;
HXLINE(2180)		this->partOf = HX_("",00,00,00,00);
HXLINE(2177)		this->objectID = 0;
HXLINE(2189)		super::__construct(X,Y,FieldWidth,Text,Size,EmbeddedFont);
HXLINE(2190)		this->set_borderSize(((Float)0.5));
HXLINE(2191)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(0,0);
HXDLIN(2191)		point->_inPool = false;
HXDLIN(2191)		this->lastPos = point;
            	}

Dynamic MenuText_obj::__CreateEmpty() { return new MenuText_obj; }

void *MenuText_obj::_hx_vtable = 0;

Dynamic MenuText_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuText_obj > _hx_result = new MenuText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool MenuText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x752f90b6) {
		if (inClassId<=(int)0x366f7394) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x366f7394;
			}
		} else {
			return inClassId==(int)0x752f90b6;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void MenuText_obj::setLastPos(){
            	HX_STACKFRAME(&_hx_pos_224a86b8ee77a7ba_2195_setLastPos)
HXDLIN(2195)		 ::flixel::math::FlxBasePoint this1 = this->lastPos;
HXDLIN(2195)		Float y = this->y;
HXDLIN(2195)		this1->set_x(this->x);
HXDLIN(2195)		this1->set_y(y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuText_obj,setLastPos,(void))


::hx::ObjectPtr< MenuText_obj > MenuText_obj::__new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_FieldWidth,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont) {
	::hx::ObjectPtr< MenuText_obj > __this = new MenuText_obj();
	__this->__construct(__o_X,__o_Y,__o_FieldWidth,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

::hx::ObjectPtr< MenuText_obj > MenuText_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< Float >  __o_FieldWidth,::String Text,::hx::Null< int >  __o_Size,::hx::Null< bool >  __o_EmbeddedFont) {
	MenuText_obj *__this = (MenuText_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuText_obj), true, "MenuText"));
	*(void **)__this = MenuText_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_FieldWidth,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

MenuText_obj::MenuText_obj()
{
}

void MenuText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuText);
	HX_MARK_MEMBER_NAME(objectID,"objectID");
	HX_MARK_MEMBER_NAME(partner,"partner");
	HX_MARK_MEMBER_NAME(partOf,"partOf");
	HX_MARK_MEMBER_NAME(noMove,"noMove");
	HX_MARK_MEMBER_NAME(extraData,"extraData");
	HX_MARK_MEMBER_NAME(lastPos,"lastPos");
	HX_MARK_MEMBER_NAME(checks,"checks");
	 ::flixel::text::FlxText_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objectID,"objectID");
	HX_VISIT_MEMBER_NAME(partner,"partner");
	HX_VISIT_MEMBER_NAME(partOf,"partOf");
	HX_VISIT_MEMBER_NAME(noMove,"noMove");
	HX_VISIT_MEMBER_NAME(extraData,"extraData");
	HX_VISIT_MEMBER_NAME(lastPos,"lastPos");
	HX_VISIT_MEMBER_NAME(checks,"checks");
	 ::flixel::text::FlxText_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuText_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"partOf") ) { return ::hx::Val( partOf ); }
		if (HX_FIELD_EQ(inName,"noMove") ) { return ::hx::Val( noMove ); }
		if (HX_FIELD_EQ(inName,"checks") ) { return ::hx::Val( checks ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"partner") ) { return ::hx::Val( partner ); }
		if (HX_FIELD_EQ(inName,"lastPos") ) { return ::hx::Val( lastPos ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"objectID") ) { return ::hx::Val( objectID ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"extraData") ) { return ::hx::Val( extraData ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setLastPos") ) { return ::hx::Val( setLastPos_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MenuText_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"partOf") ) { partOf=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noMove") ) { noMove=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checks") ) { checks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"partner") ) { partner=inValue.Cast<  ::MenuSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastPos") ) { lastPos=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"objectID") ) { objectID=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"extraData") ) { extraData=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("objectID",5a,2c,2c,83));
	outFields->push(HX_("partner",48,a6,b0,ea));
	outFields->push(HX_("partOf",ea,4b,89,ed));
	outFields->push(HX_("noMove",f2,23,f6,17));
	outFields->push(HX_("extraData",da,a4,67,7c));
	outFields->push(HX_("lastPos",de,a4,aa,d7));
	outFields->push(HX_("checks",ab,16,0f,ba));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuText_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MenuText_obj,objectID),HX_("objectID",5a,2c,2c,83)},
	{::hx::fsObject /*  ::MenuSprite */ ,(int)offsetof(MenuText_obj,partner),HX_("partner",48,a6,b0,ea)},
	{::hx::fsString,(int)offsetof(MenuText_obj,partOf),HX_("partOf",ea,4b,89,ed)},
	{::hx::fsBool,(int)offsetof(MenuText_obj,noMove),HX_("noMove",f2,23,f6,17)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(MenuText_obj,extraData),HX_("extraData",da,a4,67,7c)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(MenuText_obj,lastPos),HX_("lastPos",de,a4,aa,d7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MenuText_obj,checks),HX_("checks",ab,16,0f,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MenuText_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuText_obj_sMemberFields[] = {
	HX_("objectID",5a,2c,2c,83),
	HX_("partner",48,a6,b0,ea),
	HX_("partOf",ea,4b,89,ed),
	HX_("noMove",f2,23,f6,17),
	HX_("extraData",da,a4,67,7c),
	HX_("lastPos",de,a4,aa,d7),
	HX_("checks",ab,16,0f,ba),
	HX_("setLastPos",5c,c9,89,2a),
	::String(null()) };

::hx::Class MenuText_obj::__mClass;

void MenuText_obj::__register()
{
	MenuText_obj _hx_dummy;
	MenuText_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuText",0c,b6,1a,2d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuText_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuText_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuText_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

