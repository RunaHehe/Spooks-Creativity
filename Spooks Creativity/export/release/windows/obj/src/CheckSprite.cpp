// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_CheckSprite
#include <CheckSprite.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_MainMenuStateAmmar
#include <MainMenuStateAmmar.h>
#endif
#ifndef INCLUDED_MenuText
#include <MenuText.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a9be513903d60a44_2378_new,"CheckSprite","new",0xb355d23f,"CheckSprite.new","MainMenuStateAmmar.hx",2378,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_a9be513903d60a44_2402_update,"CheckSprite","update",0x5de0b98a,"CheckSprite.update","MainMenuStateAmmar.hx",2402,0x38c8c245)

void CheckSprite_obj::__construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< int >  __o_difficulty){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            		int difficulty = __o_difficulty.Default(1);
            	HX_STACKFRAME(&_hx_pos_a9be513903d60a44_2378_new)
HXLINE(2388)		this->noMove = false;
HXLINE(2387)		this->partOf = HX_("",00,00,00,00);
HXLINE(2385)		this->addY = ((Float)0);
HXLINE(2384)		this->addX = ((Float)0);
HXLINE(2383)		this->followPartner = false;
HXLINE(2380)		this->objectID = 0;
HXLINE(2392)		super::__construct(X,Y,null());
HXLINE(2393)		this->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(2395)		::String path = ((HX_("ammar/",bd,7a,a1,d3) + ::MainMenuStateAmmar_obj::difficultyArray->__get(difficulty)) + HX_("Tick",7d,ef,d5,37));
HXLINE(2396)		::String library = null();
HXDLIN(2396)		 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(path,null());
HXDLIN(2396)		bool xmlExists = false;
HXDLIN(2396)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + path) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE(2396)			xmlExists = true;
            		}
HXDLIN(2396)		 ::Dynamic _hx_tmp;
HXDLIN(2396)		if (::hx::IsNotNull( imageLoaded )) {
HXLINE(2396)			_hx_tmp = imageLoaded;
            		}
            		else {
HXLINE(2396)			 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(path,library);
HXDLIN(2396)			_hx_tmp = returnAsset;
            		}
HXDLIN(2396)		 ::Dynamic _hx_tmp1;
HXDLIN(2396)		if (xmlExists) {
HXLINE(2396)			_hx_tmp1 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + path) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE(2396)			_hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + path) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library);
            		}
HXDLIN(2396)		this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,_hx_tmp1));
HXLINE(2397)		this->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Checkmark",b5,bc,2f,53),10,true,null(),null());
HXLINE(2398)		this->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
            	}

Dynamic CheckSprite_obj::__CreateEmpty() { return new CheckSprite_obj; }

void *CheckSprite_obj::_hx_vtable = 0;

Dynamic CheckSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CheckSprite_obj > _hx_result = new CheckSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool CheckSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3cd58c0d) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x3cd58c0d;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void CheckSprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a9be513903d60a44_2402_update)
HXLINE(2403)		this->super::update(elapsed);
HXLINE(2404)		bool _hx_tmp;
HXDLIN(2404)		if (this->followPartner) {
HXLINE(2404)			_hx_tmp = ::hx::IsNotNull( this->partner );
            		}
            		else {
HXLINE(2404)			_hx_tmp = false;
            		}
HXDLIN(2404)		if (_hx_tmp) {
HXLINE(2405)			this->set_x((this->partner->x + this->addX));
HXLINE(2406)			this->set_y((this->partner->y + this->addY));
            		}
            	}



::hx::ObjectPtr< CheckSprite_obj > CheckSprite_obj::__new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< int >  __o_difficulty) {
	::hx::ObjectPtr< CheckSprite_obj > __this = new CheckSprite_obj();
	__this->__construct(__o_X,__o_Y,__o_difficulty);
	return __this;
}

::hx::ObjectPtr< CheckSprite_obj > CheckSprite_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y,::hx::Null< int >  __o_difficulty) {
	CheckSprite_obj *__this = (CheckSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CheckSprite_obj), true, "CheckSprite"));
	*(void **)__this = CheckSprite_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_difficulty);
	return __this;
}

CheckSprite_obj::CheckSprite_obj()
{
}

void CheckSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CheckSprite);
	HX_MARK_MEMBER_NAME(objectID,"objectID");
	HX_MARK_MEMBER_NAME(partner,"partner");
	HX_MARK_MEMBER_NAME(followPartner,"followPartner");
	HX_MARK_MEMBER_NAME(addX,"addX");
	HX_MARK_MEMBER_NAME(addY,"addY");
	HX_MARK_MEMBER_NAME(partOf,"partOf");
	HX_MARK_MEMBER_NAME(noMove,"noMove");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CheckSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objectID,"objectID");
	HX_VISIT_MEMBER_NAME(partner,"partner");
	HX_VISIT_MEMBER_NAME(followPartner,"followPartner");
	HX_VISIT_MEMBER_NAME(addX,"addX");
	HX_VISIT_MEMBER_NAME(addY,"addY");
	HX_VISIT_MEMBER_NAME(partOf,"partOf");
	HX_VISIT_MEMBER_NAME(noMove,"noMove");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CheckSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"addX") ) { return ::hx::Val( addX ); }
		if (HX_FIELD_EQ(inName,"addY") ) { return ::hx::Val( addY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"partOf") ) { return ::hx::Val( partOf ); }
		if (HX_FIELD_EQ(inName,"noMove") ) { return ::hx::Val( noMove ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"partner") ) { return ::hx::Val( partner ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"objectID") ) { return ::hx::Val( objectID ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"followPartner") ) { return ::hx::Val( followPartner ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CheckSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"addX") ) { addX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"addY") ) { addY=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"partOf") ) { partOf=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noMove") ) { noMove=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"partner") ) { partner=inValue.Cast<  ::MenuText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"objectID") ) { objectID=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"followPartner") ) { followPartner=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CheckSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("objectID",5a,2c,2c,83));
	outFields->push(HX_("partner",48,a6,b0,ea));
	outFields->push(HX_("followPartner",d7,bc,13,8f));
	outFields->push(HX_("addX",17,eb,69,40));
	outFields->push(HX_("addY",18,eb,69,40));
	outFields->push(HX_("partOf",ea,4b,89,ed));
	outFields->push(HX_("noMove",f2,23,f6,17));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CheckSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(CheckSprite_obj,objectID),HX_("objectID",5a,2c,2c,83)},
	{::hx::fsObject /*  ::MenuText */ ,(int)offsetof(CheckSprite_obj,partner),HX_("partner",48,a6,b0,ea)},
	{::hx::fsBool,(int)offsetof(CheckSprite_obj,followPartner),HX_("followPartner",d7,bc,13,8f)},
	{::hx::fsFloat,(int)offsetof(CheckSprite_obj,addX),HX_("addX",17,eb,69,40)},
	{::hx::fsFloat,(int)offsetof(CheckSprite_obj,addY),HX_("addY",18,eb,69,40)},
	{::hx::fsString,(int)offsetof(CheckSprite_obj,partOf),HX_("partOf",ea,4b,89,ed)},
	{::hx::fsBool,(int)offsetof(CheckSprite_obj,noMove),HX_("noMove",f2,23,f6,17)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CheckSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String CheckSprite_obj_sMemberFields[] = {
	HX_("objectID",5a,2c,2c,83),
	HX_("partner",48,a6,b0,ea),
	HX_("followPartner",d7,bc,13,8f),
	HX_("addX",17,eb,69,40),
	HX_("addY",18,eb,69,40),
	HX_("partOf",ea,4b,89,ed),
	HX_("noMove",f2,23,f6,17),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class CheckSprite_obj::__mClass;

void CheckSprite_obj::__register()
{
	CheckSprite_obj _hx_dummy;
	CheckSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CheckSprite",cd,46,da,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CheckSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CheckSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CheckSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CheckSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

