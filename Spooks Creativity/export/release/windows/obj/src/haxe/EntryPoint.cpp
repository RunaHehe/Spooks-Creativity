// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_EntryPoint
#include <haxe/EntryPoint.h>
#endif
#ifndef INCLUDED_sys_thread_EventLoop
#include <sys/thread/EventLoop.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_Thread_Impl_
#include <sys/thread/_Thread/Thread_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_50_wakeup,"haxe.EntryPoint","wakeup",0xf2406907,"haxe.EntryPoint.wakeup","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",50,0x22ebe610)
HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_59_runInMainThread,"haxe.EntryPoint","runInMainThread",0xb452d98b,"haxe.EntryPoint.runInMainThread","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",59,0x22ebe610)
HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_87_addThread,"haxe.EntryPoint","addThread",0x82e27f43,"haxe.EntryPoint.addThread","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",87,0x22ebe610)
HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_79_addThread,"haxe.EntryPoint","addThread",0x82e27f43,"haxe.EntryPoint.addThread","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",79,0x22ebe610)
HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_71_addThread,"haxe.EntryPoint","addThread",0x82e27f43,"haxe.EntryPoint.addThread","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",71,0x22ebe610)
HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_126_run,"haxe.EntryPoint","run",0xf0324cc3,"haxe.EntryPoint.run","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",126,0x22ebe610)
HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_37_boot,"haxe.EntryPoint","boot",0x3138e7ba,"haxe.EntryPoint.boot","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",37,0x22ebe610)
HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_39_boot,"haxe.EntryPoint","boot",0x3138e7ba,"haxe.EntryPoint.boot","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",39,0x22ebe610)
HX_LOCAL_STACK_FRAME(_hx_pos_ec11a2a53e5eef86_45_boot,"haxe.EntryPoint","boot",0x3138e7ba,"haxe.EntryPoint.boot","C:\\HaxeToolkit\\haxe\\std/haxe/EntryPoint.hx",45,0x22ebe610)
namespace haxe{

void EntryPoint_obj::__construct() { }

Dynamic EntryPoint_obj::__CreateEmpty() { return new EntryPoint_obj; }

void *EntryPoint_obj::_hx_vtable = 0;

Dynamic EntryPoint_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EntryPoint_obj > _hx_result = new EntryPoint_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EntryPoint_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7dc0c864;
}

 ::sys::thread::Mutex EntryPoint_obj::mutex;

 ::sys::thread::_Thread::HaxeThread EntryPoint_obj::mainThread;

int EntryPoint_obj::threadCount;

void EntryPoint_obj::wakeup(){
            	HX_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_50_wakeup)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(EntryPoint_obj,wakeup,(void))

void EntryPoint_obj::runInMainThread( ::Dynamic f){
            	HX_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_59_runInMainThread)
HXDLIN(  59)		::sys::thread::_Thread::Thread_Impl__obj::get_events(::haxe::EntryPoint_obj::mainThread)->run(f);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(EntryPoint_obj,runInMainThread,(void))

void EntryPoint_obj::addThread( ::Dynamic f){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,f) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_87_addThread)
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_79_addThread)
HXLINE(  80)			f();
HXLINE(  81)			::haxe::EntryPoint_obj::mutex->acquire();
HXLINE(  82)			::haxe::EntryPoint_obj::threadCount--;
HXLINE(  83)			if ((::haxe::EntryPoint_obj::threadCount == 0)) {
HXLINE(  84)				::haxe::EntryPoint_obj::wakeup();
            			}
HXLINE(  85)			::haxe::EntryPoint_obj::mutex->release();
HXLINE(  87)			::sys::thread::_Thread::Thread_Impl__obj::get_events(::haxe::EntryPoint_obj::mainThread)->runPromised( ::Dynamic(new _hx_Closure_0()));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_71_addThread)
HXLINE(  73)		::haxe::EntryPoint_obj::mutex->acquire();
HXLINE(  74)		::haxe::EntryPoint_obj::threadCount++;
HXLINE(  75)		::haxe::EntryPoint_obj::mutex->release();
HXLINE(  77)		::sys::thread::_Thread::Thread_Impl__obj::get_events(::haxe::EntryPoint_obj::mainThread)->promise();
HXLINE(  79)		::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_1(f)),false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(EntryPoint_obj,addThread,(void))

void EntryPoint_obj::run(){
            	HX_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_126_run)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(EntryPoint_obj,run,(void))


EntryPoint_obj::EntryPoint_obj()
{
}

bool EntryPoint_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mutex") ) { outValue = ( mutex ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"wakeup") ) { outValue = wakeup_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addThread") ) { outValue = addThread_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mainThread") ) { outValue = ( mainThread ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"threadCount") ) { outValue = ( threadCount ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"runInMainThread") ) { outValue = runInMainThread_dyn(); return true; }
	}
	return false;
}

bool EntryPoint_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"mutex") ) { mutex=ioValue.Cast<  ::sys::thread::Mutex >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mainThread") ) { mainThread=ioValue.Cast<  ::sys::thread::_Thread::HaxeThread >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"threadCount") ) { threadCount=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *EntryPoint_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo EntryPoint_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(void *) &EntryPoint_obj::mutex,HX_("mutex",7f,8f,5b,10)},
	{::hx::fsObject /*  ::sys::thread::_Thread::HaxeThread */ ,(void *) &EntryPoint_obj::mainThread,HX_("mainThread",e3,97,65,e4)},
	{::hx::fsInt,(void *) &EntryPoint_obj::threadCount,HX_("threadCount",a5,dd,53,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void EntryPoint_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EntryPoint_obj::mutex,"mutex");
	HX_MARK_MEMBER_NAME(EntryPoint_obj::mainThread,"mainThread");
	HX_MARK_MEMBER_NAME(EntryPoint_obj::threadCount,"threadCount");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EntryPoint_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EntryPoint_obj::mutex,"mutex");
	HX_VISIT_MEMBER_NAME(EntryPoint_obj::mainThread,"mainThread");
	HX_VISIT_MEMBER_NAME(EntryPoint_obj::threadCount,"threadCount");
};

#endif

::hx::Class EntryPoint_obj::__mClass;

static ::String EntryPoint_obj_sStaticFields[] = {
	HX_("mutex",7f,8f,5b,10),
	HX_("mainThread",e3,97,65,e4),
	HX_("threadCount",a5,dd,53,9e),
	HX_("wakeup",7f,13,5d,b5),
	HX_("runInMainThread",13,20,39,44),
	HX_("addThread",cb,af,dd,46),
	HX_("run",4b,e7,56,00),
	::String(null())
};

void EntryPoint_obj::__register()
{
	EntryPoint_obj _hx_dummy;
	EntryPoint_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.EntryPoint",e6,a9,c1,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EntryPoint_obj::__GetStatic;
	__mClass->mSetStaticField = &EntryPoint_obj::__SetStatic;
	__mClass->mMarkFunc = EntryPoint_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(EntryPoint_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< EntryPoint_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EntryPoint_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EntryPoint_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EntryPoint_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EntryPoint_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_37_boot)
HXDLIN(  37)		mutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_39_boot)
HXDLIN(  39)		mainThread = ::sys::thread::_Thread::HaxeThread_obj::current();
            	}
{
            	HX_STACKFRAME(&_hx_pos_ec11a2a53e5eef86_45_boot)
HXDLIN(  45)		threadCount = 0;
            	}
}

} // end namespace haxe
