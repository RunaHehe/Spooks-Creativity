// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AchievementObject
#include <AchievementObject.h>
#endif
#ifndef INCLUDED_Achievements
#include <Achievements.h>
#endif
#ifndef INCLUDED_AttachedSprite
#include <AttachedSprite.h>
#endif
#ifndef INCLUDED_BGSprite
#include <BGSprite.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_ColorSwap
#include <ColorSwap.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CustomFadeTransition
#include <CustomFadeTransition.h>
#endif
#ifndef INCLUDED_DebugLuaText
#include <DebugLuaText.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_DialogueBoxPsych
#include <DialogueBoxPsych.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_FunkinLua
#include <FunkinLua.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_HScript
#include <HScript.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainMenuStateAmmar
#include <MainMenuStateAmmar.h>
#endif
#ifndef INCLUDED_ModchartSprite
#include <ModchartSprite.h>
#endif
#ifndef INCLUDED_ModchartText
#include <ModchartText.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_NoteHoldSplash
#include <NoteHoldSplash.h>
#endif
#ifndef INCLUDED_NoteSplash
#include <NoteSplash.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Rating
#include <Rating.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_StageData
#include <StageData.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_WeekData
#include <WeekData.h>
#endif
#ifndef INCLUDED_antidebug_DebugSave
#include <antidebug/DebugSave.h>
#endif
#ifndef INCLUDED_editors_CharacterEditorState
#include <editors/CharacterEditorState.h>
#endif
#ifndef INCLUDED_editors_ChartingState
#include <editors/ChartingState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_effects_particles_FlxTypedEmitter
#include <flixel/effects/particles/FlxTypedEmitter.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hxvlc_flixel_FlxVideoSprite
#include <hxvlc/flixel/FlxVideoSprite.h>
#endif
#ifndef INCLUDED_hxvlc_openfl_Video
#include <hxvlc/openfl/Video.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_shaders_Glitching
#include <shaders/Glitching.h>
#endif
#ifndef INCLUDED_shaders_OldTelevision
#include <shaders/OldTelevision.h>
#endif
#ifndef INCLUDED_stagesprite_AttachedNormalText
#include <stagesprite/AttachedNormalText.h>
#endif
#ifndef INCLUDED_stagesprite_DiscordChannels
#include <stagesprite/DiscordChannels.h>
#endif
#ifndef INCLUDED_stagesprite_DiscordMembers
#include <stagesprite/DiscordMembers.h>
#endif
#ifndef INCLUDED_stagesprite_DiscordUser
#include <stagesprite/DiscordUser.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_102_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",102,0xb30d7781)
static const Float _hx_array_data_46c2835d_1[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_2[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_3[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_4[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_5[] = {
	(Float)0,(Float)0,
};
static const int _hx_array_data_46c2835d_6[] = {
	(int)-4043879,(int)-16711681,(int)-15533563,(int)-444097,
};
static const ::String _hx_array_data_46c2835d_7[] = {
	HX_("singLEFT",d6,39,ef,3b),HX_("singDOWN",31,2a,ad,36),HX_("singUP",6a,52,21,b9),HX_("singRIGHT",0d,6f,70,ac),
};
static const ::String _hx_array_data_46c2835d_8[] = {
	HX_("blah blah blah",d1,92,1f,27),HX_("coolswag",d3,7d,92,03),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_974_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",974,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_400_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",400,0xb30d7781)
static const ::String _hx_array_data_46c2835d_22[] = {
	HX_("NOTE_LEFT",b4,fe,4b,0d),HX_("NOTE_DOWN",0f,ef,09,08),HX_("NOTE_UP",c8,83,48,cd),HX_("NOTE_RIGHT",6f,ec,3f,0c),
};
static const Float _hx_array_data_46c2835d_23[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_24[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_25[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_26[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_27[] = {
	(Float)0,(Float)0,
};
static const Float _hx_array_data_46c2835d_28[] = {
	(Float)0,(Float)0,
};
static const ::String _hx_array_data_46c2835d_29[] = {
	HX_("discord",ac,b9,b4,b2),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_30[] = {
	HX_("discord",ac,b9,b4,b2),HX_("CUSTOM SONG",a4,46,48,fe),
};
static const ::String _hx_array_data_46c2835d_31[] = {
	HX_("discord",ac,b9,b4,b2),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_32[] = {
	HX_("discord",ac,b9,b4,b2),HX_("CUSTOM SONG",a4,46,48,fe),
};
static const ::String _hx_array_data_46c2835d_33[] = {
	HX_("youtube",e3,ea,29,b4),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_34[] = {
	HX_("twitter",73,c6,49,2e),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_35[] = {
	HX_("google",b9,c3,e9,61),HX_("CUSTOM SONG",a4,46,48,fe),
};
static const ::String _hx_array_data_46c2835d_36[] = {
	HX_("youtube",e3,ea,29,b4),HX_("CUSTOM SONG",a4,46,48,fe),
};
static const ::String _hx_array_data_46c2835d_37[] = {
	HX_("ammar",32,91,3d,22),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_38[] = {
	HX_("ammar",32,91,3d,22),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_39[] = {
	HX_("ammar",32,91,3d,22),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_40[] = {
	HX_("",00,00,00,00),HX_("CUSTOM SONG",a4,46,48,fe),
};
static const ::String _hx_array_data_46c2835d_41[] = {
	HX_("",00,00,00,00),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_42[] = {
	HX_("ammar",32,91,3d,22),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_43[] = {
	HX_("ammar",32,91,3d,22),HX_("COVER SONG",7e,31,67,45),
};
static const ::String _hx_array_data_46c2835d_44[] = {
	HX_("ammar",32,91,3d,22),HX_("CUSTOM SONG",a4,46,48,fe),
};
static const ::String _hx_array_data_46c2835d_45[] = {
	HX_("",00,00,00,00),HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1322_createHUD,"PlayState","createHUD",0x862fceca,"PlayState.createHUD","PlayState.hx",1322,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1510_sortByTimeVocals,"PlayState","sortByTimeVocals",0x82c2adb1,"PlayState.sortByTimeVocals","PlayState.hx",1510,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1512_vocalsSetup,"PlayState","vocalsSetup",0xa30c46ae,"PlayState.vocalsSetup","PlayState.hx",1512,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1553_createMobileControls,"PlayState","createMobileControls",0x2222e9c5,"PlayState.createMobileControls","PlayState.hx",1553,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1569_createRuntimeShader,"PlayState","createRuntimeShader",0x319829f0,"PlayState.createRuntimeShader","PlayState.hx",1569,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1588_initLuaShader,"PlayState","initLuaShader",0x63cd30fc,"PlayState.initLuaShader","PlayState.hx",1588,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1639_set_songSpeed,"PlayState","set_songSpeed",0x6add5c84,"PlayState.set_songSpeed","PlayState.hx",1639,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1652_set_playbackRate,"PlayState","set_playbackRate",0x73c3b4c9,"PlayState.set_playbackRate","PlayState.hx",1652,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1670_addTextToDebug,"PlayState","addTextToDebug",0x7f3922fb,"PlayState.addTextToDebug","PlayState.hx",1670,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1667_addTextToDebug,"PlayState","addTextToDebug",0x7f3922fb,"PlayState.addTextToDebug","PlayState.hx",1667,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1682_reloadHealthBarColors,"PlayState","reloadHealthBarColors",0xba7bbe7d,"PlayState.reloadHealthBarColors","PlayState.hx",1682,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1690_addCharacterToList,"PlayState","addCharacterToList",0x1af0ed52,"PlayState.addCharacterToList","PlayState.hx",1690,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1725_startCharacterLua,"PlayState","startCharacterLua",0xb9f87bc0,"PlayState.startCharacterLua","PlayState.hx",1725,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1757_getLuaObject,"PlayState","getLuaObject",0x57e876d2,"PlayState.getLuaObject","PlayState.hx",1757,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1764_startCharacterPos,"PlayState","startCharacterPos",0xb9fb7f9c,"PlayState.startCharacterPos","PlayState.hx",1764,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1795_startVideo,"PlayState","startVideo",0xdf2b622a,"PlayState.startVideo","PlayState.hx",1795,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1800_startVideo,"PlayState","startVideo",0xdf2b622a,"PlayState.startVideo","PlayState.hx",1800,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1811_startVideo,"PlayState","startVideo",0xdf2b622a,"PlayState.startVideo","PlayState.hx",1811,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1776_startVideo,"PlayState","startVideo",0xdf2b622a,"PlayState.startVideo","PlayState.hx",1776,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1824_startAndEnd,"PlayState","startAndEnd",0xe2348cb5,"PlayState.startAndEnd","PlayState.hx",1824,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1834_startDialogue,"PlayState","startDialogue",0x5fdf56c9,"PlayState.startDialogue","PlayState.hx",1834,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1845_startDialogue,"PlayState","startDialogue",0x5fdf56c9,"PlayState.startDialogue","PlayState.hx",1845,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1850_startDialogue,"PlayState","startDialogue",0x5fdf56c9,"PlayState.startDialogue","PlayState.hx",1850,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1879_cacheCountdown,"PlayState","cacheCountdown",0xd181c000,"PlayState.cacheCountdown","PlayState.hx",1879,0xb30d7781)
static const ::String _hx_array_data_46c2835d_79[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_80[] = {
	HX_("pixelUI/ready-pixel",67,0d,b0,1a),HX_("pixelUI/set-pixel",26,79,64,dc),HX_("pixelUI/date-pixel",bc,ec,1d,b8),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1897_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1897,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2088_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",2088,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1960_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1960,0xb30d7781)
static const ::String _hx_array_data_46c2835d_86[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_87[] = {
	HX_("pixelUI/ready-pixel",67,0d,b0,1a),HX_("pixelUI/set-pixel",26,79,64,dc),HX_("pixelUI/date-pixel",bc,ec,1d,b8),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2012_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",2012,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2044_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",2044,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2057_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",2057,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2077_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",2077,0xb30d7781)
static const int _hx_array_data_46c2835d_92[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2107_addBehindGF,"PlayState","addBehindGF",0xdb241609,"PlayState.addBehindGF","PlayState.hx",2107,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2111_addBehindBF,"PlayState","addBehindBF",0xdb2411ae,"PlayState.addBehindBF","PlayState.hx",2111,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2115_addBehindDad,"PlayState","addBehindDad",0xe46d02fd,"PlayState.addBehindDad","PlayState.hx",2115,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2119_clearNotesBefore,"PlayState","clearNotesBefore",0x04f39344,"PlayState.clearNotesBefore","PlayState.hx",2119,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2154_updateScore,"PlayState","updateScore",0x67c029f8,"PlayState.updateScore","PlayState.hx",2154,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2182_updateScore,"PlayState","updateScore",0x67c029f8,"PlayState.updateScore","PlayState.hx",2182,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2188_updateScore,"PlayState","updateScore",0x67c029f8,"PlayState.updateScore","PlayState.hx",2188,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2205_updateScore,"PlayState","updateScore",0x67c029f8,"PlayState.updateScore","PlayState.hx",2205,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2215_setSongTime,"PlayState","setSongTime",0x748441b3,"PlayState.setSongTime","PlayState.hx",2215,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2243_startNextDialogue,"PlayState","startNextDialogue",0xe3136f5c,"PlayState.startNextDialogue","PlayState.hx",2243,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2249_skipDialogue,"PlayState","skipDialogue",0x2a998a68,"PlayState.skipDialogue","PlayState.hx",2249,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2272_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",2272,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2304_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",2304,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2256_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",2256,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2333_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",2333,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2588_eventPushed,"PlayState","eventPushed",0xcec8ade2,"PlayState.eventPushed","PlayState.hx",2588,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2644_eventNoteEarlyTrigger,"PlayState","eventNoteEarlyTrigger",0xf1448c50,"PlayState.eventNoteEarlyTrigger","PlayState.hx",2644,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2659_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",2659,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2665_sortByOrderNote,"PlayState","sortByOrderNote",0xe2986cfa,"PlayState.sortByOrderNote","PlayState.hx",2665,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2670_sortByOrderStrumNote,"PlayState","sortByOrderStrumNote",0x7c66e7d3,"PlayState.sortByOrderStrumNote","PlayState.hx",2670,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2676_sortByTime,"PlayState","sortByTime",0xfb4970f3,"PlayState.sortByTime","PlayState.hx",2676,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2682_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",2682,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2728_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",2728,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2783_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",2783,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2849_onFocus,"PlayState","onFocus",0xe5082828,"PlayState.onFocus","PlayState.hx",2849,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2871_onFocusLost,"PlayState","onFocusLost",0x4ad4322c,"PlayState.onFocusLost","PlayState.hx",2871,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2886_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",2886,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2917_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2917,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3147_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3147,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3156_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3156,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3164_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3164,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3189_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3189,0xb30d7781)
static const bool _hx_array_data_46c2835d_146[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3187_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3187,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3394_openPauseMenu,"PlayState","openPauseMenu",0x1c18d5ba,"PlayState.openPauseMenu","PlayState.hx",3394,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3415_openChartEditor,"PlayState","openChartEditor",0x9d267270,"PlayState.openChartEditor","PlayState.hx",3415,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3428_doDeathCheck,"PlayState","doDeathCheck",0xe94ba810,"PlayState.doDeathCheck","PlayState.hx",3428,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3467_checkEventNote,"PlayState","checkEventNote",0xc90c9135,"PlayState.checkEventNote","PlayState.hx",3467,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3486_getControl,"PlayState","getControl",0xf4fb66d8,"PlayState.getControl","PlayState.hx",3486,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3492_triggerEventNote,"PlayState","triggerEventNote",0x6299e505,"PlayState.triggerEventNote","PlayState.hx",3492,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3746_triggerEventNote,"PlayState","triggerEventNote",0x6299e505,"PlayState.triggerEventNote","PlayState.hx",3746,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3524_triggerEventNote,"PlayState","triggerEventNote",0x6299e505,"PlayState.triggerEventNote","PlayState.hx",3524,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3514_triggerEventNote,"PlayState","triggerEventNote",0x6299e505,"PlayState.triggerEventNote","PlayState.hx",3514,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3772_moveCameraSection,"PlayState","moveCameraSection",0x3c29d69e,"PlayState.moveCameraSection","PlayState.hx",3772,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3799_moveCamera,"PlayState","moveCamera",0x93d33607,"PlayState.moveCamera","PlayState.hx",3799,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3818_moveCamera,"PlayState","moveCamera",0x93d33607,"PlayState.moveCamera","PlayState.hx",3818,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3831_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",3831,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3835_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",3835,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3841_snapCamFollowToPos,"PlayState","snapCamFollowToPos",0x64378a34,"PlayState.snapCamFollowToPos","PlayState.hx",3841,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3848_finishSong,"PlayState","finishSong",0x64ab2b39,"PlayState.finishSong","PlayState.hx",3848,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3866_finishSong,"PlayState","finishSong",0x64ab2b39,"PlayState.finishSong","PlayState.hx",3866,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3874_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3874,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3879_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3879,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4018_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",4018,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4046_startAchievement,"PlayState","startAchievement",0x360ffb5e,"PlayState.startAchievement","PlayState.hx",4046,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4053_achievementEnd,"PlayState","achievementEnd",0x1b8d2c9d,"PlayState.achievementEnd","PlayState.hx",4053,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4061_KillNotes,"PlayState","KillNotes",0x6b4eb352,"PlayState.KillNotes","PlayState.hx",4061,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4086_cachePopUpScore,"PlayState","cachePopUpScore",0xab079737,"PlayState.cachePopUpScore","PlayState.hx",4086,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4107_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",4107,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4163_onKeyPress,"PlayState","onKeyPress",0x76c14314,"PlayState.onKeyPress","PlayState.hx",4163,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4188_onKeyPress,"PlayState","onKeyPress",0x76c14314,"PlayState.onKeyPress","PlayState.hx",4188,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4250_sortHitNotes,"PlayState","sortHitNotes",0x740d1e1d,"PlayState.sortHitNotes","PlayState.hx",4250,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4260_onKeyRelease,"PlayState","onKeyRelease",0xbaee3b98,"PlayState.onKeyRelease","PlayState.hx",4260,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4277_getKeyFromEvent,"PlayState","getKeyFromEvent",0xb173e356,"PlayState.getKeyFromEvent","PlayState.hx",4277,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4296_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4296,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4332_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4332,0xb30d7781)
static const ::String _hx_array_data_46c2835d_201[] = {
	HX_("oversinging",1f,13,8f,78),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4389_parseKeys,"PlayState","parseKeys",0x0afff776,"PlayState.parseKeys","PlayState.hx",4389,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4417_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",4417,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4414_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",4414,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4470_noteMissPress,"PlayState","noteMissPress",0x5da21fc4,"PlayState.noteMissPress","PlayState.hx",4470,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4516_opponentNoteHit,"PlayState","opponentNoteHit",0x3dbfa653,"PlayState.opponentNoteHit","PlayState.hx",4516,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4572_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4572,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4616_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4616,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4700_spawnNoteSplashOnNote,"PlayState","spawnNoteSplashOnNote",0x0fc41314,"PlayState.spawnNoteSplashOnNote","PlayState.hx",4700,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4708_spawnNoteSplash,"PlayState","spawnNoteSplash",0x572b9a03,"PlayState.spawnNoteSplash","PlayState.hx",4708,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4741_destroy,"PlayState","destroy",0x6ec756e9,"PlayState.destroy","PlayState.hx",4741,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4770_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",4770,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4796_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4796,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4806_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4806,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4841_sectionHit,"PlayState","sectionHit",0x4ae66adf,"PlayState.sectionHit","PlayState.hx",4841,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4876_callOnLuas,"PlayState","callOnLuas",0xa18e7d29,"PlayState.callOnLuas","PlayState.hx",4876,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4901_setOnLuas,"PlayState","setOnLuas",0x8640696b,"PlayState.setOnLuas","PlayState.hx",4901,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4907_StrumPlayAnim,"PlayState","StrumPlayAnim",0x3bcb0b9d,"PlayState.StrumPlayAnim","PlayState.hx",4907,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4924_RecalculateRating,"PlayState","RecalculateRating",0xed22565f,"PlayState.RecalculateRating","PlayState.hx",4924,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4974_checkForAchievement,"PlayState","checkForAchievement",0x823e9b3d,"PlayState.checkForAchievement","PlayState.hx",4974,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5062_songStepEvent,"PlayState","songStepEvent",0xd0943dc8,"PlayState.songStepEvent","PlayState.hx",5062,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5110_songStepEvent,"PlayState","songStepEvent",0xd0943dc8,"PlayState.songStepEvent","PlayState.hx",5110,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5116_songStepEvent,"PlayState","songStepEvent",0xd0943dc8,"PlayState.songStepEvent","PlayState.hx",5116,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5120_songStepEvent,"PlayState","songStepEvent",0xd0943dc8,"PlayState.songStepEvent","PlayState.hx",5120,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5127_songStepEvent,"PlayState","songStepEvent",0xd0943dc8,"PlayState.songStepEvent","PlayState.hx",5127,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5153_songUpdateEvent,"PlayState","songUpdateEvent",0x8eedec6b,"PlayState.songUpdateEvent","PlayState.hx",5153,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4761_cancelMusicFadeTween,"PlayState","cancelMusicFadeTween",0x78d8c5b5,"PlayState.cancelMusicFadeTween","PlayState.hx",4761,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_110_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",110,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_111_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",111,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_113_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",113,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_166_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",166,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_167_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",167,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_168_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",168,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_169_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",169,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_170_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",170,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_171_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",171,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_172_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",172,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_173_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",173,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_240_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",240,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_241_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",241,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_276_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",276,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_277_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",277,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_278_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",278,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_279_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",279,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_284_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",284,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_331_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",331,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1876_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1876,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_102_new)
HXLINE(5061)		this->shakeNote = ((Float)0);
HXLINE(5060)		this->opponentHitDistract = false;
HXLINE(5059)		this->zoomMultiply = ((Float)1);
HXLINE(5058)		this->beatHardSnares = false;
HXLINE(4921)		this->ratingName = HX_("?",3f,00,00,00);
HXLINE(4793)		this->lastBeatHit = -1;
HXLINE(4768)		this->lastStepHit = -1;
HXLINE(4570)		this->onHoldSplash = ::Array_obj< ::Dynamic>::__new(4)->init(0,null())->init(1,null())->init(2,null())->init(3,null());
HXLINE(4161)		this->strumsBlocked = ::Array_obj< bool >::__new(0);
HXLINE(4083)		this->comboPosition = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_1,2);
HXLINE(4082)		this->ratingPosition = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_2,2);
HXLINE(4080)		this->showRating = false;
HXLINE(4079)		this->showComboNum = false;
HXLINE(4078)		this->showCombo = false;
HXLINE(4076)		this->totalNotesHit = ((Float)0.0);
HXLINE(4075)		this->totalPlayed = 0;
HXLINE(4045)		this->achievementObj = null();
HXLINE(3872)		this->transitioning = false;
HXLINE(3846)		this->doneFinishSong = false;
HXLINE(3427)		this->isDead = false;
HXLINE(2914)		this->limoSpeed = ((Float)0);
HXLINE(2913)		this->canPause = true;
HXLINE(2912)		this->startedCountdown = false;
HXLINE(2911)		this->canReset = true;
HXLINE(2910)		this->paused = false;
HXLINE(2679)		this->skipArrowStartTween = false;
HXLINE(2331)		this->eventPushedMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(2330)		this->noteTypeMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(2329)		this->debugNum = 0;
HXLINE(2253)		this->songTime = ((Float)0);
HXLINE(2252)		this->previousFrameTime = 0;
HXLINE(1870)		this->finishTimer = null();
HXLINE(1830)		this->dialogueCount = 0;
HXLINE(1567)		this->runtimeShaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1320)		this->lerpShakeBar = ((Float)0);
HXLINE(1319)		this->barOffset = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< Float >::fromData( _hx_array_data_46c2835d_3,2))->init(1,::Array_obj< Float >::fromData( _hx_array_data_46c2835d_4,2))->init(2,::Array_obj< Float >::fromData( _hx_array_data_46c2835d_5,2));
HXLINE( 384)		this->enableCoolLightNote = false;
HXLINE( 383)		this->noteColor = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_6,4);
HXLINE( 379)		this->HUDtoRight = false;
HXLINE( 377)		this->newHealthSystem = false;
HXLINE( 375)		this->hudStyle = HX_("",00,00,00,00);
HXLINE( 373)		this->lerpHealth = ((Float)1);
HXLINE( 372)		this->iconSpeed = 1;
HXLINE( 371)		this->curLives = 0;
HXDLIN( 371)		this->lives = 0;
HXLINE( 369)		this->comboPrefix = HX_("COMBOS: ",4b,9e,b7,cb);
HXLINE( 368)		this->missPrefix = HX_("MISSES: ",90,2f,87,37);
HXLINE( 367)		this->scorePrefix = HX_("SCORES: ",c7,0d,61,68);
HXLINE( 366)		this->ratePrefix = HX_("RATING: ",03,14,1b,b3);
HXLINE( 336)		this->VOCALS = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 324)		this->precacheList =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 314)		this->introSoundsSuffix = HX_("",00,00,00,00);
HXLINE( 312)		this->luaArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 305)		this->boyfriendIdled = false;
HXLINE( 304)		this->boyfriendIdleTime = ((Float)0.0);
HXLINE( 303)		this->keysPressed = ::Array_obj< bool >::__new(0);
HXLINE( 299)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 298)		this->detailsText = HX_("",00,00,00,00);
HXLINE( 297)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 293)		this->girlfriendCameraOffset = null();
HXLINE( 292)		this->opponentCameraOffset = null();
HXLINE( 291)		this->boyfriendCameraOffset = null();
HXLINE( 289)		this->songLength = ((Float)0);
HXLINE( 288)		this->skipCountdown = false;
HXLINE( 287)		this->inCutscene = false;
HXLINE( 285)		this->singAnimations = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_7,4);
HXLINE( 281)		this->defaultCamZoom = ((Float)1.05);
HXLINE( 273)		this->songScoreLerp = ((Float)0);
HXLINE( 272)		this->songMisses = 0;
HXLINE( 271)		this->songHits = 0;
HXLINE( 270)		this->songScore = 0;
HXLINE( 264)		this->dialogueJson = null();
HXLINE( 263)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_8,2);
HXLINE( 261)		this->cameraSpeed = ((Float)1);
HXLINE( 253)		this->botplaySine = ((Float)0);
HXLINE( 251)		this->haveUseBotplay = false;
HXLINE( 250)		this->haveUsePractice = false;
HXLINE( 248)		this->practiceMode = false;
HXLINE( 247)		this->cpuControlled = false;
HXLINE( 246)		this->instakillOnMiss = false;
HXLINE( 245)		this->healthLoss = ((Float)1);
HXLINE( 244)		this->healthGain = ((Float)1);
HXLINE( 239)		this->updateTime = true;
HXLINE( 238)		this->startingSong = false;
HXLINE( 237)		this->endingSong = false;
HXLINE( 236)		this->generatedMusic = false;
HXLINE( 231)		this->comboSprY = ((Float)-30);
HXLINE( 230)		this->shits = 0;
HXLINE( 229)		this->bads = 0;
HXLINE( 228)		this->goods = 0;
HXLINE( 227)		this->sicks = 0;
HXLINE( 226)		this->ratingsData = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 221)		this->songPercent = ((Float)0);
HXLINE( 216)		this->combo = 0;
HXLINE( 215)		this->health = ((Float)1);
HXLINE( 214)		this->gfSpeed = 1;
HXLINE( 212)		this->curSong = HX_("",00,00,00,00);
HXLINE( 211)		this->camZoomingDecay = ((Float)1);
HXLINE( 210)		this->camZoomingMult = ((Float)1);
HXLINE( 209)		this->camZooming = false;
HXLINE( 194)		this->noteKillOffset = ((Float)350);
HXLINE( 193)		this->songSpeedType = HX_("multiplicative",96,7a,3f,fa);
HXLINE( 192)		this->songSpeed = ((Float)1);
HXLINE( 189)		this->spawnTime = ((Float)1500);
HXLINE( 188)		this->eventNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 187)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 182)		this->boyfriend = null();
HXLINE( 181)		this->gf = null();
HXLINE( 180)		this->dad = null();
HXLINE( 178)		this->separateVocals = false;
HXLINE( 161)		 ::Dynamic defaultValue = 1;
HXDLIN( 161)		 ::Dynamic _hx_tmp;
HXDLIN( 161)		if (::PlayState_obj::isStoryMode) {
HXLINE( 161)			_hx_tmp = defaultValue;
            		}
            		else {
HXLINE( 161)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("songspeed",92,6f,b6,1d))) {
HXLINE( 161)				_hx_tmp = ::ClientPrefs_obj::gameplaySettings->get(HX_("songspeed",92,6f,b6,1d));
            			}
            			else {
HXLINE( 161)				_hx_tmp = defaultValue;
            			}
            		}
HXDLIN( 161)		this->playbackRate = ( (Float)(_hx_tmp) );
HXLINE( 159)		this->GF_Y = ((Float)130);
HXLINE( 158)		this->GF_X = ((Float)400);
HXLINE( 157)		this->DAD_Y = ((Float)100);
HXLINE( 156)		this->DAD_X = ((Float)100);
HXLINE( 155)		this->BF_Y = ((Float)100);
HXLINE( 154)		this->BF_X = ((Float)770);
HXLINE( 140)		this->modchartSaves =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 139)		this->modchartTexts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 138)		this->modchartSounds =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 137)		this->modchartTimers =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 136)		this->modchartSprites =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 135)		this->modchartTweens =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 134)		this->variables =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 133)		this->gfMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 132)		this->dadMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 131)		this->boyfriendMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 128)		this->isCameraOnForcedPos = false;
HXLINE( 108)		this->useModchart = false;
HXLINE( 106)		this->notesToSpawn = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 102)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::NoteHoldSplash,holdsplash) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_974_create)
HXLINE( 974)			holdsplash->endHold(true);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_400_create)
HXLINE( 402)		::Paths_obj::clearStoredMemory(null());
HXLINE( 405)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 407)		this->debugKeysChart = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("debug_1",05,20,57,5b))) ));
HXLINE( 408)		this->debugKeysCharacter = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("debug_2",06,20,57,5b))) ));
HXLINE( 409)		::PauseSubState_obj::songName = null();
HXLINE( 412)		::Array< int > _hx_tmp = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("note_left",b4,fe,20,a5))) ));
HXLINE( 413)		::Array< int > _hx_tmp1 = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("note_down",0f,ef,de,9f))) ));
HXLINE( 414)		::Array< int > _hx_tmp2 = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("note_up",c8,67,5c,4d))) ));
HXLINE( 411)		this->keysArray = ::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("note_right",8f,ec,ca,4e))) )));
HXLINE( 418)		this->controlArray = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_22,4);
HXLINE( 427)		::Array< ::Dynamic> _hx_tmp3 = this->ratingsData;
HXDLIN( 427)		_hx_tmp3->push( ::Rating_obj::__alloc( HX_CTX ,HX_("sick",be,8c,53,4c)));
HXLINE( 429)		 ::Rating rating =  ::Rating_obj::__alloc( HX_CTX ,HX_("good",3d,95,69,44));
HXLINE( 430)		rating->ratingMod = ((Float)0.7);
HXLINE( 431)		rating->score = 200;
HXLINE( 432)		rating->noteSplash = false;
HXLINE( 433)		this->ratingsData->push(rating);
HXLINE( 435)		 ::Rating rating1 =  ::Rating_obj::__alloc( HX_CTX ,HX_("bad",c5,b1,4a,00));
HXLINE( 436)		rating1->ratingMod = ((Float)0.4);
HXLINE( 437)		rating1->score = 100;
HXLINE( 438)		rating1->noteSplash = false;
HXLINE( 439)		this->ratingsData->push(rating1);
HXLINE( 441)		 ::Rating rating2 =  ::Rating_obj::__alloc( HX_CTX ,HX_("shit",c0,cf,52,4c));
HXLINE( 442)		rating2->ratingMod = ( (Float)(0) );
HXLINE( 443)		rating2->score = 50;
HXLINE( 444)		rating2->noteSplash = false;
HXLINE( 445)		this->ratingsData->push(rating2);
HXLINE( 448)		{
HXLINE( 448)			int _g = 0;
HXDLIN( 448)			int _g1 = this->keysArray->get_length();
HXDLIN( 448)			while((_g < _g1)){
HXLINE( 448)				_g = (_g + 1);
HXDLIN( 448)				int i = (_g - 1);
HXLINE( 450)				this->keysPressed->push(false);
            			}
            		}
HXLINE( 453)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 454)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 454)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 457)		 ::Dynamic defaultValue = 1;
HXDLIN( 457)		 ::Dynamic _hx_tmp4;
HXDLIN( 457)		if (::PlayState_obj::isStoryMode) {
HXLINE( 457)			_hx_tmp4 = defaultValue;
            		}
            		else {
HXLINE( 457)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("healthgain",1b,97,1b,16))) {
HXLINE( 457)				_hx_tmp4 = ::ClientPrefs_obj::gameplaySettings->get(HX_("healthgain",1b,97,1b,16));
            			}
            			else {
HXLINE( 457)				_hx_tmp4 = defaultValue;
            			}
            		}
HXDLIN( 457)		this->healthGain = ( (Float)(_hx_tmp4) );
HXLINE( 458)		 ::Dynamic defaultValue1 = 1;
HXDLIN( 458)		 ::Dynamic _hx_tmp5;
HXDLIN( 458)		if (::PlayState_obj::isStoryMode) {
HXLINE( 458)			_hx_tmp5 = defaultValue1;
            		}
            		else {
HXLINE( 458)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("healthloss",7f,50,74,19))) {
HXLINE( 458)				_hx_tmp5 = ::ClientPrefs_obj::gameplaySettings->get(HX_("healthloss",7f,50,74,19));
            			}
            			else {
HXLINE( 458)				_hx_tmp5 = defaultValue1;
            			}
            		}
HXDLIN( 458)		this->healthLoss = ( (Float)(_hx_tmp5) );
HXLINE( 459)		 ::Dynamic defaultValue2 = false;
HXDLIN( 459)		 ::Dynamic _hx_tmp6;
HXDLIN( 459)		if (::PlayState_obj::isStoryMode) {
HXLINE( 459)			_hx_tmp6 = defaultValue2;
            		}
            		else {
HXLINE( 459)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("instakill",f9,72,23,49))) {
HXLINE( 459)				_hx_tmp6 = ::ClientPrefs_obj::gameplaySettings->get(HX_("instakill",f9,72,23,49));
            			}
            			else {
HXLINE( 459)				_hx_tmp6 = defaultValue2;
            			}
            		}
HXDLIN( 459)		this->instakillOnMiss = ( (bool)(_hx_tmp6) );
HXLINE( 460)		 ::Dynamic defaultValue3 = false;
HXDLIN( 460)		 ::Dynamic _hx_tmp7;
HXDLIN( 460)		if (::PlayState_obj::isStoryMode) {
HXLINE( 460)			_hx_tmp7 = defaultValue3;
            		}
            		else {
HXLINE( 460)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("practice",bb,00,e7,a0))) {
HXLINE( 460)				_hx_tmp7 = ::ClientPrefs_obj::gameplaySettings->get(HX_("practice",bb,00,e7,a0));
            			}
            			else {
HXLINE( 460)				_hx_tmp7 = defaultValue3;
            			}
            		}
HXDLIN( 460)		this->practiceMode = ( (bool)(_hx_tmp7) );
HXLINE( 461)		 ::Dynamic defaultValue4 = false;
HXDLIN( 461)		 ::Dynamic _hx_tmp8;
HXDLIN( 461)		if (::PlayState_obj::isStoryMode) {
HXLINE( 461)			_hx_tmp8 = defaultValue4;
            		}
            		else {
HXLINE( 461)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("botplay",7b,fb,a9,61))) {
HXLINE( 461)				_hx_tmp8 = ::ClientPrefs_obj::gameplaySettings->get(HX_("botplay",7b,fb,a9,61));
            			}
            			else {
HXLINE( 461)				_hx_tmp8 = defaultValue4;
            			}
            		}
HXDLIN( 461)		this->cpuControlled = ( (bool)(_hx_tmp8) );
HXLINE( 464)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 465)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 466)		this->camOther =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 473)		{
HXLINE( 473)			 ::flixel::FlxCamera _hx_tmp9 = this->camHUD;
HXDLIN( 473)			_hx_tmp9->bgColor = (_hx_tmp9->bgColor & 16777215);
HXDLIN( 473)			 ::flixel::FlxCamera _hx_tmp10 = this->camHUD;
HXDLIN( 473)			_hx_tmp10->bgColor = (_hx_tmp10->bgColor | 0);
            		}
HXLINE( 474)		{
HXLINE( 474)			 ::flixel::FlxCamera _hx_tmp11 = this->camOther;
HXDLIN( 474)			_hx_tmp11->bgColor = (_hx_tmp11->bgColor & 16777215);
HXDLIN( 474)			 ::flixel::FlxCamera _hx_tmp12 = this->camOther;
HXDLIN( 474)			_hx_tmp12->bgColor = (_hx_tmp12->bgColor | 0);
            		}
HXLINE( 476)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 481)		::flixel::FlxG_obj::cameras->add(this->camHUD,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 482)		::flixel::FlxG_obj::cameras->add(this->camOther,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 483)		this->grpNoteSplashes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 484)		this->grpNoteHoldSplashes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 486)		::flixel::FlxG_obj::cameras->setDefaultDrawTarget(this->camGame,true);
HXLINE( 487)		::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = false;
HXLINE( 488)		::CustomFadeTransition_obj::nextCamera = this->camOther;
HXLINE( 489)		::CustomFadeTransition_obj::newLoading = true;
HXLINE( 491)		this->persistentUpdate = true;
HXLINE( 492)		this->persistentDraw = true;
HXLINE( 494)		this->createMobileControls();
HXLINE( 496)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 497)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),null());
            		}
HXLINE( 499)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 500)		::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE( 503)		this->storyDifficultyText = ::CoolUtil_obj::difficulties->__get(::PlayState_obj::storyDifficulty);
HXLINE( 506)		if (::PlayState_obj::isStoryMode) {
HXLINE( 507)			this->detailsText = (HX_("Story Mode: ",d4,01,86,36) + ::PlayState_obj::storyName);
            		}
            		else {
HXLINE( 509)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 513)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 516)		::GameOverSubstate_obj::resetVariables();
HXLINE( 517)		::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 517)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 517)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 517)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 517)		::String songName = hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE( 519)		::haxe::Log_obj::trace( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("introAtStep",6b,35,c5,8f),::hx::paccDynamic)),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),519,HX_("PlayState",5d,83,c2,46),HX_("create",fc,66,0f,7c)));
HXLINE( 520)		::PlayState_obj::curStage = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
HXLINE( 522)		bool _hx_tmp13;
HXDLIN( 522)		if (::hx::IsNotNull( ::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 522)			_hx_tmp13 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ).length < 1);
            		}
            		else {
HXLINE( 522)			_hx_tmp13 = true;
            		}
HXDLIN( 522)		if (_hx_tmp13) {
HXLINE( 526)			::PlayState_obj::curStage = HX_("stage",be,6a,0b,84);
            		}
HXLINE( 529)		::PlayState_obj::SONG->__SetField(HX_("stage",be,6a,0b,84),::PlayState_obj::curStage,::hx::paccDynamic);
HXLINE( 531)		 ::Dynamic stageData = ::StageData_obj::getStageFile(::PlayState_obj::curStage);
HXLINE( 532)		if (::hx::IsNull( stageData )) {
HXLINE( 533)			stageData =  ::Dynamic(::hx::Anon_obj::Create(11)
            				->setFixed(0,HX_("camera_opponent",b7,ed,08,84),::Array_obj< Float >::fromData( _hx_array_data_46c2835d_23,2))
            				->setFixed(1,HX_("girlfriend",ba,91,48,98),::cpp::VirtualArray_obj::__new(2)->init(0,400)->init(1,130))
            				->setFixed(2,HX_("camera_girlfriend",54,80,21,bf),::Array_obj< Float >::fromData( _hx_array_data_46c2835d_24,2))
            				->setFixed(3,HX_("boyfriend",6a,29,b8,e6),::cpp::VirtualArray_obj::__new(2)->init(0,770)->init(1,100))
            				->setFixed(4,HX_("isPixelStage",e2,d6,18,f5),false)
            				->setFixed(5,HX_("opponent",9d,b9,b8,f8),::cpp::VirtualArray_obj::__new(2)->init(0,100)->init(1,100))
            				->setFixed(6,HX_("hide_girlfriend",57,bd,d9,f9),false)
            				->setFixed(7,HX_("directory",6d,f2,44,10),HX_("",00,00,00,00))
            				->setFixed(8,HX_("camera_speed",2d,2f,ab,11),1)
            				->setFixed(9,HX_("defaultZoom",74,9c,b7,22),((Float)0.9))
            				->setFixed(10,HX_("camera_boyfriend",10,8c,95,41),::Array_obj< Float >::fromData( _hx_array_data_46c2835d_25,2)));
            		}
HXLINE( 550)		this->defaultCamZoom = ( (Float)(stageData->__Field(HX_("defaultZoom",74,9c,b7,22),::hx::paccDynamic)) );
HXLINE( 551)		::PlayState_obj::isPixelStage = ( (bool)(stageData->__Field(HX_("isPixelStage",e2,d6,18,f5),::hx::paccDynamic)) );
HXLINE( 552)		this->BF_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 553)		this->BF_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("boyfriend",6a,29,b8,e6),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 554)		this->GF_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 555)		this->GF_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("girlfriend",ba,91,48,98),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 556)		this->DAD_X = ( (Float)( ::Dynamic(stageData->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic))->__GetItem(0)) );
HXLINE( 557)		this->DAD_Y = ( (Float)( ::Dynamic(stageData->__Field(HX_("opponent",9d,b9,b8,f8),::hx::paccDynamic))->__GetItem(1)) );
HXLINE( 559)		if (::hx::IsNotNull( stageData->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic) )) {
HXLINE( 560)			this->cameraSpeed = ( (Float)(stageData->__Field(HX_("camera_speed",2d,2f,ab,11),::hx::paccDynamic)) );
            		}
HXLINE( 562)		this->boyfriendCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_boyfriend",10,8c,95,41),::hx::paccDynamic)) );
HXLINE( 563)		if (::hx::IsNull( this->boyfriendCameraOffset )) {
HXLINE( 564)			this->boyfriendCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_26,2);
            		}
HXLINE( 566)		this->opponentCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_opponent",b7,ed,08,84),::hx::paccDynamic)) );
HXLINE( 567)		if (::hx::IsNull( this->opponentCameraOffset )) {
HXLINE( 568)			this->opponentCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_27,2);
            		}
HXLINE( 570)		this->girlfriendCameraOffset = ( (::Array< Float >)(stageData->__Field(HX_("camera_girlfriend",54,80,21,bf),::hx::paccDynamic)) );
HXLINE( 571)		if (::hx::IsNull( this->girlfriendCameraOffset )) {
HXLINE( 572)			this->girlfriendCameraOffset = ::Array_obj< Float >::fromData( _hx_array_data_46c2835d_28,2);
            		}
HXLINE( 574)		this->boyfriendGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->BF_X,this->BF_Y,null());
HXLINE( 575)		this->dadGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->DAD_X,this->DAD_Y,null());
HXLINE( 576)		this->gfGroup =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,this->GF_X,this->GF_Y,null());
HXLINE( 579)		if ((::PlayState_obj::curStage == HX_("stage",be,6a,0b,84))) {
HXLINE( 582)			 ::BGSprite bg =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("stage/stageback",14,02,2f,31),-600,-200,((Float)0.9),((Float)0.9),null(),null());
HXLINE( 583)			this->add(bg);
HXLINE( 585)			 ::BGSprite stageFront =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("stage/stagefront",1c,e0,d2,30),-650,600,((Float)0.9),((Float)0.9),null(),null());
HXLINE( 586)			stageFront->setGraphicSize(::Std_obj::_hx_int((stageFront->get_width() * ((Float)1.1))),null());
HXLINE( 587)			stageFront->updateHitbox();
HXLINE( 588)			this->add(stageFront);
HXLINE( 589)			if (!(::ClientPrefs_obj::lowQuality)) {
HXLINE( 590)				 ::BGSprite stageLight =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("stage/stage_light",44,95,cd,42),-125,-100,((Float)0.9),((Float)0.9),null(),null());
HXLINE( 591)				stageLight->setGraphicSize(::Std_obj::_hx_int((stageLight->get_width() * ((Float)1.1))),null());
HXLINE( 592)				stageLight->updateHitbox();
HXLINE( 593)				this->add(stageLight);
HXLINE( 594)				 ::BGSprite stageLight1 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("stage/stage_light",44,95,cd,42),1225,-100,((Float)0.9),((Float)0.9),null(),null());
HXLINE( 595)				stageLight1->setGraphicSize(::Std_obj::_hx_int((stageLight1->get_width() * ((Float)1.1))),null());
HXLINE( 596)				stageLight1->updateHitbox();
HXLINE( 597)				stageLight1->set_flipX(true);
HXLINE( 598)				this->add(stageLight1);
HXLINE( 600)				 ::BGSprite stageCurtains =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("stage/stagecurtains",8e,b6,1e,2d),-500,-300,((Float)1.3),((Float)1.3),null(),null());
HXLINE( 601)				stageCurtains->setGraphicSize(::Std_obj::_hx_int((stageCurtains->get_width() * ((Float)0.9))),null());
HXLINE( 602)				stageCurtains->updateHitbox();
HXLINE( 603)				this->add(stageCurtains);
            			}
HXLINE( 605)			this->dadbattleSmokes =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 771)		if (::PlayState_obj::isPixelStage) {
HXLINE( 772)			this->introSoundsSuffix = HX_("-pixel",39,03,b3,c0);
            		}
HXLINE( 775)		this->add(this->gfGroup);
HXLINE( 778)		this->add(this->dadGroup);
HXLINE( 779)		this->add(this->boyfriendGroup);
HXLINE( 782)		this->luaDebugGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 783)		this->luaDebugGroup->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camOther));
HXLINE( 784)		this->add(this->luaDebugGroup);
HXLINE( 790)		::Array< ::String > filesPushed = ::Array_obj< ::String >::__new(0);
HXLINE( 791)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(0);
HXLINE( 794)		bool _hx_tmp14;
HXDLIN( 794)		if (::hx::IsNotNull( ::Paths_obj::currentModDirectory )) {
HXLINE( 794)			_hx_tmp14 = (::Paths_obj::currentModDirectory.length > 0);
            		}
            		else {
HXLINE( 794)			_hx_tmp14 = false;
            		}
HXDLIN( 794)		if (_hx_tmp14) {
HXLINE( 795)			::String key = (::Paths_obj::currentModDirectory + HX_("/scripts/",56,d2,ea,d4));
HXDLIN( 795)			if (::hx::IsNull( key )) {
HXLINE( 795)				key = HX_("",00,00,00,00);
            			}
HXDLIN( 795)			foldersToCheck->insert(0,(HX_("mods/",9e,2f,58,0c) + key));
            		}
HXLINE( 800)		{
HXLINE( 800)			int _g2 = 0;
HXDLIN( 800)			while((_g2 < foldersToCheck->length)){
HXLINE( 800)				::String folder = foldersToCheck->__get(_g2);
HXDLIN( 800)				_g2 = (_g2 + 1);
HXLINE( 802)				if (::sys::FileSystem_obj::exists(folder)) {
HXLINE( 804)					int _g3 = 0;
HXDLIN( 804)					::Array< ::String > _g4 = ::sys::FileSystem_obj::readDirectory(folder);
HXDLIN( 804)					while((_g3 < _g4->length)){
HXLINE( 804)						::String file = _g4->__get(_g3);
HXDLIN( 804)						_g3 = (_g3 + 1);
HXLINE( 806)						bool _hx_tmp15;
HXDLIN( 806)						if (::StringTools_obj::endsWith(file,HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 806)							_hx_tmp15 = !(filesPushed->contains(file));
            						}
            						else {
HXLINE( 806)							_hx_tmp15 = false;
            						}
HXDLIN( 806)						if (_hx_tmp15) {
HXLINE( 808)							::Array< ::Dynamic> _hx_tmp16 = this->luaArray;
HXDLIN( 808)							_hx_tmp16->push( ::FunkinLua_obj::__alloc( HX_CTX ,(folder + file)));
HXLINE( 809)							filesPushed->push(file);
            						}
            					}
            				}
            			}
            		}
HXLINE( 819)		bool doPush = false;
HXLINE( 820)		::String luaFile = ((HX_("stages/",9a,7a,ca,2d) + ::PlayState_obj::curStage) + HX_(".lua",4a,2a,ba,1e));
HXLINE( 821)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(luaFile))) {
HXLINE( 822)			luaFile = ::Paths_obj::modFolders(luaFile);
HXLINE( 823)			doPush = true;
            		}
            		else {
HXLINE( 825)			::String file1 = luaFile;
HXDLIN( 825)			if (::hx::IsNull( file1 )) {
HXLINE( 825)				file1 = HX_("",00,00,00,00);
            			}
HXDLIN( 825)			luaFile = (HX_("assets/",4c,2a,dc,36) + file1);
HXLINE( 826)			if (::sys::FileSystem_obj::exists(luaFile)) {
HXLINE( 827)				doPush = true;
            			}
            		}
HXLINE( 831)		if (doPush) {
HXLINE( 832)			::Array< ::Dynamic> _hx_tmp17 = this->luaArray;
HXDLIN( 832)			_hx_tmp17->push( ::FunkinLua_obj::__alloc( HX_CTX ,luaFile));
            		}
HXLINE( 835)		::String gfVersion = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
HXLINE( 836)		bool _hx_tmp18;
HXDLIN( 836)		if (::hx::IsNotNull( gfVersion )) {
HXLINE( 836)			_hx_tmp18 = (gfVersion.length < 1);
            		}
            		else {
HXLINE( 836)			_hx_tmp18 = true;
            		}
HXDLIN( 836)		if (_hx_tmp18) {
HXLINE( 838)			::String _hx_switch_0 = ::PlayState_obj::curStage;
            			if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE( 841)				gfVersion = HX_("gf-car",a6,63,ab,07);
HXDLIN( 841)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ||  (_hx_switch_0==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 843)				gfVersion = HX_("gf-christmas",94,26,b1,6d);
HXDLIN( 843)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ||  (_hx_switch_0==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 845)				gfVersion = HX_("gf-pixel",98,3e,8c,55);
HXDLIN( 845)				goto _hx_goto_12;
            			}
            			if (  (_hx_switch_0==HX_("tank",ea,ba,f6,4c)) ){
HXLINE( 847)				gfVersion = HX_("gf-tankmen",fe,a1,7c,b5);
HXDLIN( 847)				goto _hx_goto_12;
            			}
            			/* default */{
HXLINE( 849)				gfVersion = HX_("gf",1f,5a,00,00);
            			}
            			_hx_goto_12:;
HXLINE( 852)			{
HXLINE( 852)				::String path2 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 852)				 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 852)				 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 852)				::String path3 = invalidChars1->split(::StringTools_obj::replace(path2,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 852)				if ((hideChars1->split(path3)->join(HX_("",00,00,00,00)).toLowerCase() == HX_("stress",34,24,2d,11))) {
HXLINE( 855)					gfVersion = HX_("pico-speaker",57,7a,55,5e);
            				}
            			}
HXLINE( 857)			::PlayState_obj::SONG->__SetField(HX_("gfVersion",b9,c6,7d,f3),gfVersion,::hx::paccDynamic);
            		}
HXLINE( 860)		if (!(( (bool)(stageData->__Field(HX_("hide_girlfriend",57,bd,d9,f9),::hx::paccDynamic)) ))) {
HXLINE( 862)			this->gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),gfVersion,null());
HXLINE( 863)			this->startCharacterPos(this->gf,null());
HXLINE( 864)			{
HXLINE( 864)				 ::flixel::math::FlxBasePoint this1 = this->gf->scrollFactor;
HXDLIN( 864)				this1->set_x(((Float)0.95));
HXDLIN( 864)				this1->set_y(((Float)0.95));
            			}
HXLINE( 865)			this->gfGroup->add(this->gf).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 866)			this->startCharacterLua(this->gf->curCharacter);
            		}
HXLINE( 869)		this->dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 870)		this->startCharacterPos(this->dad,true);
HXLINE( 871)		this->dadGroup->add(this->dad).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 872)		this->startCharacterLua(this->dad->curCharacter);
HXLINE( 874)		this->boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 875)		this->startCharacterPos(this->boyfriend,null());
HXLINE( 876)		this->boyfriendGroup->add(this->boyfriend).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 877)		this->startCharacterLua(this->boyfriend->curCharacter);
HXLINE( 879)		 ::flixel::math::FlxBasePoint camPos =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,this->girlfriendCameraOffset->__get(0),this->girlfriendCameraOffset->__get(1));
HXLINE( 880)		if (::hx::IsNotNull( this->gf )) {
HXLINE( 882)			{
HXLINE( 882)				Float camPos1 = camPos->x;
HXDLIN( 882)				Float x = this->gf->getGraphicMidpoint(null())->x;
HXDLIN( 882)				camPos->set_x((camPos1 + (x + this->gf->cameraPosition->__get(0))));
            			}
HXLINE( 883)			{
HXLINE( 883)				Float camPos2 = camPos->y;
HXDLIN( 883)				Float y = this->gf->getGraphicMidpoint(null())->y;
HXDLIN( 883)				camPos->set_y((camPos2 + (y + this->gf->cameraPosition->__get(1))));
            			}
            		}
HXLINE( 886)		if (::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf",1f,5a,00,00))) {
HXLINE( 887)			this->dad->setPosition(this->GF_X,this->GF_Y);
HXLINE( 888)			if (::hx::IsNotNull( this->gf )) {
HXLINE( 889)				this->gf->set_visible(false);
            			}
            		}
HXLINE( 892)		::String library = null();
HXDLIN( 892)		::String file2 = ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (songName + HX_("/dialogue",47,74,e6,61))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library);
HXLINE( 893)		if (::openfl::utils::Assets_obj::exists(file2,null())) {
HXLINE( 894)			this->dialogueJson = ::DialogueBoxPsych_obj::parseDialogue(file2);
            		}
HXLINE( 897)		::String library1 = null();
HXDLIN( 897)		::String file3 = ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (((songName + HX_("/",2f,00,00,00)) + songName) + HX_("Dialogue",38,e9,45,81))) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1);
HXLINE( 898)		if (::openfl::utils::Assets_obj::exists(file3,null())) {
HXLINE( 899)			this->dialogue = ::CoolUtil_obj::coolTextFile(file3);
            		}
HXLINE( 901)		 ::DialogueBox doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 904)		{
HXLINE( 904)			 ::flixel::math::FlxBasePoint this2 = doof->scrollFactor;
HXDLIN( 904)			this2->set_x(( (Float)(0) ));
HXDLIN( 904)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 905)		doof->finishThing = this->startCountdown_dyn();
HXLINE( 906)		doof->nextDialogueThing = this->startNextDialogue_dyn();
HXLINE( 907)		doof->skipDialogueThing = this->skipDialogue_dyn();
HXLINE( 909)		::Conductor_obj::songPosition = (( (Float)(-5000) ) / ::Conductor_obj::songPosition);
HXLINE( 911)		 ::Dynamic _hx_tmp19;
HXDLIN( 911)		if (::ClientPrefs_obj::middleScroll) {
HXLINE( 911)			_hx_tmp19 = ::PlayState_obj::STRUM_X_MIDDLESCROLL;
            		}
            		else {
HXLINE( 911)			_hx_tmp19 = ::PlayState_obj::STRUM_X;
            		}
HXDLIN( 911)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp19,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 912)		if (!(this->useModchart)) {
HXLINE( 913)			if (::ClientPrefs_obj::downScroll) {
HXLINE( 913)				this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 150)) ));
            			}
            		}
HXLINE( 915)		{
HXLINE( 915)			 ::flixel::math::FlxBasePoint this3 = this->strumLine->scrollFactor;
HXDLIN( 915)			this3->set_x(( (Float)(0) ));
HXDLIN( 915)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 917)		bool showTime = (::ClientPrefs_obj::timeBarType != HX_("Disabled",9c,fd,b5,55));
HXLINE( 918)		this->timeTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((::PlayState_obj::STRUM_X + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))) - ( (Float)(248) )),19,400,HX_("",00,00,00,00),32,null());
HXLINE( 919)		 ::flixel::text::FlxText _hx_tmp20 = this->timeTxt;
HXDLIN( 919)		::String file4 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 919)		::String _hx_tmp21;
HXDLIN( 919)		if (::sys::FileSystem_obj::exists(file4)) {
HXLINE( 919)			_hx_tmp21 = file4;
            		}
            		else {
HXLINE( 919)			_hx_tmp21 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN( 919)		_hx_tmp20->setFormat(_hx_tmp21,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 920)		{
HXLINE( 920)			 ::flixel::math::FlxBasePoint this4 = this->timeTxt->scrollFactor;
HXDLIN( 920)			this4->set_x(( (Float)(0) ));
HXDLIN( 920)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 921)		this->timeTxt->set_alpha(( (Float)(0) ));
HXLINE( 922)		this->timeTxt->set_borderSize(( (Float)(2) ));
HXLINE( 923)		this->timeTxt->set_visible(showTime);
HXLINE( 924)		if (::ClientPrefs_obj::downScroll) {
HXLINE( 924)			this->timeTxt->set_y(( (Float)((::flixel::FlxG_obj::height - 44)) ));
            		}
HXLINE( 926)		if ((::ClientPrefs_obj::timeBarType == HX_("Song Name",76,e6,ca,de))) {
HXLINE( 928)			this->timeTxt->set_text(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
HXLINE( 930)		this->updateTime = showTime;
HXLINE( 932)		this->timeBarBG =  ::AttachedSprite_obj::__alloc( HX_CTX ,HX_("timeBar",c6,e3,d4,d8),null(),null(),null());
HXLINE( 933)		this->timeBarBG->set_x(this->timeTxt->x);
HXLINE( 934)		 ::AttachedSprite _hx_tmp22 = this->timeBarBG;
HXDLIN( 934)		Float _hx_tmp23 = this->timeTxt->y;
HXDLIN( 934)		_hx_tmp22->set_y((_hx_tmp23 + (this->timeTxt->get_height() / ( (Float)(4) ))));
HXLINE( 935)		{
HXLINE( 935)			 ::flixel::math::FlxBasePoint this5 = this->timeBarBG->scrollFactor;
HXDLIN( 935)			this5->set_x(( (Float)(0) ));
HXDLIN( 935)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 936)		this->timeBarBG->set_alpha(( (Float)(0) ));
HXLINE( 937)		this->timeBarBG->set_visible(showTime);
HXLINE( 938)		this->timeBarBG->set_color(-16777216);
HXLINE( 939)		this->timeBarBG->xAdd = ( (Float)(-4) );
HXLINE( 940)		this->timeBarBG->yAdd = ( (Float)(-4) );
HXLINE( 943)		Float _hx_tmp24 = (this->timeBarBG->x + 4);
HXDLIN( 943)		Float _hx_tmp25 = (this->timeBarBG->y + 4);
HXDLIN( 943)		int _hx_tmp26 = ::Std_obj::_hx_int((this->timeBarBG->get_width() - ( (Float)(8) )));
HXDLIN( 943)		this->timeBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp24,_hx_tmp25,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp26,::Std_obj::_hx_int((this->timeBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("songPercent",70,03,67,31),0,1,null());
HXLINE( 945)		{
HXLINE( 945)			 ::flixel::math::FlxBasePoint this6 = this->timeBar->scrollFactor;
HXDLIN( 945)			this6->set_x(( (Float)(0) ));
HXDLIN( 945)			this6->set_y(( (Float)(0) ));
            		}
HXLINE( 946)		this->timeBar->createFilledBar(-16777216,-1,null(),null());
HXLINE( 947)		this->timeBar->set_numDivisions(800);
HXLINE( 948)		this->timeBar->set_alpha(( (Float)(0) ));
HXLINE( 949)		this->timeBar->set_visible(showTime);
HXLINE( 952)		this->timeBarBG->sprTracker = this->timeBar;
HXLINE( 954)		this->strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 955)		this->add(this->strumLineNotes);
HXLINE( 956)		this->add(this->grpNoteSplashes);
HXLINE( 958)		if ((::ClientPrefs_obj::timeBarType == HX_("Song Name",76,e6,ca,de))) {
HXLINE( 960)			this->timeTxt->set_size(24);
HXLINE( 961)			 ::flixel::text::FlxText fh = this->timeTxt;
HXDLIN( 961)			fh->set_y((fh->y + 3));
            		}
HXLINE( 964)		 ::NoteSplash splash =  ::NoteSplash_obj::__alloc( HX_CTX ,-100,100,0);
HXLINE( 965)		this->grpNoteSplashes->add(splash).StaticCast<  ::NoteSplash >();
HXLINE( 966)		::NoteSplash_obj::scrollX = ( (Float)(1) );
HXDLIN( 966)		::NoteSplash_obj::scrollY = ( (Float)(1) );
HXLINE( 967)		splash->set_alpha(((Float)0.0));
HXLINE( 969)		 ::NoteHoldSplash holdsplash =  ::NoteHoldSplash_obj::__alloc( HX_CTX ,-100,100,0);
HXLINE( 970)		this->grpNoteHoldSplashes->add(holdsplash).StaticCast<  ::NoteHoldSplash >();
HXLINE( 971)		::NoteHoldSplash_obj::scrollX = ( (Float)(1) );
HXDLIN( 971)		::NoteHoldSplash_obj::scrollY = ( (Float)(1) );
HXLINE( 972)		holdsplash->set_alpha(((Float)0.0));
HXLINE( 973)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0(holdsplash)),null());
HXLINE( 977)		this->opponentStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 978)		this->playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 981)		 ::haxe::ds::StringMap _g5 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 981)		_g5->set(HX_("discord-annoyer",97,ac,58,20),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_29,2));
HXDLIN( 981)		_g5->set(HX_("shut-up",14,0a,f3,ed),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_30,2));
HXDLIN( 981)		_g5->set(HX_("depression",a6,ce,69,c6),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_31,2));
HXDLIN( 981)		_g5->set(HX_("moderator",05,40,3b,22),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_32,2));
HXDLIN( 981)		_g5->set(HX_("hate-comment",7c,74,56,74),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_33,2));
HXDLIN( 981)		_g5->set(HX_("twitter-argument",d7,36,da,54),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_34,2));
HXDLIN( 981)		_g5->set(HX_("google",b9,c3,e9,61),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_35,2));
HXDLIN( 981)		_g5->set(HX_("big-problem",92,37,56,11),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_36,2));
HXDLIN( 981)		_g5->set(HX_("no-debug",07,16,aa,70),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_37,2));
HXDLIN( 981)		_g5->set(HX_("myself",f8,10,b3,8c),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_38,2));
HXDLIN( 981)		_g5->set(HX_("furry-femboy",e1,0a,eb,38),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_39,2));
HXDLIN( 981)		_g5->set(HX_("furry-appeared",57,03,5c,21),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_40,2));
HXDLIN( 981)		_g5->set(HX_("protogen",a8,56,66,00),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_41,2));
HXDLIN( 981)		_g5->set(HX_("programming-an-ammar",86,b1,f3,e6),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_42,2));
HXDLIN( 981)		_g5->set(HX_("identity-crisis",f2,be,b2,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_43,2));
HXDLIN( 981)		_g5->set(HX_("note-nova",27,0f,72,dc),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_44,2));
HXDLIN( 981)		 ::haxe::ds::StringMap songsInfo = _g5;
HXLINE(1002)		 ::haxe::ds::StringMap _g6 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(1002)		_g6->set(HX_("hard",eb,2e,08,45),-65536);
HXDLIN(1002)		_g6->set(HX_("easy",02,8c,0c,43),-16746497);
HXDLIN(1002)		_g6->set(HX_("insane",aa,36,da,9d),-7601921);
HXDLIN(1002)		 ::haxe::ds::StringMap diffColor = _g6;
HXLINE(1007)		::String path4 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1007)		 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1007)		 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1007)		::String path5 = invalidChars2->split(::StringTools_obj::replace(path4,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1007)		::String songName1 = hideChars2->split(path5)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE(1008)		::Array< ::String > songArray;
HXDLIN(1008)		if (::hx::IsNull( ( (::Array< ::String >)(songsInfo->get(songName1)) ) )) {
HXLINE(1008)			songArray = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_45,2);
            		}
            		else {
HXLINE(1008)			songArray = ( (::Array< ::String >)(songsInfo->get(songName1)) );
            		}
HXLINE(1009)		::String path6 = songArray->__get(0);
HXLINE(1010)		::String desc = songArray->__get(1);
HXLINE(1011)		int color = -1;
HXLINE(1012)		bool isNone = false;
HXLINE(1013)		if (::hx::IsNull( path6 )) {
HXLINE(1013)			path6 = HX_("discord",ac,b9,b4,b2);
            		}
HXLINE(1014)		if ((path6 == HX_("",00,00,00,00))) {
HXLINE(1015)			isNone = true;
HXLINE(1016)			path6 = HX_("discord",ac,b9,b4,b2);
            		}
HXLINE(1018)		if (::hx::IsNull( desc )) {
HXLINE(1018)			desc = HX_("",00,00,00,00);
            		}
HXLINE(1019)		if (::hx::IsNotNull( diffColor->get(::ClientPrefs_obj::aDifficulty.toLowerCase()) )) {
HXLINE(1019)			color = diffColor->get_int(::ClientPrefs_obj::aDifficulty.toLowerCase());
            		}
HXLINE(1020)		this->songLogo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXLINE(1021)		::String key1 = (((HX_("An Ammar's Creativity",ad,76,0c,9e) + HX_("/images/intro/",6b,26,6d,b6)) + path6) + HX_(".png",3b,2d,bd,1e));
HXDLIN(1021)		if (::hx::IsNull( key1 )) {
HXLINE(1021)			key1 = HX_("",00,00,00,00);
            		}
HXDLIN(1021)		if (::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key1))) {
HXLINE(1022)			this->songLogo->set_visible(true);
HXLINE(1023)			 ::flixel::FlxSprite _hx_tmp27 = this->songLogo;
HXDLIN(1023)			::String library2 = null();
HXDLIN(1023)			 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic((HX_("intro/",43,54,90,9e) + path6),library2);
HXDLIN(1023)			_hx_tmp27->loadGraphic(returnAsset,null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(1025)			this->songLogo->set_visible(false);
            		}
HXLINE(1027)		this->add(this->songLogo);
HXLINE(1028)		this->songLogo->set_alpha(( (Float)(0) ));
HXLINE(1029)		 ::flixel::FlxSprite _hx_tmp28 = this->songLogo;
HXDLIN(1029)		_hx_tmp28->setGraphicSize(::Std_obj::_hx_int((this->songLogo->get_width() * ((Float)0.4))),null());
HXLINE(1030)		{
HXLINE(1030)			 ::flixel::FlxSprite _this1 = this->songLogo;
HXDLIN(1030)			int axes = 17;
HXDLIN(1030)			bool _hx_tmp29;
HXDLIN(1030)			if ((axes != 1)) {
HXLINE(1030)				_hx_tmp29 = (axes == 17);
            			}
            			else {
HXLINE(1030)				_hx_tmp29 = true;
            			}
HXDLIN(1030)			if (_hx_tmp29) {
HXLINE(1030)				int _hx_tmp30 = ::flixel::FlxG_obj::width;
HXDLIN(1030)				_this1->set_x(((( (Float)(_hx_tmp30) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1030)			bool _hx_tmp31;
HXDLIN(1030)			if ((axes != 16)) {
HXLINE(1030)				_hx_tmp31 = (axes == 17);
            			}
            			else {
HXLINE(1030)				_hx_tmp31 = true;
            			}
HXDLIN(1030)			if (_hx_tmp31) {
HXLINE(1030)				int _hx_tmp32 = ::flixel::FlxG_obj::height;
HXDLIN(1030)				_this1->set_y(((( (Float)(_hx_tmp32) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXDLIN(1030)		 ::flixel::FlxSprite fh1 = this->songLogo;
HXDLIN(1030)		fh1->set_x((fh1->x + 600));
HXLINE(1031)		if (isNone) {
HXLINE(1031)			this->songLogo->set_visible(false);
            		}
HXLINE(1033)		this->songTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,null(),32,false);
HXLINE(1034)		 ::flixel::text::FlxText _hx_tmp33 = this->songTitle;
HXDLIN(1034)		::String file5 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN(1034)		::String _hx_tmp34;
HXDLIN(1034)		if (::sys::FileSystem_obj::exists(file5)) {
HXLINE(1034)			_hx_tmp34 = file5;
            		}
            		else {
HXLINE(1034)			_hx_tmp34 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            		}
HXDLIN(1034)		_hx_tmp33->setFormat(_hx_tmp34,48,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(1035)		{
HXLINE(1035)			 ::flixel::text::FlxText _this2 = this->songTitle;
HXDLIN(1035)			_this2->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(1035)			_this2->set_borderColor(-16777216);
HXDLIN(1035)			_this2->set_borderSize(( (Float)(6) ));
HXDLIN(1035)			_this2->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(1036)		 ::flixel::text::FlxText _hx_tmp35 = this->songTitle;
HXDLIN(1036)		_hx_tmp35->set_text(::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_("-",2d,00,00,00),HX_(" ",20,00,00,00)));
HXLINE(1037)		this->add(this->songTitle);
HXLINE(1038)		{
HXLINE(1038)			 ::flixel::text::FlxText _this3 = this->songTitle;
HXDLIN(1038)			int axes1 = 17;
HXDLIN(1038)			bool _hx_tmp36;
HXDLIN(1038)			if ((axes1 != 1)) {
HXLINE(1038)				_hx_tmp36 = (axes1 == 17);
            			}
            			else {
HXLINE(1038)				_hx_tmp36 = true;
            			}
HXDLIN(1038)			if (_hx_tmp36) {
HXLINE(1038)				int _hx_tmp37 = ::flixel::FlxG_obj::width;
HXDLIN(1038)				_this3->set_x(((( (Float)(_hx_tmp37) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1038)			bool _hx_tmp38;
HXDLIN(1038)			if ((axes1 != 16)) {
HXLINE(1038)				_hx_tmp38 = (axes1 == 17);
            			}
            			else {
HXLINE(1038)				_hx_tmp38 = true;
            			}
HXDLIN(1038)			if (_hx_tmp38) {
HXLINE(1038)				int _hx_tmp39 = ::flixel::FlxG_obj::height;
HXDLIN(1038)				_this3->set_y(((( (Float)(_hx_tmp39) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1039)		this->songTitle->set_alpha(( (Float)(0) ));
HXLINE(1041)		this->songDesc =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,null(),32,false);
HXLINE(1042)		 ::flixel::text::FlxText _hx_tmp40 = this->songDesc;
HXDLIN(1042)		::String file6 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN(1042)		::String _hx_tmp41;
HXDLIN(1042)		if (::sys::FileSystem_obj::exists(file6)) {
HXLINE(1042)			_hx_tmp41 = file6;
            		}
            		else {
HXLINE(1042)			_hx_tmp41 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            		}
HXDLIN(1042)		_hx_tmp40->setFormat(_hx_tmp41,32,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(1043)		{
HXLINE(1043)			 ::flixel::text::FlxText _this4 = this->songDesc;
HXDLIN(1043)			_this4->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN(1043)			_this4->set_borderColor((int)-2063597568);
HXDLIN(1043)			_this4->set_borderSize(( (Float)(4) ));
HXDLIN(1043)			_this4->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(1044)		this->songDesc->set_text(desc);
HXLINE(1045)		this->add(this->songDesc);
HXLINE(1046)		{
HXLINE(1046)			 ::flixel::text::FlxText _this5 = this->songDesc;
HXDLIN(1046)			int axes2 = 17;
HXDLIN(1046)			bool _hx_tmp42;
HXDLIN(1046)			if ((axes2 != 1)) {
HXLINE(1046)				_hx_tmp42 = (axes2 == 17);
            			}
            			else {
HXLINE(1046)				_hx_tmp42 = true;
            			}
HXDLIN(1046)			if (_hx_tmp42) {
HXLINE(1046)				int _hx_tmp43 = ::flixel::FlxG_obj::width;
HXDLIN(1046)				_this5->set_x(((( (Float)(_hx_tmp43) ) - _this5->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1046)			bool _hx_tmp44;
HXDLIN(1046)			if ((axes2 != 16)) {
HXLINE(1046)				_hx_tmp44 = (axes2 == 17);
            			}
            			else {
HXLINE(1046)				_hx_tmp44 = true;
            			}
HXDLIN(1046)			if (_hx_tmp44) {
HXLINE(1046)				int _hx_tmp45 = ::flixel::FlxG_obj::height;
HXDLIN(1046)				_this5->set_y(((( (Float)(_hx_tmp45) ) - _this5->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1047)		 ::flixel::text::FlxText fh2 = this->songDesc;
HXDLIN(1047)		fh2->set_y((fh2->y + 50));
HXLINE(1048)		this->songDesc->set_alpha(( (Float)(0) ));
HXLINE(1050)		this->songDiff =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,null(),32,false);
HXLINE(1051)		 ::flixel::text::FlxText _hx_tmp46 = this->songDiff;
HXDLIN(1051)		::String file7 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN(1051)		::String _hx_tmp47;
HXDLIN(1051)		if (::sys::FileSystem_obj::exists(file7)) {
HXLINE(1051)			_hx_tmp47 = file7;
            		}
            		else {
HXLINE(1051)			_hx_tmp47 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            		}
HXDLIN(1051)		_hx_tmp46->setFormat(_hx_tmp47,32,color,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(1052)		{
HXLINE(1052)			 ::flixel::text::FlxText _this6 = this->songDiff;
HXDLIN(1052)			_this6->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN(1052)			_this6->set_borderColor((int)-2063597568);
HXDLIN(1052)			_this6->set_borderSize(( (Float)(4) ));
HXDLIN(1052)			_this6->set_borderQuality(( (Float)(1) ));
            		}
HXLINE(1053)		 ::flixel::text::FlxText _hx_tmp48 = this->songDiff;
HXDLIN(1053)		_hx_tmp48->set_text(::ClientPrefs_obj::aDifficulty.toUpperCase());
HXLINE(1054)		this->add(this->songDiff);
HXLINE(1055)		{
HXLINE(1055)			 ::flixel::text::FlxText _this7 = this->songDiff;
HXDLIN(1055)			int axes3 = 17;
HXDLIN(1055)			bool _hx_tmp49;
HXDLIN(1055)			if ((axes3 != 1)) {
HXLINE(1055)				_hx_tmp49 = (axes3 == 17);
            			}
            			else {
HXLINE(1055)				_hx_tmp49 = true;
            			}
HXDLIN(1055)			if (_hx_tmp49) {
HXLINE(1055)				int _hx_tmp50 = ::flixel::FlxG_obj::width;
HXDLIN(1055)				_this7->set_x(((( (Float)(_hx_tmp50) ) - _this7->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1055)			bool _hx_tmp51;
HXDLIN(1055)			if ((axes3 != 16)) {
HXLINE(1055)				_hx_tmp51 = (axes3 == 17);
            			}
            			else {
HXLINE(1055)				_hx_tmp51 = true;
            			}
HXDLIN(1055)			if (_hx_tmp51) {
HXLINE(1055)				int _hx_tmp52 = ::flixel::FlxG_obj::height;
HXDLIN(1055)				_this7->set_y(((( (Float)(_hx_tmp52) ) - _this7->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1056)		 ::flixel::text::FlxText fh3 = this->songDiff;
HXDLIN(1056)		fh3->set_y((fh3->y - ( (Float)(50) )));
HXLINE(1057)		this->songDiff->set_alpha(( (Float)(0) ));
HXLINE(1058)		 ::flixel::text::FlxText _hx_tmp53 = this->songDiff;
HXDLIN(1058)		_hx_tmp53->set_visible((::ClientPrefs_obj::aDifficulty.toLowerCase() != HX_("normal",27,72,69,30)));
HXLINE(1062)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE(1064)		this->modManager =  ::modchart::ModManager_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(1067)		{
HXLINE(1067)			 ::Dynamic notetype = this->noteTypeMap->keys();
HXDLIN(1067)			while(( (bool)(notetype->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1067)				::String notetype1 = ( (::String)(notetype->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1070)				::String luaToLoad = ::Paths_obj::modFolders(((HX_("custom_notetypes/",16,04,18,a1) + notetype1) + HX_(".lua",4a,2a,ba,1e)));
HXLINE(1071)				if (::sys::FileSystem_obj::exists(luaToLoad)) {
HXLINE(1073)					::Array< ::Dynamic> _hx_tmp54 = this->luaArray;
HXDLIN(1073)					_hx_tmp54->push( ::FunkinLua_obj::__alloc( HX_CTX ,luaToLoad));
            				}
            				else {
HXLINE(1077)					::String file8 = ((HX_("custom_notetypes/",16,04,18,a1) + notetype1) + HX_(".lua",4a,2a,ba,1e));
HXDLIN(1077)					if (::hx::IsNull( file8 )) {
HXLINE(1077)						file8 = HX_("",00,00,00,00);
            					}
HXDLIN(1077)					luaToLoad = (HX_("assets/",4c,2a,dc,36) + file8);
HXLINE(1078)					if (::sys::FileSystem_obj::exists(luaToLoad)) {
HXLINE(1080)						::Array< ::Dynamic> _hx_tmp55 = this->luaArray;
HXDLIN(1080)						_hx_tmp55->push( ::FunkinLua_obj::__alloc( HX_CTX ,luaToLoad));
            					}
            				}
            			}
            		}
HXLINE(1091)		{
HXLINE(1091)			 ::Dynamic event = this->eventPushedMap->keys();
HXDLIN(1091)			while(( (bool)(event->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1091)				::String event1 = ( (::String)(event->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1094)				::String luaToLoad1 = ::Paths_obj::modFolders(((HX_("custom_events/",28,61,2e,89) + event1) + HX_(".lua",4a,2a,ba,1e)));
HXLINE(1095)				if (::sys::FileSystem_obj::exists(luaToLoad1)) {
HXLINE(1097)					::Array< ::Dynamic> _hx_tmp56 = this->luaArray;
HXDLIN(1097)					_hx_tmp56->push( ::FunkinLua_obj::__alloc( HX_CTX ,luaToLoad1));
            				}
            				else {
HXLINE(1101)					::String file9 = ((HX_("custom_events/",28,61,2e,89) + event1) + HX_(".lua",4a,2a,ba,1e));
HXDLIN(1101)					if (::hx::IsNull( file9 )) {
HXLINE(1101)						file9 = HX_("",00,00,00,00);
            					}
HXDLIN(1101)					luaToLoad1 = (HX_("assets/",4c,2a,dc,36) + file9);
HXLINE(1102)					if (::sys::FileSystem_obj::exists(luaToLoad1)) {
HXLINE(1104)						::Array< ::Dynamic> _hx_tmp57 = this->luaArray;
HXDLIN(1104)						_hx_tmp57->push( ::FunkinLua_obj::__alloc( HX_CTX ,luaToLoad1));
            					}
            				}
            			}
            		}
HXLINE(1117)		this->noteTypeMap->clear();
HXLINE(1118)		this->noteTypeMap = null();
HXLINE(1119)		this->eventPushedMap->clear();
HXLINE(1120)		this->eventPushedMap = null();
HXLINE(1132)		this->camFollow =  ::flixel::math::FlxBasePoint_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ));
HXLINE(1133)		this->camFollowPos =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(1135)		this->snapCamFollowToPos(camPos->x,camPos->y);
HXLINE(1136)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE(1138)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE(1139)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE(1141)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollowPos )) {
HXLINE(1143)			this->camFollowPos = ::PlayState_obj::prevCamFollowPos;
HXLINE(1144)			::PlayState_obj::prevCamFollowPos = null();
            		}
HXLINE(1146)		this->add(this->camFollowPos);
HXLINE(1148)		::flixel::FlxG_obj::camera->follow(this->camFollowPos,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),1);
HXLINE(1150)		::flixel::FlxG_obj::camera->set_zoom(this->defaultCamZoom);
HXLINE(1151)		{
HXLINE(1151)			 ::flixel::FlxCamera _this8 = ::flixel::FlxG_obj::camera;
HXDLIN(1151)			 ::flixel::math::FlxBasePoint point = this->camFollow;
HXDLIN(1151)			{
HXLINE(1151)				 ::flixel::math::FlxBasePoint this7 = _this8->scroll;
HXDLIN(1151)				Float y1 = (point->y - (( (Float)(_this8->height) ) * ((Float)0.5)));
HXDLIN(1151)				this7->set_x((point->x - (( (Float)(_this8->width) ) * ((Float)0.5))));
HXDLIN(1151)				this7->set_y(y1);
            			}
HXDLIN(1151)			if (point->_weak) {
HXLINE(1151)				point->put();
            			}
            		}
HXLINE(1153)		{
HXLINE(1153)			 ::flixel::math::FlxRect _this9 = ::flixel::FlxG_obj::worldBounds;
HXDLIN(1153)			_this9->x = ( (Float)(0) );
HXDLIN(1153)			_this9->y = ( (Float)(0) );
HXDLIN(1153)			_this9->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN(1153)			_this9->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE(1155)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE(1156)		this->moveCameraSection();
HXLINE(1158)		this->createHUD();
HXLINE(1160)		this->strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1161)		this->grpNoteHoldSplashes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1162)		this->grpNoteSplashes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1163)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1164)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1165)		if ((this->hudStyle != HX_("discord",ac,b9,b4,b2))) {
HXLINE(1171)			this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1172)			this->discordHealthText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1173)			this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1174)			this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1176)		if (::hx::IsNotNull( this->healthBarOverlay )) {
HXLINE(1176)			this->healthBarOverlay->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1178)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1179)		this->missTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1180)		this->rateTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1181)		this->comboTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1183)		this->countdownText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1185)		this->botplayTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1186)		this->timeBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1187)		this->timeBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1188)		this->timeTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1189)		doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1191)		this->songLogo->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1192)		this->songTitle->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1193)		this->songDesc->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1194)		this->songDiff->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1196)		if (::hx::IsNotNull( this->lightHUD )) {
HXLINE(1197)			this->lightHUD->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camOther));
HXLINE(1198)			{
HXLINE(1198)				 ::flixel::FlxSprite _this10 = this->lightHUD;
HXDLIN(1198)				int axes4 = 17;
HXDLIN(1198)				bool _hx_tmp58;
HXDLIN(1198)				if ((axes4 != 1)) {
HXLINE(1198)					_hx_tmp58 = (axes4 == 17);
            				}
            				else {
HXLINE(1198)					_hx_tmp58 = true;
            				}
HXDLIN(1198)				if (_hx_tmp58) {
HXLINE(1198)					int _hx_tmp59 = ::flixel::FlxG_obj::width;
HXDLIN(1198)					_this10->set_x(((( (Float)(_hx_tmp59) ) - _this10->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(1198)				bool _hx_tmp60;
HXDLIN(1198)				if ((axes4 != 16)) {
HXLINE(1198)					_hx_tmp60 = (axes4 == 17);
            				}
            				else {
HXLINE(1198)					_hx_tmp60 = true;
            				}
HXDLIN(1198)				if (_hx_tmp60) {
HXLINE(1198)					int _hx_tmp61 = ::flixel::FlxG_obj::height;
HXDLIN(1198)					_this10->set_y(((( (Float)(_hx_tmp61) ) - _this10->get_height()) / ( (Float)(2) )));
            				}
            			}
            		}
HXLINE(1206)		this->startingSong = true;
HXLINE(1210)		::Array< ::String > filesPushed1 = ::Array_obj< ::String >::__new(0);
HXLINE(1211)		::String path7 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1211)		 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1211)		 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1211)		::String path8 = invalidChars3->split(::StringTools_obj::replace(path7,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1211)		::String file10 = ((HX_("data/",c5,0e,88,d4) + hideChars3->split(path8)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN(1211)		if (::hx::IsNull( file10 )) {
HXLINE(1211)			file10 = HX_("",00,00,00,00);
            		}
HXDLIN(1211)		::Array< ::String > foldersToCheck1 = ::Array_obj< ::String >::__new(1)->init(0,(HX_("assets/",4c,2a,dc,36) + file10));
HXLINE(1214)		::String path9 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1214)		 ::EReg invalidChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1214)		 ::EReg hideChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1214)		::String path10 = invalidChars4->split(::StringTools_obj::replace(path9,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1214)		::String key2 = ((HX_("data/",c5,0e,88,d4) + hideChars4->split(path10)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN(1214)		if (::hx::IsNull( key2 )) {
HXLINE(1214)			key2 = HX_("",00,00,00,00);
            		}
HXDLIN(1214)		foldersToCheck1->insert(0,(HX_("mods/",9e,2f,58,0c) + key2));
HXLINE(1215)		bool _hx_tmp62;
HXDLIN(1215)		if (::hx::IsNotNull( ::Paths_obj::currentModDirectory )) {
HXLINE(1215)			_hx_tmp62 = (::Paths_obj::currentModDirectory.length > 0);
            		}
            		else {
HXLINE(1215)			_hx_tmp62 = false;
            		}
HXDLIN(1215)		if (_hx_tmp62) {
HXLINE(1216)			::String key3 = (::Paths_obj::currentModDirectory + HX_("/data/",36,04,4e,9f));
HXDLIN(1216)			::String path11 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1216)			 ::EReg invalidChars5 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1216)			 ::EReg hideChars5 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1216)			::String path12 = invalidChars5->split(::StringTools_obj::replace(path11,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1216)			::String key4 = ((key3 + hideChars5->split(path12)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN(1216)			if (::hx::IsNull( key4 )) {
HXLINE(1216)				key4 = HX_("",00,00,00,00);
            			}
HXDLIN(1216)			foldersToCheck1->insert(0,(HX_("mods/",9e,2f,58,0c) + key4));
            		}
HXLINE(1218)		{
HXLINE(1218)			int _g7 = 0;
HXDLIN(1218)			::Array< ::String > _g8 = ::Paths_obj::getGlobalMods();
HXDLIN(1218)			while((_g7 < _g8->length)){
HXLINE(1218)				::String mod = _g8->__get(_g7);
HXDLIN(1218)				_g7 = (_g7 + 1);
HXLINE(1219)				::String path13 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(1219)				 ::EReg invalidChars6 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1219)				 ::EReg hideChars6 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1219)				::String path14 = invalidChars6->split(::StringTools_obj::replace(path13,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1219)				::String key5 = (((mod + HX_("/data/",36,04,4e,9f)) + hideChars6->split(path14)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/",2f,00,00,00));
HXDLIN(1219)				if (::hx::IsNull( key5 )) {
HXLINE(1219)					key5 = HX_("",00,00,00,00);
            				}
HXDLIN(1219)				foldersToCheck1->insert(0,(HX_("mods/",9e,2f,58,0c) + key5));
            			}
            		}
HXLINE(1222)		{
HXLINE(1222)			int _g9 = 0;
HXDLIN(1222)			while((_g9 < foldersToCheck1->length)){
HXLINE(1222)				::String folder1 = foldersToCheck1->__get(_g9);
HXDLIN(1222)				_g9 = (_g9 + 1);
HXLINE(1224)				if (::sys::FileSystem_obj::exists(folder1)) {
HXLINE(1226)					int _g10 = 0;
HXDLIN(1226)					::Array< ::String > _g11 = ::sys::FileSystem_obj::readDirectory(folder1);
HXDLIN(1226)					while((_g10 < _g11->length)){
HXLINE(1226)						::String file11 = _g11->__get(_g10);
HXDLIN(1226)						_g10 = (_g10 + 1);
HXLINE(1228)						bool _hx_tmp63;
HXDLIN(1228)						if (::StringTools_obj::endsWith(file11,HX_(".lua",4a,2a,ba,1e))) {
HXLINE(1228)							_hx_tmp63 = !(filesPushed1->contains(file11));
            						}
            						else {
HXLINE(1228)							_hx_tmp63 = false;
            						}
HXDLIN(1228)						if (_hx_tmp63) {
HXLINE(1230)							::Array< ::Dynamic> _hx_tmp64 = this->luaArray;
HXDLIN(1230)							_hx_tmp64->push( ::FunkinLua_obj::__alloc( HX_CTX ,(folder1 + file11)));
HXLINE(1231)							filesPushed1->push(file11);
            						}
            					}
            				}
            			}
            		}
HXLINE(1238)		::String path15 = this->curSong;
HXDLIN(1238)		 ::EReg invalidChars7 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1238)		 ::EReg hideChars7 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1238)		::String path16 = invalidChars7->split(::StringTools_obj::replace(path15,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1238)		::String daSong = hideChars7->split(path16)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE(1239)		bool _hx_tmp65;
HXDLIN(1239)		if (::PlayState_obj::isStoryMode) {
HXLINE(1239)			_hx_tmp65 = !(::PlayState_obj::seenCutscene);
            		}
            		else {
HXLINE(1239)			_hx_tmp65 = false;
            		}
HXDLIN(1239)		if (_hx_tmp65) {
HXLINE(1244)			this->startCountdown();
HXLINE(1246)			::PlayState_obj::seenCutscene = true;
            		}
            		else {
HXLINE(1250)			this->startCountdown();
            		}
HXLINE(1252)		this->RecalculateRating(null());
HXLINE(1255)		if ((::ClientPrefs_obj::hitsoundVolume > 0)) {
HXLINE(1255)			this->precacheList->set(HX_("hitsound",9c,79,fe,2c),HX_("sound",cf,8c,cc,80));
            		}
HXLINE(1256)		this->precacheList->set(HX_("missnote1",83,37,74,8f),HX_("sound",cf,8c,cc,80));
HXLINE(1257)		this->precacheList->set(HX_("missnote2",84,37,74,8f),HX_("sound",cf,8c,cc,80));
HXLINE(1258)		this->precacheList->set(HX_("missnote3",85,37,74,8f),HX_("sound",cf,8c,cc,80));
HXLINE(1260)		if (::hx::IsNotNull( ::PauseSubState_obj::songName )) {
HXLINE(1261)			this->precacheList->set(::PauseSubState_obj::songName,HX_("music",a5,d0,5a,10));
            		}
            		else {
HXLINE(1262)			if ((::ClientPrefs_obj::pauseMusic != HX_("None",d8,3e,e3,33))) {
HXLINE(1263)				::Dynamic this8 = this->precacheList;
HXDLIN(1263)				::String path17 = ::ClientPrefs_obj::pauseMusic;
HXDLIN(1263)				 ::EReg invalidChars8 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1263)				 ::EReg hideChars8 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1263)				::String path18 = invalidChars8->split(::StringTools_obj::replace(path17,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1263)				( ( ::haxe::ds::StringMap)(this8) )->set(hideChars8->split(path18)->join(HX_("",00,00,00,00)).toLowerCase(),HX_("music",a5,d0,5a,10));
            			}
            		}
HXLINE(1266)		this->precacheList->set(HX_("alphabet",b3,7c,38,21),HX_("image",5b,1f,69,bd));
HXLINE(1270)		::String _hx_tmp66 = this->detailsText;
HXDLIN(1270)		::String _hx_tmp67 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(1270)		::DiscordClient_obj::changePresence(_hx_tmp66,_hx_tmp67,this->iconP2->getCharacter(),null(),null());
HXLINE(1273)		if (!(::ClientPrefs_obj::controllerMode)) {
HXLINE(1275)			::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null(),null(),null());
HXLINE(1276)			::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null(),null(),null());
            		}
HXLINE(1279)		if (this->useModchart) {
HXLINE(1280)			this->modManager->modchartEnable = true;
            		}
HXLINE(1285)		this->callOnLuas(HX_("onCreatePost",7b,e7,2d,35),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(1287)		this->super::create();
HXLINE(1289)		this->cacheCountdown();
HXLINE(1290)		this->cachePopUpScore();
HXLINE(1291)		{
HXLINE(1291)			::Dynamic map = this->precacheList;
HXDLIN(1291)			::Dynamic _g_map = map;
HXDLIN(1291)			 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN(1291)			while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1291)				::String key6 = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(1291)				::String _g_value = ( (::String)(::haxe::IMap_obj::get(_g_map,key6)) );
HXDLIN(1291)				::String _g_key = key6;
HXDLIN(1291)				::String key7 = _g_key;
HXDLIN(1291)				::String type = _g_value;
HXLINE(1294)				::String _hx_switch_1 = type;
            				if (  (_hx_switch_1==HX_("image",5b,1f,69,bd)) ){
HXLINE(1297)					::String library3 = null();
HXDLIN(1297)					 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(key7,library3);
HXDLIN(1297)					goto _hx_goto_19;
            				}
            				if (  (_hx_switch_1==HX_("music",a5,d0,5a,10)) ){
HXLINE(1301)					::String library4 = null();
HXDLIN(1301)					 ::openfl::media::Sound file12 = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),key7,library4);
HXDLIN(1301)					goto _hx_goto_19;
            				}
            				if (  (_hx_switch_1==HX_("sound",cf,8c,cc,80)) ){
HXLINE(1299)					::Paths_obj::sound(key7,null());
HXDLIN(1299)					goto _hx_goto_19;
            				}
            				_hx_goto_19:;
            			}
            		}
HXLINE(1304)		::Paths_obj::clearUnusedMemory();
HXLINE(1306)		::CustomFadeTransition_obj::nextCamera = this->camOther;
            	}


void PlayState_obj::createHUD(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1322_createHUD)
HXLINE(1324)		::String bgHUDName = HX_("healthBar",97,8a,92,42);
HXLINE(1325)		if ((this->hudStyle == HX_("discord",ac,b9,b4,b2))) {
HXLINE(1326)			bgHUDName = HX_("HUD/discord/HealthBarBG",21,b7,96,8d);
HXLINE(1327)			{
HXLINE(1327)				::String library = null();
HXDLIN(1327)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("HUD/discord/HealthBarBG-Light",4a,83,77,1c),library);
            			}
            		}
HXLINE(1329)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(1329)		::String library1 = null();
HXDLIN(1329)		 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(bgHUDName,library1);
HXDLIN(1329)		this->healthBarBG = _hx_tmp->loadGraphic(returnAsset1,null(),null(),null(),null(),null());
HXLINE(1330)		Float _hx_tmp1;
HXDLIN(1330)		if (::ClientPrefs_obj::downScroll) {
HXLINE(1330)			_hx_tmp1 = ((((Float)0.11) * ( (Float)(::flixel::FlxG_obj::height) )) - ( (Float)(10) ));
            		}
            		else {
HXLINE(1330)			_hx_tmp1 = ((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.89)) + 30);
            		}
HXDLIN(1330)		this->healthBarBG->set_y(_hx_tmp1);
HXLINE(1331)		{
HXLINE(1331)			 ::flixel::FlxSprite _this = this->healthBarBG;
HXDLIN(1331)			int axes = 1;
HXDLIN(1331)			bool _hx_tmp2;
HXDLIN(1331)			if ((axes != 1)) {
HXLINE(1331)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(1331)				_hx_tmp2 = true;
            			}
HXDLIN(1331)			if (_hx_tmp2) {
HXLINE(1331)				int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(1331)				_this->set_x(((( (Float)(_hx_tmp3) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1331)			bool _hx_tmp4;
HXDLIN(1331)			if ((axes != 16)) {
HXLINE(1331)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE(1331)				_hx_tmp4 = true;
            			}
HXDLIN(1331)			if (_hx_tmp4) {
HXLINE(1331)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(1331)				_this->set_y(((( (Float)(_hx_tmp5) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1332)		{
HXLINE(1332)			 ::flixel::math::FlxBasePoint this1 = this->healthBarBG->scrollFactor;
HXDLIN(1332)			this1->set_x(( (Float)(0) ));
HXDLIN(1332)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(1333)		this->healthBarBG->set_visible(!(::ClientPrefs_obj::hideHud));
HXLINE(1335)		Float _hx_tmp6 = (this->healthBarBG->x + 4);
HXDLIN(1335)		Float _hx_tmp7 = (this->healthBarBG->y + 4);
HXDLIN(1335)		int _hx_tmp8 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN(1335)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp6,_hx_tmp7,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp8,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("lerpHealth",73,62,1e,34),0,2,null());
HXLINE(1337)		{
HXLINE(1337)			 ::flixel::math::FlxBasePoint this2 = this->healthBar->scrollFactor;
HXDLIN(1337)			this2->set_x(( (Float)(0) ));
HXDLIN(1337)			this2->set_y(( (Float)(0) ));
            		}
HXLINE(1338)		this->healthBar->set_alpha(::ClientPrefs_obj::healthBarAlpha);
HXLINE(1339)		this->healthBar->set_numDivisions(500);
HXLINE(1342)		this->healthBarOverlay =  ::AttachedSprite_obj::__alloc( HX_CTX ,HX_("HUD/healthBar",df,bb,05,3e),null(),null(),null());
HXLINE(1343)		this->healthBarOverlay->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.89)) + 30));
HXLINE(1344)		{
HXLINE(1344)			 ::AttachedSprite _this1 = this->healthBarOverlay;
HXDLIN(1344)			int axes1 = 1;
HXDLIN(1344)			bool _hx_tmp9;
HXDLIN(1344)			if ((axes1 != 1)) {
HXLINE(1344)				_hx_tmp9 = (axes1 == 17);
            			}
            			else {
HXLINE(1344)				_hx_tmp9 = true;
            			}
HXDLIN(1344)			if (_hx_tmp9) {
HXLINE(1344)				int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN(1344)				_this1->set_x(((( (Float)(_hx_tmp10) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1344)			bool _hx_tmp11;
HXDLIN(1344)			if ((axes1 != 16)) {
HXLINE(1344)				_hx_tmp11 = (axes1 == 17);
            			}
            			else {
HXLINE(1344)				_hx_tmp11 = true;
            			}
HXDLIN(1344)			if (_hx_tmp11) {
HXLINE(1344)				int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN(1344)				_this1->set_y(((( (Float)(_hx_tmp12) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1345)		{
HXLINE(1345)			 ::flixel::math::FlxBasePoint this3 = this->healthBarOverlay->scrollFactor;
HXDLIN(1345)			this3->set_x(( (Float)(0) ));
HXDLIN(1345)			this3->set_y(( (Float)(0) ));
            		}
HXLINE(1346)		this->healthBarOverlay->set_visible(!(::ClientPrefs_obj::hideHud));
HXLINE(1347)		this->healthBarOverlay->xAdd = ( (Float)(-4) );
HXLINE(1348)		this->healthBarOverlay->yAdd = ( (Float)(-4) );
HXLINE(1350)		{
HXLINE(1350)			 ::flixel::math::FlxBasePoint this4 = this->healthBar->scale;
HXDLIN(1350)			 ::flixel::math::FlxBasePoint this5 = this->healthBarBG->scale;
HXDLIN(1350)			this4->set_x(this5->set_x(this->healthBarOverlay->scale->set_x(( (Float)(0) ))));
            		}
HXLINE(1352)		::String healthText = ::CoolUtil_obj::multiply(HX_("_ ",e1,52,00,00),24);
HXDLIN(1352)		::String healthText1 = (healthText + ::CoolUtil_obj::multiply(HX_("O ",f1,44,00,00),24)).substr(0,95);
HXLINE(1353)		this->discordHealthText =  ::stagesprite::AttachedNormalText_obj::__alloc( HX_CTX ,healthText1,684,18);
HXLINE(1354)		 ::stagesprite::AttachedNormalText _hx_tmp13 = this->discordHealthText;
HXDLIN(1354)		::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Discord/ggsans-Medium.ttf",e4,ec,63,54)));
HXDLIN(1354)		::String _hx_tmp14;
HXDLIN(1354)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(1354)			_hx_tmp14 = file;
            		}
            		else {
HXLINE(1354)			_hx_tmp14 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Discord/ggsans-Medium.ttf",e4,ec,63,54));
            		}
HXDLIN(1354)		_hx_tmp13->set_font(_hx_tmp14);
HXLINE(1355)		this->discordHealthText->sprTracker = this->healthBarBG;
HXLINE(1356)		this->discordHealthText->offsetX = ( (Float)(18) );
HXLINE(1357)		this->discordHealthText->offsetY = ( (Float)(28) );
HXLINE(1359)		if ((this->hudStyle != HX_("discord",ac,b9,b4,b2))) {
HXLINE(1360)			this->add(this->healthBar);
HXLINE(1361)			this->add(this->healthBarOverlay);
            		}
            		else {
HXLINE(1363)			 ::flixel::FlxSprite _hx_tmp15 = this->healthBarBG;
HXDLIN(1363)			_hx_tmp15->setGraphicSize(::Std_obj::_hx_int((this->healthBarBG->get_width() * ((Float)1.2))),null());
HXLINE(1364)			this->healthBarBG->updateHitbox();
HXLINE(1365)			this->healthBarBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.89)) - ( (Float)(80) )));
HXLINE(1366)			{
HXLINE(1366)				 ::flixel::FlxSprite _this2 = this->healthBarBG;
HXDLIN(1366)				int axes2 = 1;
HXDLIN(1366)				bool _hx_tmp16;
HXDLIN(1366)				if ((axes2 != 1)) {
HXLINE(1366)					_hx_tmp16 = (axes2 == 17);
            				}
            				else {
HXLINE(1366)					_hx_tmp16 = true;
            				}
HXDLIN(1366)				if (_hx_tmp16) {
HXLINE(1366)					int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN(1366)					_this2->set_x(((( (Float)(_hx_tmp17) ) - _this2->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(1366)				bool _hx_tmp18;
HXDLIN(1366)				if ((axes2 != 16)) {
HXLINE(1366)					_hx_tmp18 = (axes2 == 17);
            				}
            				else {
HXLINE(1366)					_hx_tmp18 = true;
            				}
HXDLIN(1366)				if (_hx_tmp18) {
HXLINE(1366)					int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN(1366)					_this2->set_y(((( (Float)(_hx_tmp19) ) - _this2->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(1367)			this->add(this->healthBarBG);
HXLINE(1368)			this->add(this->discordHealthText);
            		}
HXLINE(1371)		this->healthBarOverlay->sprTracker = this->healthBar;
HXLINE(1373)		this->barOffset = ::Array_obj< ::Dynamic>::__new(3)->init(0,::Array_obj< Float >::__new(2)->init(0,this->healthBarBG->offset->x)->init(1,this->healthBarBG->offset->y))->init(1,::Array_obj< Float >::__new(2)->init(0,this->healthBar->offset->x)->init(1,this->healthBar->offset->y))->init(2,::Array_obj< Float >::__new(2)->init(0,this->healthBarOverlay->offset->x)->init(1,this->healthBarOverlay->offset->y));
HXLINE(1380)		Float borderOffset = ( (Float)(20) );
HXLINE(1381)		Float tx;
HXDLIN(1381)		if (this->HUDtoRight) {
HXLINE(1381)			tx = (( (Float)(1280) ) - borderOffset);
            		}
            		else {
HXLINE(1381)			tx = borderOffset;
            		}
HXLINE(1382)		::String daFont = HX_("HUD/gaposiss.ttf",7f,ec,db,f1);
HXLINE(1383)		Float space = ( (Float)(30) );
HXLINE(1384)		int borderSi = 3;
HXLINE(1385)		::String align;
HXDLIN(1385)		if (this->HUDtoRight) {
HXLINE(1385)			align = HX_("right",dc,0b,64,e9);
            		}
            		else {
HXLINE(1385)			align = HX_("left",07,08,b0,47);
            		}
HXLINE(1387)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,tx,(( (Float)(700) ) - borderOffset),0,(this->scorePrefix + HX_("0",30,00,00,00)),null(),null());
HXLINE(1388)		 ::flixel::text::FlxText _hx_tmp20 = this->scoreTxt;
HXDLIN(1388)		::String file1 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + daFont));
HXDLIN(1388)		::String _hx_tmp21;
HXDLIN(1388)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(1388)			_hx_tmp21 = file1;
            		}
            		else {
HXLINE(1388)			_hx_tmp21 = (HX_("assets/fonts/",37,ff,a5,9c) + daFont);
            		}
HXDLIN(1388)		_hx_tmp20->setFormat(_hx_tmp21,20,-1,align,::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-15592942,null());
HXLINE(1389)		{
HXLINE(1389)			 ::flixel::math::FlxBasePoint this6 = this->scoreTxt->scrollFactor;
HXDLIN(1389)			this6->set_x(( (Float)(0) ));
HXDLIN(1389)			this6->set_y(( (Float)(0) ));
            		}
HXLINE(1391)		this->scoreTxt->set_antialiasing(false);
HXLINE(1392)		{
HXLINE(1392)			 ::flixel::math::FlxBasePoint this7 = this->scoreTxt->origin;
HXDLIN(1392)			Float x;
HXDLIN(1392)			if (this->HUDtoRight) {
HXLINE(1392)				x = this->scoreTxt->get_width();
            			}
            			else {
HXLINE(1392)				x = ( (Float)(0) );
            			}
HXDLIN(1392)			this7->set_x(x);
            		}
HXLINE(1394)		this->scoreTxt->set_borderSize(( (Float)(borderSi) ));
HXLINE(1395)		this->scoreTxt->set_borderQuality(( (Float)(0) ));
HXLINE(1396)		this->add(this->scoreTxt);
HXLINE(1397)		this->scoreTxt->set_x(tx);
HXLINE(1399)		this->rateTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,tx,((( (Float)(700) ) - borderOffset) - space),0,(this->ratePrefix + HX_("?",3f,00,00,00)),null(),null());
HXLINE(1400)		 ::flixel::text::FlxText _hx_tmp22 = this->rateTxt;
HXDLIN(1400)		::String file2 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + daFont));
HXDLIN(1400)		::String _hx_tmp23;
HXDLIN(1400)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE(1400)			_hx_tmp23 = file2;
            		}
            		else {
HXLINE(1400)			_hx_tmp23 = (HX_("assets/fonts/",37,ff,a5,9c) + daFont);
            		}
HXDLIN(1400)		_hx_tmp22->setFormat(_hx_tmp23,20,-1,align,::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-15592942,null());
HXLINE(1401)		{
HXLINE(1401)			 ::flixel::math::FlxBasePoint this8 = this->rateTxt->scrollFactor;
HXDLIN(1401)			this8->set_x(( (Float)(0) ));
HXDLIN(1401)			this8->set_y(( (Float)(0) ));
            		}
HXLINE(1402)		this->rateTxt->set_x(tx);
HXLINE(1404)		this->rateTxt->set_antialiasing(false);
HXLINE(1405)		{
HXLINE(1405)			 ::flixel::math::FlxBasePoint this9 = this->rateTxt->origin;
HXDLIN(1405)			Float x1;
HXDLIN(1405)			if (this->HUDtoRight) {
HXLINE(1405)				x1 = this->rateTxt->get_width();
            			}
            			else {
HXLINE(1405)				x1 = ( (Float)(0) );
            			}
HXDLIN(1405)			this9->set_x(x1);
            		}
HXLINE(1407)		this->rateTxt->set_borderSize(( (Float)(borderSi) ));
HXLINE(1408)		this->rateTxt->set_borderQuality(( (Float)(0) ));
HXLINE(1409)		this->add(this->rateTxt);
HXLINE(1411)		 ::flixel::text::FlxText fh = this->scoreTxt;
HXDLIN(1411)		int _hx_tmp24;
HXDLIN(1411)		if (this->HUDtoRight) {
HXLINE(1411)			_hx_tmp24 = 400;
            		}
            		else {
HXLINE(1411)			_hx_tmp24 = -400;
            		}
HXDLIN(1411)		fh->set_x((fh->x + _hx_tmp24));
HXLINE(1412)		 ::flixel::text::FlxText fh1 = this->rateTxt;
HXDLIN(1412)		int _hx_tmp25;
HXDLIN(1412)		if (this->HUDtoRight) {
HXLINE(1412)			_hx_tmp25 = 400;
            		}
            		else {
HXLINE(1412)			_hx_tmp25 = -400;
            		}
HXDLIN(1412)		fh1->set_x((fh1->x + _hx_tmp25));
HXLINE(1414)		this->missTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,tx,((( (Float)(700) ) - borderOffset) - (space * ( (Float)(2) ))),0,(this->missPrefix + HX_("?",3f,00,00,00)),null(),null());
HXLINE(1415)		 ::flixel::text::FlxText _hx_tmp26 = this->missTxt;
HXDLIN(1415)		::String file3 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + daFont));
HXDLIN(1415)		::String _hx_tmp27;
HXDLIN(1415)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE(1415)			_hx_tmp27 = file3;
            		}
            		else {
HXLINE(1415)			_hx_tmp27 = (HX_("assets/fonts/",37,ff,a5,9c) + daFont);
            		}
HXDLIN(1415)		_hx_tmp26->setFormat(_hx_tmp27,20,-1,align,::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-15592942,null());
HXLINE(1416)		{
HXLINE(1416)			 ::flixel::math::FlxBasePoint this10 = this->missTxt->scrollFactor;
HXDLIN(1416)			this10->set_x(( (Float)(0) ));
HXDLIN(1416)			this10->set_y(( (Float)(0) ));
            		}
HXLINE(1417)		this->missTxt->set_x(tx);
HXLINE(1419)		this->missTxt->set_antialiasing(false);
HXLINE(1420)		{
HXLINE(1420)			 ::flixel::math::FlxBasePoint this11 = this->missTxt->origin;
HXDLIN(1420)			Float x2;
HXDLIN(1420)			if (this->HUDtoRight) {
HXLINE(1420)				x2 = this->missTxt->get_width();
            			}
            			else {
HXLINE(1420)				x2 = ( (Float)(0) );
            			}
HXDLIN(1420)			this11->set_x(x2);
            		}
HXLINE(1422)		this->missTxt->set_borderSize(( (Float)(borderSi) ));
HXLINE(1423)		this->missTxt->set_borderQuality(( (Float)(0) ));
HXLINE(1424)		this->add(this->missTxt);
HXLINE(1425)		this->missTxt->set_visible(false);
HXLINE(1427)		this->comboTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,tx,((( (Float)(700) ) - borderOffset) - (space * ( (Float)(2) ))),0,(this->comboPrefix + HX_("?",3f,00,00,00)),null(),null());
HXLINE(1428)		 ::flixel::text::FlxText _hx_tmp28 = this->comboTxt;
HXDLIN(1428)		::String file4 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + daFont));
HXDLIN(1428)		::String _hx_tmp29;
HXDLIN(1428)		if (::sys::FileSystem_obj::exists(file4)) {
HXLINE(1428)			_hx_tmp29 = file4;
            		}
            		else {
HXLINE(1428)			_hx_tmp29 = (HX_("assets/fonts/",37,ff,a5,9c) + daFont);
            		}
HXDLIN(1428)		_hx_tmp28->setFormat(_hx_tmp29,20,-1,align,::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-15592942,null());
HXLINE(1429)		{
HXLINE(1429)			 ::flixel::math::FlxBasePoint this12 = this->comboTxt->scrollFactor;
HXDLIN(1429)			this12->set_x(( (Float)(0) ));
HXDLIN(1429)			this12->set_y(( (Float)(0) ));
            		}
HXLINE(1430)		this->comboTxt->set_x(tx);
HXLINE(1432)		this->comboTxt->set_antialiasing(false);
HXLINE(1433)		{
HXLINE(1433)			 ::flixel::math::FlxBasePoint this13 = this->comboTxt->origin;
HXDLIN(1433)			Float x3;
HXDLIN(1433)			if (this->HUDtoRight) {
HXLINE(1433)				x3 = this->comboTxt->get_width();
            			}
            			else {
HXLINE(1433)				x3 = ( (Float)(0) );
            			}
HXDLIN(1433)			this13->set_x(x3);
            		}
HXLINE(1435)		this->comboTxt->set_borderSize(( (Float)(borderSi) ));
HXLINE(1436)		this->comboTxt->set_borderQuality(( (Float)(0) ));
HXLINE(1437)		this->add(this->comboTxt);
HXLINE(1438)		this->comboTxt->set_alpha(( (Float)(0) ));
HXLINE(1440)		this->botplayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,400,(this->timeBarBG->y + 55),(::flixel::FlxG_obj::width - 800),HX_("BOTPLAY",5b,cf,7d,e1),32,null());
HXLINE(1441)		 ::flixel::text::FlxText _hx_tmp30 = this->botplayTxt;
HXDLIN(1441)		::String file5 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(1441)		::String _hx_tmp31;
HXDLIN(1441)		if (::sys::FileSystem_obj::exists(file5)) {
HXLINE(1441)			_hx_tmp31 = file5;
            		}
            		else {
HXLINE(1441)			_hx_tmp31 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN(1441)		_hx_tmp30->setFormat(_hx_tmp31,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1442)		{
HXLINE(1442)			 ::flixel::math::FlxBasePoint this14 = this->botplayTxt->scrollFactor;
HXDLIN(1442)			this14->set_x(( (Float)(0) ));
HXDLIN(1442)			this14->set_y(( (Float)(0) ));
            		}
HXLINE(1443)		this->botplayTxt->set_borderSize(((Float)1.25));
HXLINE(1444)		this->botplayTxt->set_visible(this->cpuControlled);
HXLINE(1445)		this->add(this->botplayTxt);
HXLINE(1446)		if (::ClientPrefs_obj::downScroll) {
HXLINE(1447)			this->botplayTxt->set_y((this->timeBarBG->y - ( (Float)(78) )));
            		}
HXLINE(1450)		if ((this->lives > 0)) {
HXLINE(1451)			this->missTxt->set_visible(true);
HXLINE(1452)			 ::flixel::text::FlxText fh2 = this->comboTxt;
HXDLIN(1452)			fh2->set_y((fh2->y - space));
HXLINE(1454)			this->curLives = this->lives;
HXLINE(1455)			this->missTxt->set_text((((HX_("LIVES: ",4d,62,bd,3a) + this->curLives) + HX_("/",2f,00,00,00)) + this->lives));
            		}
HXLINE(1460)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,this->boyfriend->healthIcon,true);
HXLINE(1461)		this->iconP1->set_y((this->healthBar->y - ( (Float)(95) )));
HXLINE(1462)		this->iconP1->set_visible(!(::ClientPrefs_obj::hideHud));
HXLINE(1463)		this->iconP1->set_alpha(::ClientPrefs_obj::healthBarAlpha);
HXLINE(1464)		this->add(this->iconP1);
HXLINE(1466)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,this->dad->healthIcon,false);
HXLINE(1467)		this->iconP2->set_y((this->healthBar->y - ( (Float)(95) )));
HXLINE(1468)		this->iconP2->set_visible(!(::ClientPrefs_obj::hideHud));
HXLINE(1469)		this->iconP2->set_alpha(::ClientPrefs_obj::healthBarAlpha);
HXLINE(1470)		this->add(this->iconP2);
HXLINE(1472)		if ((this->hudStyle == HX_("discord",ac,b9,b4,b2))) {
HXLINE(1473)			 ::HealthIcon _hx_tmp32 = this->iconP1;
HXDLIN(1473)			 ::HealthIcon fh3 = this->iconP2;
HXDLIN(1473)			_hx_tmp32->set_y(fh3->set_y((fh3->y - ( (Float)(70) ))));
            		}
HXLINE(1476)		this->countdownText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),null(),null());
HXLINE(1477)		 ::flixel::text::FlxText _hx_tmp33 = this->countdownText;
HXDLIN(1477)		::String file6 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Discord/uni-sans-heavy.otf",e0,17,a7,77)));
HXDLIN(1477)		::String _hx_tmp34;
HXDLIN(1477)		if (::sys::FileSystem_obj::exists(file6)) {
HXLINE(1477)			_hx_tmp34 = file6;
            		}
            		else {
HXLINE(1477)			_hx_tmp34 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Discord/uni-sans-heavy.otf",e0,17,a7,77));
            		}
HXDLIN(1477)		_hx_tmp33->setFormat(_hx_tmp34,128,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),(int)-1879048192,null());
HXLINE(1478)		this->countdownText->set_borderSize(( (Float)(2) ));
HXLINE(1479)		this->countdownText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(1480)		{
HXLINE(1480)			 ::flixel::math::FlxBasePoint this15 = this->countdownText->scrollFactor;
HXDLIN(1480)			this15->set_x(( (Float)(0) ));
HXDLIN(1480)			this15->set_y(( (Float)(0) ));
            		}
HXLINE(1481)		this->countdownText->set_alpha(( (Float)(0) ));
HXLINE(1482)		if ((::PlayState_obj::curStage.toLowerCase() == HX_("discordstage",92,21,fa,4f))) {
HXLINE(1483)			this->add(this->countdownText);
            		}
HXLINE(1485)		this->reloadHealthBarColors();
HXLINE(1487)		this->comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1488)		 ::flixel::FlxSprite _hx_tmp35 = this->comboSpr;
HXDLIN(1488)		::String library2 = null();
HXDLIN(1488)		 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(HX_("ComboSprite",d3,3e,92,d0),null());
HXDLIN(1488)		bool xmlExists = false;
HXDLIN(1488)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("ComboSprite",d3,3e,92,d0)) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE(1488)			xmlExists = true;
            		}
HXDLIN(1488)		 ::Dynamic _hx_tmp36;
HXDLIN(1488)		if (::hx::IsNotNull( imageLoaded )) {
HXLINE(1488)			_hx_tmp36 = imageLoaded;
            		}
            		else {
HXLINE(1488)			 ::flixel::graphics::FlxGraphic returnAsset2 = ::Paths_obj::returnGraphic(HX_("ComboSprite",d3,3e,92,d0),library2);
HXDLIN(1488)			_hx_tmp36 = returnAsset2;
            		}
HXDLIN(1488)		 ::Dynamic _hx_tmp37;
HXDLIN(1488)		if (xmlExists) {
HXLINE(1488)			_hx_tmp37 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("ComboSprite",d3,3e,92,d0)) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE(1488)			_hx_tmp37 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("ComboSprite",d3,3e,92,d0)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library2);
            		}
HXDLIN(1488)		_hx_tmp35->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp36,_hx_tmp37));
HXLINE(1489)		this->comboSpr->animation->addByPrefix(HX_("sick",be,8c,53,4c),HX_("SICK",be,54,14,37),30,false,null(),null());
HXLINE(1490)		this->comboSpr->animation->addByPrefix(HX_("good",3d,95,69,44),HX_("GOOD",3d,5d,2a,2f),30,false,null(),null());
HXLINE(1491)		this->comboSpr->animation->addByPrefix(HX_("bad",c5,b1,4a,00),HX_("BAD",a5,4d,32,00),30,false,null(),null());
HXLINE(1492)		this->comboSpr->animation->addByPrefix(HX_("shit",c0,cf,52,4c),HX_("WORST",5b,d4,52,4c),30,false,null(),null());
HXLINE(1493)		this->comboSpr->animation->play(HX_("sick",be,8c,53,4c),true,null(),null());
HXLINE(1494)		 ::flixel::FlxSprite _hx_tmp38 = this->comboSpr;
HXDLIN(1494)		_hx_tmp38->setGraphicSize(::Std_obj::_hx_int((this->comboSpr->get_width() * ((Float)0.55))),null());
HXLINE(1495)		{
HXLINE(1495)			 ::flixel::FlxSprite _this3 = this->comboSpr;
HXDLIN(1495)			int axes3 = 1;
HXDLIN(1495)			bool _hx_tmp39;
HXDLIN(1495)			if ((axes3 != 1)) {
HXLINE(1495)				_hx_tmp39 = (axes3 == 17);
            			}
            			else {
HXLINE(1495)				_hx_tmp39 = true;
            			}
HXDLIN(1495)			if (_hx_tmp39) {
HXLINE(1495)				int _hx_tmp40 = ::flixel::FlxG_obj::width;
HXDLIN(1495)				_this3->set_x(((( (Float)(_hx_tmp40) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(1495)			bool _hx_tmp41;
HXDLIN(1495)			if ((axes3 != 16)) {
HXLINE(1495)				_hx_tmp41 = (axes3 == 17);
            			}
            			else {
HXLINE(1495)				_hx_tmp41 = true;
            			}
HXDLIN(1495)			if (_hx_tmp41) {
HXLINE(1495)				int _hx_tmp42 = ::flixel::FlxG_obj::height;
HXDLIN(1495)				_this3->set_y(((( (Float)(_hx_tmp42) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(1496)		this->comboSpr->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1497)		this->comboSpr->set_visible(!(::ClientPrefs_obj::hideHud));
HXLINE(1498)		this->comboSpr->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(1499)		this->comboSpr->set_alpha(( (Float)(0) ));
HXLINE(1500)		bool _hx_tmp43;
HXDLIN(1500)		if (::ClientPrefs_obj::downScroll) {
HXLINE(1500)			_hx_tmp43 = !(::ClientPrefs_obj::middleScroll);
            		}
            		else {
HXLINE(1500)			_hx_tmp43 = false;
            		}
HXDLIN(1500)		if (_hx_tmp43) {
HXLINE(1500)			this->comboSprY = ( (Float)(((720 - this->comboSpr->frameHeight) + 36)) );
            		}
HXLINE(1501)		bool _hx_tmp44;
HXDLIN(1501)		if (::ClientPrefs_obj::middleScroll) {
HXLINE(1501)			_hx_tmp44 = !(::ClientPrefs_obj::downScroll);
            		}
            		else {
HXLINE(1501)			_hx_tmp44 = false;
            		}
HXDLIN(1501)		if (_hx_tmp44) {
HXLINE(1501)			this->comboSprY = ( (Float)(((720 - this->comboSpr->frameHeight) + 36)) );
            		}
HXLINE(1503)		this->comboSpr->set_y(this->comboSprY);
HXLINE(1504)		 ::flixel::FlxSprite fh4 = this->comboSpr;
HXDLIN(1504)		fh4->set_x((fh4->x + 8));
HXLINE(1505)		this->add(this->comboSpr);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,createHUD,(void))

int PlayState_obj::sortByTimeVocals( ::Dynamic Obj1, ::Dynamic Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1510_sortByTimeVocals)
HXDLIN(1510)		Float Value1 = ( (Float)(Obj1->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic)) );
HXDLIN(1510)		Float Value2 = ( (Float)(Obj2->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic)) );
HXDLIN(1510)		int result = 0;
HXDLIN(1510)		if ((Value1 < Value2)) {
HXDLIN(1510)			result = -1;
            		}
            		else {
HXDLIN(1510)			if ((Value1 > Value2)) {
HXDLIN(1510)				result = 1;
            			}
            		}
HXDLIN(1510)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByTimeVocals,return )

::Array< ::Dynamic> PlayState_obj::vocalsSetup(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1512_vocalsSetup)
HXLINE(1514)		::Array< ::Dynamic> daVocals = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1515)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("vocals",5e,10,51,59),::hx::paccDynamic) )) {
HXLINE(1516)			{
HXLINE(1516)				int _g = 0;
HXDLIN(1516)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1516)				while((_g < _g1->length)){
HXLINE(1516)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(1516)					_g = (_g + 1);
HXLINE(1517)					{
HXLINE(1517)						int _g2 = 0;
HXDLIN(1517)						::cpp::VirtualArray _g3 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1517)						while((_g2 < _g3->get_length())){
HXLINE(1517)							 ::Dynamic songNotes = _g3->__get(_g2);
HXDLIN(1517)							_g2 = (_g2 + 1);
HXLINE(1520)							Float songNotes1 = ( (Float)(songNotes->__GetItem(0)) );
HXLINE(1519)							 ::Dynamic output =  ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("data",2a,56,63,42),::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4)))
            								->setFixed(1,HX_("time",0d,cc,fc,4c),songNotes1));
HXLINE(1523)							daVocals->push(output);
            						}
            					}
            				}
            			}
HXLINE(1525)			daVocals->sort(this->sortByTimeVocals_dyn());
HXLINE(1526)			return daVocals;
            		}
HXLINE(1530)		{
HXLINE(1530)			int _g4 = 0;
HXDLIN(1530)			::cpp::VirtualArray _g5 = ( (::cpp::VirtualArray)(::PlayState_obj::SONG->__Field(HX_("vocals",5e,10,51,59),::hx::paccDynamic)) );
HXDLIN(1530)			while((_g4 < _g5->get_length())){
HXLINE(1530)				 ::Dynamic vocal = _g5->__get(_g4);
HXDLIN(1530)				_g4 = (_g4 + 1);
HXLINE(1531)				bool mustPress = ( (bool)(vocal->__GetItem(2)) );
HXLINE(1532)				int data = ::Std_obj::_hx_int(( (Float)(vocal->__GetItem(1)) ));
HXLINE(1535)				if ((data == 0)) {
HXLINE(1535)					data = 2;
            				}
            				else {
HXLINE(1536)					if ((data == 1)) {
HXLINE(1536)						data = 0;
            					}
            					else {
HXLINE(1537)						if ((data == 2)) {
HXLINE(1537)							data = 1;
            						}
            					}
            				}
HXLINE(1539)				 ::Dynamic output1 =  ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("data",2a,56,63,42),data)
            					->setFixed(1,HX_("time",0d,cc,fc,4c),vocal->__GetItem(0)));
HXLINE(1544)				daVocals->push(output1);
            			}
            		}
HXLINE(1548)		daVocals->sort(this->sortByTimeVocals_dyn());
HXLINE(1549)		return daVocals;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,vocalsSetup,return )

void PlayState_obj::createMobileControls(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1553_createMobileControls)
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,createMobileControls,(void))

 ::flixel::addons::display::FlxRuntimeShader PlayState_obj::createRuntimeShader(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1569_createRuntimeShader)
HXLINE(1570)		if (!(::ClientPrefs_obj::shaders)) {
HXLINE(1570)			return  ::flixel::addons::display::FlxRuntimeShader_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE(1573)		bool _hx_tmp;
HXDLIN(1573)		if (!(this->runtimeShaders->exists(name))) {
HXLINE(1573)			_hx_tmp = !(this->initLuaShader(name,null()));
            		}
            		else {
HXLINE(1573)			_hx_tmp = false;
            		}
HXDLIN(1573)		if (_hx_tmp) {
HXLINE(1575)			::flixel::FlxG_obj::log->advanced(((HX_("Shader ",3b,a9,d7,2c) + name) + HX_(" is missing!",d1,64,6b,b3)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(1576)			return  ::flixel::addons::display::FlxRuntimeShader_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE(1579)		::Array< ::String > arr = ( (::Array< ::String >)(this->runtimeShaders->get(name)) );
HXLINE(1580)		return  ::flixel::addons::display::FlxRuntimeShader_obj::__alloc( HX_CTX ,arr->__get(0),arr->__get(1),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,createRuntimeShader,return )

bool PlayState_obj::initLuaShader(::String name, ::Dynamic __o_glslVersion){
            		 ::Dynamic glslVersion = __o_glslVersion;
            		if (::hx::IsNull(__o_glslVersion)) glslVersion = 120;
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1588_initLuaShader)
HXLINE(1589)		if (!(::ClientPrefs_obj::shaders)) {
HXLINE(1589)			return false;
            		}
HXLINE(1591)		if (this->runtimeShaders->exists(name)) {
HXLINE(1593)			::flixel::FlxG_obj::log->advanced(((HX_("Shader ",3b,a9,d7,2c) + name) + HX_(" was already initialized!",8c,8e,cf,cf)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(1594)			return true;
            		}
HXLINE(1597)		::String key = HX_("shaders/",c1,f6,2a,36);
HXDLIN(1597)		if (::hx::IsNull( key )) {
HXLINE(1597)			key = HX_("",00,00,00,00);
            		}
HXDLIN(1597)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(1)->init(0,(HX_("mods/",9e,2f,58,0c) + key));
HXLINE(1598)		bool _hx_tmp;
HXDLIN(1598)		if (::hx::IsNotNull( ::Paths_obj::currentModDirectory )) {
HXLINE(1598)			_hx_tmp = (::Paths_obj::currentModDirectory.length > 0);
            		}
            		else {
HXLINE(1598)			_hx_tmp = false;
            		}
HXDLIN(1598)		if (_hx_tmp) {
HXLINE(1599)			::String key1 = (::Paths_obj::currentModDirectory + HX_("/shaders/",f0,3d,7d,f0));
HXDLIN(1599)			if (::hx::IsNull( key1 )) {
HXLINE(1599)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN(1599)			foldersToCheck->insert(0,(HX_("mods/",9e,2f,58,0c) + key1));
            		}
HXLINE(1601)		{
HXLINE(1601)			int _g = 0;
HXDLIN(1601)			::Array< ::String > _g1 = ::Paths_obj::getGlobalMods();
HXDLIN(1601)			while((_g < _g1->length)){
HXLINE(1601)				::String mod = _g1->__get(_g);
HXDLIN(1601)				_g = (_g + 1);
HXLINE(1602)				::String key2 = (mod + HX_("/shaders/",f0,3d,7d,f0));
HXDLIN(1602)				if (::hx::IsNull( key2 )) {
HXLINE(1602)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN(1602)				foldersToCheck->insert(0,(HX_("mods/",9e,2f,58,0c) + key2));
            			}
            		}
HXLINE(1604)		{
HXLINE(1604)			int _g2 = 0;
HXDLIN(1604)			while((_g2 < foldersToCheck->length)){
HXLINE(1604)				::String folder = foldersToCheck->__get(_g2);
HXDLIN(1604)				_g2 = (_g2 + 1);
HXLINE(1606)				if (::sys::FileSystem_obj::exists(folder)) {
HXLINE(1608)					::String frag = ((folder + name) + HX_(".frag",60,48,31,c0));
HXLINE(1609)					::String vert = ((folder + name) + HX_(".vert",df,e3,ba,ca));
HXLINE(1610)					bool found = false;
HXLINE(1611)					if (::sys::FileSystem_obj::exists(frag)) {
HXLINE(1613)						frag = ::sys::io::File_obj::getContent(frag);
HXLINE(1614)						found = true;
            					}
            					else {
HXLINE(1616)						frag = null();
            					}
HXLINE(1618)					if (::sys::FileSystem_obj::exists(vert)) {
HXLINE(1620)						vert = ::sys::io::File_obj::getContent(vert);
HXLINE(1621)						found = true;
            					}
            					else {
HXLINE(1623)						vert = null();
            					}
HXLINE(1625)					if (found) {
HXLINE(1627)						this->runtimeShaders->set(name,::Array_obj< ::String >::__new(2)->init(0,frag)->init(1,vert));
HXLINE(1629)						return true;
            					}
            				}
            			}
            		}
HXLINE(1633)		::flixel::FlxG_obj::log->advanced(((HX_("Missing shader ",81,62,6c,67) + name) + HX_(" .frag AND .vert files!",d4,1e,ab,6a)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(1634)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,initLuaShader,return )

Float PlayState_obj::set_songSpeed(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1639_set_songSpeed)
HXLINE(1640)		if (this->generatedMusic) {
HXLINE(1642)			Float ratio = (value / this->songSpeed);
HXLINE(1643)			{
HXLINE(1643)				 ::Dynamic filter = null();
HXDLIN(1643)				 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->notes->members,filter);
HXDLIN(1643)				while(note->hasNext()){
HXLINE(1643)					 ::Note note1 = note->next().StaticCast<  ::Note >();
HXDLIN(1643)					note1->resizeByRatio(ratio);
            				}
            			}
HXLINE(1644)			{
HXLINE(1644)				int _g = 0;
HXDLIN(1644)				::Array< ::Dynamic> _g1 = this->unspawnNotes;
HXDLIN(1644)				while((_g < _g1->length)){
HXLINE(1644)					 ::Note note2 = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(1644)					_g = (_g + 1);
HXDLIN(1644)					note2->resizeByRatio(ratio);
            				}
            			}
            		}
HXLINE(1646)		this->songSpeed = value;
HXLINE(1647)		this->noteKillOffset = (( (Float)(350) ) / this->songSpeed);
HXLINE(1648)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_songSpeed,return )

Float PlayState_obj::set_playbackRate(Float value){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1652_set_playbackRate)
HXLINE(1653)		if (this->generatedMusic) {
HXLINE(1655)			if (::hx::IsNotNull( this->vocals )) {
HXLINE(1655)				this->vocals->set_pitch(value);
            			}
HXLINE(1656)			bool _hx_tmp;
HXDLIN(1656)			if (this->separateVocals) {
HXLINE(1656)				_hx_tmp = ::hx::IsNotNull( this->opponentVocals );
            			}
            			else {
HXLINE(1656)				_hx_tmp = false;
            			}
HXDLIN(1656)			if (_hx_tmp) {
HXLINE(1657)				this->opponentVocals->set_pitch(value);
            			}
HXLINE(1659)			::flixel::FlxG_obj::sound->music->set_pitch(value);
            		}
HXLINE(1661)		this->playbackRate = value;
HXLINE(1662)		::Conductor_obj::safeZoneOffset = (((::ClientPrefs_obj::safeFrames / ( (Float)(60) )) * ( (Float)(1000) )) * value);
HXLINE(1663)		this->setOnLuas(HX_("playbackRate",9b,3a,8b,c0),this->playbackRate);
HXLINE(1664)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,set_playbackRate,return )

void PlayState_obj::addTextToDebug(::String text,int color){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::DebugLuaText spr){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1670_addTextToDebug)
HXLINE(1670)			spr->set_y((spr->y + 20));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1667_addTextToDebug)
HXLINE(1669)		this->luaDebugGroup->forEachAlive( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(1673)		if ((this->luaDebugGroup->members->get_length() > 34)) {
HXLINE(1674)			 ::DebugLuaText blah = Dynamic( this->luaDebugGroup->members->__get(34)).StaticCast<  ::DebugLuaText >();
HXLINE(1675)			blah->destroy();
HXLINE(1676)			this->luaDebugGroup->remove(blah,null()).StaticCast<  ::DebugLuaText >();
            		}
HXLINE(1678)		 ::flixel::group::FlxTypedGroup _hx_tmp = this->luaDebugGroup;
HXDLIN(1678)		_hx_tmp->insert(0, ::DebugLuaText_obj::__alloc( HX_CTX ,text,this->luaDebugGroup,color)).StaticCast<  ::DebugLuaText >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,addTextToDebug,(void))

void PlayState_obj::reloadHealthBarColors(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1682_reloadHealthBarColors)
HXLINE(1683)		 ::flixel::ui::FlxBar _hx_tmp = this->healthBar;
HXDLIN(1683)		int Red = this->dad->healthColorArray->__get(0);
HXDLIN(1683)		int Green = this->dad->healthColorArray->__get(1);
HXDLIN(1683)		int Blue = this->dad->healthColorArray->__get(2);
HXDLIN(1683)		int Alpha = 255;
HXDLIN(1683)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(1683)		{
HXLINE(1683)			color = (color & -16711681);
HXDLIN(1683)			int color1;
HXDLIN(1683)			if ((Red > 255)) {
HXLINE(1683)				color1 = 255;
            			}
            			else {
HXLINE(1683)				if ((Red < 0)) {
HXLINE(1683)					color1 = 0;
            				}
            				else {
HXLINE(1683)					color1 = Red;
            				}
            			}
HXDLIN(1683)			color = (color | (color1 << 16));
            		}
HXDLIN(1683)		{
HXLINE(1683)			color = (color & -65281);
HXDLIN(1683)			int color2;
HXDLIN(1683)			if ((Green > 255)) {
HXLINE(1683)				color2 = 255;
            			}
            			else {
HXLINE(1683)				if ((Green < 0)) {
HXLINE(1683)					color2 = 0;
            				}
            				else {
HXLINE(1683)					color2 = Green;
            				}
            			}
HXDLIN(1683)			color = (color | (color2 << 8));
            		}
HXDLIN(1683)		{
HXLINE(1683)			color = (color & -256);
HXDLIN(1683)			int color3;
HXDLIN(1683)			if ((Blue > 255)) {
HXLINE(1683)				color3 = 255;
            			}
            			else {
HXLINE(1683)				if ((Blue < 0)) {
HXLINE(1683)					color3 = 0;
            				}
            				else {
HXLINE(1683)					color3 = Blue;
            				}
            			}
HXDLIN(1683)			color = (color | color3);
            		}
HXDLIN(1683)		{
HXLINE(1683)			color = (color & 16777215);
HXDLIN(1683)			int color4;
HXDLIN(1683)			if ((Alpha > 255)) {
HXLINE(1683)				color4 = 255;
            			}
            			else {
HXLINE(1683)				if ((Alpha < 0)) {
HXLINE(1683)					color4 = 0;
            				}
            				else {
HXLINE(1683)					color4 = Alpha;
            				}
            			}
HXDLIN(1683)			color = (color | (color4 << 24));
            		}
HXLINE(1684)		int Red1 = this->boyfriend->healthColorArray->__get(0);
HXDLIN(1684)		int Green1 = this->boyfriend->healthColorArray->__get(1);
HXDLIN(1684)		int Blue1 = this->boyfriend->healthColorArray->__get(2);
HXDLIN(1684)		int Alpha1 = 255;
HXDLIN(1684)		int color5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(1684)		{
HXLINE(1684)			color5 = (color5 & -16711681);
HXDLIN(1684)			int color6;
HXDLIN(1684)			if ((Red1 > 255)) {
HXLINE(1684)				color6 = 255;
            			}
            			else {
HXLINE(1684)				if ((Red1 < 0)) {
HXLINE(1684)					color6 = 0;
            				}
            				else {
HXLINE(1684)					color6 = Red1;
            				}
            			}
HXDLIN(1684)			color5 = (color5 | (color6 << 16));
            		}
HXDLIN(1684)		{
HXLINE(1684)			color5 = (color5 & -65281);
HXDLIN(1684)			int color7;
HXDLIN(1684)			if ((Green1 > 255)) {
HXLINE(1684)				color7 = 255;
            			}
            			else {
HXLINE(1684)				if ((Green1 < 0)) {
HXLINE(1684)					color7 = 0;
            				}
            				else {
HXLINE(1684)					color7 = Green1;
            				}
            			}
HXDLIN(1684)			color5 = (color5 | (color7 << 8));
            		}
HXDLIN(1684)		{
HXLINE(1684)			color5 = (color5 & -256);
HXDLIN(1684)			int color8;
HXDLIN(1684)			if ((Blue1 > 255)) {
HXLINE(1684)				color8 = 255;
            			}
            			else {
HXLINE(1684)				if ((Blue1 < 0)) {
HXLINE(1684)					color8 = 0;
            				}
            				else {
HXLINE(1684)					color8 = Blue1;
            				}
            			}
HXDLIN(1684)			color5 = (color5 | color8);
            		}
HXDLIN(1684)		{
HXLINE(1684)			color5 = (color5 & 16777215);
HXDLIN(1684)			int color9;
HXDLIN(1684)			if ((Alpha1 > 255)) {
HXLINE(1684)				color9 = 255;
            			}
            			else {
HXLINE(1684)				if ((Alpha1 < 0)) {
HXLINE(1684)					color9 = 0;
            				}
            				else {
HXLINE(1684)					color9 = Alpha1;
            				}
            			}
HXDLIN(1684)			color5 = (color5 | (color9 << 24));
            		}
HXLINE(1683)		_hx_tmp->createFilledBar(color,color5,null(),null());
HXLINE(1686)		this->healthBar->updateBar();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,reloadHealthBarColors,(void))

void PlayState_obj::addCharacterToList(::String newCharacter,int type){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1690_addCharacterToList)
HXDLIN(1690)		switch((int)(type)){
            			case (int)0: {
HXLINE(1692)				if (!(this->boyfriendMap->exists(newCharacter))) {
HXLINE(1693)					 ::Boyfriend newBoyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter);
HXLINE(1694)					this->boyfriendMap->set(newCharacter,newBoyfriend);
HXLINE(1695)					this->boyfriendGroup->add(newBoyfriend).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1696)					this->startCharacterPos(newBoyfriend,null());
HXLINE(1697)					newBoyfriend->set_alpha(((Float)0.00001));
HXLINE(1698)					this->startCharacterLua(newBoyfriend->curCharacter);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(1702)				if (!(this->dadMap->exists(newCharacter))) {
HXLINE(1703)					 ::Character newDad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter,null());
HXLINE(1704)					this->dadMap->set(newCharacter,newDad);
HXLINE(1705)					this->dadGroup->add(newDad).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1706)					this->startCharacterPos(newDad,true);
HXLINE(1707)					newDad->set_alpha(((Float)0.00001));
HXLINE(1708)					this->startCharacterLua(newDad->curCharacter);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(1712)				bool _hx_tmp;
HXDLIN(1712)				if (::hx::IsNotNull( this->gf )) {
HXLINE(1712)					_hx_tmp = !(this->gfMap->exists(newCharacter));
            				}
            				else {
HXLINE(1712)					_hx_tmp = false;
            				}
HXDLIN(1712)				if (_hx_tmp) {
HXLINE(1713)					 ::Character newGf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),newCharacter,null());
HXLINE(1714)					{
HXLINE(1714)						 ::flixel::math::FlxBasePoint this1 = newGf->scrollFactor;
HXDLIN(1714)						this1->set_x(((Float)0.95));
HXDLIN(1714)						this1->set_y(((Float)0.95));
            					}
HXLINE(1715)					this->gfMap->set(newCharacter,newGf);
HXLINE(1716)					this->gfGroup->add(newGf).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1717)					this->startCharacterPos(newGf,null());
HXLINE(1718)					newGf->set_alpha(((Float)0.00001));
HXLINE(1719)					this->startCharacterLua(newGf->curCharacter);
            				}
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,addCharacterToList,(void))

void PlayState_obj::startCharacterLua(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1725_startCharacterLua)
HXLINE(1727)		bool doPush = false;
HXLINE(1728)		::String luaFile = ((HX_("characters/",45,3c,bf,be) + name) + HX_(".lua",4a,2a,ba,1e));
HXLINE(1730)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(luaFile))) {
HXLINE(1731)			luaFile = ::Paths_obj::modFolders(luaFile);
HXLINE(1732)			doPush = true;
            		}
            		else {
HXLINE(1734)			::String file = luaFile;
HXDLIN(1734)			if (::hx::IsNull( file )) {
HXLINE(1734)				file = HX_("",00,00,00,00);
            			}
HXDLIN(1734)			luaFile = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE(1735)			if (::sys::FileSystem_obj::exists(luaFile)) {
HXLINE(1736)				doPush = true;
            			}
            		}
HXLINE(1746)		if (doPush) {
HXLINE(1748)			{
HXLINE(1748)				int _g = 0;
HXDLIN(1748)				::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(1748)				while((_g < _g1->length)){
HXLINE(1748)					 ::FunkinLua script = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN(1748)					_g = (_g + 1);
HXLINE(1750)					if ((script->scriptName == luaFile)) {
HXLINE(1750)						return;
            					}
            				}
            			}
HXLINE(1752)			::Array< ::Dynamic> _hx_tmp = this->luaArray;
HXDLIN(1752)			_hx_tmp->push( ::FunkinLua_obj::__alloc( HX_CTX ,luaFile));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startCharacterLua,(void))

 ::flixel::FlxSprite PlayState_obj::getLuaObject(::String tag,::hx::Null< bool >  __o_text){
            		bool text = __o_text.Default(true);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1757_getLuaObject)
HXLINE(1758)		if (this->modchartSprites->exists(tag)) {
HXLINE(1758)			return ( ( ::flixel::FlxSprite)(this->modchartSprites->get(tag)) );
            		}
HXLINE(1759)		bool _hx_tmp;
HXDLIN(1759)		if (text) {
HXLINE(1759)			_hx_tmp = this->modchartTexts->exists(tag);
            		}
            		else {
HXLINE(1759)			_hx_tmp = false;
            		}
HXDLIN(1759)		if (_hx_tmp) {
HXLINE(1759)			return ( ( ::flixel::FlxSprite)(this->modchartTexts->get(tag)) );
            		}
HXLINE(1760)		if (this->variables->exists(tag)) {
HXLINE(1760)			return ( ( ::flixel::FlxSprite)(this->variables->get(tag)) );
            		}
HXLINE(1761)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getLuaObject,return )

void PlayState_obj::startCharacterPos( ::Character _hx_char, ::Dynamic __o_gfCheck){
            		 ::Dynamic gfCheck = __o_gfCheck;
            		if (::hx::IsNull(__o_gfCheck)) gfCheck = false;
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1764_startCharacterPos)
HXLINE(1765)		bool _hx_tmp;
HXDLIN(1765)		if (( (bool)(gfCheck) )) {
HXLINE(1765)			_hx_tmp = ::StringTools_obj::startsWith(_hx_char->curCharacter,HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE(1765)			_hx_tmp = false;
            		}
HXDLIN(1765)		if (_hx_tmp) {
HXLINE(1766)			_hx_char->setPosition(this->GF_X,this->GF_Y);
HXLINE(1767)			{
HXLINE(1767)				 ::flixel::math::FlxBasePoint this1 = _hx_char->scrollFactor;
HXDLIN(1767)				this1->set_x(((Float)0.95));
HXDLIN(1767)				this1->set_y(((Float)0.95));
            			}
HXLINE(1768)			_hx_char->danceEveryNumBeats = 2;
            		}
HXLINE(1770)		_hx_char->set_x((_hx_char->x + _hx_char->positionArray->__get(0)));
HXLINE(1771)		_hx_char->set_y((_hx_char->y + _hx_char->positionArray->__get(1)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,startCharacterPos,(void))

void PlayState_obj::startVideo(::String name){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1795_startVideo)
HXLINE(1796)			_gthis->videoCutscene->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE(1797)			_gthis->videoCutscene->updateHitbox();
HXLINE(1798)			{
HXLINE(1798)				 ::hxvlc::flixel::FlxVideoSprite _this = _gthis->videoCutscene;
HXDLIN(1798)				int axes = 17;
HXDLIN(1798)				bool _hx_tmp;
HXDLIN(1798)				if ((axes != 1)) {
HXLINE(1798)					_hx_tmp = (axes == 17);
            				}
            				else {
HXLINE(1798)					_hx_tmp = true;
            				}
HXDLIN(1798)				if (_hx_tmp) {
HXLINE(1798)					int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(1798)					_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(1798)				bool _hx_tmp2;
HXDLIN(1798)				if ((axes != 16)) {
HXLINE(1798)					_hx_tmp2 = (axes == 17);
            				}
            				else {
HXLINE(1798)					_hx_tmp2 = true;
            				}
HXDLIN(1798)				if (_hx_tmp2) {
HXLINE(1798)					int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(1798)					_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1800_startVideo)
HXLINE(1801)			_gthis->videoCutscene->destroy();
HXLINE(1802)			_gthis->startAndEnd();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1811_startVideo)
HXLINE(1812)			{
HXLINE(1812)				 ::hxvlc::flixel::FlxVideoSprite _this = _gthis->videoCutscene;
HXDLIN(1812)				if (::hx::IsNotNull( _this->bitmap )) {
HXLINE(1812)					_this->bitmap->play();
            				}
            			}
HXLINE(1813)			_gthis->add(_gthis->videoCutscene).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1776_startVideo)
HXDLIN(1776)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1778)		this->inCutscene = true;
HXLINE(1780)		::String filepath = ::Paths_obj::video(name);
HXLINE(1782)		if (!(::sys::FileSystem_obj::exists(filepath))) {
HXLINE(1787)			::flixel::FlxG_obj::log->advanced((HX_("Couldnt find video file: ",75,b0,71,1c) + name),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(1788)			this->startAndEnd();
HXLINE(1789)			return;
            		}
HXLINE(1792)		this->videoCutscene =  ::hxvlc::flixel::FlxVideoSprite_obj::__alloc( HX_CTX ,0,0);
HXLINE(1793)		this->videoCutscene->set_antialiasing(true);
HXLINE(1794)		this->videoCutscene->bitmap->onFormatSetup->add( ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
HXLINE(1800)		this->videoCutscene->bitmap->onEndReached->add( ::Dynamic(new _hx_Closure_1(_gthis)),null(),null());
HXLINE(1805)		this->videoCutscene->load(filepath,null());
HXLINE(1806)		this->videoCutscene->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camOther));
HXLINE(1807)		this->videoCutscene->bitmap->set_mute(false);
HXLINE(1808)		this->videoCutscene->bitmap->set_volume(1);
HXLINE(1809)		this->videoCutscene->autoVolumeHandle = true;
HXLINE(1811)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_2(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startVideo,(void))

void PlayState_obj::startAndEnd(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1824_startAndEnd)
HXDLIN(1824)		if (this->endingSong) {
HXLINE(1825)			this->endSong();
            		}
            		else {
HXLINE(1827)			this->startCountdown();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startAndEnd,(void))

void PlayState_obj::startDialogue( ::Dynamic dialogueFile,::String song){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1834_startDialogue)
HXDLIN(1834)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1836)		if (::hx::IsNotNull( this->psychDialogue )) {
HXLINE(1836)			return;
            		}
HXLINE(1838)		if ((( (::Array< ::Dynamic>)(dialogueFile->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) )->length > 0)) {
HXLINE(1839)			this->inCutscene = true;
HXLINE(1840)			this->precacheList->set(HX_("dialogue",18,2d,94,a7),HX_("sound",cf,8c,cc,80));
HXLINE(1841)			this->precacheList->set(HX_("dialogueClose",80,e3,49,e3),HX_("sound",cf,8c,cc,80));
HXLINE(1842)			this->psychDialogue =  ::DialogueBoxPsych_obj::__alloc( HX_CTX ,dialogueFile,song);
HXLINE(1843)			{
HXLINE(1843)				 ::flixel::math::FlxBasePoint this1 = this->psychDialogue->scrollFactor;
HXDLIN(1843)				this1->set_x(( (Float)(0) ));
HXDLIN(1843)				this1->set_y(( (Float)(0) ));
            			}
HXLINE(1844)			if (this->endingSong) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1845_startDialogue)
HXLINE(1846)					_gthis->psychDialogue = null();
HXLINE(1847)					_gthis->endSong();
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(1845)				this->psychDialogue->finishThing =  ::Dynamic(new _hx_Closure_0(_gthis));
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1850_startDialogue)
HXLINE(1851)					_gthis->psychDialogue = null();
HXLINE(1852)					_gthis->startCountdown();
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(1850)				this->psychDialogue->finishThing =  ::Dynamic(new _hx_Closure_1(_gthis));
            			}
HXLINE(1855)			this->psychDialogue->nextDialogueThing = this->startNextDialogue_dyn();
HXLINE(1856)			this->psychDialogue->skipDialogueThing = this->skipDialogue_dyn();
HXLINE(1857)			this->psychDialogue->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1858)			this->add(this->psychDialogue);
            		}
            		else {
HXLINE(1860)			::flixel::FlxG_obj::log->advanced(HX_("Your dialogue file is badly formatted!",40,79,c5,b3),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE(1861)			if (this->endingSong) {
HXLINE(1862)				this->endSong();
            			}
            			else {
HXLINE(1864)				this->startCountdown();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,startDialogue,(void))

void PlayState_obj::cacheCountdown(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1879_cacheCountdown)
HXLINE(1880)		 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1881)		introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_79,3));
HXLINE(1882)		introAssets->set(HX_("pixel",86,c6,a3,c2),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_80,3));
HXLINE(1884)		::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1885)		if (::PlayState_obj::isPixelStage) {
HXLINE(1885)			introAlts = ( (::Array< ::String >)(introAssets->get(HX_("pixel",86,c6,a3,c2))) );
            		}
HXLINE(1887)		{
HXLINE(1887)			int _g = 0;
HXDLIN(1887)			while((_g < introAlts->length)){
HXLINE(1887)				::String asset = introAlts->__get(_g);
HXDLIN(1887)				_g = (_g + 1);
HXLINE(1888)				{
HXLINE(1888)					::String library = null();
HXDLIN(1888)					 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(asset,library);
            				}
            			}
            		}
HXLINE(1890)		::Paths_obj::sound((HX_("intro3",47,54,90,9e) + this->introSoundsSuffix),null());
HXLINE(1891)		::Paths_obj::sound((HX_("intro2",46,54,90,9e) + this->introSoundsSuffix),null());
HXLINE(1892)		::Paths_obj::sound((HX_("intro1",45,54,90,9e) + this->introSoundsSuffix),null());
HXLINE(1893)		::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + this->introSoundsSuffix),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,cacheCountdown,(void))

void PlayState_obj::startCountdown(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1897_startCountdown)
HXDLIN(1897)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1898)		if (this->startedCountdown) {
HXLINE(1899)			this->callOnLuas(HX_("onStartCountdown",6e,2d,46,95),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(1900)			return;
            		}
HXLINE(1903)		this->inCutscene = false;
HXLINE(1904)		 ::Dynamic ret = this->callOnLuas(HX_("onStartCountdown",6e,2d,46,95),::cpp::VirtualArray_obj::__new(0),false,null());
HXLINE(1905)		if (::hx::IsNotEq( ret,::FunkinLua_obj::Function_Stop )) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_5, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            				void _hx_run( ::Note note){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2088_startCountdown)
HXLINE(2088)					bool _hx_tmp;
HXDLIN(2088)					if (!(::ClientPrefs_obj::opponentStrums)) {
HXLINE(2088)						_hx_tmp = note->mustPress;
            					}
            					else {
HXLINE(2088)						_hx_tmp = true;
            					}
HXDLIN(2088)					if (_hx_tmp) {
HXLINE(2090)						note->copyAlpha = false;
HXLINE(2091)						note->set_alpha(note->multAlpha);
HXLINE(2092)						bool _hx_tmp1;
HXDLIN(2092)						if (::ClientPrefs_obj::middleScroll) {
HXLINE(2092)							_hx_tmp1 = !(note->mustPress);
            						}
            						else {
HXLINE(2092)							_hx_tmp1 = false;
            						}
HXDLIN(2092)						if (_hx_tmp1) {
HXLINE(2093)							note->set_alpha((note->alpha * ((Float)0.35)));
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1960_startCountdown)
HXLINE(1961)				bool _hx_tmp;
HXDLIN(1961)				bool _hx_tmp1;
HXDLIN(1961)				bool _hx_tmp2;
HXDLIN(1961)				bool _hx_tmp3;
HXDLIN(1961)				if (::hx::IsNotNull( _gthis->gf )) {
HXLINE(1961)					_hx_tmp3 = (::hx::Mod((tmr->loops - tmr->_loopsCounter),::Math_obj::round(( (Float)((_gthis->gfSpeed * _gthis->gf->danceEveryNumBeats)) ))) == 0);
            				}
            				else {
HXLINE(1961)					_hx_tmp3 = false;
            				}
HXDLIN(1961)				if (_hx_tmp3) {
HXLINE(1961)					_hx_tmp2 = ::hx::IsNotNull( _gthis->gf->animation->_curAnim );
            				}
            				else {
HXLINE(1961)					_hx_tmp2 = false;
            				}
HXDLIN(1961)				if (_hx_tmp2) {
HXLINE(1961)					_hx_tmp1 = !(::StringTools_obj::startsWith(_gthis->gf->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(1961)					_hx_tmp1 = false;
            				}
HXDLIN(1961)				if (_hx_tmp1) {
HXLINE(1961)					_hx_tmp = !(_gthis->gf->stunned);
            				}
            				else {
HXLINE(1961)					_hx_tmp = false;
            				}
HXDLIN(1961)				if (_hx_tmp) {
HXLINE(1963)					_gthis->gf->dance();
            				}
HXLINE(1965)				bool _hx_tmp4;
HXDLIN(1965)				bool _hx_tmp5;
HXDLIN(1965)				bool _hx_tmp6;
HXDLIN(1965)				if ((::hx::Mod((tmr->loops - tmr->_loopsCounter),_gthis->boyfriend->danceEveryNumBeats) == 0)) {
HXLINE(1965)					_hx_tmp6 = ::hx::IsNotNull( _gthis->boyfriend->animation->_curAnim );
            				}
            				else {
HXLINE(1965)					_hx_tmp6 = false;
            				}
HXDLIN(1965)				if (_hx_tmp6) {
HXLINE(1965)					_hx_tmp5 = !(::StringTools_obj::startsWith(_gthis->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(1965)					_hx_tmp5 = false;
            				}
HXDLIN(1965)				if (_hx_tmp5) {
HXLINE(1965)					_hx_tmp4 = !(_gthis->boyfriend->stunned);
            				}
            				else {
HXLINE(1965)					_hx_tmp4 = false;
            				}
HXDLIN(1965)				if (_hx_tmp4) {
HXLINE(1967)					_gthis->boyfriend->dance();
            				}
HXLINE(1969)				bool _hx_tmp7;
HXDLIN(1969)				bool _hx_tmp8;
HXDLIN(1969)				bool _hx_tmp9;
HXDLIN(1969)				if ((::hx::Mod((tmr->loops - tmr->_loopsCounter),_gthis->dad->danceEveryNumBeats) == 0)) {
HXLINE(1969)					_hx_tmp9 = ::hx::IsNotNull( _gthis->dad->animation->_curAnim );
            				}
            				else {
HXLINE(1969)					_hx_tmp9 = false;
            				}
HXDLIN(1969)				if (_hx_tmp9) {
HXLINE(1969)					_hx_tmp8 = !(::StringTools_obj::startsWith(_gthis->dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            				}
            				else {
HXLINE(1969)					_hx_tmp8 = false;
            				}
HXDLIN(1969)				if (_hx_tmp8) {
HXLINE(1969)					_hx_tmp7 = !(_gthis->dad->stunned);
            				}
            				else {
HXLINE(1969)					_hx_tmp7 = false;
            				}
HXDLIN(1969)				if (_hx_tmp7) {
HXLINE(1971)					_gthis->dad->dance();
            				}
HXLINE(1974)				 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1975)				introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_86,3));
HXLINE(1976)				introAssets->set(HX_("pixel",86,c6,a3,c2),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_87,3));
HXLINE(1978)				::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1979)				bool antialias = ::ClientPrefs_obj::globalAntialiasing;
HXLINE(1980)				if (::PlayState_obj::isPixelStage) {
HXLINE(1981)					introAlts = ( (::Array< ::String >)(introAssets->get(HX_("pixel",86,c6,a3,c2))) );
HXLINE(1982)					antialias = false;
            				}
HXLINE(1985)				switch((int)(swagCounter->__get(0))){
            					case (int)0: {
HXLINE(1988)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp10 = ::flixel::FlxG_obj::sound;
HXDLIN(1988)						_hx_tmp10->play(::Paths_obj::sound((HX_("intro3",47,54,90,9e) + _gthis->introSoundsSuffix),null()),((Float)0.6),null(),null(),null(),null());
            					}
            					break;
            					case (int)1: {
HXLINE(1990)						if ((::PlayState_obj::curStage.toLowerCase() == HX_("discordstage",92,21,fa,4f))) {
HXLINE(1991)							_gthis->countdownText->set_alpha(( (Float)(1) ));
HXLINE(1992)							_gthis->countdownText->set_text(HX_("READY?",9c,62,14,af));
HXDLIN(1992)							{
HXLINE(1992)								 ::flixel::text::FlxText _this = _gthis->countdownText;
HXDLIN(1992)								int axes = 17;
HXDLIN(1992)								bool _hx_tmp11;
HXDLIN(1992)								if ((axes != 1)) {
HXLINE(1992)									_hx_tmp11 = (axes == 17);
            								}
            								else {
HXLINE(1992)									_hx_tmp11 = true;
            								}
HXDLIN(1992)								if (_hx_tmp11) {
HXLINE(1992)									int _hx_tmp12 = ::flixel::FlxG_obj::width;
HXDLIN(1992)									_this->set_x(((( (Float)(_hx_tmp12) ) - _this->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(1992)								bool _hx_tmp13;
HXDLIN(1992)								if ((axes != 16)) {
HXLINE(1992)									_hx_tmp13 = (axes == 17);
            								}
            								else {
HXLINE(1992)									_hx_tmp13 = true;
            								}
HXDLIN(1992)								if (_hx_tmp13) {
HXLINE(1992)									int _hx_tmp14 = ::flixel::FlxG_obj::height;
HXDLIN(1992)									_this->set_y(((( (Float)(_hx_tmp14) ) - _this->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(1993)							_gthis->countdownTweenColor = ::flixel::tweens::FlxTween_obj::color(_gthis->countdownText,(::Conductor_obj::crochet / ( (Float)(1000) )),-4405505,-10454785, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(1994)							{
HXLINE(1994)								 ::flixel::math::FlxBasePoint this1 = _gthis->countdownText->scale;
HXDLIN(1994)								this1->set_x(((Float)1.2));
HXDLIN(1994)								this1->set_y(((Float)1.2));
            							}
HXLINE(1995)							_gthis->countdownTween = ::flixel::tweens::FlxTween_obj::tween(_gthis->countdownText->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),1)
            								->setFixed(1,HX_("y",79,00,00,00),1)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            						}
            						else {
            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            							void _hx_run( ::flixel::tweens::FlxTween twn){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2012_startCountdown)
HXLINE(2013)								_gthis->remove(_gthis->countdownReady,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2014)								_gthis->countdownReady->destroy();
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(1998)							 ::flixel::FlxSprite _hx_tmp15 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1998)							::String library = null();
HXDLIN(1998)							 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(introAlts->__get(0),library);
HXDLIN(1998)							_gthis->countdownReady = _hx_tmp15->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(1999)							_gthis->countdownReady->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(2000)							{
HXLINE(2000)								 ::flixel::math::FlxBasePoint this2 = _gthis->countdownReady->scrollFactor;
HXDLIN(2000)								this2->set_x(( (Float)(0) ));
HXDLIN(2000)								this2->set_y(( (Float)(0) ));
            							}
HXLINE(2001)							_gthis->countdownReady->updateHitbox();
HXLINE(2003)							if (::PlayState_obj::isPixelStage) {
HXLINE(2004)								 ::flixel::FlxSprite _gthis1 = _gthis->countdownReady;
HXDLIN(2004)								Float _hx_tmp16 = _gthis->countdownReady->get_width();
HXDLIN(2004)								_gthis1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp16 * ::PlayState_obj::daPixelZoom)),null());
            							}
HXLINE(2006)							{
HXLINE(2006)								 ::flixel::FlxSprite _this1 = _gthis->countdownReady;
HXDLIN(2006)								int axes1 = 17;
HXDLIN(2006)								bool _hx_tmp17;
HXDLIN(2006)								if ((axes1 != 1)) {
HXLINE(2006)									_hx_tmp17 = (axes1 == 17);
            								}
            								else {
HXLINE(2006)									_hx_tmp17 = true;
            								}
HXDLIN(2006)								if (_hx_tmp17) {
HXLINE(2006)									int _hx_tmp18 = ::flixel::FlxG_obj::width;
HXDLIN(2006)									_this1->set_x(((( (Float)(_hx_tmp18) ) - _this1->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(2006)								bool _hx_tmp19;
HXDLIN(2006)								if ((axes1 != 16)) {
HXLINE(2006)									_hx_tmp19 = (axes1 == 17);
            								}
            								else {
HXLINE(2006)									_hx_tmp19 = true;
            								}
HXDLIN(2006)								if (_hx_tmp19) {
HXLINE(2006)									int _hx_tmp20 = ::flixel::FlxG_obj::height;
HXDLIN(2006)									_this1->set_y(((( (Float)(_hx_tmp20) ) - _this1->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(2007)							_gthis->countdownReady->set_antialiasing(antialias);
HXLINE(2008)							 ::PlayState _gthis2 = _gthis;
HXDLIN(2008)							int _hx_tmp21 = _gthis->members->indexOf(_gthis->notes,null());
HXDLIN(2008)							_gthis2->insert(_hx_tmp21,_gthis->countdownReady).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2009)							::flixel::tweens::FlxTween_obj::tween(_gthis->countdownReady, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            						}
HXLINE(2018)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp22 = ::flixel::FlxG_obj::sound;
HXDLIN(2018)						_hx_tmp22->play(::Paths_obj::sound((HX_("intro2",46,54,90,9e) + _gthis->introSoundsSuffix),null()),((Float)0.6),null(),null(),null(),null());
            					}
            					break;
            					case (int)2: {
HXLINE(2022)						if ((::PlayState_obj::curStage.toLowerCase() == HX_("discordstage",92,21,fa,4f))) {
HXLINE(2023)							if (::hx::IsNotNull( _gthis->countdownTween )) {
HXLINE(2023)								_gthis->countdownTween->cancel();
            							}
HXLINE(2024)							if (::hx::IsNotNull( _gthis->countdownTweenColor )) {
HXLINE(2024)								_gthis->countdownTweenColor->cancel();
            							}
HXLINE(2025)							_gthis->countdownText->set_text(HX_("SET",82,37,3f,00));
HXDLIN(2025)							{
HXLINE(2025)								 ::flixel::text::FlxText _this2 = _gthis->countdownText;
HXDLIN(2025)								int axes2 = 17;
HXDLIN(2025)								bool _hx_tmp23;
HXDLIN(2025)								if ((axes2 != 1)) {
HXLINE(2025)									_hx_tmp23 = (axes2 == 17);
            								}
            								else {
HXLINE(2025)									_hx_tmp23 = true;
            								}
HXDLIN(2025)								if (_hx_tmp23) {
HXLINE(2025)									int _hx_tmp24 = ::flixel::FlxG_obj::width;
HXDLIN(2025)									_this2->set_x(((( (Float)(_hx_tmp24) ) - _this2->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(2025)								bool _hx_tmp25;
HXDLIN(2025)								if ((axes2 != 16)) {
HXLINE(2025)									_hx_tmp25 = (axes2 == 17);
            								}
            								else {
HXLINE(2025)									_hx_tmp25 = true;
            								}
HXDLIN(2025)								if (_hx_tmp25) {
HXLINE(2025)									int _hx_tmp26 = ::flixel::FlxG_obj::height;
HXDLIN(2025)									_this2->set_y(((( (Float)(_hx_tmp26) ) - _this2->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(2026)							_gthis->countdownTweenColor = ::flixel::tweens::FlxTween_obj::color(_gthis->countdownText,(::Conductor_obj::crochet / ( (Float)(1000) )),-4405505,-10454785, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(2027)							{
HXLINE(2027)								 ::flixel::math::FlxBasePoint this3 = _gthis->countdownText->scale;
HXDLIN(2027)								this3->set_x(((Float)1.2));
HXDLIN(2027)								this3->set_y(((Float)1.2));
            							}
HXLINE(2028)							_gthis->countdownTween = ::flixel::tweens::FlxTween_obj::tween(_gthis->countdownText->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),1)
            								->setFixed(1,HX_("y",79,00,00,00),1)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            						}
            						else {
            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            							void _hx_run( ::flixel::tweens::FlxTween twn){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2044_startCountdown)
HXLINE(2045)								_gthis->remove(_gthis->countdownSet,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2046)								_gthis->countdownSet->destroy();
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(2031)							 ::flixel::FlxSprite _hx_tmp27 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2031)							::String library1 = null();
HXDLIN(2031)							 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(introAlts->__get(1),library1);
HXDLIN(2031)							_gthis->countdownSet = _hx_tmp27->loadGraphic(returnAsset1,null(),null(),null(),null(),null());
HXLINE(2032)							_gthis->countdownSet->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(2033)							{
HXLINE(2033)								 ::flixel::math::FlxBasePoint this4 = _gthis->countdownSet->scrollFactor;
HXDLIN(2033)								this4->set_x(( (Float)(0) ));
HXDLIN(2033)								this4->set_y(( (Float)(0) ));
            							}
HXLINE(2035)							if (::PlayState_obj::isPixelStage) {
HXLINE(2036)								 ::flixel::FlxSprite _gthis3 = _gthis->countdownSet;
HXDLIN(2036)								Float _hx_tmp28 = _gthis->countdownSet->get_width();
HXDLIN(2036)								_gthis3->setGraphicSize(::Std_obj::_hx_int((_hx_tmp28 * ::PlayState_obj::daPixelZoom)),null());
            							}
HXLINE(2038)							{
HXLINE(2038)								 ::flixel::FlxSprite _this3 = _gthis->countdownSet;
HXDLIN(2038)								int axes3 = 17;
HXDLIN(2038)								bool _hx_tmp29;
HXDLIN(2038)								if ((axes3 != 1)) {
HXLINE(2038)									_hx_tmp29 = (axes3 == 17);
            								}
            								else {
HXLINE(2038)									_hx_tmp29 = true;
            								}
HXDLIN(2038)								if (_hx_tmp29) {
HXLINE(2038)									int _hx_tmp30 = ::flixel::FlxG_obj::width;
HXDLIN(2038)									_this3->set_x(((( (Float)(_hx_tmp30) ) - _this3->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(2038)								bool _hx_tmp31;
HXDLIN(2038)								if ((axes3 != 16)) {
HXLINE(2038)									_hx_tmp31 = (axes3 == 17);
            								}
            								else {
HXLINE(2038)									_hx_tmp31 = true;
            								}
HXDLIN(2038)								if (_hx_tmp31) {
HXLINE(2038)									int _hx_tmp32 = ::flixel::FlxG_obj::height;
HXDLIN(2038)									_this3->set_y(((( (Float)(_hx_tmp32) ) - _this3->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(2039)							_gthis->countdownSet->set_antialiasing(antialias);
HXLINE(2040)							 ::PlayState _gthis4 = _gthis;
HXDLIN(2040)							int _hx_tmp33 = _gthis->members->indexOf(_gthis->notes,null());
HXDLIN(2040)							_gthis4->insert(_hx_tmp33,_gthis->countdownSet).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2041)							::flixel::tweens::FlxTween_obj::tween(_gthis->countdownSet, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            						}
HXLINE(2050)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp34 = ::flixel::FlxG_obj::sound;
HXDLIN(2050)						_hx_tmp34->play(::Paths_obj::sound((HX_("intro1",45,54,90,9e) + _gthis->introSoundsSuffix),null()),((Float)0.6),null(),null(),null(),null());
            					}
            					break;
            					case (int)3: {
HXLINE(2052)						if ((::PlayState_obj::curStage.toLowerCase() == HX_("discordstage",92,21,fa,4f))) {
            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            							void _hx_run( ::flixel::tweens::FlxTween twn){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2057_startCountdown)
HXLINE(2057)								_gthis->remove(_gthis->countdownText,null()).StaticCast<  ::flixel::FlxBasic >();
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(2053)							if (::hx::IsNotNull( _gthis->countdownTween )) {
HXLINE(2053)								_gthis->countdownTween->cancel();
            							}
HXLINE(2054)							if (::hx::IsNotNull( _gthis->countdownTweenColor )) {
HXLINE(2054)								_gthis->countdownTweenColor->cancel();
            							}
HXLINE(2055)							_gthis->countdownText->set_text(HX_("TEXT!",d4,82,87,8b));
HXDLIN(2055)							{
HXLINE(2055)								 ::flixel::text::FlxText _this4 = _gthis->countdownText;
HXDLIN(2055)								int axes4 = 17;
HXDLIN(2055)								bool _hx_tmp35;
HXDLIN(2055)								if ((axes4 != 1)) {
HXLINE(2055)									_hx_tmp35 = (axes4 == 17);
            								}
            								else {
HXLINE(2055)									_hx_tmp35 = true;
            								}
HXDLIN(2055)								if (_hx_tmp35) {
HXLINE(2055)									int _hx_tmp36 = ::flixel::FlxG_obj::width;
HXDLIN(2055)									_this4->set_x(((( (Float)(_hx_tmp36) ) - _this4->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(2055)								bool _hx_tmp37;
HXDLIN(2055)								if ((axes4 != 16)) {
HXLINE(2055)									_hx_tmp37 = (axes4 == 17);
            								}
            								else {
HXLINE(2055)									_hx_tmp37 = true;
            								}
HXDLIN(2055)								if (_hx_tmp37) {
HXLINE(2055)									int _hx_tmp38 = ::flixel::FlxG_obj::height;
HXDLIN(2055)									_this4->set_y(((( (Float)(_hx_tmp38) ) - _this4->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(2056)							_gthis->countdownTweenColor = ::flixel::tweens::FlxTween_obj::color(_gthis->countdownText,(::Conductor_obj::crochet / ( (Float)(1000) )),-4405505,6322431, ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis)))));
HXLINE(2059)							{
HXLINE(2059)								 ::flixel::math::FlxBasePoint this5 = _gthis->countdownText->scale;
HXDLIN(2059)								this5->set_x(((Float)1.2));
HXDLIN(2059)								this5->set_y(((Float)1.2));
            							}
HXLINE(2060)							_gthis->countdownTween = ::flixel::tweens::FlxTween_obj::tween(_gthis->countdownText->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("x",78,00,00,00),1)
            								->setFixed(1,HX_("y",79,00,00,00),1)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            						}
            						else {
            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            							void _hx_run( ::flixel::tweens::FlxTween twn){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2077_startCountdown)
HXLINE(2078)								_gthis->remove(_gthis->countdownGo,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2079)								_gthis->countdownGo->destroy();
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(2062)							 ::flixel::FlxSprite _hx_tmp39 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(2062)							::String library2 = null();
HXDLIN(2062)							 ::flixel::graphics::FlxGraphic returnAsset2 = ::Paths_obj::returnGraphic(introAlts->__get(2),library2);
HXDLIN(2062)							_gthis->countdownGo = _hx_tmp39->loadGraphic(returnAsset2,null(),null(),null(),null(),null());
HXLINE(2063)							_gthis->countdownGo->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->camHUD));
HXLINE(2064)							{
HXLINE(2064)								 ::flixel::math::FlxBasePoint this6 = _gthis->countdownGo->scrollFactor;
HXDLIN(2064)								this6->set_x(( (Float)(0) ));
HXDLIN(2064)								this6->set_y(( (Float)(0) ));
            							}
HXLINE(2066)							if (::PlayState_obj::isPixelStage) {
HXLINE(2067)								 ::flixel::FlxSprite _gthis5 = _gthis->countdownGo;
HXDLIN(2067)								Float _hx_tmp40 = _gthis->countdownGo->get_width();
HXDLIN(2067)								_gthis5->setGraphicSize(::Std_obj::_hx_int((_hx_tmp40 * ::PlayState_obj::daPixelZoom)),null());
            							}
HXLINE(2069)							_gthis->countdownGo->updateHitbox();
HXLINE(2071)							{
HXLINE(2071)								 ::flixel::FlxSprite _this5 = _gthis->countdownGo;
HXDLIN(2071)								int axes5 = 17;
HXDLIN(2071)								bool _hx_tmp41;
HXDLIN(2071)								if ((axes5 != 1)) {
HXLINE(2071)									_hx_tmp41 = (axes5 == 17);
            								}
            								else {
HXLINE(2071)									_hx_tmp41 = true;
            								}
HXDLIN(2071)								if (_hx_tmp41) {
HXLINE(2071)									int _hx_tmp42 = ::flixel::FlxG_obj::width;
HXDLIN(2071)									_this5->set_x(((( (Float)(_hx_tmp42) ) - _this5->get_width()) / ( (Float)(2) )));
            								}
HXDLIN(2071)								bool _hx_tmp43;
HXDLIN(2071)								if ((axes5 != 16)) {
HXLINE(2071)									_hx_tmp43 = (axes5 == 17);
            								}
            								else {
HXLINE(2071)									_hx_tmp43 = true;
            								}
HXDLIN(2071)								if (_hx_tmp43) {
HXLINE(2071)									int _hx_tmp44 = ::flixel::FlxG_obj::height;
HXDLIN(2071)									_this5->set_y(((( (Float)(_hx_tmp44) ) - _this5->get_height()) / ( (Float)(2) )));
            								}
            							}
HXLINE(2072)							_gthis->countdownGo->set_antialiasing(antialias);
HXLINE(2073)							 ::PlayState _gthis6 = _gthis;
HXDLIN(2073)							int _hx_tmp45 = _gthis->members->indexOf(_gthis->notes,null());
HXDLIN(2073)							_gthis6->insert(_hx_tmp45,_gthis->countdownGo).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2074)							::flixel::tweens::FlxTween_obj::tween(_gthis->countdownGo, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_3(_gthis)))));
            						}
HXLINE(2083)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp46 = ::flixel::FlxG_obj::sound;
HXDLIN(2083)						_hx_tmp46->play(::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + _gthis->introSoundsSuffix),null()),((Float)0.6),null(),null(),null(),null());
            					}
            					break;
            					case (int)4: {
            					}
            					break;
            				}
HXLINE(2087)				_gthis->notes->forEachAlive( ::Dynamic(new _hx_Closure_4()),null());
HXLINE(2097)				_gthis->callOnLuas(HX_("onCountdownTick",0f,54,e4,9f),::cpp::VirtualArray_obj::__new(1)->init(0,swagCounter->__get(0)),null(),null());
HXLINE(2099)				::Array< int > swagCounter1 = swagCounter;
HXDLIN(2099)				int _hx_tmp47 = 0;
HXDLIN(2099)				swagCounter1[_hx_tmp47] = (swagCounter1->__get(_hx_tmp47) + 1);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1906)			bool _hx_tmp;
HXDLIN(1906)			if (!(this->skipCountdown)) {
HXLINE(1906)				_hx_tmp = (::PlayState_obj::startOnTime > 0);
            			}
            			else {
HXLINE(1906)				_hx_tmp = true;
            			}
HXDLIN(1906)			if (_hx_tmp) {
HXLINE(1906)				this->skipArrowStartTween = true;
            			}
HXLINE(1908)			this->generateStaticArrows(0);
HXLINE(1909)			this->generateStaticArrows(1);
HXLINE(1910)			{
HXLINE(1910)				int _g = 0;
HXDLIN(1910)				int _g1 = this->playerStrums->length;
HXDLIN(1910)				while((_g < _g1)){
HXLINE(1910)					_g = (_g + 1);
HXDLIN(1910)					int i = (_g - 1);
HXLINE(1911)					this->setOnLuas((HX_("defaultPlayerStrumX",91,a3,83,89) + i),Dynamic( this->playerStrums->members->__get(i)).StaticCast<  ::StrumNote >()->x);
HXLINE(1912)					this->setOnLuas((HX_("defaultPlayerStrumY",92,a3,83,89) + i),Dynamic( this->playerStrums->members->__get(i)).StaticCast<  ::StrumNote >()->y);
            				}
            			}
HXLINE(1914)			{
HXLINE(1914)				int _g2 = 0;
HXDLIN(1914)				int _g3 = this->opponentStrums->length;
HXDLIN(1914)				while((_g2 < _g3)){
HXLINE(1914)					_g2 = (_g2 + 1);
HXDLIN(1914)					int i1 = (_g2 - 1);
HXLINE(1915)					this->setOnLuas((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + i1),Dynamic( this->opponentStrums->members->__get(i1)).StaticCast<  ::StrumNote >()->x);
HXLINE(1916)					this->setOnLuas((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + i1),Dynamic( this->opponentStrums->members->__get(i1)).StaticCast<  ::StrumNote >()->y);
            				}
            			}
HXLINE(1925)			if (this->useModchart) {
HXLINE(1926)				this->modManager->receptors = ::Array_obj< ::Dynamic>::__new(2)->init(0,this->playerStrums->members)->init(1,this->opponentStrums->members);
HXLINE(1927)				this->modManager->registerDefaultModifiers();
            			}
HXLINE(1931)			this->startedCountdown = true;
HXLINE(1932)			::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1933)			 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::Conductor >();
HXDLIN(1933)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1934)			this->setOnLuas(HX_("startedCountdown",30,57,28,9b),true);
HXLINE(1935)			this->callOnLuas(HX_("onCountdownStarted",cf,93,f5,10),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(1937)			int _hx_tmp2;
HXDLIN(1937)			if (this->HUDtoRight) {
HXLINE(1937)				_hx_tmp2 = -400;
            			}
            			else {
HXLINE(1937)				_hx_tmp2 = 400;
            			}
HXDLIN(1937)			::flixel::tweens::FlxTween_obj::tween(this->rateTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),(this->rateTxt->x + _hx_tmp2))),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(2) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet / ( (Float)(1000) )))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(1938)			int _hx_tmp3;
HXDLIN(1938)			if (this->HUDtoRight) {
HXLINE(1938)				_hx_tmp3 = -400;
            			}
            			else {
HXLINE(1938)				_hx_tmp3 = 400;
            			}
HXDLIN(1938)			::flixel::tweens::FlxTween_obj::tween(this->scoreTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),(this->scoreTxt->x + _hx_tmp3))),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(2) )), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(1940)			::flixel::tweens::FlxTween_obj::tween(this->healthBar->scale, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),1)),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(2) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(2) )))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(1941)			::flixel::tweens::FlxTween_obj::tween(this->healthBarBG->scale, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),1)),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(2) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(2) )))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(1942)			::flixel::tweens::FlxTween_obj::tween(this->healthBarOverlay->scale, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),1)),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(2) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(2) )))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(1944)			::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_92,1);
HXLINE(1946)			if ((::PlayState_obj::startOnTime < 0)) {
HXLINE(1946)				::PlayState_obj::startOnTime = ( (Float)(0) );
            			}
HXLINE(1948)			if ((::PlayState_obj::startOnTime > 0)) {
HXLINE(1949)				this->clearNotesBefore(::PlayState_obj::startOnTime);
HXLINE(1950)				this->setSongTime((::PlayState_obj::startOnTime - ( (Float)(350) )));
HXLINE(1951)				return;
            			}
            			else {
HXLINE(1953)				if (this->skipCountdown) {
HXLINE(1955)					this->setSongTime(( (Float)(0) ));
HXLINE(1956)					return;
            				}
            			}
HXLINE(1959)			 ::flixel::util::FlxTimer _hx_tmp4 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1959)			this->startTimer = _hx_tmp4->start(((::Conductor_obj::crochet / ( (Float)(1000) )) / this->playbackRate), ::Dynamic(new _hx_Closure_5(_gthis,swagCounter)),5);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

void PlayState_obj::addBehindGF( ::flixel::FlxObject obj){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2107_addBehindGF)
HXDLIN(2107)		this->insert(this->members->indexOf(this->gfGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindGF,(void))

void PlayState_obj::addBehindBF( ::flixel::FlxObject obj){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2111_addBehindBF)
HXDLIN(2111)		this->insert(this->members->indexOf(this->boyfriendGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindBF,(void))

void PlayState_obj::addBehindDad( ::flixel::FlxObject obj){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2115_addBehindDad)
HXDLIN(2115)		this->insert(this->members->indexOf(this->dadGroup,null()),obj);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addBehindDad,(void))

void PlayState_obj::clearNotesBefore(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2119_clearNotesBefore)
HXLINE(2120)		int i = (this->unspawnNotes->length - 1);
HXLINE(2121)		while((i >= 0)){
HXLINE(2122)			 ::Note daNote = this->unspawnNotes->__get(i).StaticCast<  ::Note >();
HXLINE(2123)			if (((daNote->strumTime - ( (Float)(350) )) < time)) {
HXLINE(2125)				daNote->set_active(false);
HXLINE(2126)				daNote->set_visible(false);
HXLINE(2127)				daNote->ignoreNote = true;
HXLINE(2129)				daNote->kill();
HXLINE(2130)				this->unspawnNotes->remove(daNote);
HXLINE(2131)				daNote->destroy();
            			}
HXLINE(2133)			i = (i - 1);
            		}
HXLINE(2136)		i = (this->notes->length - 1);
HXLINE(2137)		while((i >= 0)){
HXLINE(2138)			 ::Note daNote1 = Dynamic( this->notes->members->__get(i)).StaticCast<  ::Note >();
HXLINE(2139)			if (((daNote1->strumTime - ( (Float)(350) )) < time)) {
HXLINE(2141)				daNote1->set_active(false);
HXLINE(2142)				daNote1->set_visible(false);
HXLINE(2143)				daNote1->ignoreNote = true;
HXLINE(2145)				daNote1->kill();
HXLINE(2146)				this->notes->remove(daNote1,true).StaticCast<  ::Note >();
HXLINE(2147)				daNote1->destroy();
            			}
HXLINE(2149)			i = (i - 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,clearNotesBefore,(void))

void PlayState_obj::updateScore(::hx::Null< bool >  __o_miss){
            		bool miss = __o_miss.Default(false);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2154_updateScore)
HXDLIN(2154)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2155)		 ::flixel::text::FlxText _hx_tmp = this->rateTxt;
HXDLIN(2155)		::String _hx_tmp1 = (HX_("",00,00,00,00) + this->ratePrefix);
HXDLIN(2155)		_hx_tmp->set_text(((_hx_tmp1 + ::Highscore_obj::floorDecimal((this->ratingPercent * ( (Float)(100) )),1)) + HX_("%",25,00,00,00)));
HXLINE(2156)		this->comboTxt->set_text((this->comboPrefix + this->combo));
HXLINE(2158)		if ((this->lives > 0)) {
HXLINE(2159)			this->missTxt->set_text((((HX_("LIVES: ",4d,62,bd,3a) + this->curLives) + HX_("/",2f,00,00,00)) + this->lives));
            		}
            		else {
HXLINE(2161)			this->missTxt->set_text((this->missPrefix + this->songMisses));
            		}
HXLINE(2164)		bool _hx_tmp2;
HXDLIN(2164)		if (::ClientPrefs_obj::scoreZoom) {
HXLINE(2164)			_hx_tmp2 = !(this->cpuControlled);
            		}
            		else {
HXLINE(2164)			_hx_tmp2 = false;
            		}
HXDLIN(2164)		if (_hx_tmp2) {
HXLINE(2166)			if (!(miss)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween twn){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2182_updateScore)
HXLINE(2182)					_gthis->scoreTxtTween = null();
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween twn){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2188_updateScore)
HXLINE(2188)					_gthis->comboTxtTween = null();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2167)				if (::hx::IsNotNull( this->scoreTxtTween )) {
HXLINE(2168)					this->scoreTxtTween->cancel();
            				}
HXLINE(2170)				if (::hx::IsNotNull( this->comboTxtTween )) {
HXLINE(2171)					this->comboTxtTween->cancel();
            				}
HXLINE(2173)				{
HXLINE(2173)					Float _hx_tmp3;
HXDLIN(2173)					if (miss) {
HXLINE(2173)						_hx_tmp3 = ((Float)0.95);
            					}
            					else {
HXLINE(2173)						_hx_tmp3 = ((Float)1.05);
            					}
HXDLIN(2173)					this->scoreTxt->scale->set_x(_hx_tmp3);
            				}
HXLINE(2174)				{
HXLINE(2174)					Float _hx_tmp4;
HXDLIN(2174)					if (miss) {
HXLINE(2174)						_hx_tmp4 = ((Float)0.95);
            					}
            					else {
HXLINE(2174)						_hx_tmp4 = ((Float)1.05);
            					}
HXDLIN(2174)					this->comboTxt->scale->set_x(_hx_tmp4);
            				}
HXLINE(2175)				this->comboTxt->set_alpha(( (Float)(1) ));
HXLINE(2180)				this->scoreTxtTween = ::flixel::tweens::FlxTween_obj::tween(this->scoreTxt->scale, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
HXLINE(2186)				this->comboTxtTween = ::flixel::tweens::FlxTween_obj::tween(this->comboTxt, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)
            					->setFixed(1,HX_("scale.x",94,2d,07,65),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween twn){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2205_updateScore)
HXLINE(2205)					_gthis->missTxtTween = null();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2194)				if (::hx::IsNotNull( this->missTxtTween )) {
HXLINE(2195)					this->missTxtTween->cancel();
            				}
HXLINE(2197)				this->missTxt->scale->set_x(((Float)1.05));
HXLINE(2199)				if (!(this->missTxt->visible)) {
HXLINE(2200)					 ::flixel::text::FlxText fh = this->comboTxt;
HXDLIN(2200)					fh->set_y((fh->y - ( (Float)(30) )));
            				}
HXLINE(2201)				this->missTxt->set_visible(true);
HXLINE(2203)				this->missTxtTween = ::flixel::tweens::FlxTween_obj::tween(this->missTxt->scale, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis)))));
            			}
            		}
HXLINE(2211)		this->callOnLuas(HX_("onUpdateScore",aa,f9,5b,c1),::cpp::VirtualArray_obj::__new(1)->init(0,miss),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,updateScore,(void))

void PlayState_obj::setSongTime(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2215_setSongTime)
HXLINE(2216)		if ((time < 0)) {
HXLINE(2216)			time = ( (Float)(0) );
            		}
HXLINE(2218)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(2219)		this->vocals->pause();
HXLINE(2220)		if (this->separateVocals) {
HXLINE(2221)			this->opponentVocals->pause();
            		}
HXLINE(2223)		::flixel::FlxG_obj::sound->music->set_time(time);
HXLINE(2224)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(2225)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(2227)		if ((::Conductor_obj::songPosition <= this->vocals->_length)) {
HXLINE(2229)			this->vocals->set_time(time);
HXLINE(2230)			this->vocals->set_pitch(this->playbackRate);
HXLINE(2231)			if (this->separateVocals) {
HXLINE(2232)				this->opponentVocals->set_time(time);
HXLINE(2233)				this->opponentVocals->set_pitch(this->playbackRate);
            			}
            		}
HXLINE(2236)		this->vocals->play(null(),null(),null());
HXLINE(2237)		if (this->separateVocals) {
HXLINE(2238)			this->opponentVocals->play(null(),null(),null());
            		}
HXLINE(2239)		::Conductor_obj::songPosition = time;
HXLINE(2240)		this->songTime = time;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,setSongTime,(void))

void PlayState_obj::startNextDialogue(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2243_startNextDialogue)
HXLINE(2244)		this->dialogueCount++;
HXLINE(2245)		this->callOnLuas(HX_("onNextDialogue",ea,78,82,7b),::cpp::VirtualArray_obj::__new(1)->init(0,this->dialogueCount),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startNextDialogue,(void))

void PlayState_obj::skipDialogue(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2249_skipDialogue)
HXDLIN(2249)		this->callOnLuas(HX_("onSkipDialogue",76,76,53,39),::cpp::VirtualArray_obj::__new(1)->init(0,this->dialogueCount),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,skipDialogue,(void))

void PlayState_obj::startSong(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_g) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2272_startSong)
HXLINE(2272)			_g->finishSong(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2304_startSong)
HXLINE(2305)			{
HXLINE(2305)				 ::flixel::math::FlxBasePoint this1 = _gthis->songTitle->scale;
HXDLIN(2305)				this1->set_x(((Float)1.4));
HXDLIN(2305)				this1->set_y(((Float)1.4));
            			}
HXLINE(2306)			{
HXLINE(2306)				 ::flixel::math::FlxBasePoint this2 = _gthis->songDesc->scale;
HXDLIN(2306)				this2->set_x(((Float)0.6));
HXDLIN(2306)				this2->set_y(((Float)0.6));
            			}
HXLINE(2307)			{
HXLINE(2307)				 ::flixel::math::FlxBasePoint this3 = _gthis->songDiff->scale;
HXDLIN(2307)				this3->set_x(((Float)0.6));
HXDLIN(2307)				this3->set_y(((Float)0.6));
            			}
HXLINE(2308)			::flixel::tweens::FlxTween_obj::tween(_gthis->songTitle, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)),1,null());
HXLINE(2309)			::flixel::tweens::FlxTween_obj::tween(_gthis->songTitle, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)2.5))));
HXLINE(2310)			::flixel::tweens::FlxTween_obj::tween(_gthis->songTitle->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),1)
            				->setFixed(1,HX_("y",79,00,00,00),1)),2, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(2312)			::flixel::tweens::FlxTween_obj::tween(_gthis->songDesc, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)),1,null());
HXLINE(2313)			::flixel::tweens::FlxTween_obj::tween(_gthis->songDesc, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)2.5))));
HXLINE(2314)			::flixel::tweens::FlxTween_obj::tween(_gthis->songDesc->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),1)
            				->setFixed(1,HX_("y",79,00,00,00),1)),2, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(2315)			::flixel::tweens::FlxTween_obj::tween(_gthis->songDiff, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)),1,null());
HXLINE(2316)			::flixel::tweens::FlxTween_obj::tween(_gthis->songDiff, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)2.5))));
HXLINE(2317)			::flixel::tweens::FlxTween_obj::tween(_gthis->songDiff->scale, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),1)
            				->setFixed(1,HX_("y",79,00,00,00),1)),2, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(2318)			_gthis->songLogo->set_angle(( (Float)(15) ));
HXLINE(2319)			 ::flixel::FlxSprite _gthis1 = _gthis->songLogo;
HXDLIN(2319)			Float _hx_tmp = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN(2319)			Float _hx_tmp1 = (_hx_tmp - (_gthis->songLogo->get_width() / ( (Float)(2) )));
HXDLIN(2319)			::flixel::tweens::FlxTween_obj::tween(_gthis1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),_hx_tmp1)
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(2320)			 ::flixel::FlxSprite _gthis2 = _gthis->songLogo;
HXDLIN(2320)			Float _hx_tmp2 = (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ));
HXDLIN(2320)			Float _hx_tmp3 = ((_hx_tmp2 - (_gthis->songLogo->get_width() / ( (Float)(2) ))) - ( (Float)(600) ));
HXDLIN(2320)			::flixel::tweens::FlxTween_obj::tween(_gthis2, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),_hx_tmp3)
            				->setFixed(1,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)2.5))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
HXLINE(2323)			::flixel::tweens::FlxTween_obj::tween(_gthis->songLogo, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("angle",d3,43,e2,22),2)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(2324)			::flixel::tweens::FlxTween_obj::tween(_gthis->songLogo, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("angle",d3,43,e2,22),-2)),((Float)1.5), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),1)
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())));
HXLINE(2325)			::flixel::tweens::FlxTween_obj::tween(_gthis->songLogo, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("angle",d3,43,e2,22),-15)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)2.5))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2256_startSong)
HXDLIN(2256)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2257)		this->startingSong = false;
HXLINE(2259)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(2261)		::String instPath = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(2262)		bool hardInst = (::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("hard",eb,2e,08,45));
HXLINE(2263)		::String addition = HX_("-hard",98,49,10,2e);
HXDLIN(2263)		if (::hx::IsNull( addition )) {
HXLINE(2263)			addition = HX_("",00,00,00,00);
            		}
HXDLIN(2263)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2263)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2263)		::String path = invalidChars->split(::StringTools_obj::replace(instPath,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2263)		::String songKey = (((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40)) + addition);
HXDLIN(2263)		bool _hx_tmp;
HXDLIN(2263)		if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2263)			_hx_tmp = true;
            		}
            		else {
HXLINE(2263)			_hx_tmp = false;
            		}
HXDLIN(2263)		if (!(_hx_tmp)) {
HXLINE(2264)			hardInst = false;
HXLINE(2265)			::haxe::Log_obj::trace(HX_("cant find hard inst",b0,8c,68,70),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2265,HX_("PlayState",5d,83,c2,46),HX_("startSong",57,9d,4b,05)));
            		}
            		else {
HXLINE(2267)			::haxe::Log_obj::trace(HX_("can find hard inst",84,f4,9e,4f),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2267,HX_("PlayState",5d,83,c2,46),HX_("startSong",57,9d,4b,05)));
            		}
HXLINE(2269)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(2269)		::String song = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2269)		::String suffix;
HXDLIN(2269)		if (hardInst) {
HXLINE(2269)			suffix = HX_("-hard",98,49,10,2e);
            		}
            		else {
HXLINE(2269)			suffix = HX_("",00,00,00,00);
            		}
HXDLIN(2269)		if (::hx::IsNull( suffix )) {
HXLINE(2269)			suffix = HX_("",00,00,00,00);
            		}
HXDLIN(2269)		 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2269)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2269)		::String path1 = invalidChars1->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2269)		::String songKey1 = (((HX_("",00,00,00,00) + hideChars1->split(path1)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40)) + suffix);
HXDLIN(2269)		 ::openfl::media::Sound inst = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey1,null());
HXDLIN(2269)		_hx_tmp1->playMusic(inst,1,false,null());
HXLINE(2270)		::flixel::FlxG_obj::sound->music->looped = false;
HXLINE(2271)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(2272)		 ::PlayState _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2272)		 ::Dynamic _hx_tmp2 =  ::Dynamic(new _hx_Closure_0(_g));
HXDLIN(2272)		::flixel::FlxG_obj::sound->music->onComplete = _hx_tmp2;
HXLINE(2273)		this->vocals->play(null(),null(),null());
HXLINE(2274)		if (this->separateVocals) {
HXLINE(2275)			this->opponentVocals->play(null(),null(),null());
            		}
HXLINE(2277)		if ((::PlayState_obj::startOnTime > 0)) {
HXLINE(2279)			this->setSongTime((::PlayState_obj::startOnTime - ( (Float)(500) )));
            		}
HXLINE(2281)		::PlayState_obj::startOnTime = ( (Float)(0) );
HXLINE(2283)		if (this->paused) {
HXLINE(2285)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(2286)			this->vocals->pause();
HXLINE(2287)			if (this->separateVocals) {
HXLINE(2288)				this->opponentVocals->pause();
            			}
            		}
HXLINE(2292)		this->songLength = ::flixel::FlxG_obj::sound->music->_length;
HXLINE(2293)		::flixel::tweens::FlxTween_obj::tween(this->timeBar, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(2294)		::flixel::tweens::FlxTween_obj::tween(this->timeTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE(2298)		::String _hx_tmp3 = this->detailsText;
HXDLIN(2298)		::String _hx_tmp4 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(2298)		::String _hx_tmp5 = this->iconP2->getCharacter();
HXDLIN(2298)		::DiscordClient_obj::changePresence(_hx_tmp3,_hx_tmp4,_hx_tmp5,true,this->songLength);
HXLINE(2300)		this->setOnLuas(HX_("songLength",9b,3a,8c,fa),this->songLength);
HXLINE(2301)		this->callOnLuas(HX_("onSongStart",2e,9f,c8,d5),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(2303)		int startIntro = ( (int)(::PlayState_obj::SONG->__Field(HX_("introAtStep",6b,35,c5,8f),::hx::paccDynamic)) );
HXLINE(2304)		 ::flixel::util::FlxTimer _hx_tmp6 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(2304)		this->introTimer = _hx_tmp6->start(((( (Float)(startIntro) ) * ::Conductor_obj::stepCrochet) * ((Float)0.001)), ::Dynamic(new _hx_Closure_1(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2333_generateSong)
HXLINE(2335)		 ::Dynamic defaultValue = HX_("multiplicative",96,7a,3f,fa);
HXDLIN(2335)		 ::Dynamic _hx_tmp;
HXDLIN(2335)		if (::PlayState_obj::isStoryMode) {
HXLINE(2335)			_hx_tmp = defaultValue;
            		}
            		else {
HXLINE(2335)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("scrolltype",47,55,ef,1f))) {
HXLINE(2335)				_hx_tmp = ::ClientPrefs_obj::gameplaySettings->get(HX_("scrolltype",47,55,ef,1f));
            			}
            			else {
HXLINE(2335)				_hx_tmp = defaultValue;
            			}
            		}
HXDLIN(2335)		this->songSpeedType = ( (::String)(_hx_tmp) );
HXLINE(2337)		::String _hx_switch_0 = this->songSpeedType;
            		if (  (_hx_switch_0==HX_("constant",64,c1,9d,a5)) ){
HXLINE(2342)			 ::Dynamic defaultValue1 = 1;
HXDLIN(2342)			 ::Dynamic _hx_tmp1;
HXDLIN(2342)			if (::PlayState_obj::isStoryMode) {
HXLINE(2342)				_hx_tmp1 = defaultValue1;
            			}
            			else {
HXLINE(2342)				if (::ClientPrefs_obj::gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(2342)					_hx_tmp1 = ::ClientPrefs_obj::gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            				}
            				else {
HXLINE(2342)					_hx_tmp1 = defaultValue1;
            				}
            			}
HXDLIN(2342)			this->set_songSpeed(( (Float)(_hx_tmp1) ));
HXDLIN(2342)			goto _hx_goto_109;
            		}
            		if (  (_hx_switch_0==HX_("multiplicative",96,7a,3f,fa)) ){
HXLINE(2340)			Float _hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXDLIN(2340)			 ::Dynamic defaultValue2 = 1;
HXDLIN(2340)			 ::Dynamic _hx_tmp3;
HXDLIN(2340)			if (::PlayState_obj::isStoryMode) {
HXLINE(2340)				_hx_tmp3 = defaultValue2;
            			}
            			else {
HXLINE(2340)				if (::ClientPrefs_obj::gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(2340)					_hx_tmp3 = ::ClientPrefs_obj::gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            				}
            				else {
HXLINE(2340)					_hx_tmp3 = defaultValue2;
            				}
            			}
HXDLIN(2340)			this->set_songSpeed((_hx_tmp2 * ( (Float)(_hx_tmp3) )));
HXDLIN(2340)			goto _hx_goto_109;
            		}
            		_hx_goto_109:;
HXLINE(2345)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(2346)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(2348)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(2350)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(2351)			bool hardVocals = (::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("hard",eb,2e,08,45));
HXLINE(2352)			bool foundHardModeVoice = false;
HXLINE(2353)			bool _hx_tmp4;
HXDLIN(2353)			::String song = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2353)			 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2353)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2353)			::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2353)			::String songKey = (((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + HX_("",00,00,00,00));
HXDLIN(2353)			bool _hx_tmp5;
HXDLIN(2353)			if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2353)				_hx_tmp5 = true;
            			}
            			else {
HXLINE(2353)				_hx_tmp5 = false;
            			}
HXDLIN(2353)			if (!(_hx_tmp5)) {
HXLINE(2353)				::String song1 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2353)				::String addition = HX_("-hard",98,49,10,2e);
HXDLIN(2353)				if (::hx::IsNull( addition )) {
HXLINE(2353)					addition = HX_("",00,00,00,00);
            				}
HXDLIN(2353)				 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2353)				 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2353)				::String path1 = invalidChars1->split(::StringTools_obj::replace(song1,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2353)				::String songKey1 = (((HX_("",00,00,00,00) + hideChars1->split(path1)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + addition);
HXDLIN(2353)				if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey1) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2353)					_hx_tmp4 = true;
            				}
            				else {
HXLINE(2353)					_hx_tmp4 = false;
            				}
            			}
            			else {
HXLINE(2353)				_hx_tmp4 = true;
            			}
HXDLIN(2353)			if (_hx_tmp4) {
HXLINE(2354)				if (!(hardVocals)) {
HXLINE(2355)					 ::flixel::sound::FlxSound _hx_tmp6 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(2355)					::String song2 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2355)					 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2355)					 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2355)					::String path2 = invalidChars2->split(::StringTools_obj::replace(song2,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2355)					::String songKey2 = (((HX_("",00,00,00,00) + hideChars2->split(path2)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + HX_("",00,00,00,00));
HXDLIN(2355)					 ::openfl::media::Sound voices = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey2,null());
HXDLIN(2355)					this->vocals = _hx_tmp6->loadEmbedded(voices,null(),null(),null());
HXLINE(2356)					::haxe::Log_obj::trace(HX_("normal voice",f9,ba,32,d0),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2356,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
            				}
            				else {
HXLINE(2357)					bool _hx_tmp7;
HXDLIN(2357)					if (hardVocals) {
HXLINE(2357)						::String song3 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2357)						::String addition1 = HX_("-hard",98,49,10,2e);
HXDLIN(2357)						if (::hx::IsNull( addition1 )) {
HXLINE(2357)							addition1 = HX_("",00,00,00,00);
            						}
HXDLIN(2357)						 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2357)						 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2357)						::String path3 = invalidChars3->split(::StringTools_obj::replace(song3,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2357)						::String songKey3 = (((HX_("",00,00,00,00) + hideChars3->split(path3)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + addition1);
HXDLIN(2357)						if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey3) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2357)							_hx_tmp7 = true;
            						}
            						else {
HXLINE(2357)							_hx_tmp7 = false;
            						}
            					}
            					else {
HXLINE(2357)						_hx_tmp7 = false;
            					}
HXDLIN(2357)					if (_hx_tmp7) {
HXLINE(2358)						 ::flixel::sound::FlxSound _hx_tmp8 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(2358)						::String song4 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2358)						::String suffix = HX_("-hard",98,49,10,2e);
HXDLIN(2358)						if (::hx::IsNull( suffix )) {
HXLINE(2358)							suffix = HX_("",00,00,00,00);
            						}
HXDLIN(2358)						 ::EReg invalidChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2358)						 ::EReg hideChars4 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2358)						::String path4 = invalidChars4->split(::StringTools_obj::replace(song4,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2358)						::String songKey4 = (((HX_("",00,00,00,00) + hideChars4->split(path4)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + suffix);
HXDLIN(2358)						 ::openfl::media::Sound voices1 = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey4,null());
HXDLIN(2358)						this->vocals = _hx_tmp8->loadEmbedded(voices1,null(),null(),null());
HXLINE(2359)						::haxe::Log_obj::trace(HX_("hard voice",bd,62,f5,c8),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2359,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
HXLINE(2360)						foundHardModeVoice = true;
            					}
            					else {
HXLINE(2361)						if (hardVocals) {
HXLINE(2362)							 ::flixel::sound::FlxSound _hx_tmp9 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(2362)							::String song5 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2362)							 ::EReg invalidChars5 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2362)							 ::EReg hideChars5 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2362)							::String path5 = invalidChars5->split(::StringTools_obj::replace(song5,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2362)							::String songKey5 = (((HX_("",00,00,00,00) + hideChars5->split(path5)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + HX_("",00,00,00,00));
HXDLIN(2362)							 ::openfl::media::Sound voices2 = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey5,null());
HXDLIN(2362)							this->vocals = _hx_tmp9->loadEmbedded(voices2,null(),null(),null());
HXLINE(2363)							::haxe::Log_obj::trace(HX_("normal voice 2",4b,47,92,4e),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2363,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
            						}
            					}
            				}
            			}
            			else {
HXLINE(2366)				this->vocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
            			}
HXLINE(2368)			bool _hx_tmp10;
HXDLIN(2368)			if (!(foundHardModeVoice)) {
HXLINE(2368)				::String song6 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2368)				::String addition2 = HX_("-opponent",ca,2e,28,0d);
HXDLIN(2368)				if (::hx::IsNull( addition2 )) {
HXLINE(2368)					addition2 = HX_("",00,00,00,00);
            				}
HXDLIN(2368)				 ::EReg invalidChars6 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2368)				 ::EReg hideChars6 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2368)				::String path6 = invalidChars6->split(::StringTools_obj::replace(song6,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2368)				::String songKey6 = (((HX_("",00,00,00,00) + hideChars6->split(path6)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + addition2);
HXDLIN(2368)				if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey6) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2368)					_hx_tmp10 = true;
            				}
            				else {
HXLINE(2368)					_hx_tmp10 = false;
            				}
            			}
            			else {
HXLINE(2368)				_hx_tmp10 = false;
            			}
HXDLIN(2368)			if (_hx_tmp10) {
HXLINE(2369)				::String song7 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2369)				::String addition3 = HX_("-player",4e,cb,fe,86);
HXDLIN(2369)				if (::hx::IsNull( addition3 )) {
HXLINE(2369)					addition3 = HX_("",00,00,00,00);
            				}
HXDLIN(2369)				 ::EReg invalidChars7 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2369)				 ::EReg hideChars7 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2369)				::String path7 = invalidChars7->split(::StringTools_obj::replace(song7,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2369)				::String songKey7 = (((HX_("",00,00,00,00) + hideChars7->split(path7)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + addition3);
HXDLIN(2369)				bool _hx_tmp11;
HXDLIN(2369)				if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey7) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2369)					_hx_tmp11 = true;
            				}
            				else {
HXLINE(2369)					_hx_tmp11 = false;
            				}
HXDLIN(2369)				if (_hx_tmp11) {
HXLINE(2370)					::haxe::Log_obj::trace(HX_("saperate Voices!!",1e,37,d5,60),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2370,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
HXLINE(2371)					 ::flixel::sound::FlxSound _hx_tmp12 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(2371)					::String song8 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2371)					 ::EReg invalidChars8 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2371)					 ::EReg hideChars8 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2371)					::String path8 = invalidChars8->split(::StringTools_obj::replace(song8,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2371)					::String songKey8 = (((HX_("",00,00,00,00) + hideChars8->split(path8)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices-opponent",ba,94,dd,56)) + HX_("",00,00,00,00));
HXDLIN(2371)					 ::openfl::media::Sound voices3 = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey8,null());
HXDLIN(2371)					this->opponentVocals = _hx_tmp12->loadEmbedded(voices3,null(),null(),null());
HXLINE(2372)					 ::flixel::sound::FlxSound _hx_tmp13 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(2372)					::String song9 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2372)					 ::EReg invalidChars9 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2372)					 ::EReg hideChars9 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2372)					::String path9 = invalidChars9->split(::StringTools_obj::replace(song9,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2372)					::String songKey9 = (((HX_("",00,00,00,00) + hideChars9->split(path9)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices-player",3e,d5,69,58)) + HX_("",00,00,00,00));
HXDLIN(2372)					 ::openfl::media::Sound voices4 = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey9,null());
HXDLIN(2372)					this->vocals = _hx_tmp13->loadEmbedded(voices4,null(),null(),null());
HXLINE(2373)					this->separateVocals = true;
            				}
            			}
HXLINE(2377)			if (hardVocals) {
HXLINE(2378)				bool _hx_tmp14;
HXDLIN(2378)				::String song10 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2378)				::String addition4 = HX_("-opponent-hard",8e,3e,98,9e);
HXDLIN(2378)				if (::hx::IsNull( addition4 )) {
HXLINE(2378)					addition4 = HX_("",00,00,00,00);
            				}
HXDLIN(2378)				 ::EReg invalidChars10 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2378)				 ::EReg hideChars10 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2378)				::String path10 = invalidChars10->split(::StringTools_obj::replace(song10,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2378)				::String songKey10 = (((HX_("",00,00,00,00) + hideChars10->split(path10)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + addition4);
HXDLIN(2378)				bool _hx_tmp15;
HXDLIN(2378)				if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey10) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2378)					_hx_tmp15 = true;
            				}
            				else {
HXLINE(2378)					_hx_tmp15 = false;
            				}
HXDLIN(2378)				if (_hx_tmp15) {
HXLINE(2378)					::String song11 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2378)					::String addition5 = HX_("-player-hard",8a,c3,67,30);
HXDLIN(2378)					if (::hx::IsNull( addition5 )) {
HXLINE(2378)						addition5 = HX_("",00,00,00,00);
            					}
HXDLIN(2378)					 ::EReg invalidChars11 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2378)					 ::EReg hideChars11 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2378)					::String path11 = invalidChars11->split(::StringTools_obj::replace(song11,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2378)					::String songKey11 = (((HX_("",00,00,00,00) + hideChars11->split(path11)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + addition5);
HXDLIN(2378)					bool _hx_tmp16;
HXDLIN(2378)					if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey11) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2378)						_hx_tmp16 = true;
            					}
            					else {
HXLINE(2378)						_hx_tmp16 = false;
            					}
HXDLIN(2378)					_hx_tmp14 = !(_hx_tmp16);
            				}
            				else {
HXLINE(2378)					_hx_tmp14 = true;
            				}
HXDLIN(2378)				if (_hx_tmp14) {
HXLINE(2379)					::haxe::Log_obj::trace(HX_("no hard saperate voices song found ",11,f6,7d,65),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2379,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
HXLINE(2380)					hardVocals = false;
            				}
            				else {
HXLINE(2381)					bool _hx_tmp17;
HXDLIN(2381)					::String song12 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2381)					::String addition6 = HX_("-opponent-hard",8e,3e,98,9e);
HXDLIN(2381)					if (::hx::IsNull( addition6 )) {
HXLINE(2381)						addition6 = HX_("",00,00,00,00);
            					}
HXDLIN(2381)					 ::EReg invalidChars12 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2381)					 ::EReg hideChars12 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2381)					::String path12 = invalidChars12->split(::StringTools_obj::replace(song12,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2381)					::String songKey12 = (((HX_("",00,00,00,00) + hideChars12->split(path12)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + addition6);
HXDLIN(2381)					bool _hx_tmp18;
HXDLIN(2381)					if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey12) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2381)						_hx_tmp18 = true;
            					}
            					else {
HXLINE(2381)						_hx_tmp18 = false;
            					}
HXDLIN(2381)					if (_hx_tmp18) {
HXLINE(2381)						::String song13 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2381)						::String addition7 = HX_("-player-hard",8a,c3,67,30);
HXDLIN(2381)						if (::hx::IsNull( addition7 )) {
HXLINE(2381)							addition7 = HX_("",00,00,00,00);
            						}
HXDLIN(2381)						 ::EReg invalidChars13 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2381)						 ::EReg hideChars13 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2381)						::String path13 = invalidChars13->split(::StringTools_obj::replace(song13,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2381)						::String songKey13 = (((HX_("",00,00,00,00) + hideChars13->split(path13)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + addition7);
HXDLIN(2381)						if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey13) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2381)							_hx_tmp17 = true;
            						}
            						else {
HXLINE(2381)							_hx_tmp17 = false;
            						}
            					}
            					else {
HXLINE(2381)						_hx_tmp17 = false;
            					}
HXDLIN(2381)					if (_hx_tmp17) {
HXLINE(2382)						::haxe::Log_obj::trace(HX_("saperate Hard Mode Voices!!",c6,e9,dd,93),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2382,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
HXLINE(2383)						this->separateVocals = true;
HXLINE(2384)						 ::flixel::sound::FlxSound _hx_tmp19 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(2384)						::String song14 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2384)						::String suffix1 = HX_("-hard",98,49,10,2e);
HXDLIN(2384)						if (::hx::IsNull( suffix1 )) {
HXLINE(2384)							suffix1 = HX_("",00,00,00,00);
            						}
HXDLIN(2384)						 ::EReg invalidChars14 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2384)						 ::EReg hideChars14 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2384)						::String path14 = invalidChars14->split(::StringTools_obj::replace(song14,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2384)						::String songKey14 = (((HX_("",00,00,00,00) + hideChars14->split(path14)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices-opponent",ba,94,dd,56)) + suffix1);
HXDLIN(2384)						 ::openfl::media::Sound voices5 = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey14,null());
HXDLIN(2384)						this->opponentVocals = _hx_tmp19->loadEmbedded(voices5,null(),null(),null());
HXLINE(2385)						 ::flixel::sound::FlxSound _hx_tmp20 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(2385)						::String song15 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2385)						::String suffix2 = HX_("-hard",98,49,10,2e);
HXDLIN(2385)						if (::hx::IsNull( suffix2 )) {
HXLINE(2385)							suffix2 = HX_("",00,00,00,00);
            						}
HXDLIN(2385)						 ::EReg invalidChars15 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2385)						 ::EReg hideChars15 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2385)						::String path15 = invalidChars15->split(::StringTools_obj::replace(song15,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2385)						::String songKey15 = (((HX_("",00,00,00,00) + hideChars15->split(path15)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices-player",3e,d5,69,58)) + suffix2);
HXDLIN(2385)						 ::openfl::media::Sound voices6 = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey15,null());
HXDLIN(2385)						this->vocals = _hx_tmp20->loadEmbedded(voices6,null(),null(),null());
            					}
            				}
            			}
            		}
            		else {
HXLINE(2391)			this->vocals =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(2393)		if (this->separateVocals) {
HXLINE(2394)			this->opponentVocals->set_pitch(this->playbackRate);
HXLINE(2395)			::flixel::FlxG_obj::sound->list->add(this->opponentVocals).StaticCast<  ::flixel::sound::FlxSound >();
            		}
HXLINE(2397)		this->vocals->set_pitch(this->playbackRate);
HXLINE(2398)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(2400)		bool hardInst = (::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("hard",eb,2e,08,45));
HXLINE(2401)		bool _hx_tmp21;
HXDLIN(2401)		if (hardInst) {
HXLINE(2401)			::String song16 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2401)			::String addition8 = HX_("-hard",98,49,10,2e);
HXDLIN(2401)			if (::hx::IsNull( addition8 )) {
HXLINE(2401)				addition8 = HX_("",00,00,00,00);
            			}
HXDLIN(2401)			 ::EReg invalidChars16 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2401)			 ::EReg hideChars16 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2401)			::String path16 = invalidChars16->split(::StringTools_obj::replace(song16,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2401)			::String songKey16 = (((HX_("",00,00,00,00) + hideChars16->split(path16)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40)) + addition8);
HXDLIN(2401)			bool _hx_tmp22;
HXDLIN(2401)			if (::sys::FileSystem_obj::exists(::Paths_obj::getPath((((HX_("songs/",71,e7,88,2d) + songKey16) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("SOUND",af,c4,ba,fe),null()))) {
HXLINE(2401)				_hx_tmp22 = true;
            			}
            			else {
HXLINE(2401)				_hx_tmp22 = false;
            			}
HXDLIN(2401)			_hx_tmp21 = !(_hx_tmp22);
            		}
            		else {
HXLINE(2401)			_hx_tmp21 = false;
            		}
HXDLIN(2401)		if (_hx_tmp21) {
HXLINE(2402)			 ::Dynamic _hx_tmp23 = ::haxe::Log_obj::trace;
HXDLIN(2402)			::String path17 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2402)			 ::EReg invalidChars17 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2402)			 ::EReg hideChars17 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2402)			::String path18 = invalidChars17->split(::StringTools_obj::replace(path17,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2402)			::String _hx_tmp24 = (HX_("no hard song found ",93,9e,18,28) + ((HX_("",00,00,00,00) + hideChars17->split(path18)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst-hard",e3,79,ca,45)));
HXDLIN(2402)			_hx_tmp23(_hx_tmp24,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2402,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
HXLINE(2403)			hardInst = false;
            		}
            		else {
HXLINE(2405)			::haxe::Log_obj::trace(HX_("hard song inst",7c,ca,a3,7a),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2405,HX_("PlayState",5d,83,c2,46),HX_("generateSong",aa,ed,2b,1f)));
            		}
HXLINE(2408)		 ::flixel::group::FlxTypedGroup _hx_tmp25 = ::flixel::FlxG_obj::sound->list;
HXDLIN(2408)		 ::flixel::sound::FlxSound _hx_tmp26 =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(2408)		::String song17 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2408)		::String suffix3;
HXDLIN(2408)		if (hardInst) {
HXLINE(2408)			suffix3 = HX_("-hard",98,49,10,2e);
            		}
            		else {
HXLINE(2408)			suffix3 = HX_("",00,00,00,00);
            		}
HXDLIN(2408)		if (::hx::IsNull( suffix3 )) {
HXLINE(2408)			suffix3 = HX_("",00,00,00,00);
            		}
HXDLIN(2408)		 ::EReg invalidChars18 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2408)		 ::EReg hideChars18 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2408)		::String path19 = invalidChars18->split(::StringTools_obj::replace(song17,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2408)		::String songKey17 = (((HX_("",00,00,00,00) + hideChars18->split(path19)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40)) + suffix3);
HXDLIN(2408)		 ::openfl::media::Sound inst = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey17,null());
HXDLIN(2408)		_hx_tmp25->add(_hx_tmp26->loadEmbedded(inst,null(),null(),null())).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE(2410)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(2411)		this->add(this->notes);
HXLINE(2412)		this->add(this->grpNoteHoldSplashes);
HXLINE(2414)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(2419)		int playerCounter = 0;
HXLINE(2421)		int daBeats = 0;
HXLINE(2423)		::String path20 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2423)		 ::EReg invalidChars19 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2423)		 ::EReg hideChars19 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2423)		::String path21 = invalidChars19->split(::StringTools_obj::replace(path20,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2423)		::String songName = hideChars19->split(path21)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE(2424)		::String library = null();
HXDLIN(2424)		::String file = ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (songName + HX_("/events",88,1c,db,38))) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library);
HXLINE(2426)		bool _hx_tmp27;
HXDLIN(2426)		if (!(::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("data/",c5,0e,88,d4) + (songName + HX_("/events",88,1c,db,38))) + HX_(".json",56,f1,d6,c2)))))) {
HXLINE(2426)			_hx_tmp27 = ::sys::FileSystem_obj::exists(file);
            		}
            		else {
HXLINE(2426)			_hx_tmp27 = true;
            		}
HXDLIN(2426)		if (_hx_tmp27) {
HXLINE(2430)			::cpp::VirtualArray eventsData = ( (::cpp::VirtualArray)(::Song_obj::loadFromJson(HX_("events",19,4f,6a,96),songName)->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXLINE(2431)			{
HXLINE(2431)				int _g = 0;
HXDLIN(2431)				while((_g < eventsData->get_length())){
HXLINE(2431)					 ::Dynamic event = eventsData->__get(_g);
HXDLIN(2431)					_g = (_g + 1);
HXLINE(2433)					{
HXLINE(2433)						int _g1 = 0;
HXDLIN(2433)						int _g2 = ( (int)(event->__GetItem(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(2433)						while((_g1 < _g2)){
HXLINE(2433)							_g1 = (_g1 + 1);
HXDLIN(2433)							int i = (_g1 - 1);
HXLINE(2435)							 ::Dynamic newEventNote_0 = event->__GetItem(0);
HXDLIN(2435)							 ::Dynamic newEventNote_1 = event->__GetItem(1)->__GetItem(i)->__GetItem(0);
HXDLIN(2435)							 ::Dynamic newEventNote_2 = event->__GetItem(1)->__GetItem(i)->__GetItem(1);
HXDLIN(2435)							 ::Dynamic newEventNote_3 = event->__GetItem(1)->__GetItem(i)->__GetItem(2);
HXLINE(2436)							 ::Dynamic subEvent =  ::Dynamic(::hx::Anon_obj::Create(4)
            								->setFixed(0,HX_("strumTime",f6,2d,21,f4),( (Float)((newEventNote_0 + ::ClientPrefs_obj::noteOffset)) ))
            								->setFixed(1,HX_("value1",a0,03,b7,4f),( (::String)(newEventNote_2) ))
            								->setFixed(2,HX_("value2",a1,03,b7,4f),( (::String)(newEventNote_3) ))
            								->setFixed(3,HX_("event",1a,c8,c4,75),( (::String)(newEventNote_1) )));
HXLINE(2442)							 ::Dynamic subEvent1 = subEvent;
HXDLIN(2442)							Float subEvent2 = ( (Float)(subEvent1->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN(2442)							subEvent1->__SetField(HX_("strumTime",f6,2d,21,f4),(subEvent2 - this->eventNoteEarlyTrigger(subEvent)),::hx::paccDynamic);
HXLINE(2443)							this->eventNotes->push(subEvent);
HXLINE(2444)							this->eventPushed(subEvent);
            						}
            					}
            				}
            			}
            		}
HXLINE(2449)		this->VOCALS = this->vocalsSetup();
HXLINE(2452)		if (this->useModchart) {
HXLINE(2454)			this->notesToSpawn[0] = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2454)			this->notesToSpawn[1] = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2454)			this->notesToSpawn[2] = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(2454)			this->notesToSpawn[3] = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(2456)		{
HXLINE(2456)			int _g3 = 0;
HXDLIN(2456)			while((_g3 < noteData->length)){
HXLINE(2456)				 ::Dynamic section = noteData->__get(_g3);
HXDLIN(2456)				_g3 = (_g3 + 1);
HXLINE(2458)				{
HXLINE(2458)					int _g4 = 0;
HXDLIN(2458)					::cpp::VirtualArray _g5 = ( (::cpp::VirtualArray)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2458)					while((_g4 < _g5->get_length())){
HXLINE(2458)						 ::Dynamic songNotes = _g5->__get(_g4);
HXDLIN(2458)						_g4 = (_g4 + 1);
HXLINE(2460)						Float daStrumTime = ( (Float)(songNotes->__GetItem(0)) );
HXLINE(2461)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__GetItem(1),4));
HXLINE(2463)						bool gottaHitNote = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(2465)						if (::hx::IsGreater( songNotes->__GetItem(1),3 )) {
HXLINE(2467)							gottaHitNote = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            						}
HXLINE(2470)						 ::Note oldNote;
HXLINE(2471)						if ((this->unspawnNotes->length > 0)) {
HXLINE(2472)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(2474)							oldNote = null();
            						}
HXLINE(2476)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,null(),null());
HXLINE(2477)						swagNote->mustPress = gottaHitNote;
HXLINE(2478)						swagNote->sustainLength = ( (Float)(songNotes->__GetItem(2)) );
HXLINE(2479)						bool _hx_tmp28;
HXDLIN(2479)						if (( (bool)(section->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) )) {
HXLINE(2479)							_hx_tmp28 = ::hx::IsLess( songNotes->__GetItem(1),4 );
            						}
            						else {
HXLINE(2479)							_hx_tmp28 = false;
            						}
HXDLIN(2479)						swagNote->gfNote = _hx_tmp28;
HXLINE(2480)						swagNote->set_noteType(( (::String)(songNotes->__GetItem(3)) ));
HXLINE(2481)						if (!(::Std_obj::isOfType(songNotes->__GetItem(3),::hx::ClassOf< ::String >()))) {
HXLINE(2481)							swagNote->set_noteType(::editors::ChartingState_obj::noteTypeList->__get(( (int)(songNotes->__GetItem(3)) )));
            						}
HXLINE(2482)						{
HXLINE(2482)							 ::flixel::math::FlxBasePoint this1 = swagNote->scrollFactor;
HXDLIN(2482)							this1->set_x(( (Float)(0) ));
HXDLIN(2482)							this1->set_y(( (Float)(0) ));
            						}
HXLINE(2484)						int repeatCount = 0;
HXLINE(2485)						int singData = -1;
HXLINE(2486)						{
HXLINE(2486)							int _g6 = 0;
HXDLIN(2486)							::Array< ::Dynamic> _g7 = this->VOCALS;
HXDLIN(2486)							while((_g6 < _g7->length)){
HXLINE(2486)								 ::Dynamic item = _g7->__get(_g6);
HXDLIN(2486)								_g6 = (_g6 + 1);
HXLINE(2487)								if (::hx::IsGreaterEq( item->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic),daStrumTime )) {
HXLINE(2488)									singData = ::hx::Mod(item->__Field(HX_("data",2a,56,63,42),::hx::paccDynamic),4);
HXLINE(2489)									goto _hx_goto_114;
            								}
            							}
            							_hx_goto_114:;
            						}
HXLINE(2492)						swagNote->singData = singData;
HXLINE(2493)						Float susLength = swagNote->sustainLength;
HXLINE(2495)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(2496)						this->unspawnNotes->push(swagNote);
HXLINE(2498)						if (this->useModchart) {
HXLINE(2499)							if (::hx::IsNull( this->notesToSpawn->__get(swagNote->noteData).StaticCast< ::Array< ::Dynamic> >() )) {
HXLINE(2500)								this->notesToSpawn[swagNote->noteData] = ::Array_obj< ::Dynamic>::__new(0);
            							}
HXLINE(2502)							this->notesToSpawn->__get(swagNote->noteData).StaticCast< ::Array< ::Dynamic> >()->push(swagNote);
            						}
HXLINE(2506)						int floorSus = ::Math_obj::floor(susLength);
HXLINE(2507)						if ((floorSus > 0)) {
HXLINE(2508)							int _g8 = 0;
HXDLIN(2508)							int _g9 = (floorSus + 1);
HXDLIN(2508)							while((_g8 < _g9)){
HXLINE(2508)								_g8 = (_g8 + 1);
HXDLIN(2508)								int susNote = (_g8 - 1);
HXLINE(2510)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(2512)								Float sustainNote = (daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) )));
HXDLIN(2512)								Float sustainNote1 = ::Conductor_obj::stepCrochet;
HXDLIN(2512)								 ::Note sustainNote2 =  ::Note_obj::__alloc( HX_CTX ,(sustainNote + (sustainNote1 / ::flixel::math::FlxMath_obj::roundDecimal(this->songSpeed,2))),daNoteData,oldNote,true,null());
HXLINE(2513)								sustainNote2->mustPress = gottaHitNote;
HXLINE(2514)								bool _hx_tmp29;
HXDLIN(2514)								if (( (bool)(section->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) )) {
HXLINE(2514)									_hx_tmp29 = ::hx::IsLess( songNotes->__GetItem(1),4 );
            								}
            								else {
HXLINE(2514)									_hx_tmp29 = false;
            								}
HXDLIN(2514)								sustainNote2->gfNote = _hx_tmp29;
HXLINE(2515)								sustainNote2->set_noteType(swagNote->noteType);
HXLINE(2516)								{
HXLINE(2516)									 ::flixel::math::FlxBasePoint this2 = sustainNote2->scrollFactor;
HXDLIN(2516)									this2->set_x(( (Float)(0) ));
HXDLIN(2516)									this2->set_y(( (Float)(0) ));
            								}
HXLINE(2517)								swagNote->tail->push(sustainNote2);
HXLINE(2518)								sustainNote2->parent = swagNote;
HXLINE(2519)								sustainNote2->singData = singData;
HXLINE(2520)								this->unspawnNotes->push(sustainNote2);
HXLINE(2522)								if (this->useModchart) {
HXLINE(2523)									this->notesToSpawn->__get(swagNote->noteData).StaticCast< ::Array< ::Dynamic> >()->push(sustainNote2);
            								}
HXLINE(2526)								if (sustainNote2->mustPress) {
HXLINE(2528)									sustainNote2->set_x((sustainNote2->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
            								else {
HXLINE(2530)									if (::ClientPrefs_obj::middleScroll) {
HXLINE(2532)										sustainNote2->set_x((sustainNote2->x + 310));
HXLINE(2533)										if ((daNoteData > 1)) {
HXLINE(2535)											sustainNote2->set_x((sustainNote2->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            										}
            									}
            								}
            							}
            						}
HXLINE(2541)						if (swagNote->mustPress) {
HXLINE(2543)							swagNote->set_x((swagNote->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            						else {
HXLINE(2545)							if (::ClientPrefs_obj::middleScroll) {
HXLINE(2547)								swagNote->set_x((swagNote->x + 310));
HXLINE(2548)								if ((daNoteData > 1)) {
HXLINE(2550)									swagNote->set_x((swagNote->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            								}
            							}
            						}
HXLINE(2554)						if (!(this->noteTypeMap->exists(swagNote->noteType))) {
HXLINE(2555)							this->noteTypeMap->set(swagNote->noteType,true);
            						}
            					}
            				}
HXLINE(2558)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(2560)		{
HXLINE(2560)			int _g10 = 0;
HXDLIN(2560)			::cpp::VirtualArray _g11 = ( (::cpp::VirtualArray)(songData->__Field(HX_("events",19,4f,6a,96),::hx::paccDynamic)) );
HXDLIN(2560)			while((_g10 < _g11->get_length())){
HXLINE(2560)				 ::Dynamic event1 = _g11->__get(_g10);
HXDLIN(2560)				_g10 = (_g10 + 1);
HXLINE(2562)				{
HXLINE(2562)					int _g12 = 0;
HXDLIN(2562)					int _g13 = ( (int)(event1->__GetItem(1)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(2562)					while((_g12 < _g13)){
HXLINE(2562)						_g12 = (_g12 + 1);
HXDLIN(2562)						int i1 = (_g12 - 1);
HXLINE(2564)						 ::Dynamic newEventNote_01 = event1->__GetItem(0);
HXDLIN(2564)						 ::Dynamic newEventNote_11 = event1->__GetItem(1)->__GetItem(i1)->__GetItem(0);
HXDLIN(2564)						 ::Dynamic newEventNote_21 = event1->__GetItem(1)->__GetItem(i1)->__GetItem(1);
HXDLIN(2564)						 ::Dynamic newEventNote_31 = event1->__GetItem(1)->__GetItem(i1)->__GetItem(2);
HXLINE(2565)						 ::Dynamic subEvent3 =  ::Dynamic(::hx::Anon_obj::Create(4)
            							->setFixed(0,HX_("strumTime",f6,2d,21,f4),( (Float)((newEventNote_01 + ::ClientPrefs_obj::noteOffset)) ))
            							->setFixed(1,HX_("value1",a0,03,b7,4f),( (::String)(newEventNote_21) ))
            							->setFixed(2,HX_("value2",a1,03,b7,4f),( (::String)(newEventNote_31) ))
            							->setFixed(3,HX_("event",1a,c8,c4,75),( (::String)(newEventNote_11) )));
HXLINE(2571)						 ::Dynamic subEvent4 = subEvent3;
HXDLIN(2571)						Float subEvent5 = ( (Float)(subEvent4->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN(2571)						subEvent4->__SetField(HX_("strumTime",f6,2d,21,f4),(subEvent5 - this->eventNoteEarlyTrigger(subEvent3)),::hx::paccDynamic);
HXLINE(2572)						this->eventNotes->push(subEvent3);
HXLINE(2573)						this->eventPushed(subEvent3);
            					}
            				}
            			}
            		}
HXLINE(2580)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(2581)		if ((this->eventNotes->length > 1)) {
HXLINE(2582)			this->eventNotes->sort(this->sortByTime_dyn());
            		}
HXLINE(2584)		this->checkEventNote();
HXLINE(2585)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

void PlayState_obj::eventPushed( ::Dynamic event){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2588_eventPushed)
HXLINE(2589)		::String _hx_switch_0 = ( (::String)(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("Change Character",f9,50,ef,9c)) ){
HXLINE(2591)			int charType = 0;
HXLINE(2592)			::String _hx_switch_1 = ( (::String)(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) ).toLowerCase();
            			if (  (_hx_switch_1==HX_("0",30,00,00,00)) ||  (_hx_switch_1==HX_("dad",47,36,4c,00)) ||  (_hx_switch_1==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(2596)				charType = 1;
HXDLIN(2596)				goto _hx_goto_120;
            			}
            			if (  (_hx_switch_1==HX_("1",31,00,00,00)) ||  (_hx_switch_1==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_1==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2594)				charType = 2;
HXDLIN(2594)				goto _hx_goto_120;
            			}
            			/* default */{
HXLINE(2598)				charType = ( (int)(::Std_obj::parseInt(( (::String)(event->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) ))) );
HXLINE(2599)				if (::Math_obj::isNaN(( (Float)(charType) ))) {
HXLINE(2599)					charType = 0;
            				}
            			}
            			_hx_goto_120:;
HXLINE(2602)			::String newCharacter = ( (::String)(event->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)) );
HXLINE(2603)			this->addCharacterToList(newCharacter,charType);
HXLINE(2590)			goto _hx_goto_119;
            		}
            		if (  (_hx_switch_0==HX_("Dadbattle Spotlight",b3,45,78,e2)) ){
HXLINE(2606)			this->dadbattleBlack =  ::BGSprite_obj::__alloc( HX_CTX ,null(),-800,-400,0,0,null(),null());
HXLINE(2607)			 ::BGSprite _hx_tmp = this->dadbattleBlack;
HXDLIN(2607)			int _hx_tmp1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(2607)			_hx_tmp->makeGraphic(_hx_tmp1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(2608)			this->dadbattleBlack->set_alpha(((Float)0.25));
HXLINE(2609)			this->dadbattleBlack->set_visible(false);
HXLINE(2610)			this->add(this->dadbattleBlack);
HXLINE(2612)			this->dadbattleLight =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("stage/spotlight",c3,88,a8,d1),400,-400,null(),null(),null(),null());
HXLINE(2613)			this->dadbattleLight->set_alpha(((Float)0.375));
HXLINE(2614)			this->dadbattleLight->set_blend(0);
HXLINE(2615)			this->dadbattleLight->set_visible(false);
HXLINE(2617)			this->dadbattleSmokes->set_alpha(((Float)0.7));
HXLINE(2618)			this->dadbattleSmokes->set_blend(0);
HXLINE(2619)			this->dadbattleSmokes->set_visible(false);
HXLINE(2620)			this->add(this->dadbattleLight);
HXLINE(2621)			this->add(this->dadbattleSmokes);
HXLINE(2623)			int offsetX = 200;
HXLINE(2624)			 ::BGSprite smoke =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("stage/smoke",1e,92,a0,a8),(-1550 + offsetX),(660 + ::flixel::FlxG_obj::random->_hx_float(-20,20,null())),((Float)1.2),((Float)1.05),null(),null());
HXLINE(2625)			Float _hx_tmp2 = smoke->get_width();
HXDLIN(2625)			smoke->setGraphicSize(::Std_obj::_hx_int((_hx_tmp2 * ::flixel::FlxG_obj::random->_hx_float(((Float)1.1),((Float)1.22),null()))),null());
HXLINE(2626)			smoke->updateHitbox();
HXLINE(2627)			{
HXLINE(2627)				 ::flixel::math::FlxBasePoint this1 = smoke->velocity;
HXDLIN(2627)				this1->set_x(::flixel::FlxG_obj::random->_hx_float(15,22,null()));
            			}
HXLINE(2628)			smoke->set_active(true);
HXLINE(2629)			this->dadbattleSmokes->add(smoke).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2630)			 ::BGSprite smoke1 =  ::BGSprite_obj::__alloc( HX_CTX ,HX_("stage/smoke",1e,92,a0,a8),(1550 + offsetX),(660 + ::flixel::FlxG_obj::random->_hx_float(-20,20,null())),((Float)1.2),((Float)1.05),null(),null());
HXLINE(2631)			Float _hx_tmp3 = smoke1->get_width();
HXDLIN(2631)			smoke1->setGraphicSize(::Std_obj::_hx_int((_hx_tmp3 * ::flixel::FlxG_obj::random->_hx_float(((Float)1.1),((Float)1.22),null()))),null());
HXLINE(2632)			smoke1->updateHitbox();
HXLINE(2633)			{
HXLINE(2633)				 ::flixel::math::FlxBasePoint this2 = smoke1->velocity;
HXDLIN(2633)				this2->set_x(::flixel::FlxG_obj::random->_hx_float(-15,-22,null()));
            			}
HXLINE(2634)			smoke1->set_active(true);
HXLINE(2635)			smoke1->set_flipX(true);
HXLINE(2636)			this->dadbattleSmokes->add(smoke1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(2605)			goto _hx_goto_119;
            		}
            		_hx_goto_119:;
HXLINE(2639)		if (!(this->eventPushedMap->exists(( (::String)(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)) )))) {
HXLINE(2640)			this->eventPushedMap->set(( (::String)(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)) ),true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,eventPushed,(void))

Float PlayState_obj::eventNoteEarlyTrigger( ::Dynamic event){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2644_eventNoteEarlyTrigger)
HXLINE(2645)		Float returnedValue = ( (Float)(this->callOnLuas(HX_("eventEarlyTrigger",0f,d2,46,ab),::cpp::VirtualArray_obj::__new(1)->init(0, ::Dynamic(event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic))),null(),null())) );
HXLINE(2646)		if ((returnedValue != 0)) {
HXLINE(2647)			return returnedValue;
            		}
HXLINE(2650)		if (::hx::IsEq( event->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic),HX_("Kill Henchmen",e2,fc,7b,01) )) {
HXLINE(2652)			return ( (Float)(280) );
            		}
HXLINE(2654)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,eventNoteEarlyTrigger,return )

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2659_sortByShit)
HXDLIN(2659)		Float Value1 = Obj1->strumTime;
HXDLIN(2659)		Float Value2 = Obj2->strumTime;
HXDLIN(2659)		int result = 0;
HXDLIN(2659)		if ((Value1 < Value2)) {
HXDLIN(2659)			result = -1;
            		}
            		else {
HXDLIN(2659)			if ((Value1 > Value2)) {
HXDLIN(2659)				result = 1;
            			}
            		}
HXDLIN(2659)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

int PlayState_obj::sortByOrderNote(int wat, ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2665_sortByOrderNote)
HXDLIN(2665)		Float Value1 = Obj1->zIndex;
HXDLIN(2665)		Float Value2 = Obj2->zIndex;
HXDLIN(2665)		int result = 0;
HXDLIN(2665)		if ((Value1 < Value2)) {
HXDLIN(2665)			result = -1;
            		}
            		else {
HXDLIN(2665)			if ((Value1 > Value2)) {
HXDLIN(2665)				result = 1;
            			}
            		}
HXDLIN(2665)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,sortByOrderNote,return )

int PlayState_obj::sortByOrderStrumNote(int wat, ::StrumNote Obj1, ::StrumNote Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2670_sortByOrderStrumNote)
HXDLIN(2670)		Float Value1 = Obj1->zIndex;
HXDLIN(2670)		Float Value2 = Obj2->zIndex;
HXDLIN(2670)		int result = 0;
HXDLIN(2670)		if ((Value1 < Value2)) {
HXDLIN(2670)			result = 1;
            		}
            		else {
HXDLIN(2670)			if ((Value1 > Value2)) {
HXDLIN(2670)				result = -1;
            			}
            		}
HXDLIN(2670)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,sortByOrderStrumNote,return )

int PlayState_obj::sortByTime( ::Dynamic Obj1, ::Dynamic Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2676_sortByTime)
HXDLIN(2676)		Float Value1 = ( (Float)(Obj1->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN(2676)		Float Value2 = ( (Float)(Obj2->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXDLIN(2676)		int result = 0;
HXDLIN(2676)		if ((Value1 < Value2)) {
HXDLIN(2676)			result = -1;
            		}
            		else {
HXDLIN(2676)			if ((Value1 > Value2)) {
HXDLIN(2676)				result = 1;
            			}
            		}
HXDLIN(2676)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByTime,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2682_generateStaticArrows)
HXDLIN(2682)		int _g = 0;
HXDLIN(2682)		while((_g < 4)){
HXDLIN(2682)			_g = (_g + 1);
HXDLIN(2682)			int i = (_g - 1);
HXLINE(2685)			Float targetAlpha = ( (Float)(1) );
HXLINE(2686)			if ((player < 1)) {
HXLINE(2688)				if (!(::ClientPrefs_obj::opponentStrums)) {
HXLINE(2688)					targetAlpha = ( (Float)(0) );
            				}
            				else {
HXLINE(2689)					if (::ClientPrefs_obj::middleScroll) {
HXLINE(2689)						targetAlpha = ((Float)0.35);
            					}
            				}
            			}
HXLINE(2692)			Float babyArrow;
HXDLIN(2692)			if (::ClientPrefs_obj::middleScroll) {
HXLINE(2692)				babyArrow = ( (Float)(::PlayState_obj::STRUM_X_MIDDLESCROLL) );
            			}
            			else {
HXLINE(2692)				babyArrow = ( (Float)(::PlayState_obj::STRUM_X) );
            			}
HXDLIN(2692)			 ::StrumNote babyArrow1 =  ::StrumNote_obj::__alloc( HX_CTX ,babyArrow,this->strumLine->y,i,player);
HXLINE(2693)			babyArrow1->downScroll = ::ClientPrefs_obj::downScroll;
HXLINE(2694)			bool _hx_tmp;
HXDLIN(2694)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(2694)				_hx_tmp = !(this->skipArrowStartTween);
            			}
            			else {
HXLINE(2694)				_hx_tmp = false;
            			}
HXDLIN(2694)			if (_hx_tmp) {
HXLINE(2697)				babyArrow1->set_alpha(( (Float)(0) ));
HXLINE(2698)				::flixel::tweens::FlxTween_obj::tween(babyArrow1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),targetAlpha)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            			}
            			else {
HXLINE(2702)				babyArrow1->set_alpha(targetAlpha);
            			}
HXLINE(2705)			if ((player == 1)) {
HXLINE(2707)				this->playerStrums->add(babyArrow1).StaticCast<  ::StrumNote >();
            			}
            			else {
HXLINE(2711)				if (::ClientPrefs_obj::middleScroll) {
HXLINE(2713)					babyArrow1->set_x((babyArrow1->x + 310));
HXLINE(2714)					if ((i > 1)) {
HXLINE(2715)						babyArrow1->set_x((babyArrow1->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 25)));
            					}
            				}
HXLINE(2718)				this->opponentStrums->add(babyArrow1).StaticCast<  ::StrumNote >();
            			}
HXLINE(2721)			this->strumLineNotes->add(babyArrow1).StaticCast<  ::StrumNote >();
HXLINE(2722)			babyArrow1->postAddedToGroup();
HXLINE(2723)			babyArrow1->defaultPosition = babyArrow1->getPosition(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2728_openSubState)
HXLINE(2729)		if (this->paused) {
HXLINE(2731)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2733)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2734)				if (this->separateVocals) {
HXLINE(2735)					this->opponentVocals->pause();
            				}
HXLINE(2736)				this->vocals->pause();
            			}
HXLINE(2739)			bool _hx_tmp;
HXDLIN(2739)			if (::hx::IsNotNull( this->startTimer )) {
HXLINE(2739)				_hx_tmp = !(this->startTimer->finished);
            			}
            			else {
HXLINE(2739)				_hx_tmp = false;
            			}
HXDLIN(2739)			if (_hx_tmp) {
HXLINE(2740)				this->startTimer->active = false;
            			}
HXLINE(2741)			bool _hx_tmp1;
HXDLIN(2741)			if (::hx::IsNotNull( this->finishTimer )) {
HXLINE(2741)				_hx_tmp1 = !(this->finishTimer->finished);
            			}
            			else {
HXLINE(2741)				_hx_tmp1 = false;
            			}
HXDLIN(2741)			if (_hx_tmp1) {
HXLINE(2742)				this->finishTimer->active = false;
            			}
HXLINE(2743)			if (::hx::IsNotNull( this->songSpeedTween )) {
HXLINE(2744)				this->songSpeedTween->set_active(false);
            			}
HXLINE(2746)			if (::hx::IsNotNull( this->discordChannels )) {
HXLINE(2747)				if (::hx::IsNotNull( this->discordChannels->beatTween )) {
HXLINE(2748)					this->discordChannels->beatTween->set_active(false);
            				}
HXLINE(2749)				if (::hx::IsNotNull( this->discordChannels->scrollTween )) {
HXLINE(2750)					this->discordChannels->scrollTween->set_active(false);
            				}
            			}
HXLINE(2753)			if (::hx::IsNotNull( this->discordMembers )) {
HXLINE(2754)				if (::hx::IsNotNull( this->discordMembers->beatTween )) {
HXLINE(2755)					this->discordMembers->beatTween->set_active(false);
            				}
HXLINE(2756)				if (::hx::IsNotNull( this->discordMembers->scrollTween )) {
HXLINE(2757)					this->discordMembers->scrollTween->set_active(false);
            				}
            			}
HXLINE(2760)			::Array< ::Dynamic> chars = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->boyfriend)->init(1,this->gf)->init(2,this->dad);
HXLINE(2761)			{
HXLINE(2761)				int _g = 0;
HXDLIN(2761)				while((_g < chars->length)){
HXLINE(2761)					 ::Character _hx_char = chars->__get(_g).StaticCast<  ::Character >();
HXDLIN(2761)					_g = (_g + 1);
HXLINE(2762)					bool _hx_tmp2;
HXDLIN(2762)					if (::hx::IsNotNull( _hx_char )) {
HXLINE(2762)						_hx_tmp2 = ::hx::IsNotNull( _hx_char->colorTween );
            					}
            					else {
HXLINE(2762)						_hx_tmp2 = false;
            					}
HXDLIN(2762)					if (_hx_tmp2) {
HXLINE(2763)						_hx_char->colorTween->set_active(false);
            					}
            				}
            			}
HXLINE(2767)			{
HXLINE(2767)				 ::Dynamic tween = this->modchartTweens->iterator();
HXDLIN(2767)				while(( (bool)(tween->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2767)					 ::flixel::tweens::FlxTween tween1 = ( ( ::flixel::tweens::FlxTween)(tween->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2768)					tween1->set_active(false);
            				}
            			}
HXLINE(2770)			{
HXLINE(2770)				 ::Dynamic timer = this->modchartTimers->iterator();
HXDLIN(2770)				while(( (bool)(timer->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2770)					 ::flixel::util::FlxTimer timer1 = ( ( ::flixel::util::FlxTimer)(timer->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2771)					timer1->active = false;
            				}
            			}
HXLINE(2774)			if (::hx::IsNotNull( this->comboSprTween )) {
HXLINE(2774)				this->comboSprTween->set_active(false);
            			}
HXLINE(2776)			if (::hx::IsNotNull( this->introTimer )) {
HXLINE(2776)				this->introTimer->active = false;
            			}
            		}
HXLINE(2779)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2783_closeSubState)
HXLINE(2784)		if (this->paused) {
HXLINE(2786)			bool _hx_tmp;
HXDLIN(2786)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2786)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(2786)				_hx_tmp = false;
            			}
HXDLIN(2786)			if (_hx_tmp) {
HXLINE(2788)				this->resyncVocals();
            			}
HXLINE(2791)			bool _hx_tmp1;
HXDLIN(2791)			if (::hx::IsNotNull( this->startTimer )) {
HXLINE(2791)				_hx_tmp1 = !(this->startTimer->finished);
            			}
            			else {
HXLINE(2791)				_hx_tmp1 = false;
            			}
HXDLIN(2791)			if (_hx_tmp1) {
HXLINE(2792)				this->startTimer->active = true;
            			}
HXLINE(2793)			bool _hx_tmp2;
HXDLIN(2793)			if (::hx::IsNotNull( this->finishTimer )) {
HXLINE(2793)				_hx_tmp2 = !(this->finishTimer->finished);
            			}
            			else {
HXLINE(2793)				_hx_tmp2 = false;
            			}
HXDLIN(2793)			if (_hx_tmp2) {
HXLINE(2794)				this->finishTimer->active = true;
            			}
HXLINE(2795)			if (::hx::IsNotNull( this->songSpeedTween )) {
HXLINE(2796)				this->songSpeedTween->set_active(true);
            			}
HXLINE(2798)			if (::hx::IsNotNull( this->discordChannels )) {
HXLINE(2799)				if (::hx::IsNotNull( this->discordChannels->beatTween )) {
HXLINE(2800)					this->discordChannels->beatTween->set_active(true);
            				}
HXLINE(2801)				if (::hx::IsNotNull( this->discordChannels->scrollTween )) {
HXLINE(2802)					this->discordChannels->scrollTween->set_active(true);
            				}
            			}
HXLINE(2805)			if (::hx::IsNotNull( this->discordMembers )) {
HXLINE(2806)				if (::hx::IsNotNull( this->discordMembers->beatTween )) {
HXLINE(2807)					this->discordMembers->beatTween->set_active(true);
            				}
HXLINE(2808)				if (::hx::IsNotNull( this->discordMembers->scrollTween )) {
HXLINE(2809)					this->discordMembers->scrollTween->set_active(true);
            				}
            			}
HXLINE(2812)			::Array< ::Dynamic> chars = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->boyfriend)->init(1,this->gf)->init(2,this->dad);
HXLINE(2813)			{
HXLINE(2813)				int _g = 0;
HXDLIN(2813)				while((_g < chars->length)){
HXLINE(2813)					 ::Character _hx_char = chars->__get(_g).StaticCast<  ::Character >();
HXDLIN(2813)					_g = (_g + 1);
HXLINE(2814)					bool _hx_tmp3;
HXDLIN(2814)					if (::hx::IsNotNull( _hx_char )) {
HXLINE(2814)						_hx_tmp3 = ::hx::IsNotNull( _hx_char->colorTween );
            					}
            					else {
HXLINE(2814)						_hx_tmp3 = false;
            					}
HXDLIN(2814)					if (_hx_tmp3) {
HXLINE(2815)						_hx_char->colorTween->set_active(true);
            					}
            				}
            			}
HXLINE(2819)			{
HXLINE(2819)				 ::Dynamic tween = this->modchartTweens->iterator();
HXDLIN(2819)				while(( (bool)(tween->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2819)					 ::flixel::tweens::FlxTween tween1 = ( ( ::flixel::tweens::FlxTween)(tween->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2820)					tween1->set_active(true);
            				}
            			}
HXLINE(2822)			{
HXLINE(2822)				 ::Dynamic timer = this->modchartTimers->iterator();
HXDLIN(2822)				while(( (bool)(timer->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2822)					 ::flixel::util::FlxTimer timer1 = ( ( ::flixel::util::FlxTimer)(timer->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2823)					timer1->active = true;
            				}
            			}
HXLINE(2826)			if (::hx::IsNotNull( this->introTimer )) {
HXLINE(2826)				this->introTimer->active = true;
            			}
HXLINE(2828)			if (::hx::IsNotNull( this->comboSprTween )) {
HXLINE(2828)				this->comboSprTween->set_active(true);
            			}
HXLINE(2830)			this->paused = false;
HXLINE(2831)			this->callOnLuas(HX_("onResume",2c,60,31,e8),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(2834)			bool _hx_tmp4;
HXDLIN(2834)			if (::hx::IsNotNull( this->startTimer )) {
HXLINE(2834)				_hx_tmp4 = this->startTimer->finished;
            			}
            			else {
HXLINE(2834)				_hx_tmp4 = false;
            			}
HXDLIN(2834)			if (_hx_tmp4) {
HXLINE(2836)				::String _hx_tmp5 = this->detailsText;
HXDLIN(2836)				::String _hx_tmp6 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(2836)				::String _hx_tmp7 = this->iconP2->getCharacter();
HXDLIN(2836)				::DiscordClient_obj::changePresence(_hx_tmp5,_hx_tmp6,_hx_tmp7,true,((this->songLength - ::Conductor_obj::songPosition) - ( (Float)(::ClientPrefs_obj::noteOffset) )));
            			}
            			else {
HXLINE(2840)				::String _hx_tmp8 = this->detailsText;
HXDLIN(2840)				::String _hx_tmp9 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(2840)				::DiscordClient_obj::changePresence(_hx_tmp8,_hx_tmp9,this->iconP2->getCharacter(),null(),null());
            			}
            		}
HXLINE(2845)		this->super::closeSubState();
            	}


void PlayState_obj::onFocus(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2849_onFocus)
HXLINE(2851)		bool _hx_tmp;
HXDLIN(2851)		if ((this->health > 0)) {
HXLINE(2851)			_hx_tmp = !(this->paused);
            		}
            		else {
HXLINE(2851)			_hx_tmp = false;
            		}
HXDLIN(2851)		if (_hx_tmp) {
HXLINE(2853)			if ((::Conductor_obj::songPosition > ((Float)0.0))) {
HXLINE(2855)				::String _hx_tmp1 = this->detailsText;
HXDLIN(2855)				::String _hx_tmp2 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(2855)				::String _hx_tmp3 = this->iconP2->getCharacter();
HXDLIN(2855)				::DiscordClient_obj::changePresence(_hx_tmp1,_hx_tmp2,_hx_tmp3,true,((this->songLength - ::Conductor_obj::songPosition) - ( (Float)(::ClientPrefs_obj::noteOffset) )));
            			}
            			else {
HXLINE(2859)				::String _hx_tmp4 = this->detailsText;
HXDLIN(2859)				::String _hx_tmp5 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(2859)				::DiscordClient_obj::changePresence(_hx_tmp4,_hx_tmp5,this->iconP2->getCharacter(),null(),null());
            			}
            		}
HXLINE(2862)		this->callOnLuas(HX_("onFocus",39,fe,c6,9a),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(2863)		this->callOnLuas(HX_("onFocusPost",39,bf,2a,44),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(2867)		this->super::onFocus();
            	}


void PlayState_obj::onFocusLost(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2871_onFocusLost)
HXLINE(2873)		bool _hx_tmp;
HXDLIN(2873)		if ((this->health > 0)) {
HXLINE(2873)			_hx_tmp = !(this->paused);
            		}
            		else {
HXLINE(2873)			_hx_tmp = false;
            		}
HXDLIN(2873)		if (_hx_tmp) {
HXLINE(2875)			::String _hx_tmp1 = this->detailsPausedText;
HXDLIN(2875)			::String _hx_tmp2 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(2875)			::DiscordClient_obj::changePresence(_hx_tmp1,_hx_tmp2,this->iconP2->getCharacter(),null(),null());
            		}
HXLINE(2877)		this->callOnLuas(HX_("onFocusLost",bd,e4,85,41),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(2880)		this->callOnLuas(HX_("onFocusLostPost",bd,37,39,4c),::cpp::VirtualArray_obj::__new(0),null(),null());
HXLINE(2882)		this->super::onFocusLost();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2886_resyncVocals)
HXLINE(2887)		if (::hx::IsNotNull( this->finishTimer )) {
HXLINE(2887)			return;
            		}
HXLINE(2889)		if (this->separateVocals) {
HXLINE(2890)			this->opponentVocals->pause();
            		}
HXLINE(2891)		this->vocals->pause();
HXLINE(2893)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(2894)		::flixel::FlxG_obj::sound->music->set_pitch(this->playbackRate);
HXLINE(2895)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2896)		if ((::Conductor_obj::songPosition <= this->vocals->_length)) {
HXLINE(2898)			this->vocals->set_time(::Conductor_obj::songPosition);
HXLINE(2899)			this->vocals->set_pitch(this->playbackRate);
HXLINE(2900)			if (this->separateVocals) {
HXLINE(2901)				this->opponentVocals->set_time(this->vocals->_time);
HXLINE(2902)				this->opponentVocals->set_pitch(this->vocals->_pitch);
            			}
            		}
HXLINE(2905)		if (this->separateVocals) {
HXLINE(2906)			this->opponentVocals->play(null(),null(),null());
            		}
HXLINE(2907)		this->vocals->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2917_update)
HXDLIN(2917)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2918)		this->callOnLuas(HX_("onUpdate",88,7c,b2,66),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed),null(),null());
HXLINE(2922)		if (!(this->inCutscene)) {
HXLINE(2923)			Float lerpVal = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(((elapsed * ((Float)2.4)) * this->cameraSpeed) * this->playbackRate)));
HXLINE(2924)			Float a = this->camFollowPos->x;
HXDLIN(2924)			Float a1 = this->camFollowPos->y;
HXDLIN(2924)			this->camFollowPos->setPosition((a + (lerpVal * (this->camFollow->x - a))),(a1 + (lerpVal * (this->camFollow->y - a1))));
HXLINE(2925)			bool _hx_tmp;
HXDLIN(2925)			bool _hx_tmp1;
HXDLIN(2925)			bool _hx_tmp2;
HXDLIN(2925)			if (!(this->startingSong)) {
HXLINE(2925)				_hx_tmp2 = !(this->endingSong);
            			}
            			else {
HXLINE(2925)				_hx_tmp2 = false;
            			}
HXDLIN(2925)			if (_hx_tmp2) {
HXLINE(2925)				_hx_tmp1 = ::hx::IsNotNull( this->boyfriend->animation->_curAnim );
            			}
            			else {
HXLINE(2925)				_hx_tmp1 = false;
            			}
HXDLIN(2925)			if (_hx_tmp1) {
HXLINE(2925)				_hx_tmp = ::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("idle",14,a7,b3,45));
            			}
            			else {
HXLINE(2925)				_hx_tmp = false;
            			}
HXDLIN(2925)			if (_hx_tmp) {
HXLINE(2926)				 ::PlayState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2926)				_hx_tmp3->boyfriendIdleTime = (_hx_tmp3->boyfriendIdleTime + elapsed);
HXLINE(2927)				if ((this->boyfriendIdleTime >= ((Float)0.15))) {
HXLINE(2928)					this->boyfriendIdled = true;
            				}
            			}
            			else {
HXLINE(2931)				this->boyfriendIdleTime = ( (Float)(0) );
            			}
HXLINE(2933)			if ((this->lerpShakeBar != 0)) {
HXLINE(2934)				Float a2 = this->lerpShakeBar;
HXDLIN(2934)				this->lerpShakeBar = (a2 + ((elapsed * ( (Float)(8) )) * (( (Float)(0) ) - a2)));
HXLINE(2935)				Float shakeRandom = this->lerpShakeBar;
HXDLIN(2935)				int shakeRandom1;
HXDLIN(2935)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 50)) {
HXLINE(2935)					shakeRandom1 = 1;
            				}
            				else {
HXLINE(2935)					shakeRandom1 = -1;
            				}
HXDLIN(2935)				Float shakeRandom2 = (shakeRandom * ( (Float)(shakeRandom1) ));
HXLINE(2936)				this->healthBarOverlay->offset->set_y((this->barOffset->__get(2).StaticCast< ::Array< Float > >()->__get(1) + shakeRandom2));
HXLINE(2937)				this->healthBar->offset->set_y((this->barOffset->__get(1).StaticCast< ::Array< Float > >()->__get(1) + shakeRandom2));
HXLINE(2938)				this->healthBarBG->offset->set_y((this->barOffset->__get(0).StaticCast< ::Array< Float > >()->__get(1) + shakeRandom2));
            			}
            		}
HXLINE(2942)		bool _hx_tmp4;
HXDLIN(2942)		if (!(this->haveUsePractice)) {
HXLINE(2942)			_hx_tmp4 = this->practiceMode;
            		}
            		else {
HXLINE(2942)			_hx_tmp4 = false;
            		}
HXDLIN(2942)		if (_hx_tmp4) {
HXLINE(2943)			this->haveUsePractice = true;
HXLINE(2944)			::haxe::Log_obj::trace(HX_("use practice",b4,b3,dc,cc),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2944,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
            		}
HXLINE(2946)		bool _hx_tmp5;
HXDLIN(2946)		if (!(this->haveUseBotplay)) {
HXLINE(2946)			_hx_tmp5 = this->cpuControlled;
            		}
            		else {
HXLINE(2946)			_hx_tmp5 = false;
            		}
HXDLIN(2946)		if (_hx_tmp5) {
HXLINE(2947)			this->haveUseBotplay = true;
HXLINE(2948)			::haxe::Log_obj::trace(HX_("use botplay",a2,8a,51,08),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),2948,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
            		}
HXLINE(2952)		this->super::update(elapsed);
HXLINE(2954)		this->setOnLuas(HX_("curDecStep",8e,a8,37,e3),this->curDecStep);
HXLINE(2955)		this->setOnLuas(HX_("curDecBeat",b8,a2,ef,d7),this->curDecBeat);
HXLINE(2956)		Float a3 = this->songScoreLerp;
HXDLIN(2956)		this->songScoreLerp = (a3 + (::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),((elapsed * ( (Float)(12) )) * this->playbackRate))) * (( (Float)(this->songScore) ) - a3)));
HXLINE(2957)		 ::flixel::text::FlxText _hx_tmp6 = this->scoreTxt;
HXDLIN(2957)		::String _hx_tmp7 = this->scorePrefix;
HXDLIN(2957)		_hx_tmp6->set_text((_hx_tmp7 + ::Std_obj::_hx_int(( (Float)(::Math_obj::ceil(this->songScoreLerp)) ))));
HXLINE(2959)		if (this->botplayTxt->visible) {
HXLINE(2960)			 ::PlayState _hx_tmp8 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2960)			_hx_tmp8->botplaySine = (_hx_tmp8->botplaySine + (( (Float)(180) ) * elapsed));
HXLINE(2961)			this->botplayTxt->set_alpha((( (Float)(1) ) - ::Math_obj::sin(((::Math_obj::PI * this->botplaySine) / ( (Float)(180) )))));
            		}
HXLINE(2964)		bool _hx_tmp9;
HXDLIN(2964)		bool _hx_tmp10;
HXDLIN(2964)		bool _hx_tmp11;
HXDLIN(2964)		if (!(this->inCutscene)) {
HXLINE(2964)			_hx_tmp11 = ::PlayerSettings_obj::player1->controls->_pause->check();
            		}
            		else {
HXLINE(2964)			_hx_tmp11 = false;
            		}
HXDLIN(2964)		if (_hx_tmp11) {
HXLINE(2964)			_hx_tmp10 = this->startedCountdown;
            		}
            		else {
HXLINE(2964)			_hx_tmp10 = false;
            		}
HXDLIN(2964)		if (_hx_tmp10) {
HXLINE(2964)			_hx_tmp9 = this->canPause;
            		}
            		else {
HXLINE(2964)			_hx_tmp9 = false;
            		}
HXDLIN(2964)		if (_hx_tmp9) {
HXLINE(2966)			 ::Dynamic ret = this->callOnLuas(HX_("onPause",57,75,95,53),::cpp::VirtualArray_obj::__new(0),false,null());
HXLINE(2967)			if (::hx::IsNotEq( ret,::FunkinLua_obj::Function_Stop )) {
HXLINE(2968)				this->openPauseMenu();
            			}
            		}
HXLINE(2971)		if (this->inCutscene) {
HXLINE(2972)			bool _hx_tmp12;
HXDLIN(2972)			if (::hx::IsNotNull( this->videoCutscene )) {
HXLINE(2972)				_hx_tmp12 = ::PlayerSettings_obj::player1->controls->_pause->check();
            			}
            			else {
HXLINE(2972)				_hx_tmp12 = false;
            			}
HXDLIN(2972)			if (_hx_tmp12) {
HXLINE(2973)				this->videoCutscene->destroy();
HXLINE(2974)				this->startAndEnd();
            			}
            		}
HXLINE(2978)		bool _hx_tmp13;
HXDLIN(2978)		bool _hx_tmp14;
HXDLIN(2978)		bool _hx_tmp15;
HXDLIN(2978)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(this->debugKeysChart,2)) {
HXLINE(2978)			_hx_tmp15 = !(this->endingSong);
            		}
            		else {
HXLINE(2978)			_hx_tmp15 = false;
            		}
HXDLIN(2978)		if (_hx_tmp15) {
HXLINE(2978)			_hx_tmp14 = !(this->inCutscene);
            		}
            		else {
HXLINE(2978)			_hx_tmp14 = false;
            		}
HXDLIN(2978)		if (_hx_tmp14) {
HXLINE(2978)			_hx_tmp13 = ::ClientPrefs_obj::developer;
            		}
            		else {
HXLINE(2978)			_hx_tmp13 = false;
            		}
HXDLIN(2978)		if (_hx_tmp13) {
HXLINE(2980)			this->openChartEditor();
            		}
HXLINE(2986)		Float mult = (1 + (::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(( (Float)(1) ) - (((::Conductor_obj::stepCrochet / ( (Float)(10) )) * elapsed) / ::Math_obj::pow(( (Float)(this->iconSpeed) ),((Float)0.75)))))) * (this->iconP1->scale->x - ( (Float)(1) ))));
HXLINE(2987)		{
HXLINE(2987)			 ::flixel::math::FlxBasePoint this1 = this->iconP1->scale;
HXDLIN(2987)			this1->set_x(mult);
HXDLIN(2987)			this1->set_y(mult);
            		}
HXLINE(2988)		if ((this->hudStyle != HX_("discord",ac,b9,b4,b2))) {
HXLINE(2989)			if (this->healthBar->flipX) {
HXLINE(2990)				 ::flixel::math::FlxBasePoint this2 = this->iconP1->origin;
HXDLIN(2990)				this2->set_x(( (Float)(35) ));
HXDLIN(2990)				this2->set_y(( (Float)(110) ));
            			}
            			else {
HXLINE(2992)				 ::flixel::math::FlxBasePoint this3 = this->iconP1->origin;
HXDLIN(2992)				this3->set_x(( (Float)(115) ));
HXDLIN(2992)				this3->set_y(( (Float)(110) ));
            			}
            		}
HXLINE(2995)		Float mult1 = (1 + (::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(( (Float)(1) ) - (((::Conductor_obj::stepCrochet / ( (Float)(10) )) * elapsed) / ::Math_obj::pow(( (Float)(this->iconSpeed) ),((Float)0.75)))))) * (this->iconP2->scale->x - ( (Float)(1) ))));
HXLINE(2996)		{
HXLINE(2996)			 ::flixel::math::FlxBasePoint this4 = this->iconP2->scale;
HXDLIN(2996)			this4->set_x(mult1);
HXDLIN(2996)			this4->set_y(mult1);
            		}
HXLINE(2997)		if ((this->hudStyle != HX_("discord",ac,b9,b4,b2))) {
HXLINE(2998)			if (this->healthBar->flipX) {
HXLINE(2999)				 ::flixel::math::FlxBasePoint this5 = this->iconP1->origin;
HXDLIN(2999)				this5->set_x(( (Float)(115) ));
HXDLIN(2999)				this5->set_y(( (Float)(110) ));
            			}
            			else {
HXLINE(3001)				 ::flixel::math::FlxBasePoint this6 = this->iconP1->origin;
HXDLIN(3001)				this6->set_x(( (Float)(35) ));
HXDLIN(3001)				this6->set_y(( (Float)(110) ));
            			}
            		}
HXLINE(3004)		int iconOffset = 26;
HXLINE(3006)		Float Value = this->health;
HXDLIN(3006)		Float lowerBound;
HXDLIN(3006)		if ((Value < 0)) {
HXLINE(3006)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE(3006)			lowerBound = Value;
            		}
HXDLIN(3006)		Float _hx_tmp16;
HXDLIN(3006)		if ((lowerBound > 2)) {
HXLINE(3006)			_hx_tmp16 = ( (Float)(2) );
            		}
            		else {
HXLINE(3006)			_hx_tmp16 = lowerBound;
            		}
HXDLIN(3006)		this->health = _hx_tmp16;
HXLINE(3007)		Float a4 = this->lerpHealth;
HXDLIN(3007)		Float Value1 = (elapsed * ( (Float)(8) ));
HXDLIN(3007)		Float lowerBound1;
HXDLIN(3007)		if ((Value1 < 0)) {
HXLINE(3007)			lowerBound1 = ( (Float)(0) );
            		}
            		else {
HXLINE(3007)			lowerBound1 = Value1;
            		}
HXDLIN(3007)		Float _hx_tmp17;
HXDLIN(3007)		if ((lowerBound1 > 1)) {
HXLINE(3007)			_hx_tmp17 = ( (Float)(1) );
            		}
            		else {
HXLINE(3007)			_hx_tmp17 = lowerBound1;
            		}
HXDLIN(3007)		this->lerpHealth = (a4 + (_hx_tmp17 * (this->health - a4)));
HXLINE(3010)		if (this->healthBar->flipX) {
HXLINE(3011)			 ::HealthIcon _hx_tmp18 = this->iconP2;
HXDLIN(3011)			Float _hx_tmp19 = this->healthBar->x;
HXDLIN(3011)			Float _hx_tmp20 = this->healthBar->get_width();
HXDLIN(3011)			_hx_tmp18->set_x((((((_hx_tmp19 + (_hx_tmp20 * (this->lerpHealth / ( (Float)(2) )))) + (((( (Float)(150) ) * this->iconP1->scale->x) - ( (Float)(150) )) / ( (Float)(2) ))) - ( (Float)(iconOffset) )) + 5) + this->iconP1->sprOffsetX));
HXLINE(3012)			 ::HealthIcon _hx_tmp21 = this->iconP1;
HXDLIN(3012)			Float _hx_tmp22 = this->healthBar->x;
HXDLIN(3012)			Float _hx_tmp23 = this->healthBar->get_width();
HXDLIN(3012)			_hx_tmp21->set_x((((((_hx_tmp22 + (_hx_tmp23 * (this->lerpHealth / ( (Float)(2) )))) - ((( (Float)(150) ) * this->iconP2->scale->x) / ( (Float)(2) ))) - ( (Float)((iconOffset * 2)) )) - ( (Float)(5) )) + this->iconP1->sprOffsetX));
            		}
            		else {
HXLINE(3014)			 ::HealthIcon _hx_tmp24 = this->iconP1;
HXDLIN(3014)			Float _hx_tmp25 = this->healthBar->x;
HXDLIN(3014)			Float _hx_tmp26 = this->healthBar->get_width();
HXDLIN(3014)			_hx_tmp24->set_x((((((_hx_tmp25 + (_hx_tmp26 * (( (Float)(1) ) - (this->lerpHealth / ( (Float)(2) ))))) + (((( (Float)(150) ) * this->iconP1->scale->x) - ( (Float)(150) )) / ( (Float)(2) ))) - ( (Float)(iconOffset) )) + 5) + this->iconP1->sprOffsetX));
HXLINE(3015)			 ::HealthIcon _hx_tmp27 = this->iconP2;
HXDLIN(3015)			Float _hx_tmp28 = this->healthBar->x;
HXDLIN(3015)			Float _hx_tmp29 = this->healthBar->get_width();
HXDLIN(3015)			_hx_tmp27->set_x((((((_hx_tmp28 + (_hx_tmp29 * (( (Float)(1) ) - (this->lerpHealth / ( (Float)(2) ))))) - ((( (Float)(150) ) * this->iconP2->scale->x) / ( (Float)(2) ))) - ( (Float)((iconOffset * 2)) )) - ( (Float)(5) )) + this->iconP1->sprOffsetX));
            		}
HXLINE(3019)		if ((this->health <= ((Float)0.4))) {
HXLINE(3020)			this->healthBar->colorTransform->redOffset = ::Math_obj::abs((::Math_obj::sin((::Conductor_obj::songPosition / ( (Float)(200) ))) * ( (Float)(250) )));
HXLINE(3021)			this->healthBar->colorTransform->greenOffset = -(::Math_obj::abs((::Math_obj::sin((::Conductor_obj::songPosition / ( (Float)(200) ))) * ( (Float)(150) ))));
HXLINE(3022)			this->healthBar->colorTransform->blueOffset = -(::Math_obj::abs((::Math_obj::sin((::Conductor_obj::songPosition / ( (Float)(200) ))) * ( (Float)(150) ))));
            		}
            		else {
HXLINE(3024)			this->healthBar->colorTransform->redOffset = ( (Float)(0) );
HXLINE(3025)			this->healthBar->colorTransform->greenOffset = ( (Float)(0) );
HXLINE(3026)			this->healthBar->colorTransform->blueOffset = ( (Float)(0) );
            		}
HXLINE(3029)		if (((this->health * ( (Float)(50) )) < 20)) {
HXLINE(3030)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(3032)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(3034)		if (((this->health * ( (Float)(50) )) > 80)) {
HXLINE(3035)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(3037)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(3039)		bool _hx_tmp30;
HXDLIN(3039)		bool _hx_tmp31;
HXDLIN(3039)		bool _hx_tmp32;
HXDLIN(3039)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(this->debugKeysCharacter,2)) {
HXLINE(3039)			_hx_tmp32 = !(this->endingSong);
            		}
            		else {
HXLINE(3039)			_hx_tmp32 = false;
            		}
HXDLIN(3039)		if (_hx_tmp32) {
HXLINE(3039)			_hx_tmp31 = !(this->inCutscene);
            		}
            		else {
HXLINE(3039)			_hx_tmp31 = false;
            		}
HXDLIN(3039)		if (_hx_tmp31) {
HXLINE(3039)			_hx_tmp30 = ::ClientPrefs_obj::developer;
            		}
            		else {
HXLINE(3039)			_hx_tmp30 = false;
            		}
HXDLIN(3039)		if (_hx_tmp30) {
HXLINE(3040)			this->persistentUpdate = false;
HXLINE(3041)			this->paused = true;
HXLINE(3042)			::PlayState_obj::cancelMusicFadeTween();
HXLINE(3043)			::MusicBeatState_obj::switchState( ::editors::CharacterEditorState_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null()));
            		}
HXLINE(3046)		if (this->startingSong) {
HXLINE(3048)			if (this->startedCountdown) {
HXLINE(3050)				 ::Dynamic _hx_tmp33 = ::hx::ClassOf< ::Conductor >();
HXDLIN(3050)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + ((::flixel::FlxG_obj::elapsed * ( (Float)(1000) )) * this->playbackRate));
HXLINE(3051)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(3052)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(3057)			 ::Dynamic _hx_tmp34 = ::hx::ClassOf< ::Conductor >();
HXDLIN(3057)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + ((::flixel::FlxG_obj::elapsed * ( (Float)(1000) )) * this->playbackRate));
HXLINE(3059)			if (!(this->paused)) {
HXLINE(3061)				 ::PlayState _hx_tmp35 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3061)				_hx_tmp35->songTime = (_hx_tmp35->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(3062)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(3065)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(3067)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(3068)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
HXLINE(3073)				if (this->updateTime) {
HXLINE(3074)					Float curTime = (::Conductor_obj::songPosition - ( (Float)(::ClientPrefs_obj::noteOffset) ));
HXLINE(3075)					if ((curTime < 0)) {
HXLINE(3075)						curTime = ( (Float)(0) );
            					}
HXLINE(3076)					this->songPercent = (curTime / this->songLength);
HXLINE(3078)					Float songCalc = (this->songLength - curTime);
HXLINE(3079)					if ((::ClientPrefs_obj::timeBarType == HX_("Time Elapsed",29,71,5d,35))) {
HXLINE(3079)						songCalc = curTime;
            					}
HXLINE(3081)					int secondsTotal = ::Math_obj::floor((songCalc / ( (Float)(1000) )));
HXLINE(3082)					if ((secondsTotal < 0)) {
HXLINE(3082)						secondsTotal = 0;
            					}
HXLINE(3084)					if ((::ClientPrefs_obj::timeBarType != HX_("Song Name",76,e6,ca,de))) {
HXLINE(3085)						 ::flixel::text::FlxText _hx_tmp36 = this->timeTxt;
HXDLIN(3085)						_hx_tmp36->set_text(::flixel::util::FlxStringUtil_obj::formatTime(( (Float)(secondsTotal) ),false));
            					}
            				}
HXLINE(3087)				if ((::Conductor_obj::songPosition >= (this->songLength - ( (Float)(500) )))) {
HXLINE(3088)					::haxe::Log_obj::trace(HX_("no way ammar code fix end song",fa,f7,c5,59),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3088,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
HXLINE(3089)					this->finishSong(null());
            				}
            			}
            		}
HXLINE(3096)		if (this->camZooming) {
HXLINE(3098)			Float a5 = this->defaultCamZoom;
HXDLIN(3098)			::flixel::FlxG_obj::camera->set_zoom((a5 + (::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(( (Float)(1) ) - (((elapsed * ((Float)3.125)) * this->camZoomingDecay) * this->playbackRate)))) * (::flixel::FlxG_obj::camera->zoom - a5))));
HXLINE(3099)			this->camHUD->set_zoom((1 + (::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(( (Float)(1) ) - (((elapsed * ((Float)3.125)) * this->camZoomingDecay) * this->playbackRate)))) * (this->camHUD->zoom - ( (Float)(1) )))));
            		}
HXLINE(3105)		bool _hx_tmp37 = ::flixel::FlxG_obj::debugger->visible;
HXLINE(3113)		bool _hx_tmp38;
HXDLIN(3113)		bool _hx_tmp39;
HXDLIN(3113)		bool _hx_tmp40;
HXDLIN(3113)		bool _hx_tmp41;
HXDLIN(3113)		bool _hx_tmp42;
HXDLIN(3113)		if (!(::ClientPrefs_obj::noReset)) {
HXLINE(3113)			_hx_tmp42 = ::PlayerSettings_obj::player1->controls->_reset->check();
            		}
            		else {
HXLINE(3113)			_hx_tmp42 = false;
            		}
HXDLIN(3113)		if (_hx_tmp42) {
HXLINE(3113)			_hx_tmp41 = this->canReset;
            		}
            		else {
HXLINE(3113)			_hx_tmp41 = false;
            		}
HXDLIN(3113)		if (_hx_tmp41) {
HXLINE(3113)			_hx_tmp40 = !(this->inCutscene);
            		}
            		else {
HXLINE(3113)			_hx_tmp40 = false;
            		}
HXDLIN(3113)		if (_hx_tmp40) {
HXLINE(3113)			_hx_tmp39 = this->startedCountdown;
            		}
            		else {
HXLINE(3113)			_hx_tmp39 = false;
            		}
HXDLIN(3113)		if (_hx_tmp39) {
HXLINE(3113)			_hx_tmp38 = !(this->endingSong);
            		}
            		else {
HXLINE(3113)			_hx_tmp38 = false;
            		}
HXDLIN(3113)		if (_hx_tmp38) {
HXLINE(3115)			this->health = ( (Float)(0) );
HXLINE(3116)			::haxe::Log_obj::trace(HX_("RESET = True",82,e0,2a,fe),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3116,HX_("PlayState",5d,83,c2,46),HX_("update",09,86,05,87)));
            		}
HXLINE(3118)		this->doDeathCheck(null());
HXLINE(3120)		if (this->useModchart) {
HXLINE(3121)			this->modManager->updateTimeline(this->curDecStep);
HXLINE(3122)			this->modManager->update(elapsed);
            		}
HXLINE(3126)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(3128)			Float time = this->spawnTime;
HXLINE(3129)			time = (time / this->songSpeed);
HXLINE(3130)			time = (time / this->unspawnNotes->__get(0).StaticCast<  ::Note >()->multSpeed);
HXLINE(3132)			while(true){
HXLINE(3132)				bool _hx_tmp43;
HXDLIN(3132)				if ((this->unspawnNotes->length > 0)) {
HXLINE(3132)					_hx_tmp43 = ((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < time);
            				}
            				else {
HXLINE(3132)					_hx_tmp43 = false;
            				}
HXDLIN(3132)				if (!(_hx_tmp43)) {
HXLINE(3132)					goto _hx_goto_140;
            				}
HXLINE(3134)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(3135)				this->notes->insert(0,dunceNote).StaticCast<  ::Note >();
HXLINE(3136)				dunceNote->spawned = true;
HXLINE(3137)				int _hx_tmp44 = this->notes->members->indexOf(dunceNote,null());
HXDLIN(3137)				this->callOnLuas(HX_("onSpawnNote",ae,fe,d7,ca),::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp44)->init(1,dunceNote->noteData)->init(2,dunceNote->noteType)->init(3,dunceNote->isSustainNote),null(),null());
HXLINE(3139)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(3140)				this->unspawnNotes->removeRange(index,1);
            			}
            			_hx_goto_140:;
            		}
HXLINE(3145)		if (this->useModchart) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::StrumNote strum){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3147_update)
HXLINE(3148)				 ::math::Vector3 pos = _gthis->modManager->getPos(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),_gthis->curDecBeat,strum->noteData,1,strum,::Array_obj< ::String >::__new(0),strum->vec3Cache);
HXLINE(3149)				_gthis->modManager->updateObject(_gthis->curDecBeat,strum,pos,1);
HXLINE(3150)				strum->set_x(pos->x);
HXLINE(3151)				strum->set_y(pos->y);
HXLINE(3152)				strum->z = pos->z;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::StrumNote strum){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3156_update)
HXLINE(3157)				 ::math::Vector3 pos = _gthis->modManager->getPos(( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),_gthis->curDecBeat,strum->noteData,0,strum,::Array_obj< ::String >::__new(0),strum->vec3Cache);
HXLINE(3158)				_gthis->modManager->updateObject(_gthis->curDecBeat,strum,pos,0);
HXLINE(3159)				strum->set_x(pos->x);
HXLINE(3160)				strum->set_y(pos->y);
HXLINE(3161)				strum->z = pos->z;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3146)			this->opponentStrums->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(3155)			this->playerStrums->forEachAlive( ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE(3164)			{
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,_g,int,a11) HXARGC(2)
            				int _hx_run( ::StrumNote a2, ::StrumNote a3){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3164_update)
HXLINE(3164)					return ( (int)(_g(a11,a2,a3)) );
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(3164)				 ::Dynamic _g = this->sortByOrderStrumNote_dyn();
HXDLIN(3164)				int a11 = -1;
HXDLIN(3164)				 ::Dynamic _hx_tmp45 =  ::Dynamic(new _hx_Closure_2(_g,a11));
HXDLIN(3164)				this->strumLineNotes->members->sort(_hx_tmp45);
            			}
            		}
HXLINE(3168)		bool _hx_tmp46;
HXDLIN(3168)		if (this->generatedMusic) {
HXLINE(3168)			_hx_tmp46 = this->startedCountdown;
            		}
            		else {
HXLINE(3168)			_hx_tmp46 = false;
            		}
HXDLIN(3168)		if (_hx_tmp46) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_4,Float,fakeCrochet, ::PlayState,_gthis,::Array< bool >,isModchart) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3189_update)
HXLINE(3190)				 ::flixel::group::FlxTypedGroup strumGroup = _gthis->playerStrums;
HXLINE(3191)				if (!(daNote->mustPress)) {
HXLINE(3191)					strumGroup = _gthis->opponentStrums;
            				}
HXLINE(3193)				Float strumX = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->x;
HXLINE(3194)				Float strumY = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->y;
HXLINE(3195)				Float strumAngle = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->angle;
HXLINE(3196)				Float strumDirection = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->direction;
HXLINE(3197)				Float strumAlpha = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->alpha;
HXLINE(3198)				bool strumScroll = Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->downScroll;
HXLINE(3200)				strumX = (strumX + daNote->offsetX);
HXLINE(3201)				strumY = (strumY + daNote->offsetY);
HXLINE(3202)				strumAngle = (strumAngle + daNote->offsetAngle);
HXLINE(3203)				strumAlpha = (strumAlpha * daNote->multAlpha);
HXLINE(3206)				if (isModchart->__get(0)) {
HXLINE(3207)					Float allSpeed = (_gthis->songSpeed * daNote->multSpeed);
HXLINE(3208)					int pN;
HXDLIN(3208)					if (daNote->mustPress) {
HXLINE(3208)						pN = 0;
            					}
            					else {
HXLINE(3208)						pN = 1;
            					}
HXLINE(3209)					 ::math::Vector3 pos = _gthis->modManager->getPos(daNote->strumTime,-(((((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime)) * allSpeed)),(daNote->strumTime - ::Conductor_obj::songPosition),_gthis->curDecBeat,daNote->noteData,pN,daNote,::Array_obj< ::String >::__new(0),daNote->vec3Cache);
HXLINE(3212)					_gthis->modManager->updateObject(_gthis->curDecBeat,daNote,pos,pN);
HXLINE(3213)					 ::math::Vector3 pos1 = pos;
HXDLIN(3213)					pos1->x = (pos1->x + daNote->offsetX);
HXLINE(3214)					 ::math::Vector3 pos2 = pos;
HXDLIN(3214)					pos2->y = (pos2->y + daNote->offsetY);
HXLINE(3215)					daNote->set_x(pos->x);
HXLINE(3216)					daNote->set_y(pos->y);
HXLINE(3217)					daNote->z = pos->z;
HXLINE(3218)					daNote->set_alpha(strumAlpha);
HXLINE(3219)					if (daNote->isSustainNote) {
HXLINE(3221)						Float futureSongPos = (::Conductor_obj::songPosition + 75);
HXLINE(3222)						Float diff = (daNote->strumTime - futureSongPos);
HXLINE(3223)						Float vDiff = -(((((Float)0.45) * (futureSongPos - daNote->strumTime)) * allSpeed));
HXLINE(3225)						 ::modchart::ModManager _gthis1 = _gthis->modManager;
HXDLIN(3225)						Float daNote1 = daNote->strumTime;
HXDLIN(3225)						Float nextPos = (::Conductor_obj::getStep(futureSongPos) / ( (Float)(4) ));
HXDLIN(3225)						 ::math::Vector3 nextPos1 = _gthis1->getPos(daNote1,vDiff,diff,nextPos,daNote->noteData,pN,daNote,::Array_obj< ::String >::__new(0),daNote->vec3Cache);
HXLINE(3227)						 ::math::Vector3 nextPos2 = nextPos1;
HXDLIN(3227)						nextPos2->x = (nextPos2->x + daNote->offsetX);
HXLINE(3228)						 ::math::Vector3 nextPos3 = nextPos1;
HXDLIN(3228)						nextPos3->y = (nextPos3->y + daNote->offsetY);
HXLINE(3229)						Float diffX = (nextPos1->x - pos->x);
HXLINE(3230)						Float diffY = (nextPos1->y - pos->y);
HXLINE(3231)						Float rad = ::Math_obj::atan2(diffY,diffX);
HXLINE(3232)						Float deg = (rad * (( (Float)(180) ) / ::Math_obj::PI));
HXLINE(3233)						if ((deg != 0)) {
HXLINE(3234)							daNote->mAngle = (deg + 90);
            						}
            						else {
HXLINE(3236)							daNote->mAngle = ( (Float)(0) );
            						}
            					}
            				}
            				else {
HXLINE(3239)					daNote->distance = (((((Float)0.45) * (::Conductor_obj::songPosition - daNote->strumTime)) * _gthis->songSpeed) * daNote->multSpeed);
HXLINE(3240)					int distance;
HXDLIN(3240)					if (strumScroll) {
HXLINE(3240)						distance = 1;
            					}
            					else {
HXLINE(3240)						distance = -1;
            					}
HXDLIN(3240)					Float distance1 = (daNote->distance * ( (Float)(distance) ));
HXLINE(3242)					Float angleDir = ((strumDirection * ::Math_obj::PI) / ( (Float)(180) ));
HXLINE(3243)					if (daNote->copyAngle) {
HXLINE(3244)						daNote->set_angle(((-(strumDirection) + 90) + strumAngle));
            					}
HXLINE(3246)					if (daNote->copyAlpha) {
HXLINE(3247)						daNote->set_alpha(strumAlpha);
            					}
HXLINE(3249)					if (daNote->copyX) {
HXLINE(3250)						daNote->set_x((strumX + (::Math_obj::cos(angleDir) * distance1)));
            					}
HXLINE(3252)					if (daNote->copyY) {
HXLINE(3254)						daNote->set_y((strumY + (::Math_obj::sin(angleDir) * distance1)));
HXLINE(3257)						bool _hx_tmp;
HXDLIN(3257)						if (strumScroll) {
HXLINE(3257)							_hx_tmp = daNote->isSustainNote;
            						}
            						else {
HXLINE(3257)							_hx_tmp = false;
            						}
HXDLIN(3257)						if (_hx_tmp) {
HXLINE(3259)							if (::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("end",db,03,4d,00))) {
HXLINE(3260)								daNote->set_y((daNote->y + ((((((Float)10.5) * (fakeCrochet / ( (Float)(400) ))) * ((Float)1.5)) * _gthis->songSpeed) + (( (Float)(46) ) * (_gthis->songSpeed - ( (Float)(1) ))))));
HXLINE(3261)								daNote->set_y((daNote->y - ((( (Float)(46) ) * (( (Float)(1) ) - (fakeCrochet / ( (Float)(600) )))) * _gthis->songSpeed)));
HXLINE(3262)								if (::PlayState_obj::isPixelStage) {
HXLINE(3263)									daNote->set_y((daNote->y + (8 + ((( (Float)(6) ) - daNote->originalHeightForCalcs) * ::PlayState_obj::daPixelZoom))));
            								}
            								else {
HXLINE(3265)									daNote->set_y((daNote->y - ( (Float)(19) )));
            								}
            							}
HXLINE(3268)							daNote->set_y((daNote->y + ((::Note_obj::swagWidth / ( (Float)(2) )) - (((Float)60.5) * (_gthis->songSpeed - ( (Float)(1) ))))));
HXLINE(3269)							daNote->set_y((daNote->y + ((((Float)27.5) * ((( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ) / ( (Float)(100) )) - ( (Float)(1) ))) * (_gthis->songSpeed - ( (Float)(1) )))));
            						}
            					}
            				}
HXLINE(3274)				bool _hx_tmp1;
HXDLIN(3274)				bool _hx_tmp2;
HXDLIN(3274)				bool _hx_tmp3;
HXDLIN(3274)				if (!(daNote->mustPress)) {
HXLINE(3274)					_hx_tmp3 = daNote->wasGoodHit;
            				}
            				else {
HXLINE(3274)					_hx_tmp3 = false;
            				}
HXDLIN(3274)				if (_hx_tmp3) {
HXLINE(3274)					_hx_tmp2 = !(daNote->hitByOpponent);
            				}
            				else {
HXLINE(3274)					_hx_tmp2 = false;
            				}
HXDLIN(3274)				if (_hx_tmp2) {
HXLINE(3274)					_hx_tmp1 = !(daNote->ignoreNote);
            				}
            				else {
HXLINE(3274)					_hx_tmp1 = false;
            				}
HXDLIN(3274)				if (_hx_tmp1) {
HXLINE(3276)					_gthis->opponentNoteHit(daNote);
            				}
HXLINE(3279)				bool _hx_tmp4;
HXDLIN(3279)				bool _hx_tmp5;
HXDLIN(3279)				bool _hx_tmp6;
HXDLIN(3279)				if (!(daNote->blockHit)) {
HXLINE(3279)					_hx_tmp6 = daNote->mustPress;
            				}
            				else {
HXLINE(3279)					_hx_tmp6 = false;
            				}
HXDLIN(3279)				if (_hx_tmp6) {
HXLINE(3279)					_hx_tmp5 = _gthis->cpuControlled;
            				}
            				else {
HXLINE(3279)					_hx_tmp5 = false;
            				}
HXDLIN(3279)				if (_hx_tmp5) {
HXLINE(3279)					_hx_tmp4 = daNote->canBeHit;
            				}
            				else {
HXLINE(3279)					_hx_tmp4 = false;
            				}
HXDLIN(3279)				if (_hx_tmp4) {
HXLINE(3280)					if (daNote->isSustainNote) {
HXLINE(3281)						if (daNote->canBeHit) {
HXLINE(3282)							_gthis->goodNoteHit(daNote);
HXLINE(3283)							if (::hx::IsNotNull( _gthis->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >() )) {
HXLINE(3284)								_gthis->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >()->setPos(Dynamic( _gthis->playerStrums->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->x,Dynamic( _gthis->playerStrums->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->y);
HXLINE(3285)								if (::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("holdend",fc,4b,02,b8))) {
HXLINE(3286)									 ::NoteHoldSplash holdSplash = _gthis->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >();
HXLINE(3287)									_gthis->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >()->set_alpha(( (Float)(1) ));
HXLINE(3288)									holdSplash->endHold(true);
HXLINE(3289)									_gthis->onHoldSplash[daNote->noteData] = null();
            								}
            							}
            						}
            					}
            					else {
HXLINE(3293)						bool _hx_tmp7;
HXDLIN(3293)						if (!((daNote->strumTime <= ::Conductor_obj::songPosition))) {
HXLINE(3293)							_hx_tmp7 = daNote->isSustainNote;
            						}
            						else {
HXLINE(3293)							_hx_tmp7 = true;
            						}
HXDLIN(3293)						if (_hx_tmp7) {
HXLINE(3294)							_gthis->goodNoteHit(daNote);
            						}
            					}
            				}
HXLINE(3298)				if (!(isModchart->__get(0))) {
HXLINE(3299)					Float center = (strumY + (::Note_obj::swagWidth / ( (Float)(2) )));
HXLINE(3300)					bool _hx_tmp8;
HXDLIN(3300)					bool _hx_tmp9;
HXDLIN(3300)					bool _hx_tmp10;
HXDLIN(3300)					if (Dynamic( strumGroup->members->__get(daNote->noteData)).StaticCast<  ::StrumNote >()->sustainReduce) {
HXLINE(3300)						_hx_tmp10 = daNote->isSustainNote;
            					}
            					else {
HXLINE(3300)						_hx_tmp10 = false;
            					}
HXDLIN(3300)					if (_hx_tmp10) {
HXLINE(3300)						if (!(daNote->mustPress)) {
HXLINE(3300)							_hx_tmp9 = !(daNote->ignoreNote);
            						}
            						else {
HXLINE(3300)							_hx_tmp9 = true;
            						}
            					}
            					else {
HXLINE(3300)						_hx_tmp9 = false;
            					}
HXDLIN(3300)					if (_hx_tmp9) {
HXLINE(3301)						if (daNote->mustPress) {
HXLINE(3301)							if (!(daNote->wasGoodHit)) {
HXLINE(3301)								if (daNote->prevNote->wasGoodHit) {
HXLINE(3300)									_hx_tmp8 = !(daNote->canBeHit);
            								}
            								else {
HXLINE(3300)									_hx_tmp8 = false;
            								}
            							}
            							else {
HXLINE(3300)								_hx_tmp8 = true;
            							}
            						}
            						else {
HXLINE(3300)							_hx_tmp8 = true;
            						}
            					}
            					else {
HXLINE(3300)						_hx_tmp8 = false;
            					}
HXDLIN(3300)					if (_hx_tmp8) {
HXLINE(3303)						if (strumScroll) {
HXLINE(3305)							Float _hx_tmp11 = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN(3305)							if (((_hx_tmp11 + daNote->get_height()) >= center)) {
HXLINE(3307)								 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,daNote->frameWidth,daNote->frameHeight);
HXLINE(3308)								swagRect->height = ((center - daNote->y) / daNote->scale->y);
HXLINE(3309)								swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(3311)								daNote->set_clipRect(swagRect);
            							}
            						}
            						else {
HXLINE(3316)							if (((daNote->y + (daNote->offset->y * daNote->scale->y)) <= center)) {
HXLINE(3318)								Float swagRect1 = daNote->get_width();
HXDLIN(3318)								Float swagRect2 = (swagRect1 / daNote->scale->x);
HXDLIN(3318)								Float swagRect3 = daNote->get_height();
HXDLIN(3318)								 ::flixel::math::FlxRect swagRect4 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect2,(swagRect3 / daNote->scale->y));
HXLINE(3319)								swagRect4->y = ((center - daNote->y) / daNote->scale->y);
HXLINE(3320)								 ::flixel::math::FlxRect swagRect5 = swagRect4;
HXDLIN(3320)								swagRect5->height = (swagRect5->height - swagRect4->y);
HXLINE(3322)								daNote->set_clipRect(swagRect4);
            							}
            						}
            					}
            				}
HXLINE(3329)				if (isModchart->__get(0)) {
HXLINE(3330)					if (daNote->garbage) {
HXLINE(3331)						daNote->set_active(false);
HXLINE(3332)						daNote->set_visible(false);
HXLINE(3334)						daNote->kill();
HXLINE(3335)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3336)						daNote->destroy();
            					}
            					else {
HXLINE(3338)						bool _hx_tmp12;
HXDLIN(3338)						if ((::Conductor_obj::songPosition > (_gthis->noteKillOffset + daNote->strumTime))) {
HXLINE(3338)							_hx_tmp12 = daNote->active;
            						}
            						else {
HXLINE(3338)							_hx_tmp12 = false;
            						}
HXDLIN(3338)						if (_hx_tmp12) {
HXLINE(3340)							bool _hx_tmp13;
HXDLIN(3340)							bool _hx_tmp14;
HXDLIN(3340)							bool _hx_tmp15;
HXDLIN(3340)							bool _hx_tmp16;
HXDLIN(3340)							if (daNote->mustPress) {
HXLINE(3340)								_hx_tmp16 = !(_gthis->cpuControlled);
            							}
            							else {
HXLINE(3340)								_hx_tmp16 = false;
            							}
HXDLIN(3340)							if (_hx_tmp16) {
HXLINE(3340)								_hx_tmp15 = !(daNote->ignoreNote);
            							}
            							else {
HXLINE(3340)								_hx_tmp15 = false;
            							}
HXDLIN(3340)							if (_hx_tmp15) {
HXLINE(3340)								_hx_tmp14 = !(_gthis->endingSong);
            							}
            							else {
HXLINE(3340)								_hx_tmp14 = false;
            							}
HXDLIN(3340)							if (_hx_tmp14) {
HXLINE(3340)								if (!(daNote->tooLate)) {
HXLINE(3340)									_hx_tmp13 = !(daNote->wasGoodHit);
            								}
            								else {
HXLINE(3340)									_hx_tmp13 = true;
            								}
            							}
            							else {
HXLINE(3340)								_hx_tmp13 = false;
            							}
HXDLIN(3340)							if (_hx_tmp13) {
HXLINE(3342)								_gthis->noteMiss(daNote);
            							}
HXLINE(3345)							daNote->set_active(false);
HXLINE(3346)							daNote->set_visible(false);
HXLINE(3348)							daNote->kill();
HXLINE(3349)							_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3350)							daNote->destroy();
            						}
            					}
            				}
            				else {
HXLINE(3355)					if ((::Conductor_obj::songPosition > (_gthis->noteKillOffset + daNote->strumTime))) {
HXLINE(3357)						bool _hx_tmp17;
HXDLIN(3357)						bool _hx_tmp18;
HXDLIN(3357)						bool _hx_tmp19;
HXDLIN(3357)						bool _hx_tmp20;
HXDLIN(3357)						if (daNote->mustPress) {
HXLINE(3357)							_hx_tmp20 = !(_gthis->cpuControlled);
            						}
            						else {
HXLINE(3357)							_hx_tmp20 = false;
            						}
HXDLIN(3357)						if (_hx_tmp20) {
HXLINE(3357)							_hx_tmp19 = !(daNote->ignoreNote);
            						}
            						else {
HXLINE(3357)							_hx_tmp19 = false;
            						}
HXDLIN(3357)						if (_hx_tmp19) {
HXLINE(3357)							_hx_tmp18 = !(_gthis->endingSong);
            						}
            						else {
HXLINE(3357)							_hx_tmp18 = false;
            						}
HXDLIN(3357)						if (_hx_tmp18) {
HXLINE(3357)							if (!(daNote->tooLate)) {
HXLINE(3357)								_hx_tmp17 = !(daNote->wasGoodHit);
            							}
            							else {
HXLINE(3357)								_hx_tmp17 = true;
            							}
            						}
            						else {
HXLINE(3357)							_hx_tmp17 = false;
            						}
HXDLIN(3357)						if (_hx_tmp17) {
HXLINE(3358)							_gthis->noteMiss(daNote);
            						}
HXLINE(3361)						daNote->set_active(false);
HXLINE(3362)						daNote->set_visible(false);
HXLINE(3364)						daNote->kill();
HXLINE(3365)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3366)						daNote->destroy();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3170)			if (!(this->inCutscene)) {
HXLINE(3171)				if (!(this->cpuControlled)) {
HXLINE(3172)					this->keyShit();
            				}
            				else {
HXLINE(3173)					bool _hx_tmp47;
HXDLIN(3173)					bool _hx_tmp48;
HXDLIN(3173)					bool _hx_tmp49;
HXDLIN(3173)					if (::hx::IsNotNull( this->boyfriend->animation->_curAnim )) {
HXLINE(3173)						_hx_tmp49 = (this->boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * (((Float)0.0011) / ::flixel::FlxG_obj::sound->music->_pitch)) * this->boyfriend->singDuration));
            					}
            					else {
HXLINE(3173)						_hx_tmp49 = false;
            					}
HXDLIN(3173)					if (_hx_tmp49) {
HXLINE(3173)						_hx_tmp48 = ::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c));
            					}
            					else {
HXLINE(3173)						_hx_tmp48 = false;
            					}
HXDLIN(3173)					if (_hx_tmp48) {
HXLINE(3173)						_hx_tmp47 = !(::StringTools_obj::endsWith(this->boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            					}
            					else {
HXLINE(3173)						_hx_tmp47 = false;
            					}
HXDLIN(3173)					if (_hx_tmp47) {
HXLINE(3174)						this->boyfriend->dance();
            					}
            				}
            			}
HXLINE(3179)			::Array< bool > isModchart = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_146,1);
HXLINE(3181)			if (this->useModchart) {
HXLINE(3182)				isModchart[0] = true;
            			}
HXLINE(3186)			Float fakeCrochet = ((( (Float)(60) ) / ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) ));
HXLINE(3187)			if (isModchart->__get(0)) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3,int,a12, ::Dynamic,_g1) HXARGC(2)
            				int _hx_run( ::Note a2, ::Note a3){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3187_update)
HXLINE(3187)					return ( (int)(_g1(a12,a2,a3)) );
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(3187)				 ::Dynamic _g1 = this->sortByOrderNote_dyn();
HXDLIN(3187)				int a12 = -1;
HXDLIN(3187)				 ::Dynamic _hx_tmp50 =  ::Dynamic(new _hx_Closure_3(a12,_g1));
HXDLIN(3187)				this->notes->members->sort(_hx_tmp50);
            			}
HXLINE(3188)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_4(fakeCrochet,_gthis,isModchart)),null());
            		}
HXLINE(3372)		this->checkEventNote();
HXLINE(3387)		this->setOnLuas(HX_("cameraX",13,8a,31,e3),this->camFollowPos->x);
HXLINE(3388)		this->setOnLuas(HX_("cameraY",14,8a,31,e3),this->camFollowPos->y);
HXLINE(3389)		this->setOnLuas(HX_("botPlay",9b,27,83,4c),this->cpuControlled);
HXLINE(3390)		this->callOnLuas(HX_("onUpdatePost",08,11,55,db),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed),null(),null());
            	}


void PlayState_obj::openPauseMenu(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3394_openPauseMenu)
HXLINE(3395)		this->persistentUpdate = false;
HXLINE(3396)		this->persistentDraw = true;
HXLINE(3397)		this->paused = true;
HXLINE(3399)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(3400)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(3401)			if (this->separateVocals) {
HXLINE(3402)				this->opponentVocals->pause();
            			}
HXLINE(3403)			this->vocals->pause();
            		}
HXLINE(3405)		Float _hx_tmp = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(3405)		this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,this->boyfriend->getScreenPosition(null(),null())->y));
HXLINE(3408)		::String _hx_tmp1 = this->detailsPausedText;
HXDLIN(3408)		::String _hx_tmp2 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(")",29,00,00,00))) );
HXDLIN(3408)		::DiscordClient_obj::changePresence(_hx_tmp1,_hx_tmp2,this->iconP2->getCharacter(),null(),null());
HXLINE(3411)		this->callOnLuas(HX_("onPausePost",57,1d,06,71),::cpp::VirtualArray_obj::__new(0),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,openPauseMenu,(void))

void PlayState_obj::openChartEditor(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3415_openChartEditor)
HXLINE(3416)		this->persistentUpdate = false;
HXLINE(3417)		this->paused = true;
HXLINE(3418)		::PlayState_obj::cancelMusicFadeTween();
HXLINE(3419)		::MusicBeatState_obj::switchState( ::editors::ChartingState_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(3420)		::PlayState_obj::chartingMode = true;
HXLINE(3423)		::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),null(),null(),true,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,openChartEditor,(void))

bool PlayState_obj::doDeathCheck( ::Dynamic __o_skipHealthCheck){
            		 ::Dynamic skipHealthCheck = __o_skipHealthCheck;
            		if (::hx::IsNull(__o_skipHealthCheck)) skipHealthCheck = false;
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3428_doDeathCheck)
HXLINE(3429)		bool _hx_tmp;
HXDLIN(3429)		bool _hx_tmp1;
HXDLIN(3429)		bool _hx_tmp2;
HXDLIN(3429)		bool _hx_tmp3;
HXDLIN(3429)		if (( (bool)(skipHealthCheck) )) {
HXLINE(3429)			_hx_tmp3 = this->instakillOnMiss;
            		}
            		else {
HXLINE(3429)			_hx_tmp3 = false;
            		}
HXDLIN(3429)		if (!(_hx_tmp3)) {
HXLINE(3429)			_hx_tmp2 = (this->health <= 0);
            		}
            		else {
HXLINE(3429)			_hx_tmp2 = true;
            		}
HXDLIN(3429)		if (_hx_tmp2) {
HXLINE(3429)			_hx_tmp1 = !(this->practiceMode);
            		}
            		else {
HXLINE(3429)			_hx_tmp1 = false;
            		}
HXDLIN(3429)		if (_hx_tmp1) {
HXLINE(3429)			_hx_tmp = !(this->isDead);
            		}
            		else {
HXLINE(3429)			_hx_tmp = false;
            		}
HXDLIN(3429)		if (_hx_tmp) {
HXLINE(3431)			 ::Dynamic ret = this->callOnLuas(HX_("onGameOver",a5,66,95,93),::cpp::VirtualArray_obj::__new(0),false,null());
HXLINE(3432)			if (::hx::IsNotEq( ret,::FunkinLua_obj::Function_Stop )) {
HXLINE(3433)				this->boyfriend->stunned = true;
HXLINE(3434)				::PlayState_obj::deathCounter++;
HXLINE(3436)				this->paused = true;
HXLINE(3438)				if (this->separateVocals) {
HXLINE(3439)					 ::flixel::sound::FlxSound _this = this->opponentVocals;
HXDLIN(3439)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(3440)				{
HXLINE(3440)					 ::flixel::sound::FlxSound _this1 = this->vocals;
HXDLIN(3440)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(3441)				{
HXLINE(3441)					 ::flixel::sound::FlxSound _this2 = ::flixel::FlxG_obj::sound->music;
HXDLIN(3441)					_this2->cleanup(_this2->autoDestroy,true);
            				}
HXLINE(3443)				this->persistentUpdate = false;
HXLINE(3444)				this->persistentDraw = false;
HXLINE(3445)				{
HXLINE(3445)					 ::Dynamic tween = this->modchartTweens->iterator();
HXDLIN(3445)					while(( (bool)(tween->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3445)						 ::flixel::tweens::FlxTween tween1 = ( ( ::flixel::tweens::FlxTween)(tween->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3446)						tween1->set_active(true);
            					}
            				}
HXLINE(3448)				{
HXLINE(3448)					 ::Dynamic timer = this->modchartTimers->iterator();
HXDLIN(3448)					while(( (bool)(timer->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(3448)						 ::flixel::util::FlxTimer timer1 = ( ( ::flixel::util::FlxTimer)(timer->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(3449)						timer1->active = true;
            					}
            				}
HXLINE(3451)				Float _hx_tmp4 = this->boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(3451)				Float _hx_tmp5 = (_hx_tmp4 - this->boyfriend->positionArray->__get(0));
HXDLIN(3451)				Float _hx_tmp6 = this->boyfriend->getScreenPosition(null(),null())->y;
HXDLIN(3451)				this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp5,(_hx_tmp6 - this->boyfriend->positionArray->__get(1)),this->camFollowPos->x,this->camFollowPos->y));
HXLINE(3459)				this->isDead = true;
HXLINE(3460)				return true;
            			}
            		}
HXLINE(3463)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,doDeathCheck,return )

void PlayState_obj::checkEventNote(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3467_checkEventNote)
HXDLIN(3467)		while((this->eventNotes->length > 0)){
HXLINE(3468)			Float leStrumTime = ( (Float)(this->eventNotes->__get(0)->__Field(HX_("strumTime",f6,2d,21,f4),::hx::paccDynamic)) );
HXLINE(3469)			if ((::Conductor_obj::songPosition < leStrumTime)) {
HXLINE(3470)				goto _hx_goto_153;
            			}
HXLINE(3473)			::String value1 = HX_("",00,00,00,00);
HXLINE(3474)			if (::hx::IsNotNull( this->eventNotes->__get(0)->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(3475)				value1 = ( (::String)(this->eventNotes->__get(0)->__Field(HX_("value1",a0,03,b7,4f),::hx::paccDynamic)) );
            			}
HXLINE(3477)			::String value2 = HX_("",00,00,00,00);
HXLINE(3478)			if (::hx::IsNotNull( this->eventNotes->__get(0)->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic) )) {
HXLINE(3479)				value2 = ( (::String)(this->eventNotes->__get(0)->__Field(HX_("value2",a1,03,b7,4f),::hx::paccDynamic)) );
            			}
HXLINE(3481)			this->triggerEventNote(( (::String)(this->eventNotes->__get(0)->__Field(HX_("event",1a,c8,c4,75),::hx::paccDynamic)) ),value1,value2);
HXLINE(3482)			this->eventNotes->shift();
            		}
            		_hx_goto_153:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,checkEventNote,(void))

bool PlayState_obj::getControl(::String key){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3486_getControl)
HXLINE(3487)		bool pressed = ( (bool)(::Reflect_obj::getProperty(::PlayerSettings_obj::player1->controls,key)) );
HXLINE(3489)		return pressed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getControl,return )

void PlayState_obj::triggerEventNote(::String eventName,::String value1,::String value2){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3492_triggerEventNote)
HXDLIN(3492)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3493)		::String _hx_switch_0 = eventName;
            		if (  (_hx_switch_0==HX_("Add Camera Zoom",cf,55,a6,44)) ){
HXLINE(3563)			bool _hx_tmp;
HXDLIN(3563)			if (::ClientPrefs_obj::camZooms) {
HXLINE(3563)				_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(3563)				_hx_tmp = false;
            			}
HXDLIN(3563)			if (_hx_tmp) {
HXLINE(3564)				Float camZoom = ::Std_obj::parseFloat(value1);
HXLINE(3565)				Float hudZoom = ::Std_obj::parseFloat(value2);
HXLINE(3566)				if (::Math_obj::isNaN(camZoom)) {
HXLINE(3566)					camZoom = ((Float)0.015);
            				}
HXLINE(3567)				if (::Math_obj::isNaN(hudZoom)) {
HXLINE(3567)					hudZoom = ((Float)0.03);
            				}
HXLINE(3569)				 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(3569)				fh->set_zoom((fh->zoom + camZoom));
HXLINE(3570)				 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(3570)				fh1->set_zoom((fh1->zoom + hudZoom));
HXLINE(3572)				Float frontZoom = ::Std_obj::parseFloat(value2);
HXLINE(3573)				Float backZoom = ::Std_obj::parseFloat(value2);
HXLINE(3574)				if (::Math_obj::isNaN(frontZoom)) {
HXLINE(3574)					frontZoom = ((Float)0.02);
            				}
HXLINE(3575)				if (::Math_obj::isNaN(backZoom)) {
HXLINE(3575)					backZoom = ((Float)0.04);
            				}
            			}
HXLINE(3563)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Alt Idle Animation",2f,00,fa,18)) ){
HXLINE(3619)			 ::Character _hx_char = this->dad;
HXLINE(3620)			::String _hx_switch_1 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_1==HX_("bf",c4,55,00,00)) ||  (_hx_switch_1==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(3624)				_hx_char = this->boyfriend;
HXDLIN(3624)				goto _hx_goto_157;
            			}
            			if (  (_hx_switch_1==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_1==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(3622)				_hx_char = this->gf;
HXDLIN(3622)				goto _hx_goto_157;
            			}
            			/* default */{
HXLINE(3626)				int val = ( (int)(::Std_obj::parseInt(value1)) );
HXLINE(3627)				if (::Math_obj::isNaN(( (Float)(val) ))) {
HXLINE(3627)					val = 0;
            				}
HXLINE(3629)				switch((int)(val)){
            					case (int)1: {
HXLINE(3630)						_hx_char = this->boyfriend;
            					}
            					break;
            					case (int)2: {
HXLINE(3631)						_hx_char = this->gf;
            					}
            					break;
            				}
            			}
            			_hx_goto_157:;
HXLINE(3635)			if (::hx::IsNotNull( _hx_char )) {
HXLINE(3637)				_hx_char->idleSuffix = value2;
HXLINE(3638)				_hx_char->recalculateDanceIdle();
            			}
HXLINE(3618)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Camera Follow Pos",e0,d4,b1,c4)) ){
HXLINE(3606)			Float val1 = ::Std_obj::parseFloat(value1);
HXLINE(3607)			Float val2 = ::Std_obj::parseFloat(value2);
HXLINE(3608)			if (::Math_obj::isNaN(val1)) {
HXLINE(3608)				val1 = ( (Float)(0) );
            			}
HXLINE(3609)			if (::Math_obj::isNaN(val2)) {
HXLINE(3609)				val2 = ( (Float)(0) );
            			}
HXLINE(3611)			this->isCameraOnForcedPos = false;
HXLINE(3612)			bool _hx_tmp1;
HXDLIN(3612)			if (::Math_obj::isNaN(::Std_obj::parseFloat(value1))) {
HXLINE(3612)				_hx_tmp1 = !(::Math_obj::isNaN(::Std_obj::parseFloat(value2)));
            			}
            			else {
HXLINE(3612)				_hx_tmp1 = true;
            			}
HXDLIN(3612)			if (_hx_tmp1) {
HXLINE(3613)				this->camFollow->set_x(val1);
HXLINE(3614)				this->camFollow->set_y(val2);
HXLINE(3615)				this->isCameraOnForcedPos = true;
            			}
HXLINE(3605)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Change Character",f9,50,ef,9c)) ){
HXLINE(3659)			int charType = 0;
HXLINE(3660)			::String _hx_switch_2 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_2==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_2==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(3662)				charType = 2;
HXDLIN(3662)				goto _hx_goto_158;
            			}
            			if (  (_hx_switch_2==HX_("dad",47,36,4c,00)) ||  (_hx_switch_2==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(3664)				charType = 1;
HXDLIN(3664)				goto _hx_goto_158;
            			}
            			/* default */{
HXLINE(3666)				charType = ( (int)(::Std_obj::parseInt(value1)) );
HXLINE(3667)				if (::Math_obj::isNaN(( (Float)(charType) ))) {
HXLINE(3667)					charType = 0;
            				}
            			}
            			_hx_goto_158:;
HXLINE(3670)			switch((int)(charType)){
            				case (int)0: {
HXLINE(3672)					if ((this->boyfriend->curCharacter != value2)) {
HXLINE(3673)						if (!(this->boyfriendMap->exists(value2))) {
HXLINE(3674)							this->addCharacterToList(value2,charType);
            						}
HXLINE(3677)						Float lastAlpha = this->boyfriend->alpha;
HXLINE(3678)						this->boyfriend->set_alpha(((Float)0.00001));
HXLINE(3679)						this->boyfriend = ( ( ::Boyfriend)(this->boyfriendMap->get(value2)) );
HXLINE(3680)						this->boyfriend->set_alpha(lastAlpha);
HXLINE(3681)						this->iconP1->changeIcon(this->boyfriend->healthIcon);
            					}
HXLINE(3683)					this->setOnLuas(HX_("boyfriendName",d5,c4,d2,4c),this->boyfriend->curCharacter);
            				}
            				break;
            				case (int)1: {
HXLINE(3686)					if ((this->dad->curCharacter != value2)) {
HXLINE(3687)						if (!(this->dadMap->exists(value2))) {
HXLINE(3688)							this->addCharacterToList(value2,charType);
            						}
HXLINE(3691)						bool wasGf = ::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf",1f,5a,00,00));
HXLINE(3692)						Float lastAlpha1 = this->dad->alpha;
HXLINE(3693)						this->dad->set_alpha(((Float)0.00001));
HXLINE(3694)						this->dad = ( ( ::Character)(this->dadMap->get(value2)) );
HXLINE(3695)						if (!(::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf",1f,5a,00,00)))) {
HXLINE(3696)							bool _hx_tmp2;
HXDLIN(3696)							if (wasGf) {
HXLINE(3696)								_hx_tmp2 = ::hx::IsNotNull( this->gf );
            							}
            							else {
HXLINE(3696)								_hx_tmp2 = false;
            							}
HXDLIN(3696)							if (_hx_tmp2) {
HXLINE(3697)								this->gf->set_visible(true);
            							}
            						}
            						else {
HXLINE(3699)							if (::hx::IsNotNull( this->gf )) {
HXLINE(3700)								this->gf->set_visible(false);
            							}
            						}
HXLINE(3702)						this->dad->set_alpha(lastAlpha1);
HXLINE(3703)						this->iconP2->changeIcon(this->dad->healthIcon);
            					}
HXLINE(3705)					this->setOnLuas(HX_("dadName",32,04,eb,ce),this->dad->curCharacter);
            				}
            				break;
            				case (int)2: {
HXLINE(3708)					if (::hx::IsNotNull( this->gf )) {
HXLINE(3710)						if ((this->gf->curCharacter != value2)) {
HXLINE(3712)							if (!(this->gfMap->exists(value2))) {
HXLINE(3714)								this->addCharacterToList(value2,charType);
            							}
HXLINE(3717)							Float lastAlpha2 = this->gf->alpha;
HXLINE(3718)							this->gf->set_alpha(((Float)0.00001));
HXLINE(3719)							this->gf = ( ( ::Character)(this->gfMap->get(value2)) );
HXLINE(3720)							this->gf->set_alpha(lastAlpha2);
            						}
HXLINE(3722)						this->setOnLuas(HX_("gfName",0a,f4,79,1d),this->gf->curCharacter);
            					}
            				}
            				break;
            			}
HXLINE(3725)			this->reloadHealthBarColors();
HXLINE(3658)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Change Scroll Speed",c4,2f,0b,43)) ){
HXLINE(3728)			if ((this->songSpeedType == HX_("constant",64,c1,9d,a5))) {
HXLINE(3729)				return;
            			}
HXLINE(3730)			Float val11 = ::Std_obj::parseFloat(value1);
HXLINE(3731)			Float val21 = ::Std_obj::parseFloat(value2);
HXLINE(3732)			if (::Math_obj::isNaN(val11)) {
HXLINE(3732)				val11 = ( (Float)(1) );
            			}
HXLINE(3733)			if (::Math_obj::isNaN(val21)) {
HXLINE(3733)				val21 = ( (Float)(0) );
            			}
HXLINE(3735)			Float newValue = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
HXDLIN(3735)			 ::Dynamic defaultValue = 1;
HXDLIN(3735)			 ::Dynamic newValue1;
HXDLIN(3735)			if (::PlayState_obj::isStoryMode) {
HXLINE(3735)				newValue1 = defaultValue;
            			}
            			else {
HXLINE(3735)				if (::ClientPrefs_obj::gameplaySettings->exists(HX_("scrollspeed",5a,70,19,38))) {
HXLINE(3735)					newValue1 = ::ClientPrefs_obj::gameplaySettings->get(HX_("scrollspeed",5a,70,19,38));
            				}
            				else {
HXLINE(3735)					newValue1 = defaultValue;
            				}
            			}
HXDLIN(3735)			Float newValue2 = ((newValue * ( (Float)(newValue1) )) * val11);
HXLINE(3737)			if ((val21 <= 0)) {
HXLINE(3739)				this->set_songSpeed(newValue2);
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween twn){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3746_triggerEventNote)
HXLINE(3746)					_gthis->songSpeedTween = null();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3743)				this->songSpeedTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("songSpeed",72,df,e3,b0),newValue2)),val21, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            			}
HXLINE(3727)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Dadbattle Spotlight",b3,45,78,e2)) ){
HXLINE(3495)			 ::Dynamic val3 = ::Std_obj::parseInt(value1);
HXLINE(3496)			if (::hx::IsNull( val3 )) {
HXLINE(3496)				val3 = 0;
            			}
HXLINE(3498)			{
HXLINE(3498)				 ::Dynamic _g = ::Std_obj::parseInt(value1);
HXDLIN(3498)				if (::hx::IsNull( _g )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3524_triggerEventNote)
HXLINE(3524)						_gthis->dadbattleSmokes->set_visible(false);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(3519)					this->dadbattleBlack->set_visible(false);
HXLINE(3520)					this->dadbattleLight->set_visible(false);
HXLINE(3521)					 ::PlayState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3521)					_hx_tmp3->defaultCamZoom = (_hx_tmp3->defaultCamZoom - ((Float)0.12));
HXLINE(3522)					::flixel::tweens::FlxTween_obj::tween(this->dadbattleSmokes, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            				}
            				else {
HXLINE(3498)					 ::Dynamic _hx_switch_3 = _g;
            					if (  (_hx_switch_3==1) ||  (_hx_switch_3==2) ||  (_hx_switch_3==3) ){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3514_triggerEventNote)
HXLINE(3514)							_gthis->dadbattleLight->set_alpha(((Float)0.375));
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(3501)						if (::hx::IsEq( val3,1 )) {
HXLINE(3503)							this->dadbattleBlack->set_visible(true);
HXLINE(3504)							this->dadbattleLight->set_visible(true);
HXLINE(3505)							this->dadbattleSmokes->set_visible(true);
HXLINE(3506)							 ::PlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3506)							_hx_tmp4->defaultCamZoom = (_hx_tmp4->defaultCamZoom + ((Float)0.12));
            						}
HXLINE(3509)						 ::Character who = this->dad;
HXLINE(3510)						if (::hx::IsGreater( val3,2 )) {
HXLINE(3510)							who = this->boyfriend;
            						}
HXLINE(3512)						this->dadbattleLight->set_alpha(( (Float)(0) ));
HXLINE(3513)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.12), ::Dynamic(new _hx_Closure_3(_gthis)),null());
HXLINE(3516)						 ::BGSprite _hx_tmp5 = this->dadbattleLight;
HXDLIN(3516)						Float _hx_tmp6 = who->getGraphicMidpoint(null())->x;
HXDLIN(3516)						Float _hx_tmp7 = (_hx_tmp6 - (this->dadbattleLight->get_width() / ( (Float)(2) )));
HXDLIN(3516)						Float who1 = who->y;
HXDLIN(3516)						Float _hx_tmp8 = (who1 + who->get_height());
HXDLIN(3516)						_hx_tmp5->setPosition(_hx_tmp7,((_hx_tmp8 - this->dadbattleLight->get_height()) + 50));
HXLINE(3500)						goto _hx_goto_159;
            					}
            					/* default */{
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3524_triggerEventNote)
HXLINE(3524)							_gthis->dadbattleSmokes->set_visible(false);
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(3519)						this->dadbattleBlack->set_visible(false);
HXLINE(3520)						this->dadbattleLight->set_visible(false);
HXLINE(3521)						 ::PlayState _hx_tmp9 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3521)						_hx_tmp9->defaultCamZoom = (_hx_tmp9->defaultCamZoom - ((Float)0.12));
HXLINE(3522)						::flixel::tweens::FlxTween_obj::tween(this->dadbattleSmokes, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis)))));
            					}
            					_hx_goto_159:;
            				}
            			}
HXLINE(3494)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Hey!",e5,69,e4,2f)) ){
HXLINE(3529)			int value = 2;
HXLINE(3530)			::String _hx_switch_4 = ::StringTools_obj::trim(value1.toLowerCase());
            			if (  (_hx_switch_4==HX_("0",30,00,00,00)) ||  (_hx_switch_4==HX_("bf",c4,55,00,00)) ||  (_hx_switch_4==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(3532)				value = 0;
HXDLIN(3532)				goto _hx_goto_160;
            			}
            			if (  (_hx_switch_4==HX_("1",31,00,00,00)) ||  (_hx_switch_4==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_4==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(3534)				value = 1;
HXDLIN(3534)				goto _hx_goto_160;
            			}
            			_hx_goto_160:;
HXLINE(3537)			Float time = ::Std_obj::parseFloat(value2);
HXLINE(3538)			bool _hx_tmp10;
HXDLIN(3538)			if (!(::Math_obj::isNaN(time))) {
HXLINE(3538)				_hx_tmp10 = (time <= 0);
            			}
            			else {
HXLINE(3538)				_hx_tmp10 = true;
            			}
HXDLIN(3538)			if (_hx_tmp10) {
HXLINE(3538)				time = ((Float)0.6);
            			}
HXLINE(3540)			if ((value != 0)) {
HXLINE(3541)				if (::StringTools_obj::startsWith(this->dad->curCharacter,HX_("gf",1f,5a,00,00))) {
HXLINE(3542)					this->dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
HXLINE(3543)					this->dad->specialAnim = true;
HXLINE(3544)					this->dad->heyTimer = time;
            				}
            				else {
HXLINE(3545)					if (::hx::IsNotNull( this->gf )) {
HXLINE(3546)						this->gf->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
HXLINE(3547)						this->gf->specialAnim = true;
HXLINE(3548)						this->gf->heyTimer = time;
            					}
            				}
            			}
HXLINE(3551)			if ((value != 1)) {
HXLINE(3552)				this->boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(3553)				this->boyfriend->specialAnim = true;
HXLINE(3554)				this->boyfriend->heyTimer = time;
            			}
HXLINE(3528)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Play Animation",d8,05,5f,0c)) ){
HXLINE(3583)			 ::Character char1 = this->dad;
HXLINE(3584)			::String _hx_switch_5 = ::StringTools_obj::trim(value2.toLowerCase());
            			if (  (_hx_switch_5==HX_("bf",c4,55,00,00)) ||  (_hx_switch_5==HX_("boyfriend",6a,29,b8,e6)) ){
HXLINE(3586)				char1 = this->boyfriend;
HXDLIN(3586)				goto _hx_goto_161;
            			}
            			if (  (_hx_switch_5==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_5==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(3588)				char1 = this->gf;
HXDLIN(3588)				goto _hx_goto_161;
            			}
            			/* default */{
HXLINE(3590)				int val22 = ( (int)(::Std_obj::parseInt(value2)) );
HXLINE(3591)				if (::Math_obj::isNaN(( (Float)(val22) ))) {
HXLINE(3591)					val22 = 0;
            				}
HXLINE(3593)				switch((int)(val22)){
            					case (int)1: {
HXLINE(3594)						char1 = this->boyfriend;
            					}
            					break;
            					case (int)2: {
HXLINE(3595)						char1 = this->gf;
            					}
            					break;
            				}
            			}
            			_hx_goto_161:;
HXLINE(3599)			if (::hx::IsNotNull( char1 )) {
HXLINE(3601)				char1->playAnim(value1,true,null(),null());
HXLINE(3602)				char1->specialAnim = true;
            			}
HXLINE(3581)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Remove Message",eb,b5,aa,28)) ){
HXLINE(3760)			 ::Dynamic val4 = ::Std_obj::parseInt(value1);
HXLINE(3761)			if (::hx::IsNull( val4 )) {
HXLINE(3761)				val4 = 0;
            			}
HXLINE(3763)			if (::hx::IsEq( val4,1 )) {
HXLINE(3764)				if (::hx::IsNotNull( this->discordOpponent )) {
HXLINE(3764)					this->discordOpponent->deleteMessage();
            				}
            				else {
HXLINE(3766)					if (::hx::IsNotNull( this->discordPlayer )) {
HXLINE(3766)						this->discordPlayer->deleteMessage();
            					}
            				}
            			}
HXLINE(3759)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Screen Shake",12,bb,51,4b)) ){
HXLINE(3642)			::Array< ::String > valuesArray = ::Array_obj< ::String >::__new(2)->init(0,value1)->init(1,value2);
HXLINE(3643)			::Array< ::Dynamic> targetsArray = ::Array_obj< ::Dynamic>::__new(2)->init(0,this->camGame)->init(1,this->camHUD);
HXLINE(3644)			{
HXLINE(3644)				int _g1 = 0;
HXDLIN(3644)				int _g2 = targetsArray->length;
HXDLIN(3644)				while((_g1 < _g2)){
HXLINE(3644)					_g1 = (_g1 + 1);
HXDLIN(3644)					int i = (_g1 - 1);
HXLINE(3645)					::Array< ::String > split = valuesArray->__get(i).split(HX_(",",2c,00,00,00));
HXLINE(3646)					Float duration = ( (Float)(0) );
HXLINE(3647)					Float intensity = ( (Float)(0) );
HXLINE(3648)					if (::hx::IsNotNull( split->__get(0) )) {
HXLINE(3648)						duration = ::Std_obj::parseFloat(::StringTools_obj::trim(split->__get(0)));
            					}
HXLINE(3649)					if (::hx::IsNotNull( split->__get(1) )) {
HXLINE(3649)						intensity = ::Std_obj::parseFloat(::StringTools_obj::trim(split->__get(1)));
            					}
HXLINE(3650)					if (::Math_obj::isNaN(duration)) {
HXLINE(3650)						duration = ( (Float)(0) );
            					}
HXLINE(3651)					if (::Math_obj::isNaN(intensity)) {
HXLINE(3651)						intensity = ( (Float)(0) );
            					}
HXLINE(3653)					bool _hx_tmp11;
HXDLIN(3653)					if ((duration > 0)) {
HXLINE(3653)						_hx_tmp11 = (intensity != 0);
            					}
            					else {
HXLINE(3653)						_hx_tmp11 = false;
            					}
HXDLIN(3653)					if (_hx_tmp11) {
HXLINE(3654)						targetsArray->__get(i).StaticCast<  ::flixel::FlxCamera >()->shake(intensity,duration,null(),null(),null());
            					}
            				}
            			}
HXLINE(3641)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Set GF Speed",04,ff,9a,c4)) ){
HXLINE(3558)			int value3 = ( (int)(::Std_obj::parseInt(value1)) );
HXLINE(3559)			bool _hx_tmp12;
HXDLIN(3559)			if (!(::Math_obj::isNaN(( (Float)(value3) )))) {
HXLINE(3559)				_hx_tmp12 = (value3 < 1);
            			}
            			else {
HXLINE(3559)				_hx_tmp12 = true;
            			}
HXDLIN(3559)			if (_hx_tmp12) {
HXLINE(3559)				value3 = 1;
            			}
HXLINE(3560)			this->gfSpeed = value3;
HXLINE(3557)			goto _hx_goto_156;
            		}
            		if (  (_hx_switch_0==HX_("Set Property",d3,50,a6,2e)) ){
HXLINE(3752)			::Array< ::String > killMe = value1.split(HX_(".",2e,00,00,00));
HXLINE(3753)			if ((killMe->length > 1)) {
HXLINE(3754)				 ::Dynamic _hx_tmp13 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,true,true);
HXDLIN(3754)				::FunkinLua_obj::setVarInArray(_hx_tmp13,killMe->__get((killMe->length - 1)),value2);
            			}
            			else {
HXLINE(3756)				::FunkinLua_obj::setVarInArray(::hx::ObjectPtr<OBJ_>(this),value1,value2);
            			}
HXLINE(3751)			goto _hx_goto_156;
            		}
            		_hx_goto_156:;
HXLINE(3769)		this->callOnLuas(HX_("onEvent",7b,66,02,0c),::cpp::VirtualArray_obj::__new(3)->init(0,eventName)->init(1,value1)->init(2,value2),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,triggerEventNote,(void))

void PlayState_obj::moveCameraSection(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3772_moveCameraSection)
HXLINE(3773)		if (::hx::IsNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(3773)			return;
            		}
HXLINE(3775)		bool _hx_tmp;
HXDLIN(3775)		if (::hx::IsNotNull( this->gf )) {
HXLINE(3775)			_hx_tmp = ( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(3775)			_hx_tmp = false;
            		}
HXDLIN(3775)		if (_hx_tmp) {
HXLINE(3777)			{
HXLINE(3777)				 ::flixel::math::FlxBasePoint this1 = this->camFollow;
HXDLIN(3777)				Float x = this->gf->getMidpoint(null())->x;
HXDLIN(3777)				Float y = this->gf->getMidpoint(null())->y;
HXDLIN(3777)				this1->set_x(x);
HXDLIN(3777)				this1->set_y(y);
            			}
HXLINE(3778)			this->camFollow->set_x((this->camFollow->x + (this->gf->cameraPosition->__get(0) + this->girlfriendCameraOffset->__get(0))));
HXLINE(3779)			this->camFollow->set_y((this->camFollow->y + (this->gf->cameraPosition->__get(1) + this->girlfriendCameraOffset->__get(1))));
HXLINE(3780)			this->tweenCamIn();
HXLINE(3781)			this->callOnLuas(HX_("onMoveCamera",95,62,fe,df),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("gf",1f,5a,00,00)),null(),null());
HXLINE(3782)			return;
            		}
HXLINE(3785)		if (!(( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ))) {
HXLINE(3787)			this->moveCamera(true);
HXLINE(3788)			this->callOnLuas(HX_("onMoveCamera",95,62,fe,df),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("dad",47,36,4c,00)),null(),null());
            		}
            		else {
HXLINE(3792)			this->moveCamera(false);
HXLINE(3793)			this->callOnLuas(HX_("onMoveCamera",95,62,fe,df),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("boyfriend",6a,29,b8,e6)),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,moveCameraSection,(void))

void PlayState_obj::moveCamera(bool isDad){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3799_moveCamera)
HXDLIN(3799)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3800)		if (isDad) {
HXLINE(3802)			{
HXLINE(3802)				 ::flixel::math::FlxBasePoint this1 = this->camFollow;
HXDLIN(3802)				Float x = (this->dad->getMidpoint(null())->x + 150);
HXDLIN(3802)				Float y = (this->dad->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN(3802)				this1->set_x(x);
HXDLIN(3802)				this1->set_y(y);
            			}
HXLINE(3803)			this->camFollow->set_x((this->camFollow->x + (this->dad->cameraPosition->__get(0) + this->opponentCameraOffset->__get(0))));
HXLINE(3804)			this->camFollow->set_y((this->camFollow->y + (this->dad->cameraPosition->__get(1) + this->opponentCameraOffset->__get(1))));
HXLINE(3805)			this->tweenCamIn();
            		}
            		else {
HXLINE(3809)			{
HXLINE(3809)				 ::flixel::math::FlxBasePoint this2 = this->camFollow;
HXDLIN(3809)				Float x1 = (this->boyfriend->getMidpoint(null())->x - ( (Float)(100) ));
HXDLIN(3809)				Float y1 = (this->boyfriend->getMidpoint(null())->y - ( (Float)(100) ));
HXDLIN(3809)				this2->set_x(x1);
HXDLIN(3809)				this2->set_y(y1);
            			}
HXLINE(3810)			this->camFollow->set_x((this->camFollow->x - (this->boyfriend->cameraPosition->__get(0) - this->boyfriendCameraOffset->__get(0))));
HXLINE(3811)			this->camFollow->set_y((this->camFollow->y + (this->boyfriend->cameraPosition->__get(1) + this->boyfriendCameraOffset->__get(1))));
HXLINE(3813)			bool _hx_tmp;
HXDLIN(3813)			bool _hx_tmp1;
HXDLIN(3813)			::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(3813)			 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(3813)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(3813)			::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(3813)			if ((hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase() == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(3813)				_hx_tmp1 = ::hx::IsNull( this->cameraTwn );
            			}
            			else {
HXLINE(3813)				_hx_tmp1 = false;
            			}
HXDLIN(3813)			if (_hx_tmp1) {
HXLINE(3813)				_hx_tmp = (::flixel::FlxG_obj::camera->zoom != 1);
            			}
            			else {
HXLINE(3813)				_hx_tmp = false;
            			}
HXDLIN(3813)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween twn){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3818_moveCamera)
HXLINE(3818)					_gthis->cameraTwn = null();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3815)				this->cameraTwn = ::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("zoom",13,a3,f8,50),1)),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            			}
            		}
HXLINE(3824)		if (::hx::IsNotNull( this->discordPlayer )) {
HXLINE(3825)			this->discordPlayer->myTurn = !(isDad);
            		}
HXLINE(3827)		if (::hx::IsNotNull( this->discordOpponent )) {
HXLINE(3828)			this->discordOpponent->myTurn = isDad;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,moveCamera,(void))

void PlayState_obj::tweenCamIn(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3831_tweenCamIn)
HXDLIN(3831)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3832)		bool _hx_tmp;
HXDLIN(3832)		bool _hx_tmp1;
HXDLIN(3832)		::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(3832)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(3832)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(3832)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(3832)		if ((hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase() == HX_("tutorial",9e,8f,b5,82))) {
HXLINE(3832)			_hx_tmp1 = ::hx::IsNull( this->cameraTwn );
            		}
            		else {
HXLINE(3832)			_hx_tmp1 = false;
            		}
HXDLIN(3832)		if (_hx_tmp1) {
HXLINE(3832)			_hx_tmp = (::flixel::FlxG_obj::camera->zoom != ((Float)1.3));
            		}
            		else {
HXLINE(3832)			_hx_tmp = false;
            		}
HXDLIN(3832)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3835_tweenCamIn)
HXLINE(3835)				_gthis->cameraTwn = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3833)			this->cameraTwn = ::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::snapCamFollowToPos(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3841_snapCamFollowToPos)
HXLINE(3842)		{
HXLINE(3842)			 ::flixel::math::FlxBasePoint this1 = this->camFollow;
HXDLIN(3842)			this1->set_x(x);
HXDLIN(3842)			this1->set_y(y);
            		}
HXLINE(3843)		this->camFollowPos->setPosition(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,snapCamFollowToPos,(void))

void PlayState_obj::finishSong( ::Dynamic __o_ignoreNoteOffset){
            		 ::Dynamic ignoreNoteOffset = __o_ignoreNoteOffset;
            		if (::hx::IsNull(__o_ignoreNoteOffset)) ignoreNoteOffset = false;
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3848_finishSong)
HXDLIN(3848)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3850)		if (this->doneFinishSong) {
HXLINE(3850)			return;
            		}
HXLINE(3851)		this->doneFinishSong = true;
HXLINE(3852)		::haxe::Log_obj::trace(HX_("runningFinishSongFunction",df,22,40,6b),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3852,HX_("PlayState",5d,83,c2,46),HX_("finishSong",c8,b5,92,d8)));
HXLINE(3854)		this->updateTime = false;
HXLINE(3855)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(3856)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(3857)		this->vocals->pause();
HXLINE(3858)		bool _hx_tmp;
HXDLIN(3858)		if (this->separateVocals) {
HXLINE(3858)			_hx_tmp = ::hx::IsNotNull( this->opponentVocals );
            		}
            		else {
HXLINE(3858)			_hx_tmp = false;
            		}
HXDLIN(3858)		if (_hx_tmp) {
HXLINE(3859)			this->opponentVocals->set_volume(( (Float)(0) ));
HXLINE(3860)			this->opponentVocals->pause();
            		}
HXLINE(3862)		bool _hx_tmp1;
HXDLIN(3862)		if ((::ClientPrefs_obj::noteOffset > 0)) {
HXLINE(3862)			_hx_tmp1 = ( (bool)(ignoreNoteOffset) );
            		}
            		else {
HXLINE(3862)			_hx_tmp1 = true;
            		}
HXDLIN(3862)		if (_hx_tmp1) {
HXLINE(3863)			this->endSong();
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3866_finishSong)
HXLINE(3866)				_gthis->endSong();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3865)			 ::flixel::util::FlxTimer _hx_tmp2 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(3865)			this->finishTimer = _hx_tmp2->start((( (Float)(::ClientPrefs_obj::noteOffset) ) / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,finishSong,(void))

void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3874_endSong)
HXDLIN(3874)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3875)		::haxe::Log_obj::trace(HX_("START OF THE END SONG IS HERE",9a,dc,f7,64),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3875,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(3877)		if (!(this->startingSong)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3879_endSong)
HXLINE(3879)				if ((daNote->strumTime < (_gthis->songLength - ::Conductor_obj::safeZoneOffset))) {
HXLINE(3880)					 ::PlayState _gthis1 = _gthis;
HXDLIN(3880)					_gthis1->health = (_gthis1->health - (((Float)0.05) * _gthis->healthLoss));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3878)			this->notes->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(3883)			{
HXLINE(3883)				int _g = 0;
HXDLIN(3883)				::Array< ::Dynamic> _g1 = this->unspawnNotes;
HXDLIN(3883)				while((_g < _g1->length)){
HXLINE(3883)					 ::Note daNote = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3883)					_g = (_g + 1);
HXLINE(3884)					if ((daNote->strumTime < (this->songLength - ::Conductor_obj::safeZoneOffset))) {
HXLINE(3885)						 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3885)						_hx_tmp->health = (_hx_tmp->health - (((Float)0.05) * this->healthLoss));
            					}
            				}
            			}
HXLINE(3889)			if (this->doDeathCheck(null())) {
HXLINE(3890)				return;
            			}
            		}
HXLINE(3894)		this->canPause = false;
HXLINE(3895)		this->endingSong = true;
HXLINE(3896)		this->camZooming = false;
HXLINE(3897)		this->inCutscene = false;
HXLINE(3898)		this->updateTime = false;
HXLINE(3900)		::PlayState_obj::deathCounter = 0;
HXLINE(3901)		::PlayState_obj::seenCutscene = false;
HXLINE(3903)		bool isCheat;
HXDLIN(3903)		bool isCheat1;
HXDLIN(3903)		bool isCheat2;
HXDLIN(3903)		bool isCheat3;
HXDLIN(3903)		bool isCheat4;
HXDLIN(3903)		bool isCheat5;
HXDLIN(3903)		if (!(this->haveUsePractice)) {
HXLINE(3903)			isCheat5 = this->haveUseBotplay;
            		}
            		else {
HXLINE(3903)			isCheat5 = true;
            		}
HXDLIN(3903)		if (!(isCheat5)) {
HXLINE(3903)			isCheat4 = (this->healthGain > 1);
            		}
            		else {
HXLINE(3903)			isCheat4 = true;
            		}
HXDLIN(3903)		if (!(isCheat4)) {
HXLINE(3903)			isCheat3 = (this->healthLoss < 1);
            		}
            		else {
HXLINE(3903)			isCheat3 = true;
            		}
HXDLIN(3903)		if (!(isCheat3)) {
HXLINE(3903)			 ::Dynamic defaultValue = true;
HXDLIN(3903)			 ::Dynamic isCheat6;
HXDLIN(3903)			if (::PlayState_obj::isStoryMode) {
HXLINE(3903)				isCheat6 = defaultValue;
            			}
            			else {
HXLINE(3903)				if (::ClientPrefs_obj::gameplaySettings->exists(HX_("mechanics",6f,ef,7e,2e))) {
HXLINE(3903)					isCheat6 = ::ClientPrefs_obj::gameplaySettings->get(HX_("mechanics",6f,ef,7e,2e));
            				}
            				else {
HXLINE(3903)					isCheat6 = defaultValue;
            				}
            			}
HXDLIN(3903)			isCheat2 = !(( (bool)(isCheat6) ));
            		}
            		else {
HXLINE(3903)			isCheat2 = true;
            		}
HXDLIN(3903)		if (!(isCheat2)) {
HXLINE(3903)			 ::Dynamic defaultValue1 = true;
HXDLIN(3903)			 ::Dynamic isCheat7;
HXDLIN(3903)			if (::PlayState_obj::isStoryMode) {
HXLINE(3903)				isCheat7 = defaultValue1;
            			}
            			else {
HXLINE(3903)				if (::ClientPrefs_obj::gameplaySettings->exists(HX_("specialnotes",68,b3,b2,60))) {
HXLINE(3903)					isCheat7 = ::ClientPrefs_obj::gameplaySettings->get(HX_("specialnotes",68,b3,b2,60));
            				}
            				else {
HXLINE(3903)					isCheat7 = defaultValue1;
            				}
            			}
HXDLIN(3903)			isCheat1 = !(( (bool)(isCheat7) ));
            		}
            		else {
HXLINE(3903)			isCheat1 = true;
            		}
HXDLIN(3903)		if (!(isCheat1)) {
HXLINE(3903)			 ::Dynamic defaultValue2 = true;
HXDLIN(3903)			 ::Dynamic isCheat8;
HXDLIN(3903)			if (::PlayState_obj::isStoryMode) {
HXLINE(3903)				isCheat8 = defaultValue2;
            			}
            			else {
HXLINE(3903)				if (::ClientPrefs_obj::gameplaySettings->exists(HX_("modchart",dc,c6,ac,a3))) {
HXLINE(3903)					isCheat8 = ::ClientPrefs_obj::gameplaySettings->get(HX_("modchart",dc,c6,ac,a3));
            				}
            				else {
HXLINE(3903)					isCheat8 = defaultValue2;
            				}
            			}
HXDLIN(3903)			isCheat = !(( (bool)(isCheat8) ));
            		}
            		else {
HXLINE(3903)			isCheat = true;
            		}
HXLINE(3904)		 ::Dynamic ret = this->callOnLuas(HX_("onEndSong",f1,95,27,06),::cpp::VirtualArray_obj::__new(0),false,null());
HXLINE(3905)		bool _hx_tmp1;
HXDLIN(3905)		if (::hx::IsNotEq( ret,::FunkinLua_obj::Function_Stop )) {
HXLINE(3905)			_hx_tmp1 = !(this->transitioning);
            		}
            		else {
HXLINE(3905)			_hx_tmp1 = false;
            		}
HXDLIN(3905)		if (_hx_tmp1) {
HXLINE(3906)			bool _hx_tmp2;
HXDLIN(3906)			bool _hx_tmp3;
HXDLIN(3906)			if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3906)				_hx_tmp3 = !(::PlayState_obj::chartingMode);
            			}
            			else {
HXLINE(3906)				_hx_tmp3 = false;
            			}
HXDLIN(3906)			if (_hx_tmp3) {
HXLINE(3906)				_hx_tmp2 = !(isCheat);
            			}
            			else {
HXLINE(3906)				_hx_tmp2 = false;
            			}
HXDLIN(3906)			if (_hx_tmp2) {
HXLINE(3909)				Float percent = this->ratingPercent;
HXLINE(3910)				if (::Math_obj::isNaN(percent)) {
HXLINE(3910)					percent = ( (Float)(0) );
            				}
HXLINE(3911)				::Highscore_obj::saveScore(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),::PlayState_obj::storyDifficulty,this->songScore,percent,this->songMisses);
HXLINE(3913)				::Highscore_obj::calculateProgress();
            			}
HXLINE(3916)			this->set_playbackRate(( (Float)(1) ));
HXLINE(3918)			if (::PlayState_obj::chartingMode) {
HXLINE(3920)				this->openChartEditor();
HXLINE(3921)				return;
            			}
HXLINE(3924)			if (!(isCheat)) {
HXLINE(3925)				::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(3925)				 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(3925)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(3925)				::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(3925)				::String songName = hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE(3926)				if ((songName == HX_("furry-femboy",e1,0a,eb,38))) {
HXLINE(3927)					::Highscore_obj::getBadge(HX_("ammarfurry",58,e0,58,66));
            				}
HXLINE(3928)				bool _hx_tmp4;
HXDLIN(3928)				if ((songName == HX_("myself",f8,10,b3,8c))) {
HXLINE(3928)					_hx_tmp4 = !(::ClientPrefs_obj::ghostTapping);
            				}
            				else {
HXLINE(3928)					_hx_tmp4 = false;
            				}
HXDLIN(3928)				if (_hx_tmp4) {
HXLINE(3929)					::Highscore_obj::getBadge(HX_("myselfghost",57,fb,0c,fc));
            				}
HXLINE(3930)				bool _hx_tmp5;
HXDLIN(3930)				if ((songName == HX_("discord-annoyer",97,ac,58,20))) {
HXLINE(3930)					_hx_tmp5 = (::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("easy",02,8c,0c,43));
            				}
            				else {
HXLINE(3930)					_hx_tmp5 = false;
            				}
HXDLIN(3930)				if (_hx_tmp5) {
HXLINE(3931)					::Highscore_obj::getBadge(HX_("relaxsong",65,a2,81,38));
            				}
HXLINE(3932)				bool _hx_tmp6;
HXDLIN(3932)				if ((songName == HX_("google",b9,c3,e9,61))) {
HXLINE(3932)					_hx_tmp6 = (::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("hard",eb,2e,08,45));
            				}
            				else {
HXLINE(3932)					_hx_tmp6 = false;
            				}
HXDLIN(3932)				if (_hx_tmp6) {
HXLINE(3933)					::Highscore_obj::getBadge(HX_("darkgoogle",af,d4,68,46));
            				}
HXLINE(3934)				bool _hx_tmp7;
HXDLIN(3934)				if ((songName == HX_("twitter-argument",d7,36,da,54))) {
HXLINE(3934)					_hx_tmp7 = (::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("hard",eb,2e,08,45));
            				}
            				else {
HXLINE(3934)					_hx_tmp7 = false;
            				}
HXDLIN(3934)				if (_hx_tmp7) {
HXLINE(3935)					::Highscore_obj::getBadge(HX_("twitterhard",de,aa,c1,59));
            				}
            			}
            			else {
HXLINE(3937)				::haxe::Log_obj::trace(HX_("cheating",af,e3,20,8c),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3937,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
            			}
HXLINE(3940)			if (::PlayState_obj::isStoryMode) {
HXLINE(3942)				::haxe::Log_obj::trace(HX_("story song ended",ba,24,a4,07),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3942,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(3943)				 ::Dynamic _hx_tmp8 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3943)				::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + this->songScore);
HXLINE(3944)				 ::Dynamic _hx_tmp9 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3944)				::PlayState_obj::campaignMisses = (::PlayState_obj::campaignMisses + this->songMisses);
HXLINE(3946)				::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(3948)				if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(3950)					::WeekData_obj::loadTheFirstEnabledMod();
HXLINE(3951)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp10 = ::flixel::FlxG_obj::sound;
HXDLIN(3951)					::String library = null();
HXDLIN(3951)					 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN(3951)					_hx_tmp10->playMusic(file,null(),null(),null());
HXLINE(3953)					::PlayState_obj::cancelMusicFadeTween();
HXLINE(3954)					::CustomFadeTransition_obj::newLoading = true;
HXLINE(3955)					if (::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn) {
HXLINE(3956)						::CustomFadeTransition_obj::nextCamera = null();
            					}
HXLINE(3959)					if (!(isCheat)) {
HXLINE(3960)						::haxe::Log_obj::trace(HX_("no Way!!1 didnt cheating",89,69,90,f4),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3960,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(3961)						if ((::PlayState_obj::storyName.toLowerCase() == HX_("discord annoyer",04,e1,c8,38))) {
HXLINE(3962)							::Highscore_obj::getBadge(HX_("social",ad,03,45,26));
            						}
            						else {
HXLINE(3963)							if ((::PlayState_obj::storyName.toLowerCase() == HX_("hating problem",a6,ca,66,c0))) {
HXLINE(3964)								::Highscore_obj::getBadge(HX_("hater",88,64,22,22));
            							}
            							else {
HXLINE(3965)								if ((::PlayState_obj::storyName.toLowerCase() == HX_("debug",53,52,1f,d7))) {
HXLINE(3966)									::Highscore_obj::getBadge(HX_("ammar",32,91,3d,22));
            								}
            								else {
HXLINE(3967)									if ((::PlayState_obj::storyName.toLowerCase() == HX_("kaiju paradise",f9,69,de,d8))) {
HXLINE(3968)										::Highscore_obj::getBadge(HX_("furry",ca,06,8c,08));
            									}
            								}
            							}
            						}
            					}
HXLINE(3973)					if (!(isCheat)) {
HXLINE(3975)						if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3976)							::Highscore_obj::saveWeekScore(::PlayState_obj::storyName,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            						}
HXLINE(3979)						::flixel::FlxG_obj::save->flush(null());
            					}
HXLINE(3981)					::PlayState_obj::storyName = HX_("",00,00,00,00);
HXLINE(3982)					::PlayState_obj::changedDifficulty = false;
HXLINE(3983)					::MusicBeatState_obj::switchState( ::MainMenuStateAmmar_obj::__alloc( HX_CTX ,null(),null()));
            				}
            				else {
HXLINE(3987)					::String difficulty = ::CoolUtil_obj::getDifficultyFilePath(null());
HXLINE(3989)					::haxe::Log_obj::trace(HX_("LOADING NEXT SONG",5e,07,d0,ca),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3989,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(3990)					 ::Dynamic _hx_tmp11 = ::haxe::Log_obj::trace;
HXDLIN(3990)					::String path2 = ::PlayState_obj::storyPlaylist->__get(0);
HXDLIN(3990)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(3990)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(3990)					::String path3 = invalidChars1->split(::StringTools_obj::replace(path2,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(3990)					::String _hx_tmp12 = (hideChars1->split(path3)->join(HX_("",00,00,00,00)).toLowerCase() + difficulty);
HXDLIN(3990)					_hx_tmp11(_hx_tmp12,::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),3990,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(3992)					if (!(::ClientPrefs_obj::developer)) {
HXLINE(3993)						::String path4 = ::PlayState_obj::storyPlaylist->__get(0);
HXDLIN(3993)						 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(3993)						 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(3993)						::String path5 = invalidChars2->split(::StringTools_obj::replace(path4,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(3993)						::antidebug::DebugSave_obj::updateFolder(hideChars2->split(path5)->join(HX_("",00,00,00,00)).toLowerCase());
            					}
HXLINE(3995)					::String path6 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(3995)					 ::EReg invalidChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(3995)					 ::EReg hideChars3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(3995)					::String path7 = invalidChars3->split(::StringTools_obj::replace(path6,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(3995)					bool winterHorrorlandNext = (hideChars3->split(path7)->join(HX_("",00,00,00,00)).toLowerCase() == HX_("eggnog",61,04,ba,f4));
HXLINE(3996)					if (winterHorrorlandNext) {
HXLINE(3998)						 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(3998)						 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(4000)						{
HXLINE(4000)							 ::flixel::math::FlxBasePoint this1 = blackShit1->scrollFactor;
HXDLIN(4000)							this1->set_x(( (Float)(0) ));
HXDLIN(4000)							this1->set_y(( (Float)(0) ));
            						}
HXLINE(4001)						this->add(blackShit1);
HXLINE(4002)						this->camHUD->set_visible(false);
HXLINE(4004)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp13 = ::flixel::FlxG_obj::sound;
HXDLIN(4004)						_hx_tmp13->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
            					}
HXLINE(4007)					::CustomFadeTransition_obj::newLoading = false;
HXLINE(4011)					::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(4012)					::PlayState_obj::prevCamFollowPos = this->camFollowPos;
HXLINE(4014)					::PlayState_obj::SONG = ::Song_obj::loadFromJson((::PlayState_obj::storyPlaylist->__get(0) + difficulty),::PlayState_obj::storyPlaylist->__get(0));
HXLINE(4015)					{
HXLINE(4015)						 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(4015)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(4017)					if (winterHorrorlandNext) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4018_endSong)
HXLINE(4019)							::PlayState_obj::cancelMusicFadeTween();
HXLINE(4020)							::MusicBeatState_obj::switchState(::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(4018)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.5), ::Dynamic(new _hx_Closure_1()),null());
            					}
            					else {
HXLINE(4023)						::PlayState_obj::cancelMusicFadeTween();
HXLINE(4024)						::MusicBeatState_obj::switchState(::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
            					}
            				}
            			}
            			else {
HXLINE(4030)				::haxe::Log_obj::trace(HX_("WENT BACK TO FREEPLAY??",58,1b,be,6a),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),4030,HX_("PlayState",5d,83,c2,46),HX_("endSong",50,dd,7c,2e)));
HXLINE(4031)				::WeekData_obj::loadTheFirstEnabledMod();
HXLINE(4032)				::PlayState_obj::cancelMusicFadeTween();
HXLINE(4033)				if (::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn) {
HXLINE(4034)					::CustomFadeTransition_obj::nextCamera = null();
            				}
HXLINE(4036)				::MusicBeatState_obj::switchState( ::MainMenuStateAmmar_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(4037)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp14 = ::flixel::FlxG_obj::sound;
HXDLIN(4037)				::String library1 = null();
HXDLIN(4037)				 ::openfl::media::Sound file1 = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library1);
HXDLIN(4037)				_hx_tmp14->playMusic(file1,null(),null(),null());
HXLINE(4038)				::PlayState_obj::changedDifficulty = false;
            			}
HXLINE(4040)			this->transitioning = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

void PlayState_obj::startAchievement(::String achieve){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4046_startAchievement)
HXLINE(4047)		this->achievementObj =  ::AchievementObject_obj::__alloc( HX_CTX ,achieve,this->camOther);
HXLINE(4048)		this->achievementObj->onFinish = this->achievementEnd_dyn();
HXLINE(4049)		this->add(this->achievementObj);
HXLINE(4050)		::haxe::Log_obj::trace((HX_("Giving achievement ",c3,c2,17,97) + achieve),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),4050,HX_("PlayState",5d,83,c2,46),HX_("startAchievement",2d,5b,b8,dd)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,startAchievement,(void))

void PlayState_obj::achievementEnd(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4053_achievementEnd)
HXLINE(4054)		this->achievementObj = null();
HXLINE(4055)		bool _hx_tmp;
HXDLIN(4055)		if (this->endingSong) {
HXLINE(4055)			_hx_tmp = !(this->inCutscene);
            		}
            		else {
HXLINE(4055)			_hx_tmp = false;
            		}
HXDLIN(4055)		if (_hx_tmp) {
HXLINE(4056)			this->endSong();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,achievementEnd,(void))

void PlayState_obj::KillNotes(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4061_KillNotes)
HXLINE(4062)		while((this->notes->length > 0)){
HXLINE(4063)			 ::Note daNote = Dynamic( this->notes->members->__get(0)).StaticCast<  ::Note >();
HXLINE(4064)			daNote->set_active(false);
HXLINE(4065)			daNote->set_visible(false);
HXLINE(4067)			daNote->kill();
HXLINE(4068)			this->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(4069)			daNote->destroy();
            		}
HXLINE(4071)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4072)		this->eventNotes = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,KillNotes,(void))

void PlayState_obj::cachePopUpScore(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4086_cachePopUpScore)
HXLINE(4087)		::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(4088)		::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(4089)		if (::PlayState_obj::isPixelStage) {
HXLINE(4091)			pixelShitPart1 = HX_("pixelUI/",95,50,4f,7e);
HXLINE(4092)			pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
            		}
HXLINE(4095)		{
HXLINE(4095)			::String library = null();
HXDLIN(4095)			 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(((pixelShitPart1 + HX_("sick",be,8c,53,4c)) + pixelShitPart2),library);
            		}
HXLINE(4096)		{
HXLINE(4096)			::String library1 = null();
HXDLIN(4096)			 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(((pixelShitPart1 + HX_("good",3d,95,69,44)) + pixelShitPart2),library1);
            		}
HXLINE(4097)		{
HXLINE(4097)			::String library2 = null();
HXDLIN(4097)			 ::flixel::graphics::FlxGraphic returnAsset2 = ::Paths_obj::returnGraphic(((pixelShitPart1 + HX_("bad",c5,b1,4a,00)) + pixelShitPart2),library2);
            		}
HXLINE(4098)		{
HXLINE(4098)			::String library3 = null();
HXDLIN(4098)			 ::flixel::graphics::FlxGraphic returnAsset3 = ::Paths_obj::returnGraphic(((pixelShitPart1 + HX_("shit",c0,cf,52,4c)) + pixelShitPart2),library3);
            		}
HXLINE(4099)		{
HXLINE(4099)			::String library4 = null();
HXDLIN(4099)			 ::flixel::graphics::FlxGraphic returnAsset4 = ::Paths_obj::returnGraphic(((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2),library4);
            		}
HXLINE(4101)		{
HXLINE(4101)			int _g = 0;
HXDLIN(4101)			while((_g < 10)){
HXLINE(4101)				_g = (_g + 1);
HXDLIN(4101)				int i = (_g - 1);
HXLINE(4102)				{
HXLINE(4102)					::String library5 = null();
HXDLIN(4102)					 ::flixel::graphics::FlxGraphic returnAsset5 = ::Paths_obj::returnGraphic(((((HX_("numCombo/",07,67,27,78) + pixelShitPart1) + HX_("num",46,de,53,00)) + i) + pixelShitPart2),library5);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,cachePopUpScore,(void))

void PlayState_obj::popUpScore( ::Note note){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4107_popUpScore)
HXLINE(4108)		Float noteDiff = ::Math_obj::abs(((note->strumTime - ::Conductor_obj::songPosition) + ::ClientPrefs_obj::ratingOffset));
HXLINE(4112)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(4114)		::String placement = ::Std_obj::string(this->combo);
HXLINE(4116)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(4117)		{
HXLINE(4117)			int axes = 17;
HXDLIN(4117)			bool _hx_tmp;
HXDLIN(4117)			if ((axes != 1)) {
HXLINE(4117)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(4117)				_hx_tmp = true;
            			}
HXDLIN(4117)			if (_hx_tmp) {
HXLINE(4117)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(4117)				coolText->set_x(((( (Float)(_hx_tmp1) ) - coolText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(4117)			bool _hx_tmp2;
HXDLIN(4117)			if ((axes != 16)) {
HXLINE(4117)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(4117)				_hx_tmp2 = true;
            			}
HXDLIN(4117)			if (_hx_tmp2) {
HXLINE(4117)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(4117)				coolText->set_y(((( (Float)(_hx_tmp3) ) - coolText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(4118)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.35)));
HXLINE(4121)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(4122)		int score = 350;
HXLINE(4125)		 ::Rating daRating = ::Conductor_obj::judgeNote(note,(noteDiff / this->playbackRate));
HXLINE(4127)		 ::PlayState _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4127)		_hx_tmp4->totalNotesHit = (_hx_tmp4->totalNotesHit + daRating->ratingMod);
HXLINE(4128)		note->ratingMod = daRating->ratingMod;
HXLINE(4129)		if (!(note->ratingDisabled)) {
HXLINE(4129)			daRating->increase(null());
            		}
HXLINE(4130)		note->rating = daRating->name;
HXLINE(4131)		score = daRating->score;
HXLINE(4132)		bool _hx_tmp5;
HXDLIN(4132)		bool _hx_tmp6;
HXDLIN(4132)		if ((daRating->name != HX_("shit",c0,cf,52,4c))) {
HXLINE(4132)			_hx_tmp6 = (daRating->name == HX_("bad",c5,b1,4a,00));
            		}
            		else {
HXLINE(4132)			_hx_tmp6 = true;
            		}
HXDLIN(4132)		if (_hx_tmp6) {
HXLINE(4132)			_hx_tmp5 = this->newHealthSystem;
            		}
            		else {
HXLINE(4132)			_hx_tmp5 = false;
            		}
HXDLIN(4132)		if (_hx_tmp5) {
HXLINE(4133)			 ::PlayState _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4133)			_hx_tmp7->health = (_hx_tmp7->health - ((Float)0.02));
            		}
HXLINE(4136)		bool _hx_tmp8;
HXDLIN(4136)		if (daRating->noteSplash) {
HXLINE(4136)			_hx_tmp8 = !(note->noteSplashDisabled);
            		}
            		else {
HXLINE(4136)			_hx_tmp8 = false;
            		}
HXDLIN(4136)		if (_hx_tmp8) {
HXLINE(4138)			this->spawnNoteSplashOnNote(note);
            		}
HXLINE(4141)		bool _hx_tmp9;
HXDLIN(4141)		if (!(this->practiceMode)) {
HXLINE(4141)			_hx_tmp9 = !(this->cpuControlled);
            		}
            		else {
HXLINE(4141)			_hx_tmp9 = false;
            		}
HXDLIN(4141)		if (_hx_tmp9) {
HXLINE(4142)			 ::PlayState _hx_tmp10 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4142)			_hx_tmp10->songScore = (_hx_tmp10->songScore + score);
HXLINE(4143)			if (!(note->ratingDisabled)) {
HXLINE(4145)				this->songHits++;
HXLINE(4146)				this->totalPlayed++;
HXLINE(4147)				this->RecalculateRating(false);
            			}
            		}
HXLINE(4151)		if (!(this->cpuControlled)) {
HXLINE(4152)			this->comboSpr->set_alpha(( (Float)(1) ));
HXLINE(4153)			this->comboSpr->animation->play(daRating->name,true,null(),null());
HXLINE(4155)			if (::hx::IsNotNull( this->comboSprTween )) {
HXLINE(4155)				this->comboSprTween->cancel();
            			}
HXLINE(4156)			this->comboSpr->set_y(this->comboSprY);
HXLINE(4157)			int _hx_tmp11;
HXDLIN(4157)			if (::ClientPrefs_obj::downScroll) {
HXLINE(4157)				_hx_tmp11 = -10;
            			}
            			else {
HXLINE(4157)				_hx_tmp11 = 10;
            			}
HXDLIN(4157)			this->comboSprTween = ::flixel::tweens::FlxTween_obj::tween(this->comboSpr, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("y",79,00,00,00),(this->comboSprY - ( (Float)(_hx_tmp11) )))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.2))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

void PlayState_obj::onKeyPress( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4163_onKeyPress)
HXDLIN(4163)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4164)		int eventKey = event->keyCode;
HXLINE(4165)		int key = this->getKeyFromEvent(eventKey);
HXLINE(4167)		bool mobileMode = false;
HXLINE(4170)		bool _hx_tmp;
HXDLIN(4170)		bool _hx_tmp1;
HXDLIN(4170)		bool _hx_tmp2;
HXDLIN(4170)		bool _hx_tmp3;
HXDLIN(4170)		if (!(this->cpuControlled)) {
HXLINE(4170)			_hx_tmp3 = this->startedCountdown;
            		}
            		else {
HXLINE(4170)			_hx_tmp3 = false;
            		}
HXDLIN(4170)		if (_hx_tmp3) {
HXLINE(4170)			_hx_tmp2 = !(this->paused);
            		}
            		else {
HXLINE(4170)			_hx_tmp2 = false;
            		}
HXDLIN(4170)		if (_hx_tmp2) {
HXLINE(4170)			_hx_tmp1 = (key > -1);
            		}
            		else {
HXLINE(4170)			_hx_tmp1 = false;
            		}
HXDLIN(4170)		if (_hx_tmp1) {
HXLINE(4170)			bool _hx_tmp4;
HXDLIN(4170)			if (!(::flixel::FlxG_obj::keys->checkStatus(eventKey,2))) {
HXLINE(4170)				_hx_tmp4 = ::ClientPrefs_obj::controllerMode;
            			}
            			else {
HXLINE(4170)				_hx_tmp4 = true;
            			}
HXDLIN(4170)			if (!(_hx_tmp4)) {
HXLINE(4170)				_hx_tmp = mobileMode;
            			}
            			else {
HXLINE(4170)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(4170)			_hx_tmp = false;
            		}
HXDLIN(4170)		if (_hx_tmp) {
HXLINE(4172)			bool _hx_tmp5;
HXDLIN(4172)			bool _hx_tmp6;
HXDLIN(4172)			if (!(this->boyfriend->stunned)) {
HXLINE(4172)				_hx_tmp6 = this->generatedMusic;
            			}
            			else {
HXLINE(4172)				_hx_tmp6 = false;
            			}
HXDLIN(4172)			if (_hx_tmp6) {
HXLINE(4172)				_hx_tmp5 = !(this->endingSong);
            			}
            			else {
HXLINE(4172)				_hx_tmp5 = false;
            			}
HXDLIN(4172)			if (_hx_tmp5) {
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,int,key,::Array< ::Dynamic>,sortedNotesList,::Array< bool >,canMiss) HXARGC(1)
            				void _hx_run( ::Note daNote){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4188_onKeyPress)
HXLINE(4188)					bool _hx_tmp;
HXDLIN(4188)					bool _hx_tmp1;
HXDLIN(4188)					bool _hx_tmp2;
HXDLIN(4188)					bool _hx_tmp3;
HXDLIN(4188)					bool _hx_tmp4;
HXDLIN(4188)					bool _hx_tmp5;
HXDLIN(4188)					if ((_gthis->strumsBlocked->__get(daNote->noteData) != true)) {
HXLINE(4188)						_hx_tmp5 = daNote->canBeHit;
            					}
            					else {
HXLINE(4188)						_hx_tmp5 = false;
            					}
HXDLIN(4188)					if (_hx_tmp5) {
HXLINE(4188)						_hx_tmp4 = daNote->mustPress;
            					}
            					else {
HXLINE(4188)						_hx_tmp4 = false;
            					}
HXDLIN(4188)					if (_hx_tmp4) {
HXLINE(4188)						_hx_tmp3 = !(daNote->tooLate);
            					}
            					else {
HXLINE(4188)						_hx_tmp3 = false;
            					}
HXDLIN(4188)					if (_hx_tmp3) {
HXLINE(4188)						_hx_tmp2 = !(daNote->wasGoodHit);
            					}
            					else {
HXLINE(4188)						_hx_tmp2 = false;
            					}
HXDLIN(4188)					if (_hx_tmp2) {
HXLINE(4188)						_hx_tmp1 = !(daNote->isSustainNote);
            					}
            					else {
HXLINE(4188)						_hx_tmp1 = false;
            					}
HXDLIN(4188)					if (_hx_tmp1) {
HXLINE(4188)						_hx_tmp = !(daNote->blockHit);
            					}
            					else {
HXLINE(4188)						_hx_tmp = false;
            					}
HXDLIN(4188)					if (_hx_tmp) {
HXLINE(4190)						if ((daNote->noteData == key)) {
HXLINE(4192)							sortedNotesList->push(daNote);
            						}
HXLINE(4195)						canMiss[0] = true;
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(4175)				Float lastTime = ::Conductor_obj::songPosition;
HXLINE(4176)				::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(4178)				::Array< bool > canMiss = ::Array_obj< bool >::__new(1)->init(0,!(::ClientPrefs_obj::ghostTapping));
HXLINE(4181)				::Array< ::Dynamic> pressNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4183)				bool notesStopped = false;
HXLINE(4185)				::Array< ::Dynamic> sortedNotesList = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4186)				this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,key,sortedNotesList,canMiss)),null());
HXLINE(4198)				sortedNotesList->sort(this->sortHitNotes_dyn());
HXLINE(4200)				if ((sortedNotesList->length > 0)) {
HXLINE(4201)					int _g = 0;
HXDLIN(4201)					while((_g < sortedNotesList->length)){
HXLINE(4201)						 ::Note epicNote = sortedNotesList->__get(_g).StaticCast<  ::Note >();
HXDLIN(4201)						_g = (_g + 1);
HXLINE(4203)						{
HXLINE(4203)							int _g1 = 0;
HXDLIN(4203)							while((_g1 < pressNotes->length)){
HXLINE(4203)								 ::Note doubleNote = pressNotes->__get(_g1).StaticCast<  ::Note >();
HXDLIN(4203)								_g1 = (_g1 + 1);
HXLINE(4204)								if ((::Math_obj::abs((doubleNote->strumTime - epicNote->strumTime)) < 1)) {
HXLINE(4205)									doubleNote->kill();
HXLINE(4206)									this->notes->remove(doubleNote,true).StaticCast<  ::Note >();
HXLINE(4207)									doubleNote->destroy();
            								}
            								else {
HXLINE(4209)									notesStopped = true;
            								}
            							}
            						}
HXLINE(4213)						if (!(notesStopped)) {
HXLINE(4214)							this->goodNoteHit(epicNote);
HXLINE(4215)							pressNotes->push(epicNote);
            						}
            					}
            				}
            				else {
HXLINE(4221)					this->callOnLuas(HX_("onGhostTap",93,92,59,ab),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null());
HXLINE(4222)					if (canMiss->__get(0)) {
HXLINE(4223)						this->noteMissPress(key);
            					}
            				}
HXLINE(4232)				this->keysPressed[key] = true;
HXLINE(4235)				::Conductor_obj::songPosition = lastTime;
            			}
HXLINE(4238)			 ::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::StrumNote >();
HXLINE(4239)			bool _hx_tmp7;
HXDLIN(4239)			bool _hx_tmp8;
HXDLIN(4239)			if ((this->strumsBlocked->__get(key) != true)) {
HXLINE(4239)				_hx_tmp8 = ::hx::IsNotNull( spr );
            			}
            			else {
HXLINE(4239)				_hx_tmp8 = false;
            			}
HXDLIN(4239)			if (_hx_tmp8) {
HXLINE(4239)				_hx_tmp7 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            			}
            			else {
HXLINE(4239)				_hx_tmp7 = false;
            			}
HXDLIN(4239)			if (_hx_tmp7) {
HXLINE(4241)				spr->playAnim(HX_("pressed",a2,d2,e6,39),null());
HXLINE(4242)				spr->resetAnim = ( (Float)(0) );
            			}
HXLINE(4244)			this->callOnLuas(HX_("onKeyPress",a3,cd,a8,ea),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,onKeyPress,(void))

int PlayState_obj::sortHitNotes( ::Note a, ::Note b){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4250_sortHitNotes)
HXLINE(4251)		bool _hx_tmp;
HXDLIN(4251)		if (a->lowPriority) {
HXLINE(4251)			_hx_tmp = !(b->lowPriority);
            		}
            		else {
HXLINE(4251)			_hx_tmp = false;
            		}
HXDLIN(4251)		if (_hx_tmp) {
HXLINE(4252)			return 1;
            		}
            		else {
HXLINE(4253)			bool _hx_tmp1;
HXDLIN(4253)			if (!(a->lowPriority)) {
HXLINE(4253)				_hx_tmp1 = b->lowPriority;
            			}
            			else {
HXLINE(4253)				_hx_tmp1 = false;
            			}
HXDLIN(4253)			if (_hx_tmp1) {
HXLINE(4254)				return -1;
            			}
            		}
HXLINE(4256)		Float Value1 = a->strumTime;
HXDLIN(4256)		Float Value2 = b->strumTime;
HXDLIN(4256)		int result = 0;
HXDLIN(4256)		if ((Value1 < Value2)) {
HXLINE(4256)			result = -1;
            		}
            		else {
HXLINE(4256)			if ((Value1 > Value2)) {
HXLINE(4256)				result = 1;
            			}
            		}
HXDLIN(4256)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortHitNotes,return )

void PlayState_obj::onKeyRelease( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4260_onKeyRelease)
HXLINE(4261)		int eventKey = event->keyCode;
HXLINE(4262)		int key = this->getKeyFromEvent(eventKey);
HXLINE(4263)		bool _hx_tmp;
HXDLIN(4263)		bool _hx_tmp1;
HXDLIN(4263)		bool _hx_tmp2;
HXDLIN(4263)		if (!(this->cpuControlled)) {
HXLINE(4263)			_hx_tmp2 = this->startedCountdown;
            		}
            		else {
HXLINE(4263)			_hx_tmp2 = false;
            		}
HXDLIN(4263)		if (_hx_tmp2) {
HXLINE(4263)			_hx_tmp1 = !(this->paused);
            		}
            		else {
HXLINE(4263)			_hx_tmp1 = false;
            		}
HXDLIN(4263)		if (_hx_tmp1) {
HXLINE(4263)			_hx_tmp = (key > -1);
            		}
            		else {
HXLINE(4263)			_hx_tmp = false;
            		}
HXDLIN(4263)		if (_hx_tmp) {
HXLINE(4265)			 ::StrumNote spr = Dynamic( this->playerStrums->members->__get(key)).StaticCast<  ::StrumNote >();
HXLINE(4266)			if (::hx::IsNotNull( spr )) {
HXLINE(4268)				spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(4269)				spr->resetAnim = ( (Float)(0) );
            			}
HXLINE(4271)			this->callOnLuas(HX_("onKeyRelease",e7,c7,b8,9f),::cpp::VirtualArray_obj::__new(1)->init(0,key),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,onKeyRelease,(void))

int PlayState_obj::getKeyFromEvent(int key){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4277_getKeyFromEvent)
HXLINE(4278)		if ((key != -1)) {
HXLINE(4280)			int _g = 0;
HXDLIN(4280)			int _g1 = this->keysArray->get_length();
HXDLIN(4280)			while((_g < _g1)){
HXLINE(4280)				_g = (_g + 1);
HXDLIN(4280)				int i = (_g - 1);
HXLINE(4282)				{
HXLINE(4282)					int _g2 = 0;
HXDLIN(4282)					int _g3 = ( (int)(this->keysArray->__get(i)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(4282)					while((_g2 < _g3)){
HXLINE(4282)						_g2 = (_g2 + 1);
HXDLIN(4282)						int j = (_g2 - 1);
HXLINE(4284)						if (::hx::IsEq( key,this->keysArray->__get(i)->__GetItem(j) )) {
HXLINE(4286)							return i;
            						}
            					}
            				}
            			}
            		}
HXLINE(4291)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKeyFromEvent,return )

void PlayState_obj::keyShit(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4296_keyShit)
HXDLIN(4296)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4298)		::Array< bool > parsedHoldArray = this->parseKeys(null());
HXLINE(4301)		if (::ClientPrefs_obj::controllerMode) {
HXLINE(4303)			::Array< bool > parsedArray = this->parseKeys(HX_("_P",11,53,00,00));
HXLINE(4304)			if (parsedArray->contains(true)) {
HXLINE(4306)				int _g = 0;
HXDLIN(4306)				int _g1 = parsedArray->length;
HXDLIN(4306)				while((_g < _g1)){
HXLINE(4306)					_g = (_g + 1);
HXDLIN(4306)					int i = (_g - 1);
HXLINE(4308)					bool _hx_tmp;
HXDLIN(4308)					if (parsedArray->__get(i)) {
HXLINE(4308)						_hx_tmp = (this->strumsBlocked->__get(i) != true);
            					}
            					else {
HXLINE(4308)						_hx_tmp = false;
            					}
HXDLIN(4308)					if (_hx_tmp) {
HXLINE(4309)						this->onKeyPress( ::openfl::events::KeyboardEvent_obj::__alloc( HX_CTX ,HX_("keyDown",a1,69,47,9c),true,true,-1,this->keysArray->__get(i)->__GetItem(0),null(),null(),null(),null(),null(),null()));
            					}
            				}
            			}
            		}
HXLINE(4326)		bool _hx_tmp1;
HXDLIN(4326)		bool _hx_tmp2;
HXDLIN(4326)		if (this->startedCountdown) {
HXLINE(4326)			_hx_tmp2 = !(this->boyfriend->stunned);
            		}
            		else {
HXLINE(4326)			_hx_tmp2 = false;
            		}
HXDLIN(4326)		if (_hx_tmp2) {
HXLINE(4326)			_hx_tmp1 = this->generatedMusic;
            		}
            		else {
HXLINE(4326)			_hx_tmp1 = false;
            		}
HXDLIN(4326)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< bool >,parsedHoldArray) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4332_keyShit)
HXLINE(4332)				bool _hx_tmp;
HXDLIN(4332)				bool _hx_tmp1;
HXDLIN(4332)				bool _hx_tmp2;
HXDLIN(4332)				bool _hx_tmp3;
HXDLIN(4332)				bool _hx_tmp4;
HXDLIN(4332)				bool _hx_tmp5;
HXDLIN(4332)				bool _hx_tmp6;
HXDLIN(4332)				if ((_gthis->strumsBlocked->__get(daNote->noteData) != true)) {
HXLINE(4332)					_hx_tmp6 = daNote->isSustainNote;
            				}
            				else {
HXLINE(4332)					_hx_tmp6 = false;
            				}
HXDLIN(4332)				if (_hx_tmp6) {
HXLINE(4332)					_hx_tmp5 = parsedHoldArray->__get(daNote->noteData);
            				}
            				else {
HXLINE(4332)					_hx_tmp5 = false;
            				}
HXDLIN(4332)				if (_hx_tmp5) {
HXLINE(4332)					_hx_tmp4 = daNote->canBeHit;
            				}
            				else {
HXLINE(4332)					_hx_tmp4 = false;
            				}
HXDLIN(4332)				if (_hx_tmp4) {
HXLINE(4332)					_hx_tmp3 = daNote->mustPress;
            				}
            				else {
HXLINE(4332)					_hx_tmp3 = false;
            				}
HXDLIN(4332)				if (_hx_tmp3) {
HXLINE(4332)					_hx_tmp2 = !(daNote->tooLate);
            				}
            				else {
HXLINE(4332)					_hx_tmp2 = false;
            				}
HXDLIN(4332)				if (_hx_tmp2) {
HXLINE(4332)					_hx_tmp1 = !(daNote->wasGoodHit);
            				}
            				else {
HXLINE(4332)					_hx_tmp1 = false;
            				}
HXDLIN(4332)				if (_hx_tmp1) {
HXLINE(4332)					_hx_tmp = !(daNote->blockHit);
            				}
            				else {
HXLINE(4332)					_hx_tmp = false;
            				}
HXDLIN(4332)				if (_hx_tmp) {
HXLINE(4334)					_gthis->goodNoteHit(daNote);
HXLINE(4335)					if (::hx::IsNotNull( _gthis->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >() )) {
HXLINE(4336)						if (::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("holdend",fc,4b,02,b8))) {
HXLINE(4337)							 ::NoteHoldSplash holdSplash = _gthis->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >();
HXLINE(4338)							_gthis->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >()->set_alpha(( (Float)(1) ));
HXLINE(4339)							holdSplash->endHold(true);
HXLINE(4340)							_gthis->onHoldSplash[daNote->noteData] = null();
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4329)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,parsedHoldArray)),null());
HXLINE(4347)			{
HXLINE(4347)				int _g2 = 0;
HXDLIN(4347)				while((_g2 < 4)){
HXLINE(4347)					_g2 = (_g2 + 1);
HXDLIN(4347)					int i1 = (_g2 - 1);
HXLINE(4349)					bool _hx_tmp3;
HXDLIN(4349)					if (::hx::IsNotNull( this->onHoldSplash->__get(i1).StaticCast<  ::NoteHoldSplash >() )) {
HXLINE(4349)						_hx_tmp3 = (this->onHoldSplash->__get(i1).StaticCast<  ::NoteHoldSplash >()->animation->_curAnim->name == HX_("in",e5,5b,00,00));
            					}
            					else {
HXLINE(4349)						_hx_tmp3 = false;
            					}
HXDLIN(4349)					if (_hx_tmp3) {
HXLINE(4350)						if (!(parsedHoldArray->__get(i1))) {
HXLINE(4351)							this->onHoldSplash->__get(i1).StaticCast<  ::NoteHoldSplash >()->set_alpha(( (Float)(0) ));
            						}
            						else {
HXLINE(4353)							this->onHoldSplash->__get(i1).StaticCast<  ::NoteHoldSplash >()->setPos(Dynamic( this->playerStrums->members->__get(i1)).StaticCast<  ::StrumNote >()->x,Dynamic( this->playerStrums->members->__get(i1)).StaticCast<  ::StrumNote >()->y);
            						}
            					}
            				}
            			}
HXLINE(4357)			bool _hx_tmp4;
HXDLIN(4357)			if (parsedHoldArray->contains(true)) {
HXLINE(4357)				_hx_tmp4 = !(this->endingSong);
            			}
            			else {
HXLINE(4357)				_hx_tmp4 = false;
            			}
HXDLIN(4357)			if (_hx_tmp4) {
HXLINE(4359)				::String achieve = this->checkForAchievement(::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_201,1));
HXLINE(4360)				if (::hx::IsNotNull( achieve )) {
HXLINE(4361)					this->startAchievement(achieve);
            				}
            			}
            			else {
HXLINE(4365)				bool _hx_tmp5;
HXDLIN(4365)				bool _hx_tmp6;
HXDLIN(4365)				bool _hx_tmp7;
HXDLIN(4365)				if (::hx::IsNotNull( this->boyfriend->animation->_curAnim )) {
HXLINE(4365)					_hx_tmp7 = (this->boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * (((Float)0.0011) / ::flixel::FlxG_obj::sound->music->_pitch)) * this->boyfriend->singDuration));
            				}
            				else {
HXLINE(4365)					_hx_tmp7 = false;
            				}
HXDLIN(4365)				if (_hx_tmp7) {
HXLINE(4365)					_hx_tmp6 = ::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c));
            				}
            				else {
HXLINE(4365)					_hx_tmp6 = false;
            				}
HXDLIN(4365)				if (_hx_tmp6) {
HXLINE(4365)					_hx_tmp5 = !(::StringTools_obj::endsWith(this->boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            				}
            				else {
HXLINE(4365)					_hx_tmp5 = false;
            				}
HXDLIN(4365)				if (_hx_tmp5) {
HXLINE(4367)					this->boyfriend->dance();
            				}
            			}
            		}
HXLINE(4373)		bool _hx_tmp8;
HXDLIN(4373)		if (!(::ClientPrefs_obj::controllerMode)) {
HXLINE(4373)			_hx_tmp8 = this->strumsBlocked->contains(true);
            		}
            		else {
HXLINE(4373)			_hx_tmp8 = true;
            		}
HXDLIN(4373)		if (_hx_tmp8) {
HXLINE(4375)			::Array< bool > parsedArray1 = this->parseKeys(HX_("_R",13,53,00,00));
HXLINE(4376)			if (parsedArray1->contains(true)) {
HXLINE(4378)				int _g3 = 0;
HXDLIN(4378)				int _g4 = parsedArray1->length;
HXDLIN(4378)				while((_g3 < _g4)){
HXLINE(4378)					_g3 = (_g3 + 1);
HXDLIN(4378)					int i2 = (_g3 - 1);
HXLINE(4380)					bool _hx_tmp9;
HXDLIN(4380)					if (!(parsedArray1->__get(i2))) {
HXLINE(4380)						_hx_tmp9 = (this->strumsBlocked->__get(i2) == true);
            					}
            					else {
HXLINE(4380)						_hx_tmp9 = true;
            					}
HXDLIN(4380)					if (_hx_tmp9) {
HXLINE(4381)						this->onKeyRelease( ::openfl::events::KeyboardEvent_obj::__alloc( HX_CTX ,HX_("keyUp",da,b9,fe,de),true,true,-1,this->keysArray->__get(i2)->__GetItem(0),null(),null(),null(),null(),null(),null()));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

::Array< bool > PlayState_obj::parseKeys(::String __o_suffix){
            		::String suffix = __o_suffix;
            		if (::hx::IsNull(__o_suffix)) suffix = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4389_parseKeys)
HXLINE(4390)		::Array< bool > ret = ::Array_obj< bool >::__new(0);
HXLINE(4391)		{
HXLINE(4391)			int _g = 0;
HXDLIN(4391)			int _g1 = this->controlArray->length;
HXDLIN(4391)			while((_g < _g1)){
HXLINE(4391)				_g = (_g + 1);
HXDLIN(4391)				int i = (_g - 1);
HXLINE(4393)				ret[i] = ( (bool)(::Reflect_obj::getProperty(::PlayerSettings_obj::player1->controls,(this->controlArray->__get(i) + suffix))) );
            			}
            		}
HXLINE(4411)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,parseKeys,return )

void PlayState_obj::noteMiss( ::Note daNote){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            		void _hx_run( ::Note note){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4417_noteMiss)
HXLINE(4417)			bool _hx_tmp;
HXDLIN(4417)			bool _hx_tmp1;
HXDLIN(4417)			bool _hx_tmp2;
HXDLIN(4417)			bool _hx_tmp3;
HXDLIN(4417)			if (::hx::IsInstanceNotEq( daNote,note )) {
HXLINE(4417)				_hx_tmp3 = daNote->mustPress;
            			}
            			else {
HXLINE(4417)				_hx_tmp3 = false;
            			}
HXDLIN(4417)			if (_hx_tmp3) {
HXLINE(4417)				_hx_tmp2 = (daNote->noteData == note->noteData);
            			}
            			else {
HXLINE(4417)				_hx_tmp2 = false;
            			}
HXDLIN(4417)			if (_hx_tmp2) {
HXLINE(4417)				_hx_tmp1 = (daNote->isSustainNote == note->isSustainNote);
            			}
            			else {
HXLINE(4417)				_hx_tmp1 = false;
            			}
HXDLIN(4417)			if (_hx_tmp1) {
HXLINE(4417)				_hx_tmp = (::Math_obj::abs((daNote->strumTime - note->strumTime)) < 1);
            			}
            			else {
HXLINE(4417)				_hx_tmp = false;
            			}
HXDLIN(4417)			if (_hx_tmp) {
HXLINE(4418)				note->kill();
HXLINE(4419)				_gthis->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4420)				note->destroy();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4414_noteMiss)
HXDLIN(4414)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4416)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,daNote)),null());
HXLINE(4423)		this->combo = 0;
HXLINE(4424)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4424)		_hx_tmp->health = (_hx_tmp->health - (daNote->missHealth * this->healthLoss));
HXLINE(4426)		if (this->instakillOnMiss) {
HXLINE(4428)			this->vocals->set_volume(( (Float)(0) ));
HXLINE(4429)			this->doDeathCheck(true);
            		}
HXLINE(4434)		this->songMisses++;
HXLINE(4435)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(4436)		if (!(this->practiceMode)) {
HXLINE(4436)			 ::PlayState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4436)			_hx_tmp1->songScore = (_hx_tmp1->songScore - 10);
            		}
HXLINE(4437)		this->lerpShakeBar = ((( (Float)(2) ) - this->health) * ( (Float)(5) ));
HXLINE(4439)		this->totalPlayed++;
HXLINE(4440)		this->RecalculateRating(true);
HXLINE(4442)		 ::Character _hx_char = this->boyfriend;
HXLINE(4443)		if (daNote->gfNote) {
HXLINE(4444)			_hx_char = this->gf;
            		}
HXLINE(4447)		bool _hx_tmp2;
HXDLIN(4447)		bool _hx_tmp3;
HXDLIN(4447)		if (::hx::IsNotNull( _hx_char )) {
HXLINE(4447)			_hx_tmp3 = !(daNote->noMissAnimation);
            		}
            		else {
HXLINE(4447)			_hx_tmp3 = false;
            		}
HXDLIN(4447)		if (_hx_tmp3) {
HXLINE(4447)			_hx_tmp2 = _hx_char->hasMissAnimations;
            		}
            		else {
HXLINE(4447)			_hx_tmp2 = false;
            		}
HXDLIN(4447)		if (_hx_tmp2) {
HXLINE(4449)			::String animToPlay = (this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )))) + HX_("miss",fc,52,5c,48));
HXDLIN(4449)			::String animToPlay1 = (animToPlay + daNote->animSuffix);
HXLINE(4450)			_hx_char->playAnim(animToPlay1,true,null(),null());
            		}
HXLINE(4453)		bool _hx_tmp4;
HXDLIN(4453)		bool _hx_tmp5;
HXDLIN(4453)		if (daNote->isSustainNote) {
HXLINE(4453)			_hx_tmp5 = !(daNote->blockHit);
            		}
            		else {
HXLINE(4453)			_hx_tmp5 = false;
            		}
HXDLIN(4453)		if (_hx_tmp5) {
HXLINE(4453)			_hx_tmp4 = !(daNote->ignoreNote);
            		}
            		else {
HXLINE(4453)			_hx_tmp4 = false;
            		}
HXDLIN(4453)		if (_hx_tmp4) {
HXLINE(4454)			{
HXLINE(4454)				int _g = 0;
HXDLIN(4454)				::Array< ::Dynamic> _g1 = daNote->parent->tail;
HXDLIN(4454)				while((_g < _g1->length)){
HXLINE(4454)					 ::Note note = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(4454)					_g = (_g + 1);
HXLINE(4455)					note->blockHit = true;
HXLINE(4456)					note->ignoreNote = true;
HXLINE(4457)					note->colorSwap->set_brightness(((Float)-0.5));
            				}
            			}
HXLINE(4459)			if (::hx::IsNotNull( this->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >() )) {
HXLINE(4460)				 ::NoteHoldSplash holdSplash = this->onHoldSplash->__get(daNote->noteData).StaticCast<  ::NoteHoldSplash >();
HXLINE(4461)				holdSplash->endHold(false);
HXLINE(4462)				this->onHoldSplash[daNote->noteData] = null();
            			}
            		}
HXLINE(4466)		int _hx_tmp6 = this->notes->members->indexOf(daNote,null());
HXDLIN(4466)		this->callOnLuas(HX_("noteMiss",0e,78,8f,57),::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp6)->init(1,daNote->noteData)->init(2,daNote->noteType)->init(3,daNote->isSustainNote),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,noteMiss,(void))

void PlayState_obj::noteMissPress(::hx::Null< int >  __o_direction){
            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4470_noteMissPress)
HXLINE(4471)		if (::ClientPrefs_obj::ghostTapping) {
HXLINE(4471)			return;
            		}
HXLINE(4473)		if (!(this->boyfriend->stunned)) {
HXLINE(4475)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4475)			_hx_tmp->health = (_hx_tmp->health - (((Float)0.05) * this->healthLoss));
HXLINE(4476)			if (this->instakillOnMiss) {
HXLINE(4478)				this->vocals->set_volume(( (Float)(0) ));
HXLINE(4479)				this->doDeathCheck(true);
            			}
HXLINE(4482)			bool _hx_tmp1;
HXDLIN(4482)			bool _hx_tmp2;
HXDLIN(4482)			if ((this->combo > 5)) {
HXLINE(4482)				_hx_tmp2 = ::hx::IsNotNull( this->gf );
            			}
            			else {
HXLINE(4482)				_hx_tmp2 = false;
            			}
HXDLIN(4482)			if (_hx_tmp2) {
HXLINE(4482)				_hx_tmp1 = this->gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(4482)				_hx_tmp1 = false;
            			}
HXDLIN(4482)			if (_hx_tmp1) {
HXLINE(4484)				this->gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(4486)			this->combo = 0;
HXLINE(4488)			if (!(this->practiceMode)) {
HXLINE(4488)				 ::PlayState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4488)				_hx_tmp3->songScore = (_hx_tmp3->songScore - 10);
            			}
HXLINE(4489)			if (!(this->endingSong)) {
HXLINE(4490)				this->songMisses++;
            			}
HXLINE(4492)			this->totalPlayed++;
HXLINE(4493)			this->RecalculateRating(true);
HXLINE(4495)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(4495)			::String library = null();
HXDLIN(4495)			 ::openfl::media::Sound _hx_tmp5 = ::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(4495)			_hx_tmp4->play(_hx_tmp5,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
HXLINE(4507)			if (this->boyfriend->hasMissAnimations) {
HXLINE(4508)				 ::Boyfriend _hx_tmp6 = this->boyfriend;
HXDLIN(4508)				_hx_tmp6->playAnim((this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(( (Float)(direction) )))) + HX_("miss",fc,52,5c,48)),true,null(),null());
            			}
HXLINE(4510)			this->vocals->set_volume(( (Float)(0) ));
            		}
HXLINE(4512)		this->callOnLuas(HX_("noteMissPress",95,58,12,aa),::cpp::VirtualArray_obj::__new(1)->init(0,direction),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,noteMissPress,(void))

void PlayState_obj::opponentNoteHit( ::Note note){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4516_opponentNoteHit)
HXLINE(4517)		::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(4517)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(4517)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(4517)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(4517)		if ((hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase() != HX_("tutorial",9e,8f,b5,82))) {
HXLINE(4518)			this->camZooming = true;
            		}
HXLINE(4520)		if (::hx::IsNotNull( this->discordOpponent )) {
HXLINE(4521)			this->discordOpponent->addText(note);
            		}
HXLINE(4523)		bool _hx_tmp;
HXDLIN(4523)		if ((note->noteType == HX_("Hey!",e5,69,e4,2f))) {
HXLINE(4523)			_hx_tmp = this->dad->animOffsets->exists(HX_("hey",dc,42,4f,00));
            		}
            		else {
HXLINE(4523)			_hx_tmp = false;
            		}
HXDLIN(4523)		if (_hx_tmp) {
HXLINE(4524)			this->dad->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(4525)			this->dad->specialAnim = true;
HXLINE(4526)			this->dad->heyTimer = ((Float)0.6);
            		}
            		else {
HXLINE(4527)			if (!(note->noAnimation)) {
HXLINE(4528)				::String altAnim = note->animSuffix;
HXLINE(4530)				if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(4532)					bool _hx_tmp1;
HXDLIN(4532)					if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)) )) {
HXLINE(4532)						_hx_tmp1 = !(( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)) ));
            					}
            					else {
HXLINE(4532)						_hx_tmp1 = false;
            					}
HXDLIN(4532)					if (_hx_tmp1) {
HXLINE(4533)						altAnim = HX_("-alt",1c,93,08,1e);
            					}
            				}
HXLINE(4537)				 ::Character _hx_char = this->dad;
HXLINE(4538)				::String animToPlay = (this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) )))) + altAnim);
HXLINE(4539)				if (note->gfNote) {
HXLINE(4540)					_hx_char = this->gf;
            				}
HXLINE(4543)				if (::hx::IsNotNull( _hx_char )) {
HXLINE(4545)					_hx_char->playAnim(animToPlay,true,null(),null());
HXLINE(4546)					_hx_char->holdTimer = ( (Float)(0) );
            				}
            			}
            		}
HXLINE(4550)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(4551)			this->vocals->set_volume(( (Float)(1) ));
            		}
HXLINE(4553)		Float time = ((Float)0.15);
HXLINE(4554)		bool _hx_tmp2;
HXDLIN(4554)		if (note->isSustainNote) {
HXLINE(4554)			_hx_tmp2 = !(::StringTools_obj::endsWith(note->animation->_curAnim->name,HX_("end",db,03,4d,00)));
            		}
            		else {
HXLINE(4554)			_hx_tmp2 = false;
            		}
HXDLIN(4554)		if (_hx_tmp2) {
HXLINE(4555)			time = (time + ((Float)0.15));
            		}
HXLINE(4557)		this->StrumPlayAnim(true,::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) ))),time);
HXLINE(4558)		note->hitByOpponent = true;
HXLINE(4560)		int _hx_tmp3 = this->notes->members->indexOf(note,null());
HXDLIN(4560)		this->callOnLuas(HX_("opponentNoteHit",64,75,4c,b1),::cpp::VirtualArray_obj::__new(4)->init(0,_hx_tmp3)->init(1,::Math_obj::abs(( (Float)(note->noteData) )))->init(2,note->noteType)->init(3,note->isSustainNote),null(),null());
HXLINE(4562)		if (!(note->isSustainNote)) {
HXLINE(4564)			note->kill();
HXLINE(4565)			this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4566)			note->destroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,opponentNoteHit,(void))

void PlayState_obj::goodNoteHit( ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4572_goodNoteHit)
HXDLIN(4572)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4573)		if (!(note->wasGoodHit)) {
HXLINE(4575)			bool _hx_tmp;
HXDLIN(4575)			if (this->cpuControlled) {
HXLINE(4575)				if (!(note->ignoreNote)) {
HXLINE(4575)					_hx_tmp = note->hitCausesMiss;
            				}
            				else {
HXLINE(4575)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(4575)				_hx_tmp = false;
            			}
HXDLIN(4575)			if (_hx_tmp) {
HXLINE(4575)				return;
            			}
HXLINE(4577)			bool _hx_tmp1;
HXDLIN(4577)			if ((::ClientPrefs_obj::hitsoundVolume > 0)) {
HXLINE(4577)				_hx_tmp1 = !(note->hitsoundDisabled);
            			}
            			else {
HXLINE(4577)				_hx_tmp1 = false;
            			}
HXDLIN(4577)			if (_hx_tmp1) {
HXLINE(4579)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(4579)				 ::openfl::media::Sound _hx_tmp3 = ::Paths_obj::sound(HX_("hitsound",9c,79,fe,2c),null());
HXDLIN(4579)				_hx_tmp2->play(_hx_tmp3,::ClientPrefs_obj::hitsoundVolume,null(),null(),null(),null());
            			}
HXLINE(4582)			if (note->hitCausesMiss) {
HXLINE(4583)				this->noteMiss(note);
HXLINE(4584)				bool _hx_tmp4;
HXDLIN(4584)				if (!(note->noteSplashDisabled)) {
HXLINE(4584)					_hx_tmp4 = !(note->isSustainNote);
            				}
            				else {
HXLINE(4584)					_hx_tmp4 = false;
            				}
HXDLIN(4584)				if (_hx_tmp4) {
HXLINE(4585)					this->spawnNoteSplashOnNote(note);
            				}
HXLINE(4588)				if (!(note->noMissAnimation)) {
HXLINE(4590)					if ((note->noteType == HX_("Hurt Note",a3,41,9e,fe))) {
HXLINE(4592)						if (::hx::IsNotNull( this->boyfriend->animation->_animations->get(HX_("hurt",0f,5c,17,45)) )) {
HXLINE(4593)							this->boyfriend->playAnim(HX_("hurt",0f,5c,17,45),true,null(),null());
HXLINE(4594)							this->boyfriend->specialAnim = true;
            						}
HXLINE(4596)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN(4596)						_hx_tmp5->play(::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),null()),((Float)0.3),null(),null(),null(),null());
            					}
            				}
HXLINE(4600)				note->wasGoodHit = true;
HXLINE(4601)				if (!(note->isSustainNote)) {
HXLINE(4603)					note->kill();
HXLINE(4604)					this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4605)					note->destroy();
            				}
HXLINE(4607)				return;
            			}
HXLINE(4610)			if (::hx::IsNotNull( this->discordPlayer )) {
HXLINE(4611)				this->discordPlayer->addText(note);
            			}
HXLINE(4612)			bool _hx_tmp6;
HXDLIN(4612)			if (::hx::IsNotNull( this->lightHUD )) {
HXLINE(4612)				_hx_tmp6 = this->enableCoolLightNote;
            			}
            			else {
HXLINE(4612)				_hx_tmp6 = false;
            			}
HXDLIN(4612)			if (_hx_tmp6) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tw){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4616_goodNoteHit)
HXLINE(4616)					_gthis->lightHUDTween = null();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(4613)				if (::hx::IsNotNull( this->lightHUDTween )) {
HXLINE(4613)					this->lightHUDTween->cancel();
            				}
HXLINE(4614)				this->lightHUD->set_color(this->noteColor->__get(::hx::Mod(note->noteData,4)));
HXLINE(4615)				this->lightHUD->set_alpha(((Float)0.75));
HXLINE(4616)				this->lightHUDTween = ::flixel::tweens::FlxTween_obj::tween(this->lightHUD, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            			}
HXLINE(4619)			if (!(note->isSustainNote)) {
HXLINE(4621)				 ::PlayState _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4621)				_hx_tmp7->combo = (_hx_tmp7->combo + 1);
HXLINE(4622)				if ((this->combo > 9999)) {
HXLINE(4622)					this->combo = 9999;
            				}
HXLINE(4623)				this->popUpScore(note);
            			}
            			else {
HXLINE(4625)				if (!(note->prevNote->isSustainNote)) {
HXLINE(4626)					this->spawnNoteSplashOnNote(note);
            				}
            			}
HXLINE(4628)			 ::PlayState _hx_tmp8 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4628)			Float _hx_tmp9;
HXDLIN(4628)			if (this->newHealthSystem) {
HXLINE(4628)				_hx_tmp9 = ::Math_obj::min(( (Float)(1) ),(( (Float)(this->combo) ) / ( (Float)(10) )));
            			}
            			else {
HXLINE(4628)				_hx_tmp9 = ( (Float)(1) );
            			}
HXDLIN(4628)			_hx_tmp8->health = (_hx_tmp8->health + ((note->hitHealth * this->healthGain) * _hx_tmp9));
HXLINE(4630)			if (!(note->noAnimation)) {
HXLINE(4631)				::String animToPlay = this->singAnimations->__get(::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) ))));
HXLINE(4633)				if (note->gfNote) {
HXLINE(4635)					if (::hx::IsNotNull( this->gf )) {
HXLINE(4637)						this->gf->playAnim((animToPlay + note->animSuffix),true,null(),null());
HXLINE(4638)						this->gf->holdTimer = ( (Float)(0) );
            					}
            				}
            				else {
HXLINE(4643)					this->boyfriend->playAnim((animToPlay + note->animSuffix),true,null(),null());
HXLINE(4644)					this->boyfriend->holdTimer = ( (Float)(0) );
            				}
HXLINE(4647)				if ((note->noteType == HX_("Hey!",e5,69,e4,2f))) {
HXLINE(4648)					if (this->boyfriend->animOffsets->exists(HX_("hey",dc,42,4f,00))) {
HXLINE(4649)						this->boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(4650)						this->boyfriend->specialAnim = true;
HXLINE(4651)						this->boyfriend->heyTimer = ((Float)0.6);
            					}
HXLINE(4654)					bool _hx_tmp10;
HXDLIN(4654)					if (::hx::IsNotNull( this->gf )) {
HXLINE(4654)						_hx_tmp10 = this->gf->animOffsets->exists(HX_("cheer",8d,9a,b6,45));
            					}
            					else {
HXLINE(4654)						_hx_tmp10 = false;
            					}
HXDLIN(4654)					if (_hx_tmp10) {
HXLINE(4655)						this->gf->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
HXLINE(4656)						this->gf->specialAnim = true;
HXLINE(4657)						this->gf->heyTimer = ((Float)0.6);
            					}
            				}
            			}
HXLINE(4662)			if (this->cpuControlled) {
HXLINE(4663)				Float time = ((Float)0.15);
HXLINE(4664)				bool _hx_tmp11;
HXDLIN(4664)				if (note->isSustainNote) {
HXLINE(4664)					_hx_tmp11 = !(::StringTools_obj::endsWith(note->animation->_curAnim->name,HX_("end",db,03,4d,00)));
            				}
            				else {
HXLINE(4664)					_hx_tmp11 = false;
            				}
HXDLIN(4664)				if (_hx_tmp11) {
HXLINE(4665)					time = (time + ((Float)0.15));
            				}
HXLINE(4667)				this->StrumPlayAnim(false,::Std_obj::_hx_int(::Math_obj::abs(( (Float)(note->noteData) ))),time);
            			}
            			else {
HXLINE(4669)				 ::StrumNote spr = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::StrumNote >();
HXLINE(4670)				if (::hx::IsNotNull( spr )) {
HXLINE(4672)					spr->playAnim(HX_("confirm",00,9d,39,10),true);
            				}
            			}
HXLINE(4676)			if (note->isSustainNote) {
HXLINE(4677)				int _g = 0;
HXDLIN(4677)				::Array< ::Dynamic> _g1 = note->parent->tail;
HXDLIN(4677)				while((_g < _g1->length)){
HXLINE(4677)					 ::Note daNote = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(4677)					_g = (_g + 1);
HXLINE(4678)					daNote->colorSwap->set_brightness((1 + (::Math_obj::sin(((( (Float)(::flixel::FlxG_obj::game->ticks) ) / ( (Float)(1000) )) * ( (Float)(18) ))) * ((Float)0.8))));
            				}
            			}
HXLINE(4682)			note->wasGoodHit = true;
HXLINE(4683)			this->vocals->set_volume(( (Float)(1) ));
HXLINE(4685)			bool isSus = note->isSustainNote;
HXLINE(4686)			int leData = ::Math_obj::round(::Math_obj::abs(( (Float)(note->noteData) )));
HXLINE(4687)			::String leType = note->noteType;
HXLINE(4688)			this->callOnLuas(HX_("goodNoteHit",c4,4d,c4,22),::cpp::VirtualArray_obj::__new(4)->init(0,this->notes->members->indexOf(note,null()))->init(1,leData)->init(2,leType)->init(3,isSus),null(),null());
HXLINE(4690)			if (!(note->isSustainNote)) {
HXLINE(4692)				note->kill();
HXLINE(4693)				this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4694)				note->destroy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::spawnNoteSplashOnNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4700_spawnNoteSplashOnNote)
HXDLIN(4700)		bool _hx_tmp;
HXDLIN(4700)		if (::ClientPrefs_obj::noteSplashes) {
HXDLIN(4700)			_hx_tmp = ::hx::IsNotNull( note );
            		}
            		else {
HXDLIN(4700)			_hx_tmp = false;
            		}
HXDLIN(4700)		if (_hx_tmp) {
HXLINE(4701)			 ::StrumNote strum = Dynamic( this->playerStrums->members->__get(note->noteData)).StaticCast<  ::StrumNote >();
HXLINE(4702)			if (::hx::IsNotNull( strum )) {
HXLINE(4703)				this->spawnNoteSplash(strum->x,strum->y,note->noteData,note);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,spawnNoteSplashOnNote,(void))

void PlayState_obj::spawnNoteSplash(Float x,Float y,int data, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4708_spawnNoteSplash)
HXLINE(4709)		::String skin = HX_("noteSplashes",a7,57,29,8d);
HXLINE(4710)		bool _hx_tmp;
HXDLIN(4710)		if (::hx::IsNotNull( ::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic) )) {
HXLINE(4710)			_hx_tmp = (( (::String)(::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) ).length > 0);
            		}
            		else {
HXLINE(4710)			_hx_tmp = false;
            		}
HXDLIN(4710)		if (_hx_tmp) {
HXLINE(4710)			skin = ( (::String)(::PlayState_obj::SONG->__Field(HX_("splashSkin",84,03,e1,a1),::hx::paccDynamic)) );
            		}
HXLINE(4712)		Float hue = ( (Float)(0) );
HXDLIN(4712)		Float sat = ( (Float)(0) );
HXDLIN(4712)		Float brt = ( (Float)(0) );
HXLINE(4713)		bool _hx_tmp1;
HXDLIN(4713)		if ((data > -1)) {
HXLINE(4713)			_hx_tmp1 = (data < ::ClientPrefs_obj::arrowHSV->length);
            		}
            		else {
HXLINE(4713)			_hx_tmp1 = false;
            		}
HXDLIN(4713)		if (_hx_tmp1) {
HXLINE(4715)			hue = (( (Float)(::ClientPrefs_obj::arrowHSV->__get(data).StaticCast< ::Array< int > >()->__get(0)) ) / ( (Float)(360) ));
HXLINE(4716)			sat = (( (Float)(::ClientPrefs_obj::arrowHSV->__get(data).StaticCast< ::Array< int > >()->__get(1)) ) / ( (Float)(100) ));
HXLINE(4717)			brt = (( (Float)(::ClientPrefs_obj::arrowHSV->__get(data).StaticCast< ::Array< int > >()->__get(2)) ) / ( (Float)(100) ));
HXLINE(4718)			if (::hx::IsNotNull( note )) {
HXLINE(4719)				skin = note->noteSplashTexture;
HXLINE(4720)				hue = note->noteSplashHue;
HXLINE(4721)				sat = note->noteSplashSat;
HXLINE(4722)				brt = note->noteSplashBrt;
            			}
            		}
HXLINE(4726)		if (note->isSustainNote) {
HXLINE(4727)			if (::hx::IsNull( this->onHoldSplash->__get(note->noteData).StaticCast<  ::NoteHoldSplash >() )) {
HXLINE(4728)				 ::NoteHoldSplash holdsplash = this->grpNoteHoldSplashes->recycle(::hx::ClassOf< ::NoteHoldSplash >(),null(),null(),null()).StaticCast<  ::NoteHoldSplash >();
HXLINE(4729)				holdsplash->setup(x,y,data,skin,hue,sat,brt);
HXLINE(4730)				this->grpNoteHoldSplashes->add(holdsplash).StaticCast<  ::NoteHoldSplash >();
HXLINE(4732)				this->onHoldSplash[note->noteData] = holdsplash;
            			}
            		}
            		else {
HXLINE(4735)			 ::NoteSplash splash = this->grpNoteSplashes->recycle(::hx::ClassOf< ::NoteSplash >(),null(),null(),null()).StaticCast<  ::NoteSplash >();
HXLINE(4736)			splash->setupNoteSplash(x,y,data,skin,hue,sat,brt);
HXLINE(4737)			this->grpNoteSplashes->add(splash).StaticCast<  ::NoteSplash >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,spawnNoteSplash,(void))

void PlayState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4741_destroy)
HXLINE(4742)		{
HXLINE(4742)			int _g = 0;
HXDLIN(4742)			::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(4742)			while((_g < _g1->length)){
HXLINE(4742)				 ::FunkinLua lua = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN(4742)				_g = (_g + 1);
HXLINE(4743)				lua->call(HX_("onDestroy",9b,e5,30,fc),::cpp::VirtualArray_obj::__new(0));
HXLINE(4744)				lua->stop();
            			}
            		}
HXLINE(4746)		this->luaArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4749)		if (::hx::IsNotNull( ::FunkinLua_obj::hscript )) {
HXLINE(4749)			::FunkinLua_obj::hscript = null();
            		}
HXLINE(4752)		if (!(::ClientPrefs_obj::controllerMode)) {
HXLINE(4754)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyPress_dyn(),null());
HXLINE(4755)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->onKeyRelease_dyn(),null());
            		}
HXLINE(4757)		::flixel::FlxG_obj::sound->music->set_pitch(( (Float)(1) ));
HXLINE(4758)		this->super::destroy();
            	}


void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4770_stepHit)
HXLINE(4771)		this->super::stepHit();
HXLINE(4772)		bool _hx_tmp;
HXDLIN(4772)		if (!((::Math_obj::abs((::flixel::FlxG_obj::sound->music->_time - (::Conductor_obj::songPosition - ::Conductor_obj::offset))) > (( (Float)(20) ) * this->playbackRate)))) {
HXLINE(4773)			if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(4772)				_hx_tmp = (::Math_obj::abs((this->vocals->_time - (::Conductor_obj::songPosition - ::Conductor_obj::offset))) > (( (Float)(20) ) * this->playbackRate));
            			}
            			else {
HXLINE(4772)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(4772)			_hx_tmp = true;
            		}
HXDLIN(4772)		if (_hx_tmp) {
HXLINE(4775)			this->resyncVocals();
            		}
HXLINE(4778)		if ((this->curStep == this->lastStepHit)) {
HXLINE(4779)			return;
            		}
HXLINE(4782)		{
HXLINE(4782)			int _g = (this->lastStepHit + 1);
HXDLIN(4782)			int _g1 = (this->curStep + 1);
HXDLIN(4782)			while((_g < _g1)){
HXLINE(4782)				_g = (_g + 1);
HXDLIN(4782)				int i = (_g - 1);
HXLINE(4783)				this->callOnLuas(HX_("onStepEvent",0f,40,73,08),::cpp::VirtualArray_obj::__new(1)->init(0,i),null(),null());
            			}
            		}
HXLINE(4788)		this->lastStepHit = this->curStep;
HXLINE(4789)		this->setOnLuas(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(4790)		this->callOnLuas(HX_("onStepHit",08,67,ec,58),::cpp::VirtualArray_obj::__new(0),null(),null());
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4796_beatHit)
HXLINE(4797)		this->super::beatHit();
HXLINE(4799)		if ((this->lastBeatHit >= this->curBeat)) {
HXLINE(4800)			return;
            		}
HXLINE(4803)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4806_beatHit)
HXLINE(4806)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(4806)			int order;
HXDLIN(4806)			if (::ClientPrefs_obj::downScroll) {
HXLINE(4806)				order = -1;
            			}
            			else {
HXLINE(4806)				order = 1;
            			}
HXDLIN(4806)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(4806)			int a1 = order;
HXDLIN(4806)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(4806)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(4812)		if ((this->iconSpeed != 0)) {
HXLINE(4813)			if ((::hx::Mod(this->curBeat,this->iconSpeed) == 0)) {
HXLINE(4814)				{
HXLINE(4814)					 ::flixel::math::FlxBasePoint this1 = this->iconP1->scale;
HXDLIN(4814)					this1->set_x(((Float)1.2));
HXDLIN(4814)					this1->set_y(((Float)1.2));
            				}
HXLINE(4815)				{
HXLINE(4815)					 ::flixel::math::FlxBasePoint this2 = this->iconP2->scale;
HXDLIN(4815)					this2->set_x(((Float)1.2));
HXDLIN(4815)					this2->set_y(((Float)1.2));
            				}
            			}
            		}
HXLINE(4818)		this->iconP1->updateHitbox();
HXLINE(4819)		this->iconP2->updateHitbox();
HXLINE(4821)		bool _hx_tmp1;
HXDLIN(4821)		bool _hx_tmp2;
HXDLIN(4821)		bool _hx_tmp3;
HXDLIN(4821)		bool _hx_tmp4;
HXDLIN(4821)		if (::hx::IsNotNull( this->gf )) {
HXLINE(4821)			_hx_tmp4 = (::hx::Mod(this->curBeat,::Math_obj::round(( (Float)((this->gfSpeed * this->gf->danceEveryNumBeats)) ))) == 0);
            		}
            		else {
HXLINE(4821)			_hx_tmp4 = false;
            		}
HXDLIN(4821)		if (_hx_tmp4) {
HXLINE(4821)			_hx_tmp3 = ::hx::IsNotNull( this->gf->animation->_curAnim );
            		}
            		else {
HXLINE(4821)			_hx_tmp3 = false;
            		}
HXDLIN(4821)		if (_hx_tmp3) {
HXLINE(4821)			_hx_tmp2 = !(::StringTools_obj::startsWith(this->gf->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(4821)			_hx_tmp2 = false;
            		}
HXDLIN(4821)		if (_hx_tmp2) {
HXLINE(4821)			_hx_tmp1 = !(this->gf->stunned);
            		}
            		else {
HXLINE(4821)			_hx_tmp1 = false;
            		}
HXDLIN(4821)		if (_hx_tmp1) {
HXLINE(4823)			this->gf->dance();
            		}
HXLINE(4825)		bool _hx_tmp5;
HXDLIN(4825)		bool _hx_tmp6;
HXDLIN(4825)		bool _hx_tmp7;
HXDLIN(4825)		if ((::hx::Mod(this->curBeat,this->boyfriend->danceEveryNumBeats) == 0)) {
HXLINE(4825)			_hx_tmp7 = ::hx::IsNotNull( this->boyfriend->animation->_curAnim );
            		}
            		else {
HXLINE(4825)			_hx_tmp7 = false;
            		}
HXDLIN(4825)		if (_hx_tmp7) {
HXLINE(4825)			_hx_tmp6 = !(::StringTools_obj::startsWith(this->boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(4825)			_hx_tmp6 = false;
            		}
HXDLIN(4825)		if (_hx_tmp6) {
HXLINE(4825)			_hx_tmp5 = !(this->boyfriend->stunned);
            		}
            		else {
HXLINE(4825)			_hx_tmp5 = false;
            		}
HXDLIN(4825)		if (_hx_tmp5) {
HXLINE(4827)			this->boyfriend->dance();
            		}
HXLINE(4829)		bool _hx_tmp8;
HXDLIN(4829)		bool _hx_tmp9;
HXDLIN(4829)		bool _hx_tmp10;
HXDLIN(4829)		if ((::hx::Mod(this->curBeat,this->dad->danceEveryNumBeats) == 0)) {
HXLINE(4829)			_hx_tmp10 = ::hx::IsNotNull( this->dad->animation->_curAnim );
            		}
            		else {
HXLINE(4829)			_hx_tmp10 = false;
            		}
HXDLIN(4829)		if (_hx_tmp10) {
HXLINE(4829)			_hx_tmp9 = !(::StringTools_obj::startsWith(this->dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)));
            		}
            		else {
HXLINE(4829)			_hx_tmp9 = false;
            		}
HXDLIN(4829)		if (_hx_tmp9) {
HXLINE(4829)			_hx_tmp8 = !(this->dad->stunned);
            		}
            		else {
HXLINE(4829)			_hx_tmp8 = false;
            		}
HXDLIN(4829)		if (_hx_tmp8) {
HXLINE(4831)			this->dad->dance();
            		}
HXLINE(4834)		this->lastBeatHit = this->curBeat;
HXLINE(4836)		this->setOnLuas(HX_("curBeat",16,53,29,ac),this->curBeat);
HXLINE(4837)		this->callOnLuas(HX_("onBeatHit",1e,a3,af,4b),::cpp::VirtualArray_obj::__new(0),null(),null());
            	}


void PlayState_obj::sectionHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4841_sectionHit)
HXLINE(4842)		this->super::sectionHit();
HXLINE(4844)		if (::hx::IsNotNull(  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection) )) {
HXLINE(4846)			bool _hx_tmp;
HXDLIN(4846)			bool _hx_tmp1;
HXDLIN(4846)			if (this->generatedMusic) {
HXLINE(4846)				_hx_tmp1 = !(this->endingSong);
            			}
            			else {
HXLINE(4846)				_hx_tmp1 = false;
            			}
HXDLIN(4846)			if (_hx_tmp1) {
HXLINE(4846)				_hx_tmp = !(this->isCameraOnForcedPos);
            			}
            			else {
HXLINE(4846)				_hx_tmp = false;
            			}
HXDLIN(4846)			if (_hx_tmp) {
HXLINE(4848)				this->moveCameraSection();
            			}
HXLINE(4851)			bool _hx_tmp2;
HXDLIN(4851)			bool _hx_tmp3;
HXDLIN(4851)			if (this->camZooming) {
HXLINE(4851)				_hx_tmp3 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4851)				_hx_tmp3 = false;
            			}
HXDLIN(4851)			if (_hx_tmp3) {
HXLINE(4851)				_hx_tmp2 = ::ClientPrefs_obj::camZooms;
            			}
            			else {
HXLINE(4851)				_hx_tmp2 = false;
            			}
HXDLIN(4851)			if (_hx_tmp2) {
HXLINE(4853)				 ::flixel::FlxCamera fh = ::flixel::FlxG_obj::camera;
HXDLIN(4853)				fh->set_zoom((fh->zoom + (((Float)0.015) * this->camZoomingMult)));
HXLINE(4854)				 ::flixel::FlxCamera fh1 = this->camHUD;
HXDLIN(4854)				fh1->set_zoom((fh1->zoom + (((Float)0.03) * this->camZoomingMult)));
            			}
HXLINE(4860)			if (( (bool)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("changeBPM",4f,4f,f8,1d),::hx::paccDynamic)) )) {
HXLINE(4862)				::Conductor_obj::changeBPM(( (Float)( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ));
HXLINE(4863)				this->setOnLuas(HX_("curBpm",3f,61,c3,3e),::Conductor_obj::bpm);
HXLINE(4864)				this->setOnLuas(HX_("crochet",34,d5,b5,d4),::Conductor_obj::crochet);
HXLINE(4865)				this->setOnLuas(HX_("stepCrochet",48,d7,ff,e6),::Conductor_obj::stepCrochet);
            			}
HXLINE(4867)			this->setOnLuas(HX_("mustHitSection",3b,5f,87,62), ::Dynamic( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)));
HXLINE(4868)			this->setOnLuas(HX_("altAnim",da,f3,f2,e5), ::Dynamic( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("altAnim",da,f3,f2,e5),::hx::paccDynamic)));
HXLINE(4869)			this->setOnLuas(HX_("gfSection",86,e5,63,d4), ::Dynamic( ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection)->__Field(HX_("gfSection",86,e5,63,d4),::hx::paccDynamic)));
            		}
HXLINE(4872)		this->setOnLuas(HX_("curSection",45,58,c1,68),this->curSection);
HXLINE(4873)		this->callOnLuas(HX_("onSectionHit",6d,97,11,97),::cpp::VirtualArray_obj::__new(0),null(),null());
            	}


 ::Dynamic PlayState_obj::callOnLuas(::String event,::cpp::VirtualArray args,::hx::Null< bool >  __o_ignoreStops,::Array< ::String > exclusions){
            		bool ignoreStops = __o_ignoreStops.Default(true);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4876_callOnLuas)
HXLINE(4877)		 ::Dynamic returnVal = ::FunkinLua_obj::Function_Continue;
HXLINE(4879)		if (::hx::IsNull( exclusions )) {
HXLINE(4879)			exclusions = ::Array_obj< ::String >::__new(0);
            		}
HXLINE(4880)		{
HXLINE(4880)			int _g = 0;
HXDLIN(4880)			::Array< ::Dynamic> _g1 = this->luaArray;
HXDLIN(4880)			while((_g < _g1->length)){
HXLINE(4880)				 ::FunkinLua script = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN(4880)				_g = (_g + 1);
HXLINE(4881)				if (exclusions->contains(script->scriptName)) {
HXLINE(4882)					continue;
            				}
HXLINE(4884)				 ::Dynamic ret = script->call(event,args);
HXLINE(4885)				bool _hx_tmp;
HXDLIN(4885)				if (::hx::IsEq( ret,::FunkinLua_obj::Function_StopLua )) {
HXLINE(4885)					_hx_tmp = !(ignoreStops);
            				}
            				else {
HXLINE(4885)					_hx_tmp = false;
            				}
HXDLIN(4885)				if (_hx_tmp) {
HXLINE(4886)					goto _hx_goto_221;
            				}
HXLINE(4889)				bool _hx_bool = ::hx::IsEq( ret,::FunkinLua_obj::Function_Continue );
HXLINE(4890)				if (!(_hx_bool)) {
HXLINE(4891)					returnVal = ret;
            				}
            			}
            			_hx_goto_221:;
            		}
HXLINE(4896)		return returnVal;
            	}


HX_DEFINE_DYNAMIC_FUNC4(PlayState_obj,callOnLuas,return )

void PlayState_obj::setOnLuas(::String variable, ::Dynamic arg){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4901_setOnLuas)
HXDLIN(4901)		int _g = 0;
HXDLIN(4901)		int _g1 = this->luaArray->length;
HXDLIN(4901)		while((_g < _g1)){
HXDLIN(4901)			_g = (_g + 1);
HXDLIN(4901)			int i = (_g - 1);
HXLINE(4902)			this->luaArray->__get(i).StaticCast<  ::FunkinLua >()->set(variable,arg);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,setOnLuas,(void))

void PlayState_obj::StrumPlayAnim(bool isDad,int id,Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4907_StrumPlayAnim)
HXLINE(4908)		 ::StrumNote spr = null();
HXLINE(4909)		if (isDad) {
HXLINE(4910)			spr = Dynamic( this->opponentStrums->members->__get(id)).StaticCast<  ::StrumNote >();
            		}
            		else {
HXLINE(4912)			spr = Dynamic( this->playerStrums->members->__get(id)).StaticCast<  ::StrumNote >();
            		}
HXLINE(4915)		if (::hx::IsNotNull( spr )) {
HXLINE(4916)			spr->playAnim(HX_("confirm",00,9d,39,10),true);
HXLINE(4917)			spr->resetAnim = time;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,StrumPlayAnim,(void))

void PlayState_obj::RecalculateRating(::hx::Null< bool >  __o_badHit){
            		bool badHit = __o_badHit.Default(false);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4924_RecalculateRating)
HXLINE(4925)		this->setOnLuas(HX_("score",52,73,d9,78),this->songScore);
HXLINE(4926)		this->setOnLuas(HX_("misses",6a,62,54,56),this->songMisses);
HXLINE(4927)		this->setOnLuas(HX_("hits",c0,42,0e,45),this->songHits);
HXLINE(4929)		 ::Dynamic ret = this->callOnLuas(HX_("onRecalculateRating",b1,37,6a,10),::cpp::VirtualArray_obj::__new(0),false,null());
HXLINE(4930)		if (::hx::IsNotEq( ret,::FunkinLua_obj::Function_Stop )) {
HXLINE(4932)			if ((this->totalPlayed < 1)) {
HXLINE(4933)				this->ratingName = HX_("?",3f,00,00,00);
            			}
            			else {
HXLINE(4937)				this->ratingPercent = ::Math_obj::min(( (Float)(1) ),::Math_obj::max(( (Float)(0) ),(this->totalNotesHit / ( (Float)(this->totalPlayed) ))));
HXLINE(4941)				if ((this->ratingPercent >= 1)) {
HXLINE(4943)					this->ratingName = ( (::String)(::PlayState_obj::ratingStuff->__get((::PlayState_obj::ratingStuff->get_length() - 1))->__GetItem(0)) );
            				}
            				else {
HXLINE(4947)					int _g = 0;
HXDLIN(4947)					int _g1 = (::PlayState_obj::ratingStuff->get_length() - 1);
HXDLIN(4947)					while((_g < _g1)){
HXLINE(4947)						_g = (_g + 1);
HXDLIN(4947)						int i = (_g - 1);
HXLINE(4949)						if (::hx::IsLess( this->ratingPercent,::PlayState_obj::ratingStuff->__get(i)->__GetItem(1) )) {
HXLINE(4951)							this->ratingName = ( (::String)(::PlayState_obj::ratingStuff->__get(i)->__GetItem(0)) );
HXLINE(4952)							goto _hx_goto_226;
            						}
            					}
            					_hx_goto_226:;
            				}
            			}
HXLINE(4959)			this->ratingFC = HX_("",00,00,00,00);
HXLINE(4960)			if ((this->sicks > 0)) {
HXLINE(4960)				this->ratingFC = HX_("SFC",50,38,3f,00);
            			}
HXLINE(4961)			if ((this->goods > 0)) {
HXLINE(4961)				this->ratingFC = HX_("GFC",44,1d,36,00);
            			}
HXLINE(4962)			bool _hx_tmp;
HXDLIN(4962)			if ((this->bads <= 0)) {
HXLINE(4962)				_hx_tmp = (this->shits > 0);
            			}
            			else {
HXLINE(4962)				_hx_tmp = true;
            			}
HXDLIN(4962)			if (_hx_tmp) {
HXLINE(4962)				this->ratingFC = HX_("FC",3d,3d,00,00);
            			}
HXLINE(4963)			bool _hx_tmp1;
HXDLIN(4963)			if ((this->songMisses > 0)) {
HXLINE(4963)				_hx_tmp1 = (this->songMisses < 10);
            			}
            			else {
HXLINE(4963)				_hx_tmp1 = false;
            			}
HXDLIN(4963)			if (_hx_tmp1) {
HXLINE(4963)				this->ratingFC = HX_("SDCB",70,89,10,37);
            			}
            			else {
HXLINE(4964)				if ((this->songMisses >= 10)) {
HXLINE(4964)					this->ratingFC = HX_("Clear",6d,e1,88,db);
            				}
            			}
            		}
HXLINE(4966)		this->updateScore(badHit);
HXLINE(4967)		this->setOnLuas(HX_("rating",1d,34,8a,bb),this->ratingPercent);
HXLINE(4968)		this->setOnLuas(HX_("ratingName",08,a5,2b,05),this->ratingName);
HXLINE(4969)		this->setOnLuas(HX_("ratingFC",9a,72,95,59),this->ratingFC);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,RecalculateRating,(void))

::String PlayState_obj::checkForAchievement(::Array< ::String > achievesToCheck){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4974_checkForAchievement)
HXLINE(4975)		if (::PlayState_obj::chartingMode) {
HXLINE(4975)			return null();
            		}
HXLINE(4977)		bool usedPractice;
HXDLIN(4977)		 ::Dynamic defaultValue = false;
HXDLIN(4977)		 ::Dynamic usedPractice1;
HXDLIN(4977)		if (::PlayState_obj::isStoryMode) {
HXLINE(4977)			usedPractice1 = defaultValue;
            		}
            		else {
HXLINE(4977)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("practice",bb,00,e7,a0))) {
HXLINE(4977)				usedPractice1 = ::ClientPrefs_obj::gameplaySettings->get(HX_("practice",bb,00,e7,a0));
            			}
            			else {
HXLINE(4977)				usedPractice1 = defaultValue;
            			}
            		}
HXDLIN(4977)		if (!(( (bool)(usedPractice1) ))) {
HXLINE(4977)			 ::Dynamic defaultValue1 = false;
HXDLIN(4977)			if (::PlayState_obj::isStoryMode) {
HXLINE(4977)				usedPractice = ( (bool)(defaultValue1) );
            			}
            			else {
HXLINE(4977)				if (::ClientPrefs_obj::gameplaySettings->exists(HX_("botplay",7b,fb,a9,61))) {
HXLINE(4977)					usedPractice = ::ClientPrefs_obj::gameplaySettings->get_bool(HX_("botplay",7b,fb,a9,61));
            				}
            				else {
HXLINE(4977)					usedPractice = ( (bool)(defaultValue1) );
            				}
            			}
            		}
            		else {
HXLINE(4977)			usedPractice = true;
            		}
HXLINE(4978)		{
HXLINE(4978)			int _g = 0;
HXDLIN(4978)			int _g1 = achievesToCheck->length;
HXDLIN(4978)			while((_g < _g1)){
HXLINE(4978)				_g = (_g + 1);
HXDLIN(4978)				int i = (_g - 1);
HXLINE(4979)				::String achievementName = achievesToCheck->__get(i);
HXLINE(4980)				bool _hx_tmp;
HXDLIN(4980)				if (!(::Achievements_obj::isAchievementUnlocked(achievementName))) {
HXLINE(4980)					_hx_tmp = !(this->cpuControlled);
            				}
            				else {
HXLINE(4980)					_hx_tmp = false;
            				}
HXDLIN(4980)				if (_hx_tmp) {
HXLINE(4981)					bool unlock = false;
HXLINE(4982)					::String _hx_switch_0 = achievementName;
            					if (  (_hx_switch_0==HX_("debugger",21,24,eb,90)) ){
HXLINE(5042)						bool _hx_tmp1;
HXDLIN(5042)						::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(5042)						 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(5042)						 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(5042)						::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(5042)						if ((hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase() == HX_("test",52,c8,f9,4c))) {
HXLINE(5042)							_hx_tmp1 = !(usedPractice);
            						}
            						else {
HXLINE(5042)							_hx_tmp1 = false;
            						}
HXDLIN(5042)						if (_hx_tmp1) {
HXLINE(5043)							unlock = true;
            						}
HXLINE(5042)						goto _hx_goto_229;
            					}
            					if (  (_hx_switch_0==HX_("hype",46,63,1a,45)) ){
HXLINE(5023)						bool _hx_tmp2;
HXDLIN(5023)						if (!(this->boyfriendIdled)) {
HXLINE(5023)							_hx_tmp2 = !(usedPractice);
            						}
            						else {
HXLINE(5023)							_hx_tmp2 = false;
            						}
HXDLIN(5023)						if (_hx_tmp2) {
HXLINE(5024)							unlock = true;
            						}
HXLINE(5023)						goto _hx_goto_229;
            					}
            					if (  (_hx_switch_0==HX_("oversinging",1f,13,8f,78)) ){
HXLINE(5019)						bool _hx_tmp3;
HXDLIN(5019)						if ((this->boyfriend->holdTimer >= 10)) {
HXLINE(5019)							_hx_tmp3 = !(usedPractice);
            						}
            						else {
HXLINE(5019)							_hx_tmp3 = false;
            						}
HXDLIN(5019)						if (_hx_tmp3) {
HXLINE(5020)							unlock = true;
            						}
HXLINE(5019)						goto _hx_goto_229;
            					}
            					if (  (_hx_switch_0==HX_("roadkill_enthusiast",15,e2,55,56)) ){
HXLINE(5015)						if ((::Achievements_obj::henchmenDeath >= 100)) {
HXLINE(5016)							unlock = true;
            						}
HXLINE(5015)						goto _hx_goto_229;
            					}
            					if (  (_hx_switch_0==HX_("toastie",43,0c,91,5f)) ){
HXLINE(5038)						bool _hx_tmp4;
HXDLIN(5038)						if (::ClientPrefs_obj::lowQuality) {
HXLINE(5038)							_hx_tmp4 = !(::ClientPrefs_obj::globalAntialiasing);
            						}
            						else {
HXLINE(5038)							_hx_tmp4 = false;
            						}
HXDLIN(5038)						if (_hx_tmp4) {
HXLINE(5039)							unlock = true;
            						}
HXLINE(5038)						goto _hx_goto_229;
            					}
            					if (  (_hx_switch_0==HX_("two_keys",c7,f4,0a,9b)) ){
HXLINE(5027)						if (!(usedPractice)) {
HXLINE(5028)							int howManyPresses = 0;
HXLINE(5029)							{
HXLINE(5029)								int _g2 = 0;
HXDLIN(5029)								int _g3 = this->keysPressed->length;
HXDLIN(5029)								while((_g2 < _g3)){
HXLINE(5029)									_g2 = (_g2 + 1);
HXDLIN(5029)									int j = (_g2 - 1);
HXLINE(5030)									if (this->keysPressed->__get(j)) {
HXLINE(5030)										howManyPresses = (howManyPresses + 1);
            									}
            								}
            							}
HXLINE(5033)							if ((howManyPresses <= 2)) {
HXLINE(5034)								unlock = true;
            							}
            						}
HXLINE(5027)						goto _hx_goto_229;
            					}
            					if (  (_hx_switch_0==HX_("ur_bad",a3,4f,85,aa)) ){
HXLINE(5007)						bool _hx_tmp5;
HXDLIN(5007)						if ((this->ratingPercent < ((Float)0.2))) {
HXLINE(5007)							_hx_tmp5 = !(this->practiceMode);
            						}
            						else {
HXLINE(5007)							_hx_tmp5 = false;
            						}
HXDLIN(5007)						if (_hx_tmp5) {
HXLINE(5008)							unlock = true;
            						}
HXLINE(5007)						goto _hx_goto_229;
            					}
            					if (  (_hx_switch_0==HX_("ur_good",9f,19,79,8d)) ){
HXLINE(5011)						bool _hx_tmp6;
HXDLIN(5011)						if ((this->ratingPercent >= 1)) {
HXLINE(5011)							_hx_tmp6 = !(usedPractice);
            						}
            						else {
HXLINE(5011)							_hx_tmp6 = false;
            						}
HXDLIN(5011)						if (_hx_tmp6) {
HXLINE(5012)							unlock = true;
            						}
HXLINE(5011)						goto _hx_goto_229;
            					}
            					if (  (_hx_switch_0==HX_("week1_nomiss",3f,c5,3b,fe)) ||  (_hx_switch_0==HX_("week2_nomiss",5e,37,6e,37)) ||  (_hx_switch_0==HX_("week3_nomiss",7d,a9,a0,70)) ||  (_hx_switch_0==HX_("week4_nomiss",9c,1b,d3,a9)) ||  (_hx_switch_0==HX_("week5_nomiss",bb,8d,05,e3)) ||  (_hx_switch_0==HX_("week6_nomiss",da,ff,37,1c)) ||  (_hx_switch_0==HX_("week7_nomiss",f9,71,6a,55)) ){
HXLINE(4985)						bool _hx_tmp7;
HXDLIN(4985)						bool _hx_tmp8;
HXDLIN(4985)						bool _hx_tmp9;
HXDLIN(4985)						bool _hx_tmp10;
HXDLIN(4985)						bool _hx_tmp11;
HXDLIN(4985)						if (::PlayState_obj::isStoryMode) {
HXLINE(4985)							_hx_tmp11 = ((::PlayState_obj::campaignMisses + this->songMisses) < 1);
            						}
            						else {
HXLINE(4985)							_hx_tmp11 = false;
            						}
HXDLIN(4985)						if (_hx_tmp11) {
HXLINE(4985)							_hx_tmp10 = (::CoolUtil_obj::difficultyString() == HX_("HARD",eb,f6,c8,2f));
            						}
            						else {
HXLINE(4985)							_hx_tmp10 = false;
            						}
HXDLIN(4985)						if (_hx_tmp10) {
HXLINE(4985)							_hx_tmp9 = (::PlayState_obj::storyPlaylist->length <= 1);
            						}
            						else {
HXLINE(4985)							_hx_tmp9 = false;
            						}
HXDLIN(4985)						if (_hx_tmp9) {
HXLINE(4985)							_hx_tmp8 = !(::PlayState_obj::changedDifficulty);
            						}
            						else {
HXLINE(4985)							_hx_tmp8 = false;
            						}
HXDLIN(4985)						if (_hx_tmp8) {
HXLINE(4985)							_hx_tmp7 = !(usedPractice);
            						}
            						else {
HXLINE(4985)							_hx_tmp7 = false;
            						}
HXDLIN(4985)						if (_hx_tmp7) {
HXLINE(4987)							::String weekName = ::WeekData_obj::getWeekFileName();
HXLINE(4988)							::String _hx_switch_1 = weekName;
            							if (  (_hx_switch_1==HX_("week1",bd,95,be,c7)) ){
HXLINE(4991)								if ((achievementName == HX_("week1_nomiss",3f,c5,3b,fe))) {
HXLINE(4991)									unlock = true;
            								}
HXDLIN(4991)								goto _hx_goto_231;
            							}
            							if (  (_hx_switch_1==HX_("week2",be,95,be,c7)) ){
HXLINE(4993)								if ((achievementName == HX_("week2_nomiss",5e,37,6e,37))) {
HXLINE(4993)									unlock = true;
            								}
HXDLIN(4993)								goto _hx_goto_231;
            							}
            							if (  (_hx_switch_1==HX_("week3",bf,95,be,c7)) ){
HXLINE(4995)								if ((achievementName == HX_("week3_nomiss",7d,a9,a0,70))) {
HXLINE(4995)									unlock = true;
            								}
HXDLIN(4995)								goto _hx_goto_231;
            							}
            							if (  (_hx_switch_1==HX_("week4",c0,95,be,c7)) ){
HXLINE(4997)								if ((achievementName == HX_("week4_nomiss",9c,1b,d3,a9))) {
HXLINE(4997)									unlock = true;
            								}
HXDLIN(4997)								goto _hx_goto_231;
            							}
            							if (  (_hx_switch_1==HX_("week5",c1,95,be,c7)) ){
HXLINE(4999)								if ((achievementName == HX_("week5_nomiss",bb,8d,05,e3))) {
HXLINE(4999)									unlock = true;
            								}
HXDLIN(4999)								goto _hx_goto_231;
            							}
            							if (  (_hx_switch_1==HX_("week6",c2,95,be,c7)) ){
HXLINE(5001)								if ((achievementName == HX_("week6_nomiss",da,ff,37,1c))) {
HXLINE(5001)									unlock = true;
            								}
HXDLIN(5001)								goto _hx_goto_231;
            							}
            							if (  (_hx_switch_1==HX_("week7",c3,95,be,c7)) ){
HXLINE(5003)								if ((achievementName == HX_("week7_nomiss",f9,71,6a,55))) {
HXLINE(5003)									unlock = true;
            								}
HXDLIN(5003)								goto _hx_goto_231;
            							}
            							_hx_goto_231:;
            						}
HXLINE(4985)						goto _hx_goto_229;
            					}
            					_hx_goto_229:;
HXLINE(5047)					if (unlock) {
HXLINE(5048)						::Achievements_obj::unlockAchievement(achievementName);
HXLINE(5049)						return achievementName;
            					}
            				}
            			}
            		}
HXLINE(5053)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkForAchievement,return )

void PlayState_obj::songStepEvent(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5062_songStepEvent)
HXDLIN(5062)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(5063)		{
HXLINE(5063)			::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(5063)			 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(5063)			 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(5063)			::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(5063)			::String _hx_switch_0 = hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
            			if (  (_hx_switch_0==HX_("depression",a6,ce,69,c6)) ){
HXLINE(5145)				goto _hx_goto_233;
            			}
            			if (  (_hx_switch_0==HX_("discord-annoyer",97,ac,58,20)) ){
HXLINE(5065)				switch((int)(this->curStep)){
            					case (int)1520: {
HXLINE(5067)						this->enableCoolLightNote = true;
            					}
            					break;
            					case (int)1776: {
HXLINE(5069)						this->enableCoolLightNote = false;
            					}
            					break;
            				}
HXLINE(5072)				bool _hx_tmp;
HXDLIN(5072)				if (this->enableCoolLightNote) {
HXLINE(5072)					_hx_tmp = (::hx::Mod(this->curStep,4) == 0);
            				}
            				else {
HXLINE(5072)					_hx_tmp = false;
            				}
HXDLIN(5072)				if (_hx_tmp) {
HXLINE(5073)					this->triggerEventNote(HX_("Add Camera Zoom",cf,55,a6,44),HX_("0.015",d6,3f,c8,c1),HX_("0.03",81,4f,dd,1f));
            				}
HXLINE(5064)				goto _hx_goto_233;
            			}
            			if (  (_hx_switch_0==HX_("shut-up",14,0a,f3,ed)) ){
HXLINE(5076)				switch((int)(this->curStep)){
            					case (int)128: {
HXLINE(5078)						this->beatHardSnares = true;
            					}
            					break;
            					case (int)252: {
HXLINE(5080)						::flixel::tweens::FlxTween_obj::tween(this->redOverlay, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.75))),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
            					}
            					break;
            					case (int)256: {
HXLINE(5082)						this->zoomMultiply = ((Float)1.5);
HXLINE(5083)						this->camOther->flash(-65536,((Float)1.5),null(),true);
            					}
            					break;
            					case (int)512: {
HXLINE(5085)						this->zoomMultiply = ( (Float)(1) );
HXLINE(5086)						this->beatHardSnares = false;
HXLINE(5087)						this->redOverlay->set_alpha(( (Float)(0) ));
HXLINE(5088)						this->camOther->flash(-1,((Float)0.75),null(),true);
HXLINE(5090)						this->camHUD->set_angle(( (Float)(0) ));
HXLINE(5091)						this->glitchy->set_alpha(( (Float)(0) ));
            					}
            					break;
            					case (int)768: {
HXLINE(5093)						this->opponentHitDistract = true;
            					}
            					break;
            					case (int)1024: {
HXLINE(5095)						this->opponentHitDistract = false;
            					}
            					break;
            				}
HXLINE(5099)				if (this->beatHardSnares) {
HXLINE(5100)					if ((::hx::Mod(this->curStep,8) == 0)) {
HXLINE(5101)						::String _hx_tmp1 = ::Std_obj::string((((Float)0.015) * this->zoomMultiply));
HXDLIN(5101)						this->triggerEventNote(HX_("Add Camera Zoom",cf,55,a6,44),_hx_tmp1,::Std_obj::string((((Float)0.03) * this->zoomMultiply)));
            					}
            					else {
HXLINE(5102)						if ((::hx::Mod(this->curStep,8) == 4)) {
HXLINE(5103)							::String _hx_tmp2 = ::Std_obj::string((((Float)-0.015) * this->zoomMultiply));
HXDLIN(5103)							this->triggerEventNote(HX_("Add Camera Zoom",cf,55,a6,44),_hx_tmp2,::Std_obj::string((((Float)-0.03) * this->zoomMultiply)));
            						}
            					}
            				}
HXLINE(5105)				if (this->opponentHitDistract) {
HXLINE(5106)					if ((::hx::Mod(this->curStep,8) == 0)) {
HXLINE(5107)						int _g_min = 0;
HXDLIN(5107)						int _g_max = 4;
HXDLIN(5107)						while((_g_min < _g_max)){
HXLINE(5107)							_g_min = (_g_min + 1);
HXDLIN(5107)							int i = (_g_min - 1);
HXLINE(5108)							 ::StrumNote arrow = Dynamic( this->strumLineNotes->members->__get(i)).StaticCast<  ::StrumNote >();
HXLINE(5109)							{
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,int,i) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween twn){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5110_songStepEvent)
HXLINE(5110)									_gthis->modchartTweens->remove((HX_("noteComeIn",9b,4f,3c,65) + i));
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(5109)								::Dynamic this1 = this->modchartTweens;
HXDLIN(5109)								 ::flixel::tweens::FlxTween value = ::flixel::tweens::FlxTween_obj::tween(arrow, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("x",78,00,00,00),(arrow->defaultPosition->x + 350))),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())
            									->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis,i)))));
HXDLIN(5109)								( ( ::haxe::ds::StringMap)(this1) )->set((HX_("noteComeIn",9b,4f,3c,65) + i),value);
            							}
            						}
            					}
            					else {
HXLINE(5112)						if ((::hx::Mod(this->curStep,8) == 4)) {
HXLINE(5113)							{
HXLINE(5113)								int _g_min1 = 0;
HXDLIN(5113)								int _g_max1 = 4;
HXDLIN(5113)								while((_g_min1 < _g_max1)){
HXLINE(5113)									_g_min1 = (_g_min1 + 1);
HXDLIN(5113)									int i1 = (_g_min1 - 1);
HXLINE(5114)									 ::StrumNote arrow1 = Dynamic( this->strumLineNotes->members->__get(i1)).StaticCast<  ::StrumNote >();
HXLINE(5115)									{
            										HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis,int,i1) HXARGC(1)
            										void _hx_run( ::flixel::tweens::FlxTween twn){
            											HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5116_songStepEvent)
HXLINE(5116)											_gthis->modchartTweens->remove((HX_("noteComeIn",9b,4f,3c,65) + i1));
            										}
            										HX_END_LOCAL_FUNC1((void))

HXLINE(5115)										::Dynamic this2 = this->modchartTweens;
HXDLIN(5115)										 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(arrow1, ::Dynamic(::hx::Anon_obj::Create(1)
            											->setFixed(0,HX_("x",78,00,00,00),arrow1->defaultPosition->x)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            											->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            											->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis,i1)))));
HXDLIN(5115)										( ( ::haxe::ds::StringMap)(this2) )->set((HX_("noteComeIn",9b,4f,3c,65) + i1),value1);
            									}
            								}
            							}
HXLINE(5118)							this->shakeNote = ( (Float)(75) );
HXLINE(5119)							{
            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween twn){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5120_songStepEvent)
HXLINE(5121)									_gthis->modchartTweens->remove(HX_("notesShake",c5,66,d4,73));
HXLINE(5122)									{
HXLINE(5122)										int _g_min = 4;
HXDLIN(5122)										int _g_max = 8;
HXDLIN(5122)										while((_g_min < _g_max)){
HXLINE(5122)											_g_min = (_g_min + 1);
HXDLIN(5122)											int i = (_g_min - 1);
HXLINE(5123)											 ::StrumNote arrow = Dynamic( _gthis->strumLineNotes->members->__get(i)).StaticCast<  ::StrumNote >();
HXLINE(5124)											arrow->setPosition(arrow->defaultPosition->x,arrow->defaultPosition->y);
            										}
            									}
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween twn){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5127_songStepEvent)
HXLINE(5127)									int _g_min = 4;
HXDLIN(5127)									int _g_max = 8;
HXDLIN(5127)									while((_g_min < _g_max)){
HXLINE(5127)										_g_min = (_g_min + 1);
HXDLIN(5127)										int i = (_g_min - 1);
HXLINE(5128)										 ::StrumNote arrow = Dynamic( _gthis->strumLineNotes->members->__get(i)).StaticCast<  ::StrumNote >();
HXLINE(5130)										Float arrow1 = arrow->defaultPosition->x;
HXDLIN(5130)										Float value = (arrow1 + ::flixel::FlxG_obj::random->_hx_float(-(_gthis->shakeNote),_gthis->shakeNote,null()));
HXLINE(5131)										Float arrow2 = arrow->defaultPosition->y;
HXLINE(5129)										arrow->setPosition(value,(arrow2 + ::flixel::FlxG_obj::random->_hx_float(-(_gthis->shakeNote),_gthis->shakeNote,null())));
            									}
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(5119)								::Dynamic this3 = this->modchartTweens;
HXDLIN(5119)								( ( ::haxe::ds::StringMap)(this3) )->set(HX_("notesShake",c5,66,d4,73),( ( ::flixel::tweens::FlxTween)(::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("shakeNote",d8,fd,1d,e4),0)),((::Conductor_obj::crochet / ( (Float)(1000) )) * ((Float)1.5)), ::Dynamic(::hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            									->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis)))
            									->setFixed(2,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_3(_gthis)))))) ));
            							}
HXLINE(5135)							this->camOther->flash((int)1191176681,((Float)0.2),null(),true);
HXLINE(5138)							this->camHUD->shake(((Float)0.007),(::Conductor_obj::crochet / ( (Float)(2000) )),null(),true,null());
HXLINE(5140)							this->glitchy->set_alpha(((Float)0.3));
HXLINE(5141)							::flixel::tweens::FlxTween_obj::tween(this->glitchy, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("alpha",5e,a7,96,21),0)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoIn_dyn())));
HXLINE(5142)							 ::PlayState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(5142)							_hx_tmp3->health = (_hx_tmp3->health - ((Float)0.075));
            						}
            					}
            				}
HXLINE(5075)				goto _hx_goto_233;
            			}
            			_hx_goto_233:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,songStepEvent,(void))

void PlayState_obj::songUpdateEvent(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_5153_songUpdateEvent)
HXDLIN(5153)		::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(5153)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(5153)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(5153)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(5153)		if ((hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase() == HX_("shut-up",14,0a,f3,ed))) {
HXLINE(5155)			bool _hx_tmp;
HXDLIN(5155)			if ((this->curStep >= 256)) {
HXLINE(5155)				_hx_tmp = (this->curStep < 512);
            			}
            			else {
HXLINE(5155)				_hx_tmp = false;
            			}
HXDLIN(5155)			if (_hx_tmp) {
HXLINE(5156)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 96)) {
HXLINE(5158)					if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 96)) {
HXLINE(5159)						this->camHUD->set_angle((::Math_obj::sin(((::hx::Mod((this->curDecBeat / ( (Float)(4) )),1) * ( (Float)(2) )) * ::Math_obj::PI)) * ( (Float)(-6) )));
            					}
            				}
HXLINE(5160)				this->camHUD->shake(((Float)0.01),((Float)0.1),null(),true,null());
HXLINE(5163)				this->camOther->shake(((Float)0.001),((Float)0.1),null(),true,null());
HXLINE(5165)				 ::flixel::FlxSprite _hx_tmp1 = this->glitchy;
HXDLIN(5165)				_hx_tmp1->set_alpha(::flixel::FlxG_obj::random->_hx_float(((Float)0.25),((Float)0.5),null()));
HXLINE(5166)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 5)) {
HXLINE(5167)					this->glitchy->set_flipY(!(this->glitchy->flipY));
            				}
HXLINE(5168)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 5)) {
HXLINE(5169)					this->glitchy->set_flipX(!(this->glitchy->flipX));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,songUpdateEvent,(void))

int PlayState_obj::STRUM_X;

int PlayState_obj::STRUM_X_MIDDLESCROLL;

::cpp::VirtualArray PlayState_obj::ratingStuff;

::String PlayState_obj::curStage;

bool PlayState_obj::isPixelStage;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

::String PlayState_obj::storyName;

int PlayState_obj::storyDifficulty;

 ::flixel::math::FlxBasePoint PlayState_obj::prevCamFollow;

 ::flixel::FlxObject PlayState_obj::prevCamFollowPos;

bool PlayState_obj::changedDifficulty;

bool PlayState_obj::chartingMode;

int PlayState_obj::campaignScore;

int PlayState_obj::campaignMisses;

bool PlayState_obj::seenCutscene;

int PlayState_obj::deathCounter;

Float PlayState_obj::daPixelZoom;

 ::PlayState PlayState_obj::instance;

 ::flixel::FlxSprite PlayState_obj::lastRating;

 ::flixel::FlxSprite PlayState_obj::lastCombo;

::Array< ::Dynamic> PlayState_obj::lastScore;

Float PlayState_obj::startOnTime;

void PlayState_obj::cancelMusicFadeTween(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4761_cancelMusicFadeTween)
HXLINE(4762)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->fadeTween )) {
HXLINE(4763)			::flixel::FlxG_obj::sound->music->fadeTween->cancel();
            		}
HXLINE(4765)		::flixel::FlxG_obj::sound->music->fadeTween = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,cancelMusicFadeTween,(void))


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(modManager,"modManager");
	HX_MARK_MEMBER_NAME(notesToSpawn,"notesToSpawn");
	HX_MARK_MEMBER_NAME(useModchart,"useModchart");
	HX_MARK_MEMBER_NAME(isCameraOnForcedPos,"isCameraOnForcedPos");
	HX_MARK_MEMBER_NAME(boyfriendMap,"boyfriendMap");
	HX_MARK_MEMBER_NAME(dadMap,"dadMap");
	HX_MARK_MEMBER_NAME(gfMap,"gfMap");
	HX_MARK_MEMBER_NAME(variables,"variables");
	HX_MARK_MEMBER_NAME(modchartTweens,"modchartTweens");
	HX_MARK_MEMBER_NAME(modchartSprites,"modchartSprites");
	HX_MARK_MEMBER_NAME(modchartTimers,"modchartTimers");
	HX_MARK_MEMBER_NAME(modchartSounds,"modchartSounds");
	HX_MARK_MEMBER_NAME(modchartTexts,"modchartTexts");
	HX_MARK_MEMBER_NAME(modchartSaves,"modchartSaves");
	HX_MARK_MEMBER_NAME(BF_X,"BF_X");
	HX_MARK_MEMBER_NAME(BF_Y,"BF_Y");
	HX_MARK_MEMBER_NAME(DAD_X,"DAD_X");
	HX_MARK_MEMBER_NAME(DAD_Y,"DAD_Y");
	HX_MARK_MEMBER_NAME(GF_X,"GF_X");
	HX_MARK_MEMBER_NAME(GF_Y,"GF_Y");
	HX_MARK_MEMBER_NAME(playbackRate,"playbackRate");
	HX_MARK_MEMBER_NAME(boyfriendGroup,"boyfriendGroup");
	HX_MARK_MEMBER_NAME(dadGroup,"dadGroup");
	HX_MARK_MEMBER_NAME(gfGroup,"gfGroup");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_MARK_MEMBER_NAME(separateVocals,"separateVocals");
	HX_MARK_MEMBER_NAME(dad,"dad");
	HX_MARK_MEMBER_NAME(gf,"gf");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(eventNotes,"eventNotes");
	HX_MARK_MEMBER_NAME(spawnTime,"spawnTime");
	HX_MARK_MEMBER_NAME(songSpeedTween,"songSpeedTween");
	HX_MARK_MEMBER_NAME(songSpeed,"songSpeed");
	HX_MARK_MEMBER_NAME(songSpeedType,"songSpeedType");
	HX_MARK_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camFollowPos,"camFollowPos");
	HX_MARK_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_MARK_MEMBER_NAME(playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_MARK_MEMBER_NAME(grpNoteHoldSplashes,"grpNoteHoldSplashes");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(camZoomingMult,"camZoomingMult");
	HX_MARK_MEMBER_NAME(camZoomingDecay,"camZoomingDecay");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(healthBarOverlay,"healthBarOverlay");
	HX_MARK_MEMBER_NAME(songPercent,"songPercent");
	HX_MARK_MEMBER_NAME(timeBarBG,"timeBarBG");
	HX_MARK_MEMBER_NAME(timeBar,"timeBar");
	HX_MARK_MEMBER_NAME(ratingsData,"ratingsData");
	HX_MARK_MEMBER_NAME(sicks,"sicks");
	HX_MARK_MEMBER_NAME(goods,"goods");
	HX_MARK_MEMBER_NAME(bads,"bads");
	HX_MARK_MEMBER_NAME(shits,"shits");
	HX_MARK_MEMBER_NAME(comboSpr,"comboSpr");
	HX_MARK_MEMBER_NAME(comboSprY,"comboSprY");
	HX_MARK_MEMBER_NAME(comboNumSpr,"comboNumSpr");
	HX_MARK_MEMBER_NAME(comboSprTween,"comboSprTween");
	HX_MARK_MEMBER_NAME(comboNumSprTween,"comboNumSprTween");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(updateTime,"updateTime");
	HX_MARK_MEMBER_NAME(healthGain,"healthGain");
	HX_MARK_MEMBER_NAME(healthLoss,"healthLoss");
	HX_MARK_MEMBER_NAME(instakillOnMiss,"instakillOnMiss");
	HX_MARK_MEMBER_NAME(cpuControlled,"cpuControlled");
	HX_MARK_MEMBER_NAME(practiceMode,"practiceMode");
	HX_MARK_MEMBER_NAME(haveUsePractice,"haveUsePractice");
	HX_MARK_MEMBER_NAME(haveUseBotplay,"haveUseBotplay");
	HX_MARK_MEMBER_NAME(botplaySine,"botplaySine");
	HX_MARK_MEMBER_NAME(botplayTxt,"botplayTxt");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(camOther,"camOther");
	HX_MARK_MEMBER_NAME(cameraSpeed,"cameraSpeed");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(dialogueJson,"dialogueJson");
	HX_MARK_MEMBER_NAME(dadbattleBlack,"dadbattleBlack");
	HX_MARK_MEMBER_NAME(dadbattleLight,"dadbattleLight");
	HX_MARK_MEMBER_NAME(dadbattleSmokes,"dadbattleSmokes");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songHits,"songHits");
	HX_MARK_MEMBER_NAME(songMisses,"songMisses");
	HX_MARK_MEMBER_NAME(songScoreLerp,"songScoreLerp");
	HX_MARK_MEMBER_NAME(timeTxt,"timeTxt");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(singAnimations,"singAnimations");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(skipCountdown,"skipCountdown");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(boyfriendCameraOffset,"boyfriendCameraOffset");
	HX_MARK_MEMBER_NAME(opponentCameraOffset,"opponentCameraOffset");
	HX_MARK_MEMBER_NAME(girlfriendCameraOffset,"girlfriendCameraOffset");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(keysPressed,"keysPressed");
	HX_MARK_MEMBER_NAME(boyfriendIdleTime,"boyfriendIdleTime");
	HX_MARK_MEMBER_NAME(boyfriendIdled,"boyfriendIdled");
	HX_MARK_MEMBER_NAME(mobileControls,"mobileControls");
	HX_MARK_MEMBER_NAME(luaArray,"luaArray");
	HX_MARK_MEMBER_NAME(luaDebugGroup,"luaDebugGroup");
	HX_MARK_MEMBER_NAME(introSoundsSuffix,"introSoundsSuffix");
	HX_MARK_MEMBER_NAME(debugKeysChart,"debugKeysChart");
	HX_MARK_MEMBER_NAME(debugKeysCharacter,"debugKeysCharacter");
	HX_MARK_MEMBER_NAME(keysArray,"keysArray");
	HX_MARK_MEMBER_NAME(controlArray,"controlArray");
	HX_MARK_MEMBER_NAME(precacheList,"precacheList");
	HX_MARK_MEMBER_NAME(VOCALS,"VOCALS");
	HX_MARK_MEMBER_NAME(discordBG,"discordBG");
	HX_MARK_MEMBER_NAME(discordTopBar,"discordTopBar");
	HX_MARK_MEMBER_NAME(discordMessage,"discordMessage");
	HX_MARK_MEMBER_NAME(discordChannels,"discordChannels");
	HX_MARK_MEMBER_NAME(discordMembers,"discordMembers");
	HX_MARK_MEMBER_NAME(discordPlayer,"discordPlayer");
	HX_MARK_MEMBER_NAME(discordOpponent,"discordOpponent");
	HX_MARK_MEMBER_NAME(redOverlay,"redOverlay");
	HX_MARK_MEMBER_NAME(glitchy,"glitchy");
	HX_MARK_MEMBER_NAME(ytBG,"ytBG");
	HX_MARK_MEMBER_NAME(ytBGVideo,"ytBGVideo");
	HX_MARK_MEMBER_NAME(ytBGVideoTitle,"ytBGVideoTitle");
	HX_MARK_MEMBER_NAME(ytTopBar,"ytTopBar");
	HX_MARK_MEMBER_NAME(ytBGTopBar,"ytBGTopBar");
	HX_MARK_MEMBER_NAME(ytComments,"ytComments");
	HX_MARK_MEMBER_NAME(oldTelevisionShader,"oldTelevisionShader");
	HX_MARK_MEMBER_NAME(glitchingShader,"glitchingShader");
	HX_MARK_MEMBER_NAME(backGlow,"backGlow");
	HX_MARK_MEMBER_NAME(backGlowOver,"backGlowOver");
	HX_MARK_MEMBER_NAME(downGlow,"downGlow");
	HX_MARK_MEMBER_NAME(voidParticles,"voidParticles");
	HX_MARK_MEMBER_NAME(ratePrefix,"ratePrefix");
	HX_MARK_MEMBER_NAME(scorePrefix,"scorePrefix");
	HX_MARK_MEMBER_NAME(missPrefix,"missPrefix");
	HX_MARK_MEMBER_NAME(comboPrefix,"comboPrefix");
	HX_MARK_MEMBER_NAME(lives,"lives");
	HX_MARK_MEMBER_NAME(curLives,"curLives");
	HX_MARK_MEMBER_NAME(iconSpeed,"iconSpeed");
	HX_MARK_MEMBER_NAME(lerpHealth,"lerpHealth");
	HX_MARK_MEMBER_NAME(hudStyle,"hudStyle");
	HX_MARK_MEMBER_NAME(discordHealthText,"discordHealthText");
	HX_MARK_MEMBER_NAME(newHealthSystem,"newHealthSystem");
	HX_MARK_MEMBER_NAME(HUDtoRight,"HUDtoRight");
	HX_MARK_MEMBER_NAME(lightHUD,"lightHUD");
	HX_MARK_MEMBER_NAME(lightHUDTween,"lightHUDTween");
	HX_MARK_MEMBER_NAME(noteColor,"noteColor");
	HX_MARK_MEMBER_NAME(enableCoolLightNote,"enableCoolLightNote");
	HX_MARK_MEMBER_NAME(songTitle,"songTitle");
	HX_MARK_MEMBER_NAME(songLogo,"songLogo");
	HX_MARK_MEMBER_NAME(songDesc,"songDesc");
	HX_MARK_MEMBER_NAME(songDiff,"songDiff");
	HX_MARK_MEMBER_NAME(countdownText,"countdownText");
	HX_MARK_MEMBER_NAME(countdownTween,"countdownTween");
	HX_MARK_MEMBER_NAME(countdownTweenColor,"countdownTweenColor");
	HX_MARK_MEMBER_NAME(introTimer,"introTimer");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(rateTxt,"rateTxt");
	HX_MARK_MEMBER_NAME(comboTxt,"comboTxt");
	HX_MARK_MEMBER_NAME(missTxt,"missTxt");
	HX_MARK_MEMBER_NAME(scoreTxtTween,"scoreTxtTween");
	HX_MARK_MEMBER_NAME(rateTxtTween,"rateTxtTween");
	HX_MARK_MEMBER_NAME(comboTxtTween,"comboTxtTween");
	HX_MARK_MEMBER_NAME(missTxtTween,"missTxtTween");
	HX_MARK_MEMBER_NAME(barOffset,"barOffset");
	HX_MARK_MEMBER_NAME(lerpShakeBar,"lerpShakeBar");
	HX_MARK_MEMBER_NAME(runtimeShaders,"runtimeShaders");
	HX_MARK_MEMBER_NAME(videoCutscene,"videoCutscene");
	HX_MARK_MEMBER_NAME(dialogueCount,"dialogueCount");
	HX_MARK_MEMBER_NAME(psychDialogue,"psychDialogue");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(finishTimer,"finishTimer");
	HX_MARK_MEMBER_NAME(countdownReady,"countdownReady");
	HX_MARK_MEMBER_NAME(countdownSet,"countdownSet");
	HX_MARK_MEMBER_NAME(countdownGo,"countdownGo");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(noteTypeMap,"noteTypeMap");
	HX_MARK_MEMBER_NAME(eventPushedMap,"eventPushedMap");
	HX_MARK_MEMBER_NAME(skipArrowStartTween,"skipArrowStartTween");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(canReset,"canReset");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(limoSpeed,"limoSpeed");
	HX_MARK_MEMBER_NAME(isDead,"isDead");
	HX_MARK_MEMBER_NAME(cameraTwn,"cameraTwn");
	HX_MARK_MEMBER_NAME(doneFinishSong,"doneFinishSong");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(achievementObj,"achievementObj");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(showCombo,"showCombo");
	HX_MARK_MEMBER_NAME(showComboNum,"showComboNum");
	HX_MARK_MEMBER_NAME(showRating,"showRating");
	HX_MARK_MEMBER_NAME(ratingPosition,"ratingPosition");
	HX_MARK_MEMBER_NAME(comboPosition,"comboPosition");
	HX_MARK_MEMBER_NAME(strumsBlocked,"strumsBlocked");
	HX_MARK_MEMBER_NAME(onHoldSplash,"onHoldSplash");
	HX_MARK_MEMBER_NAME(lastStepHit,"lastStepHit");
	HX_MARK_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	HX_MARK_MEMBER_NAME(ratingName,"ratingName");
	HX_MARK_MEMBER_NAME(ratingPercent,"ratingPercent");
	HX_MARK_MEMBER_NAME(ratingFC,"ratingFC");
	HX_MARK_MEMBER_NAME(beatHardSnares,"beatHardSnares");
	HX_MARK_MEMBER_NAME(zoomMultiply,"zoomMultiply");
	HX_MARK_MEMBER_NAME(opponentHitDistract,"opponentHitDistract");
	HX_MARK_MEMBER_NAME(shakeNote,"shakeNote");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(modManager,"modManager");
	HX_VISIT_MEMBER_NAME(notesToSpawn,"notesToSpawn");
	HX_VISIT_MEMBER_NAME(useModchart,"useModchart");
	HX_VISIT_MEMBER_NAME(isCameraOnForcedPos,"isCameraOnForcedPos");
	HX_VISIT_MEMBER_NAME(boyfriendMap,"boyfriendMap");
	HX_VISIT_MEMBER_NAME(dadMap,"dadMap");
	HX_VISIT_MEMBER_NAME(gfMap,"gfMap");
	HX_VISIT_MEMBER_NAME(variables,"variables");
	HX_VISIT_MEMBER_NAME(modchartTweens,"modchartTweens");
	HX_VISIT_MEMBER_NAME(modchartSprites,"modchartSprites");
	HX_VISIT_MEMBER_NAME(modchartTimers,"modchartTimers");
	HX_VISIT_MEMBER_NAME(modchartSounds,"modchartSounds");
	HX_VISIT_MEMBER_NAME(modchartTexts,"modchartTexts");
	HX_VISIT_MEMBER_NAME(modchartSaves,"modchartSaves");
	HX_VISIT_MEMBER_NAME(BF_X,"BF_X");
	HX_VISIT_MEMBER_NAME(BF_Y,"BF_Y");
	HX_VISIT_MEMBER_NAME(DAD_X,"DAD_X");
	HX_VISIT_MEMBER_NAME(DAD_Y,"DAD_Y");
	HX_VISIT_MEMBER_NAME(GF_X,"GF_X");
	HX_VISIT_MEMBER_NAME(GF_Y,"GF_Y");
	HX_VISIT_MEMBER_NAME(playbackRate,"playbackRate");
	HX_VISIT_MEMBER_NAME(boyfriendGroup,"boyfriendGroup");
	HX_VISIT_MEMBER_NAME(dadGroup,"dadGroup");
	HX_VISIT_MEMBER_NAME(gfGroup,"gfGroup");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(opponentVocals,"opponentVocals");
	HX_VISIT_MEMBER_NAME(separateVocals,"separateVocals");
	HX_VISIT_MEMBER_NAME(dad,"dad");
	HX_VISIT_MEMBER_NAME(gf,"gf");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(eventNotes,"eventNotes");
	HX_VISIT_MEMBER_NAME(spawnTime,"spawnTime");
	HX_VISIT_MEMBER_NAME(songSpeedTween,"songSpeedTween");
	HX_VISIT_MEMBER_NAME(songSpeed,"songSpeed");
	HX_VISIT_MEMBER_NAME(songSpeedType,"songSpeedType");
	HX_VISIT_MEMBER_NAME(noteKillOffset,"noteKillOffset");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camFollowPos,"camFollowPos");
	HX_VISIT_MEMBER_NAME(strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(opponentStrums,"opponentStrums");
	HX_VISIT_MEMBER_NAME(playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(grpNoteSplashes,"grpNoteSplashes");
	HX_VISIT_MEMBER_NAME(grpNoteHoldSplashes,"grpNoteHoldSplashes");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(camZoomingMult,"camZoomingMult");
	HX_VISIT_MEMBER_NAME(camZoomingDecay,"camZoomingDecay");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(healthBarOverlay,"healthBarOverlay");
	HX_VISIT_MEMBER_NAME(songPercent,"songPercent");
	HX_VISIT_MEMBER_NAME(timeBarBG,"timeBarBG");
	HX_VISIT_MEMBER_NAME(timeBar,"timeBar");
	HX_VISIT_MEMBER_NAME(ratingsData,"ratingsData");
	HX_VISIT_MEMBER_NAME(sicks,"sicks");
	HX_VISIT_MEMBER_NAME(goods,"goods");
	HX_VISIT_MEMBER_NAME(bads,"bads");
	HX_VISIT_MEMBER_NAME(shits,"shits");
	HX_VISIT_MEMBER_NAME(comboSpr,"comboSpr");
	HX_VISIT_MEMBER_NAME(comboSprY,"comboSprY");
	HX_VISIT_MEMBER_NAME(comboNumSpr,"comboNumSpr");
	HX_VISIT_MEMBER_NAME(comboSprTween,"comboSprTween");
	HX_VISIT_MEMBER_NAME(comboNumSprTween,"comboNumSprTween");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(updateTime,"updateTime");
	HX_VISIT_MEMBER_NAME(healthGain,"healthGain");
	HX_VISIT_MEMBER_NAME(healthLoss,"healthLoss");
	HX_VISIT_MEMBER_NAME(instakillOnMiss,"instakillOnMiss");
	HX_VISIT_MEMBER_NAME(cpuControlled,"cpuControlled");
	HX_VISIT_MEMBER_NAME(practiceMode,"practiceMode");
	HX_VISIT_MEMBER_NAME(haveUsePractice,"haveUsePractice");
	HX_VISIT_MEMBER_NAME(haveUseBotplay,"haveUseBotplay");
	HX_VISIT_MEMBER_NAME(botplaySine,"botplaySine");
	HX_VISIT_MEMBER_NAME(botplayTxt,"botplayTxt");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(camOther,"camOther");
	HX_VISIT_MEMBER_NAME(cameraSpeed,"cameraSpeed");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(dialogueJson,"dialogueJson");
	HX_VISIT_MEMBER_NAME(dadbattleBlack,"dadbattleBlack");
	HX_VISIT_MEMBER_NAME(dadbattleLight,"dadbattleLight");
	HX_VISIT_MEMBER_NAME(dadbattleSmokes,"dadbattleSmokes");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songHits,"songHits");
	HX_VISIT_MEMBER_NAME(songMisses,"songMisses");
	HX_VISIT_MEMBER_NAME(songScoreLerp,"songScoreLerp");
	HX_VISIT_MEMBER_NAME(timeTxt,"timeTxt");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(singAnimations,"singAnimations");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(skipCountdown,"skipCountdown");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(boyfriendCameraOffset,"boyfriendCameraOffset");
	HX_VISIT_MEMBER_NAME(opponentCameraOffset,"opponentCameraOffset");
	HX_VISIT_MEMBER_NAME(girlfriendCameraOffset,"girlfriendCameraOffset");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(keysPressed,"keysPressed");
	HX_VISIT_MEMBER_NAME(boyfriendIdleTime,"boyfriendIdleTime");
	HX_VISIT_MEMBER_NAME(boyfriendIdled,"boyfriendIdled");
	HX_VISIT_MEMBER_NAME(mobileControls,"mobileControls");
	HX_VISIT_MEMBER_NAME(luaArray,"luaArray");
	HX_VISIT_MEMBER_NAME(luaDebugGroup,"luaDebugGroup");
	HX_VISIT_MEMBER_NAME(introSoundsSuffix,"introSoundsSuffix");
	HX_VISIT_MEMBER_NAME(debugKeysChart,"debugKeysChart");
	HX_VISIT_MEMBER_NAME(debugKeysCharacter,"debugKeysCharacter");
	HX_VISIT_MEMBER_NAME(keysArray,"keysArray");
	HX_VISIT_MEMBER_NAME(controlArray,"controlArray");
	HX_VISIT_MEMBER_NAME(precacheList,"precacheList");
	HX_VISIT_MEMBER_NAME(VOCALS,"VOCALS");
	HX_VISIT_MEMBER_NAME(discordBG,"discordBG");
	HX_VISIT_MEMBER_NAME(discordTopBar,"discordTopBar");
	HX_VISIT_MEMBER_NAME(discordMessage,"discordMessage");
	HX_VISIT_MEMBER_NAME(discordChannels,"discordChannels");
	HX_VISIT_MEMBER_NAME(discordMembers,"discordMembers");
	HX_VISIT_MEMBER_NAME(discordPlayer,"discordPlayer");
	HX_VISIT_MEMBER_NAME(discordOpponent,"discordOpponent");
	HX_VISIT_MEMBER_NAME(redOverlay,"redOverlay");
	HX_VISIT_MEMBER_NAME(glitchy,"glitchy");
	HX_VISIT_MEMBER_NAME(ytBG,"ytBG");
	HX_VISIT_MEMBER_NAME(ytBGVideo,"ytBGVideo");
	HX_VISIT_MEMBER_NAME(ytBGVideoTitle,"ytBGVideoTitle");
	HX_VISIT_MEMBER_NAME(ytTopBar,"ytTopBar");
	HX_VISIT_MEMBER_NAME(ytBGTopBar,"ytBGTopBar");
	HX_VISIT_MEMBER_NAME(ytComments,"ytComments");
	HX_VISIT_MEMBER_NAME(oldTelevisionShader,"oldTelevisionShader");
	HX_VISIT_MEMBER_NAME(glitchingShader,"glitchingShader");
	HX_VISIT_MEMBER_NAME(backGlow,"backGlow");
	HX_VISIT_MEMBER_NAME(backGlowOver,"backGlowOver");
	HX_VISIT_MEMBER_NAME(downGlow,"downGlow");
	HX_VISIT_MEMBER_NAME(voidParticles,"voidParticles");
	HX_VISIT_MEMBER_NAME(ratePrefix,"ratePrefix");
	HX_VISIT_MEMBER_NAME(scorePrefix,"scorePrefix");
	HX_VISIT_MEMBER_NAME(missPrefix,"missPrefix");
	HX_VISIT_MEMBER_NAME(comboPrefix,"comboPrefix");
	HX_VISIT_MEMBER_NAME(lives,"lives");
	HX_VISIT_MEMBER_NAME(curLives,"curLives");
	HX_VISIT_MEMBER_NAME(iconSpeed,"iconSpeed");
	HX_VISIT_MEMBER_NAME(lerpHealth,"lerpHealth");
	HX_VISIT_MEMBER_NAME(hudStyle,"hudStyle");
	HX_VISIT_MEMBER_NAME(discordHealthText,"discordHealthText");
	HX_VISIT_MEMBER_NAME(newHealthSystem,"newHealthSystem");
	HX_VISIT_MEMBER_NAME(HUDtoRight,"HUDtoRight");
	HX_VISIT_MEMBER_NAME(lightHUD,"lightHUD");
	HX_VISIT_MEMBER_NAME(lightHUDTween,"lightHUDTween");
	HX_VISIT_MEMBER_NAME(noteColor,"noteColor");
	HX_VISIT_MEMBER_NAME(enableCoolLightNote,"enableCoolLightNote");
	HX_VISIT_MEMBER_NAME(songTitle,"songTitle");
	HX_VISIT_MEMBER_NAME(songLogo,"songLogo");
	HX_VISIT_MEMBER_NAME(songDesc,"songDesc");
	HX_VISIT_MEMBER_NAME(songDiff,"songDiff");
	HX_VISIT_MEMBER_NAME(countdownText,"countdownText");
	HX_VISIT_MEMBER_NAME(countdownTween,"countdownTween");
	HX_VISIT_MEMBER_NAME(countdownTweenColor,"countdownTweenColor");
	HX_VISIT_MEMBER_NAME(introTimer,"introTimer");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(rateTxt,"rateTxt");
	HX_VISIT_MEMBER_NAME(comboTxt,"comboTxt");
	HX_VISIT_MEMBER_NAME(missTxt,"missTxt");
	HX_VISIT_MEMBER_NAME(scoreTxtTween,"scoreTxtTween");
	HX_VISIT_MEMBER_NAME(rateTxtTween,"rateTxtTween");
	HX_VISIT_MEMBER_NAME(comboTxtTween,"comboTxtTween");
	HX_VISIT_MEMBER_NAME(missTxtTween,"missTxtTween");
	HX_VISIT_MEMBER_NAME(barOffset,"barOffset");
	HX_VISIT_MEMBER_NAME(lerpShakeBar,"lerpShakeBar");
	HX_VISIT_MEMBER_NAME(runtimeShaders,"runtimeShaders");
	HX_VISIT_MEMBER_NAME(videoCutscene,"videoCutscene");
	HX_VISIT_MEMBER_NAME(dialogueCount,"dialogueCount");
	HX_VISIT_MEMBER_NAME(psychDialogue,"psychDialogue");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(finishTimer,"finishTimer");
	HX_VISIT_MEMBER_NAME(countdownReady,"countdownReady");
	HX_VISIT_MEMBER_NAME(countdownSet,"countdownSet");
	HX_VISIT_MEMBER_NAME(countdownGo,"countdownGo");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(noteTypeMap,"noteTypeMap");
	HX_VISIT_MEMBER_NAME(eventPushedMap,"eventPushedMap");
	HX_VISIT_MEMBER_NAME(skipArrowStartTween,"skipArrowStartTween");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(canReset,"canReset");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(limoSpeed,"limoSpeed");
	HX_VISIT_MEMBER_NAME(isDead,"isDead");
	HX_VISIT_MEMBER_NAME(cameraTwn,"cameraTwn");
	HX_VISIT_MEMBER_NAME(doneFinishSong,"doneFinishSong");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(achievementObj,"achievementObj");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(showCombo,"showCombo");
	HX_VISIT_MEMBER_NAME(showComboNum,"showComboNum");
	HX_VISIT_MEMBER_NAME(showRating,"showRating");
	HX_VISIT_MEMBER_NAME(ratingPosition,"ratingPosition");
	HX_VISIT_MEMBER_NAME(comboPosition,"comboPosition");
	HX_VISIT_MEMBER_NAME(strumsBlocked,"strumsBlocked");
	HX_VISIT_MEMBER_NAME(onHoldSplash,"onHoldSplash");
	HX_VISIT_MEMBER_NAME(lastStepHit,"lastStepHit");
	HX_VISIT_MEMBER_NAME(lastBeatHit,"lastBeatHit");
	HX_VISIT_MEMBER_NAME(ratingName,"ratingName");
	HX_VISIT_MEMBER_NAME(ratingPercent,"ratingPercent");
	HX_VISIT_MEMBER_NAME(ratingFC,"ratingFC");
	HX_VISIT_MEMBER_NAME(beatHardSnares,"beatHardSnares");
	HX_VISIT_MEMBER_NAME(zoomMultiply,"zoomMultiply");
	HX_VISIT_MEMBER_NAME(opponentHitDistract,"opponentHitDistract");
	HX_VISIT_MEMBER_NAME(shakeNote,"shakeNote");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { return ::hx::Val( gf ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { return ::hx::Val( dad ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BF_X") ) { return ::hx::Val( BF_X ); }
		if (HX_FIELD_EQ(inName,"BF_Y") ) { return ::hx::Val( BF_Y ); }
		if (HX_FIELD_EQ(inName,"GF_X") ) { return ::hx::Val( GF_X ); }
		if (HX_FIELD_EQ(inName,"GF_Y") ) { return ::hx::Val( GF_Y ); }
		if (HX_FIELD_EQ(inName,"bads") ) { return ::hx::Val( bads ); }
		if (HX_FIELD_EQ(inName,"ytBG") ) { return ::hx::Val( ytBG ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"gfMap") ) { return ::hx::Val( gfMap ); }
		if (HX_FIELD_EQ(inName,"DAD_X") ) { return ::hx::Val( DAD_X ); }
		if (HX_FIELD_EQ(inName,"DAD_Y") ) { return ::hx::Val( DAD_Y ); }
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		if (HX_FIELD_EQ(inName,"sicks") ) { return ::hx::Val( sicks ); }
		if (HX_FIELD_EQ(inName,"goods") ) { return ::hx::Val( goods ); }
		if (HX_FIELD_EQ(inName,"shits") ) { return ::hx::Val( shits ); }
		if (HX_FIELD_EQ(inName,"lives") ) { return ::hx::Val( lives ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dadMap") ) { return ::hx::Val( dadMap ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"VOCALS") ) { return ::hx::Val( VOCALS ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"isDead") ) { return ::hx::Val( isDead ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfGroup") ) { return ::hx::Val( gfGroup ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"timeBar") ) { return ::hx::Val( timeBar ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { return ::hx::Val( timeTxt ); }
		if (HX_FIELD_EQ(inName,"glitchy") ) { return ::hx::Val( glitchy ); }
		if (HX_FIELD_EQ(inName,"rateTxt") ) { return ::hx::Val( rateTxt ); }
		if (HX_FIELD_EQ(inName,"missTxt") ) { return ::hx::Val( missTxt ); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return ::hx::Val( onFocus_dyn() ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dadGroup") ) { return ::hx::Val( dadGroup ); }
		if (HX_FIELD_EQ(inName,"comboSpr") ) { return ::hx::Val( comboSpr ); }
		if (HX_FIELD_EQ(inName,"camOther") ) { return ::hx::Val( camOther ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"songHits") ) { return ::hx::Val( songHits ); }
		if (HX_FIELD_EQ(inName,"luaArray") ) { return ::hx::Val( luaArray ); }
		if (HX_FIELD_EQ(inName,"ytTopBar") ) { return ::hx::Val( ytTopBar ); }
		if (HX_FIELD_EQ(inName,"backGlow") ) { return ::hx::Val( backGlow ); }
		if (HX_FIELD_EQ(inName,"downGlow") ) { return ::hx::Val( downGlow ); }
		if (HX_FIELD_EQ(inName,"curLives") ) { return ::hx::Val( curLives ); }
		if (HX_FIELD_EQ(inName,"hudStyle") ) { return ::hx::Val( hudStyle ); }
		if (HX_FIELD_EQ(inName,"lightHUD") ) { return ::hx::Val( lightHUD ); }
		if (HX_FIELD_EQ(inName,"songLogo") ) { return ::hx::Val( songLogo ); }
		if (HX_FIELD_EQ(inName,"songDesc") ) { return ::hx::Val( songDesc ); }
		if (HX_FIELD_EQ(inName,"songDiff") ) { return ::hx::Val( songDiff ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"comboTxt") ) { return ::hx::Val( comboTxt ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canReset") ) { return ::hx::Val( canReset ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingFC") ) { return ::hx::Val( ratingFC ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { return ::hx::Val( variables ); }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"spawnTime") ) { return ::hx::Val( spawnTime ); }
		if (HX_FIELD_EQ(inName,"songSpeed") ) { return ::hx::Val( songSpeed ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"timeBarBG") ) { return ::hx::Val( timeBarBG ); }
		if (HX_FIELD_EQ(inName,"comboSprY") ) { return ::hx::Val( comboSprY ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"keysArray") ) { return ::hx::Val( keysArray ); }
		if (HX_FIELD_EQ(inName,"discordBG") ) { return ::hx::Val( discordBG ); }
		if (HX_FIELD_EQ(inName,"ytBGVideo") ) { return ::hx::Val( ytBGVideo ); }
		if (HX_FIELD_EQ(inName,"iconSpeed") ) { return ::hx::Val( iconSpeed ); }
		if (HX_FIELD_EQ(inName,"noteColor") ) { return ::hx::Val( noteColor ); }
		if (HX_FIELD_EQ(inName,"songTitle") ) { return ::hx::Val( songTitle ); }
		if (HX_FIELD_EQ(inName,"barOffset") ) { return ::hx::Val( barOffset ); }
		if (HX_FIELD_EQ(inName,"createHUD") ) { return ::hx::Val( createHUD_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"limoSpeed") ) { return ::hx::Val( limoSpeed ); }
		if (HX_FIELD_EQ(inName,"cameraTwn") ) { return ::hx::Val( cameraTwn ); }
		if (HX_FIELD_EQ(inName,"KillNotes") ) { return ::hx::Val( KillNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"showCombo") ) { return ::hx::Val( showCombo ); }
		if (HX_FIELD_EQ(inName,"parseKeys") ) { return ::hx::Val( parseKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"setOnLuas") ) { return ::hx::Val( setOnLuas_dyn() ); }
		if (HX_FIELD_EQ(inName,"shakeNote") ) { return ::hx::Val( shakeNote ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"modManager") ) { return ::hx::Val( modManager ); }
		if (HX_FIELD_EQ(inName,"eventNotes") ) { return ::hx::Val( eventNotes ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"updateTime") ) { return ::hx::Val( updateTime ); }
		if (HX_FIELD_EQ(inName,"healthGain") ) { return ::hx::Val( healthGain ); }
		if (HX_FIELD_EQ(inName,"healthLoss") ) { return ::hx::Val( healthLoss ); }
		if (HX_FIELD_EQ(inName,"botplayTxt") ) { return ::hx::Val( botplayTxt ); }
		if (HX_FIELD_EQ(inName,"songMisses") ) { return ::hx::Val( songMisses ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"redOverlay") ) { return ::hx::Val( redOverlay ); }
		if (HX_FIELD_EQ(inName,"ytBGTopBar") ) { return ::hx::Val( ytBGTopBar ); }
		if (HX_FIELD_EQ(inName,"ytComments") ) { return ::hx::Val( ytComments ); }
		if (HX_FIELD_EQ(inName,"ratePrefix") ) { return ::hx::Val( ratePrefix ); }
		if (HX_FIELD_EQ(inName,"missPrefix") ) { return ::hx::Val( missPrefix ); }
		if (HX_FIELD_EQ(inName,"lerpHealth") ) { return ::hx::Val( lerpHealth ); }
		if (HX_FIELD_EQ(inName,"HUDtoRight") ) { return ::hx::Val( HUDtoRight ); }
		if (HX_FIELD_EQ(inName,"introTimer") ) { return ::hx::Val( introTimer ); }
		if (HX_FIELD_EQ(inName,"startVideo") ) { return ::hx::Val( startVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortByTime") ) { return ::hx::Val( sortByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"getControl") ) { return ::hx::Val( getControl_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveCamera") ) { return ::hx::Val( moveCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishSong") ) { return ::hx::Val( finishSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"showRating") ) { return ::hx::Val( showRating ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyPress") ) { return ::hx::Val( onKeyPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"sectionHit") ) { return ::hx::Val( sectionHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"callOnLuas") ) { return ::hx::Val( callOnLuas_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingName") ) { return ::hx::Val( ratingName ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"useModchart") ) { return ::hx::Val( useModchart ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"songPercent") ) { return ::hx::Val( songPercent ); }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { return ::hx::Val( ratingsData ); }
		if (HX_FIELD_EQ(inName,"comboNumSpr") ) { return ::hx::Val( comboNumSpr ); }
		if (HX_FIELD_EQ(inName,"botplaySine") ) { return ::hx::Val( botplaySine ); }
		if (HX_FIELD_EQ(inName,"cameraSpeed") ) { return ::hx::Val( cameraSpeed ); }
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"keysPressed") ) { return ::hx::Val( keysPressed ); }
		if (HX_FIELD_EQ(inName,"scorePrefix") ) { return ::hx::Val( scorePrefix ); }
		if (HX_FIELD_EQ(inName,"comboPrefix") ) { return ::hx::Val( comboPrefix ); }
		if (HX_FIELD_EQ(inName,"vocalsSetup") ) { return ::hx::Val( vocalsSetup_dyn() ); }
		if (HX_FIELD_EQ(inName,"startAndEnd") ) { return ::hx::Val( startAndEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"finishTimer") ) { return ::hx::Val( finishTimer ); }
		if (HX_FIELD_EQ(inName,"countdownGo") ) { return ::hx::Val( countdownGo ); }
		if (HX_FIELD_EQ(inName,"addBehindGF") ) { return ::hx::Val( addBehindGF_dyn() ); }
		if (HX_FIELD_EQ(inName,"addBehindBF") ) { return ::hx::Val( addBehindBF_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateScore") ) { return ::hx::Val( updateScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSongTime") ) { return ::hx::Val( setSongTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteTypeMap") ) { return ::hx::Val( noteTypeMap ); }
		if (HX_FIELD_EQ(inName,"eventPushed") ) { return ::hx::Val( eventPushed_dyn() ); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return ::hx::Val( onFocusLost_dyn() ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastStepHit") ) { return ::hx::Val( lastStepHit ); }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { return ::hx::Val( lastBeatHit ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"notesToSpawn") ) { return ::hx::Val( notesToSpawn ); }
		if (HX_FIELD_EQ(inName,"boyfriendMap") ) { return ::hx::Val( boyfriendMap ); }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { return ::hx::Val( playbackRate ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"camFollowPos") ) { return ::hx::Val( camFollowPos ); }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { return ::hx::Val( playerStrums ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"practiceMode") ) { return ::hx::Val( practiceMode ); }
		if (HX_FIELD_EQ(inName,"dialogueJson") ) { return ::hx::Val( dialogueJson ); }
		if (HX_FIELD_EQ(inName,"controlArray") ) { return ::hx::Val( controlArray ); }
		if (HX_FIELD_EQ(inName,"precacheList") ) { return ::hx::Val( precacheList ); }
		if (HX_FIELD_EQ(inName,"backGlowOver") ) { return ::hx::Val( backGlowOver ); }
		if (HX_FIELD_EQ(inName,"rateTxtTween") ) { return ::hx::Val( rateTxtTween ); }
		if (HX_FIELD_EQ(inName,"missTxtTween") ) { return ::hx::Val( missTxtTween ); }
		if (HX_FIELD_EQ(inName,"lerpShakeBar") ) { return ::hx::Val( lerpShakeBar ); }
		if (HX_FIELD_EQ(inName,"getLuaObject") ) { return ::hx::Val( getLuaObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"countdownSet") ) { return ::hx::Val( countdownSet ); }
		if (HX_FIELD_EQ(inName,"addBehindDad") ) { return ::hx::Val( addBehindDad_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipDialogue") ) { return ::hx::Val( skipDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"doDeathCheck") ) { return ::hx::Val( doDeathCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { return ::hx::Val( showComboNum ); }
		if (HX_FIELD_EQ(inName,"sortHitNotes") ) { return ::hx::Val( sortHitNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"onKeyRelease") ) { return ::hx::Val( onKeyRelease_dyn() ); }
		if (HX_FIELD_EQ(inName,"onHoldSplash") ) { return ::hx::Val( onHoldSplash ); }
		if (HX_FIELD_EQ(inName,"zoomMultiply") ) { return ::hx::Val( zoomMultiply ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"modchartTexts") ) { return ::hx::Val( modchartTexts ); }
		if (HX_FIELD_EQ(inName,"modchartSaves") ) { return ::hx::Val( modchartSaves ); }
		if (HX_FIELD_EQ(inName,"songSpeedType") ) { return ::hx::Val( songSpeedType ); }
		if (HX_FIELD_EQ(inName,"comboSprTween") ) { return ::hx::Val( comboSprTween ); }
		if (HX_FIELD_EQ(inName,"cpuControlled") ) { return ::hx::Val( cpuControlled ); }
		if (HX_FIELD_EQ(inName,"songScoreLerp") ) { return ::hx::Val( songScoreLerp ); }
		if (HX_FIELD_EQ(inName,"skipCountdown") ) { return ::hx::Val( skipCountdown ); }
		if (HX_FIELD_EQ(inName,"luaDebugGroup") ) { return ::hx::Val( luaDebugGroup ); }
		if (HX_FIELD_EQ(inName,"discordTopBar") ) { return ::hx::Val( discordTopBar ); }
		if (HX_FIELD_EQ(inName,"discordPlayer") ) { return ::hx::Val( discordPlayer ); }
		if (HX_FIELD_EQ(inName,"voidParticles") ) { return ::hx::Val( voidParticles ); }
		if (HX_FIELD_EQ(inName,"lightHUDTween") ) { return ::hx::Val( lightHUDTween ); }
		if (HX_FIELD_EQ(inName,"countdownText") ) { return ::hx::Val( countdownText ); }
		if (HX_FIELD_EQ(inName,"scoreTxtTween") ) { return ::hx::Val( scoreTxtTween ); }
		if (HX_FIELD_EQ(inName,"comboTxtTween") ) { return ::hx::Val( comboTxtTween ); }
		if (HX_FIELD_EQ(inName,"initLuaShader") ) { return ::hx::Val( initLuaShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_songSpeed") ) { return ::hx::Val( set_songSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"videoCutscene") ) { return ::hx::Val( videoCutscene ); }
		if (HX_FIELD_EQ(inName,"dialogueCount") ) { return ::hx::Val( dialogueCount ); }
		if (HX_FIELD_EQ(inName,"psychDialogue") ) { return ::hx::Val( psychDialogue ); }
		if (HX_FIELD_EQ(inName,"startDialogue") ) { return ::hx::Val( startDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"openPauseMenu") ) { return ::hx::Val( openPauseMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"comboPosition") ) { return ::hx::Val( comboPosition ); }
		if (HX_FIELD_EQ(inName,"strumsBlocked") ) { return ::hx::Val( strumsBlocked ); }
		if (HX_FIELD_EQ(inName,"noteMissPress") ) { return ::hx::Val( noteMissPress_dyn() ); }
		if (HX_FIELD_EQ(inName,"StrumPlayAnim") ) { return ::hx::Val( StrumPlayAnim_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingPercent") ) { return ::hx::Val( ratingPercent ); }
		if (HX_FIELD_EQ(inName,"songStepEvent") ) { return ::hx::Val( songStepEvent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"modchartTweens") ) { return ::hx::Val( modchartTweens ); }
		if (HX_FIELD_EQ(inName,"modchartTimers") ) { return ::hx::Val( modchartTimers ); }
		if (HX_FIELD_EQ(inName,"modchartSounds") ) { return ::hx::Val( modchartSounds ); }
		if (HX_FIELD_EQ(inName,"boyfriendGroup") ) { return ::hx::Val( boyfriendGroup ); }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { return ::hx::Val( opponentVocals ); }
		if (HX_FIELD_EQ(inName,"separateVocals") ) { return ::hx::Val( separateVocals ); }
		if (HX_FIELD_EQ(inName,"songSpeedTween") ) { return ::hx::Val( songSpeedTween ); }
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { return ::hx::Val( noteKillOffset ); }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { return ::hx::Val( strumLineNotes ); }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { return ::hx::Val( opponentStrums ); }
		if (HX_FIELD_EQ(inName,"camZoomingMult") ) { return ::hx::Val( camZoomingMult ); }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"haveUseBotplay") ) { return ::hx::Val( haveUseBotplay ); }
		if (HX_FIELD_EQ(inName,"dadbattleBlack") ) { return ::hx::Val( dadbattleBlack ); }
		if (HX_FIELD_EQ(inName,"dadbattleLight") ) { return ::hx::Val( dadbattleLight ); }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		if (HX_FIELD_EQ(inName,"singAnimations") ) { return ::hx::Val( singAnimations ); }
		if (HX_FIELD_EQ(inName,"boyfriendIdled") ) { return ::hx::Val( boyfriendIdled ); }
		if (HX_FIELD_EQ(inName,"mobileControls") ) { return ::hx::Val( mobileControls ); }
		if (HX_FIELD_EQ(inName,"debugKeysChart") ) { return ::hx::Val( debugKeysChart ); }
		if (HX_FIELD_EQ(inName,"discordMessage") ) { return ::hx::Val( discordMessage ); }
		if (HX_FIELD_EQ(inName,"discordMembers") ) { return ::hx::Val( discordMembers ); }
		if (HX_FIELD_EQ(inName,"ytBGVideoTitle") ) { return ::hx::Val( ytBGVideoTitle ); }
		if (HX_FIELD_EQ(inName,"countdownTween") ) { return ::hx::Val( countdownTween ); }
		if (HX_FIELD_EQ(inName,"runtimeShaders") ) { return ::hx::Val( runtimeShaders ); }
		if (HX_FIELD_EQ(inName,"addTextToDebug") ) { return ::hx::Val( addTextToDebug_dyn() ); }
		if (HX_FIELD_EQ(inName,"countdownReady") ) { return ::hx::Val( countdownReady ); }
		if (HX_FIELD_EQ(inName,"cacheCountdown") ) { return ::hx::Val( cacheCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventPushedMap") ) { return ::hx::Val( eventPushedMap ); }
		if (HX_FIELD_EQ(inName,"checkEventNote") ) { return ::hx::Val( checkEventNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"doneFinishSong") ) { return ::hx::Val( doneFinishSong ); }
		if (HX_FIELD_EQ(inName,"achievementObj") ) { return ::hx::Val( achievementObj ); }
		if (HX_FIELD_EQ(inName,"achievementEnd") ) { return ::hx::Val( achievementEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"ratingPosition") ) { return ::hx::Val( ratingPosition ); }
		if (HX_FIELD_EQ(inName,"beatHardSnares") ) { return ::hx::Val( beatHardSnares ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"modchartSprites") ) { return ::hx::Val( modchartSprites ); }
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { return ::hx::Val( grpNoteSplashes ); }
		if (HX_FIELD_EQ(inName,"camZoomingDecay") ) { return ::hx::Val( camZoomingDecay ); }
		if (HX_FIELD_EQ(inName,"instakillOnMiss") ) { return ::hx::Val( instakillOnMiss ); }
		if (HX_FIELD_EQ(inName,"haveUsePractice") ) { return ::hx::Val( haveUsePractice ); }
		if (HX_FIELD_EQ(inName,"dadbattleSmokes") ) { return ::hx::Val( dadbattleSmokes ); }
		if (HX_FIELD_EQ(inName,"discordChannels") ) { return ::hx::Val( discordChannels ); }
		if (HX_FIELD_EQ(inName,"discordOpponent") ) { return ::hx::Val( discordOpponent ); }
		if (HX_FIELD_EQ(inName,"glitchingShader") ) { return ::hx::Val( glitchingShader ); }
		if (HX_FIELD_EQ(inName,"newHealthSystem") ) { return ::hx::Val( newHealthSystem ); }
		if (HX_FIELD_EQ(inName,"sortByOrderNote") ) { return ::hx::Val( sortByOrderNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"openChartEditor") ) { return ::hx::Val( openChartEditor_dyn() ); }
		if (HX_FIELD_EQ(inName,"cachePopUpScore") ) { return ::hx::Val( cachePopUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKeyFromEvent") ) { return ::hx::Val( getKeyFromEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"opponentNoteHit") ) { return ::hx::Val( opponentNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnNoteSplash") ) { return ::hx::Val( spawnNoteSplash_dyn() ); }
		if (HX_FIELD_EQ(inName,"songUpdateEvent") ) { return ::hx::Val( songUpdateEvent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"healthBarOverlay") ) { return ::hx::Val( healthBarOverlay ); }
		if (HX_FIELD_EQ(inName,"comboNumSprTween") ) { return ::hx::Val( comboNumSprTween ); }
		if (HX_FIELD_EQ(inName,"sortByTimeVocals") ) { return ::hx::Val( sortByTimeVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_playbackRate") ) { return ::hx::Val( set_playbackRate_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearNotesBefore") ) { return ::hx::Val( clearNotesBefore_dyn() ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"triggerEventNote") ) { return ::hx::Val( triggerEventNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"startAchievement") ) { return ::hx::Val( startAchievement_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"boyfriendIdleTime") ) { return ::hx::Val( boyfriendIdleTime ); }
		if (HX_FIELD_EQ(inName,"introSoundsSuffix") ) { return ::hx::Val( introSoundsSuffix ); }
		if (HX_FIELD_EQ(inName,"discordHealthText") ) { return ::hx::Val( discordHealthText ); }
		if (HX_FIELD_EQ(inName,"startCharacterLua") ) { return ::hx::Val( startCharacterLua_dyn() ); }
		if (HX_FIELD_EQ(inName,"startCharacterPos") ) { return ::hx::Val( startCharacterPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"startNextDialogue") ) { return ::hx::Val( startNextDialogue_dyn() ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		if (HX_FIELD_EQ(inName,"moveCameraSection") ) { return ::hx::Val( moveCameraSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"RecalculateRating") ) { return ::hx::Val( RecalculateRating_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"debugKeysCharacter") ) { return ::hx::Val( debugKeysCharacter ); }
		if (HX_FIELD_EQ(inName,"addCharacterToList") ) { return ::hx::Val( addCharacterToList_dyn() ); }
		if (HX_FIELD_EQ(inName,"snapCamFollowToPos") ) { return ::hx::Val( snapCamFollowToPos_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isCameraOnForcedPos") ) { return ::hx::Val( isCameraOnForcedPos ); }
		if (HX_FIELD_EQ(inName,"grpNoteHoldSplashes") ) { return ::hx::Val( grpNoteHoldSplashes ); }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		if (HX_FIELD_EQ(inName,"oldTelevisionShader") ) { return ::hx::Val( oldTelevisionShader ); }
		if (HX_FIELD_EQ(inName,"enableCoolLightNote") ) { return ::hx::Val( enableCoolLightNote ); }
		if (HX_FIELD_EQ(inName,"countdownTweenColor") ) { return ::hx::Val( countdownTweenColor ); }
		if (HX_FIELD_EQ(inName,"createRuntimeShader") ) { return ::hx::Val( createRuntimeShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"skipArrowStartTween") ) { return ::hx::Val( skipArrowStartTween ); }
		if (HX_FIELD_EQ(inName,"checkForAchievement") ) { return ::hx::Val( checkForAchievement_dyn() ); }
		if (HX_FIELD_EQ(inName,"opponentHitDistract") ) { return ::hx::Val( opponentHitDistract ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"opponentCameraOffset") ) { return ::hx::Val( opponentCameraOffset ); }
		if (HX_FIELD_EQ(inName,"createMobileControls") ) { return ::hx::Val( createMobileControls_dyn() ); }
		if (HX_FIELD_EQ(inName,"sortByOrderStrumNote") ) { return ::hx::Val( sortByOrderStrumNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"boyfriendCameraOffset") ) { return ::hx::Val( boyfriendCameraOffset ); }
		if (HX_FIELD_EQ(inName,"reloadHealthBarColors") ) { return ::hx::Val( reloadHealthBarColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"eventNoteEarlyTrigger") ) { return ::hx::Val( eventNoteEarlyTrigger_dyn() ); }
		if (HX_FIELD_EQ(inName,"spawnNoteSplashOnNote") ) { return ::hx::Val( spawnNoteSplashOnNote_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"girlfriendCameraOffset") ) { return ::hx::Val( girlfriendCameraOffset ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"STRUM_X") ) { outValue = ( STRUM_X ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { outValue = ( curStage ); return true; }
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"storyName") ) { outValue = ( storyName ); return true; }
		if (HX_FIELD_EQ(inName,"lastCombo") ) { outValue = ( lastCombo ); return true; }
		if (HX_FIELD_EQ(inName,"lastScore") ) { outValue = ( lastScore ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastRating") ) { outValue = ( lastRating ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ratingStuff") ) { outValue = ( ratingStuff ); return true; }
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"startOnTime") ) { outValue = ( startOnTime ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isPixelStage") ) { outValue = ( isPixelStage ); return true; }
		if (HX_FIELD_EQ(inName,"chartingMode") ) { outValue = ( chartingMode ); return true; }
		if (HX_FIELD_EQ(inName,"seenCutscene") ) { outValue = ( seenCutscene ); return true; }
		if (HX_FIELD_EQ(inName,"deathCounter") ) { outValue = ( deathCounter ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { outValue = ( campaignMisses ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"prevCamFollowPos") ) { outValue = ( prevCamFollowPos ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changedDifficulty") ) { outValue = ( changedDifficulty ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"STRUM_X_MIDDLESCROLL") ) { outValue = ( STRUM_X_MIDDLESCROLL ); return true; }
		if (HX_FIELD_EQ(inName,"cancelMusicFadeTween") ) { outValue = cancelMusicFadeTween_dyn(); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gf") ) { gf=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dad") ) { dad=inValue.Cast<  ::Character >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"BF_X") ) { BF_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BF_Y") ) { BF_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GF_X") ) { GF_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GF_Y") ) { GF_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bads") ) { bads=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ytBG") ) { ytBG=inValue.Cast<  ::BGSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"gfMap") ) { gfMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DAD_X") ) { DAD_X=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DAD_Y") ) { DAD_Y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sicks") ) { sicks=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"goods") ) { goods=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shits") ) { shits=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lives") ) { lives=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"dadMap") ) { dadMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VOCALS") ) { VOCALS=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDead") ) { isDead=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfGroup") ) { gfGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeBar") ) { timeBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeTxt") ) { timeTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glitchy") ) { glitchy=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rateTxt") ) { rateTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missTxt") ) { missTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dadGroup") ) { dadGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSpr") ) { comboSpr=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camOther") ) { camOther=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songHits") ) { songHits=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaArray") ) { luaArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ytTopBar") ) { ytTopBar=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backGlow") ) { backGlow=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downGlow") ) { downGlow=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLives") ) { curLives=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hudStyle") ) { hudStyle=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightHUD") ) { lightHUD=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songLogo") ) { songLogo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songDesc") ) { songDesc=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songDiff") ) { songDiff=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboTxt") ) { comboTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canReset") ) { canReset=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingFC") ) { ratingFC=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { variables=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"spawnTime") ) { spawnTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songSpeed") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_songSpeed(inValue.Cast< Float >()) );songSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeBarBG") ) { timeBarBG=inValue.Cast<  ::AttachedSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSprY") ) { comboSprY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysArray") ) { keysArray=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordBG") ) { discordBG=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ytBGVideo") ) { ytBGVideo=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconSpeed") ) { iconSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteColor") ) { noteColor=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTitle") ) { songTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"barOffset") ) { barOffset=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"limoSpeed") ) { limoSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cameraTwn") ) { cameraTwn=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showCombo") ) { showCombo=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shakeNote") ) { shakeNote=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"modManager") ) { modManager=inValue.Cast<  ::modchart::ModManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventNotes") ) { eventNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateTime") ) { updateTime=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthGain") ) { healthGain=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthLoss") ) { healthLoss=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botplayTxt") ) { botplayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songMisses") ) { songMisses=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"redOverlay") ) { redOverlay=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ytBGTopBar") ) { ytBGTopBar=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ytComments") ) { ytComments=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratePrefix") ) { ratePrefix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missPrefix") ) { missPrefix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpHealth") ) { lerpHealth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"HUDtoRight") ) { HUDtoRight=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"introTimer") ) { introTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showRating") ) { showRating=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingName") ) { ratingName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"useModchart") ) { useModchart=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songPercent") ) { songPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingsData") ) { ratingsData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboNumSpr") ) { comboNumSpr=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botplaySine") ) { botplaySine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cameraSpeed") ) { cameraSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keysPressed") ) { keysPressed=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scorePrefix") ) { scorePrefix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboPrefix") ) { comboPrefix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finishTimer") ) { finishTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownGo") ) { countdownGo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteTypeMap") ) { noteTypeMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastStepHit") ) { lastStepHit=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBeatHit") ) { lastBeatHit=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"notesToSpawn") ) { notesToSpawn=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendMap") ) { boyfriendMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playbackRate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_playbackRate(inValue.Cast< Float >()) );playbackRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollowPos") ) { camFollowPos=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"practiceMode") ) { practiceMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueJson") ) { dialogueJson=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controlArray") ) { controlArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"precacheList") ) { precacheList=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"backGlowOver") ) { backGlowOver=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rateTxtTween") ) { rateTxtTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missTxtTween") ) { missTxtTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lerpShakeBar") ) { lerpShakeBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownSet") ) { countdownSet=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showComboNum") ) { showComboNum=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onHoldSplash") ) { onHoldSplash=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomMultiply") ) { zoomMultiply=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"modchartTexts") ) { modchartTexts=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modchartSaves") ) { modchartSaves=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songSpeedType") ) { songSpeedType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboSprTween") ) { comboSprTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cpuControlled") ) { cpuControlled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScoreLerp") ) { songScoreLerp=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipCountdown") ) { skipCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaDebugGroup") ) { luaDebugGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordTopBar") ) { discordTopBar=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordPlayer") ) { discordPlayer=inValue.Cast<  ::stagesprite::DiscordUser >(); return inValue; }
		if (HX_FIELD_EQ(inName,"voidParticles") ) { voidParticles=inValue.Cast<  ::flixel::effects::particles::FlxTypedEmitter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightHUDTween") ) { lightHUDTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownText") ) { countdownText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxtTween") ) { scoreTxtTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboTxtTween") ) { comboTxtTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"videoCutscene") ) { videoCutscene=inValue.Cast<  ::hxvlc::flixel::FlxVideoSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueCount") ) { dialogueCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"psychDialogue") ) { psychDialogue=inValue.Cast<  ::DialogueBoxPsych >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboPosition") ) { comboPosition=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumsBlocked") ) { strumsBlocked=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingPercent") ) { ratingPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"modchartTweens") ) { modchartTweens=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modchartTimers") ) { modchartTimers=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modchartSounds") ) { modchartSounds=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendGroup") ) { boyfriendGroup=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentVocals") ) { opponentVocals=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"separateVocals") ) { separateVocals=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songSpeedTween") ) { songSpeedTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noteKillOffset") ) { noteKillOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { opponentStrums=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZoomingMult") ) { camZoomingMult=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"haveUseBotplay") ) { haveUseBotplay=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dadbattleBlack") ) { dadbattleBlack=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dadbattleLight") ) { dadbattleLight=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"singAnimations") ) { singAnimations=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendIdled") ) { boyfriendIdled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mobileControls") ) { mobileControls=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugKeysChart") ) { debugKeysChart=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordMessage") ) { discordMessage=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordMembers") ) { discordMembers=inValue.Cast<  ::stagesprite::DiscordMembers >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ytBGVideoTitle") ) { ytBGVideoTitle=inValue.Cast<  ::BGSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownTween") ) { countdownTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"runtimeShaders") ) { runtimeShaders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownReady") ) { countdownReady=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventPushedMap") ) { eventPushedMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doneFinishSong") ) { doneFinishSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"achievementObj") ) { achievementObj=inValue.Cast<  ::AchievementObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ratingPosition") ) { ratingPosition=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatHardSnares") ) { beatHardSnares=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"modchartSprites") ) { modchartSprites=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpNoteSplashes") ) { grpNoteSplashes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZoomingDecay") ) { camZoomingDecay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"instakillOnMiss") ) { instakillOnMiss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"haveUsePractice") ) { haveUsePractice=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dadbattleSmokes") ) { dadbattleSmokes=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordChannels") ) { discordChannels=inValue.Cast<  ::stagesprite::DiscordChannels >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordOpponent") ) { discordOpponent=inValue.Cast<  ::stagesprite::DiscordUser >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glitchingShader") ) { glitchingShader=inValue.Cast<  ::shaders::Glitching >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newHealthSystem") ) { newHealthSystem=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"healthBarOverlay") ) { healthBarOverlay=inValue.Cast<  ::AttachedSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"comboNumSprTween") ) { comboNumSprTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriendIdleTime") ) { boyfriendIdleTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"introSoundsSuffix") ) { introSoundsSuffix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"discordHealthText") ) { discordHealthText=inValue.Cast<  ::stagesprite::AttachedNormalText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"debugKeysCharacter") ) { debugKeysCharacter=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isCameraOnForcedPos") ) { isCameraOnForcedPos=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpNoteHoldSplashes") ) { grpNoteHoldSplashes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oldTelevisionShader") ) { oldTelevisionShader=inValue.Cast<  ::shaders::OldTelevision >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enableCoolLightNote") ) { enableCoolLightNote=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"countdownTweenColor") ) { countdownTweenColor=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipArrowStartTween") ) { skipArrowStartTween=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opponentHitDistract") ) { opponentHitDistract=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"opponentCameraOffset") ) { opponentCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"boyfriendCameraOffset") ) { boyfriendCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"girlfriendCameraOffset") ) { girlfriendCameraOffset=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"STRUM_X") ) { STRUM_X=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curStage") ) { curStage=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"storyName") ) { storyName=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"lastCombo") ) { lastCombo=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"lastScore") ) { lastScore=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastRating") ) { lastRating=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ratingStuff") ) { ratingStuff=ioValue.Cast< ::cpp::VirtualArray >(); return true; }
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"startOnTime") ) { startOnTime=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isPixelStage") ) { isPixelStage=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"chartingMode") ) { chartingMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"seenCutscene") ) { seenCutscene=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"deathCounter") ) { deathCounter=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::math::FlxBasePoint >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { campaignMisses=ioValue.Cast< int >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"prevCamFollowPos") ) { prevCamFollowPos=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"changedDifficulty") ) { changedDifficulty=ioValue.Cast< bool >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"STRUM_X_MIDDLESCROLL") ) { STRUM_X_MIDDLESCROLL=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("modManager",cb,df,28,8f));
	outFields->push(HX_("notesToSpawn",7f,b0,93,48));
	outFields->push(HX_("useModchart",43,ce,b7,fd));
	outFields->push(HX_("isCameraOnForcedPos",ed,e7,4d,ae));
	outFields->push(HX_("boyfriendMap",52,d7,52,7c));
	outFields->push(HX_("dadMap",95,72,e2,17));
	outFields->push(HX_("gfMap",bd,45,ec,91));
	outFields->push(HX_("variables",b7,e2,62,82));
	outFields->push(HX_("modchartTweens",a4,3b,b0,60));
	outFields->push(HX_("modchartSprites",52,dd,4d,c2));
	outFields->push(HX_("modchartTimers",0a,d5,5d,56));
	outFields->push(HX_("modchartSounds",c0,70,ba,69));
	outFields->push(HX_("modchartTexts",aa,96,8f,cd));
	outFields->push(HX_("modchartSaves",1a,96,82,37));
	outFields->push(HX_("BF_X",dd,85,d5,2b));
	outFields->push(HX_("BF_Y",de,85,d5,2b));
	outFields->push(HX_("DAD_X",00,3d,6a,52));
	outFields->push(HX_("DAD_Y",01,3d,6a,52));
	outFields->push(HX_("GF_X",f8,96,23,2f));
	outFields->push(HX_("GF_Y",f9,96,23,2f));
	outFields->push(HX_("playbackRate",9b,3a,8b,c0));
	outFields->push(HX_("boyfriendGroup",75,99,09,ef));
	outFields->push(HX_("dadGroup",78,cb,28,42));
	outFields->push(HX_("gfGroup",a0,b8,ab,b0));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("opponentVocals",db,d1,18,64));
	outFields->push(HX_("separateVocals",21,d0,2f,00));
	outFields->push(HX_("dad",47,36,4c,00));
	outFields->push(HX_("gf",1f,5a,00,00));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("eventNotes",c7,e5,25,1c));
	outFields->push(HX_("spawnTime",e8,cf,87,ac));
	outFields->push(HX_("songSpeedTween",99,fd,00,0f));
	outFields->push(HX_("songSpeed",72,df,e3,b0));
	outFields->push(HX_("songSpeedType",4c,9f,4f,95));
	outFields->push(HX_("noteKillOffset",63,b4,6d,a3));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camFollowPos",94,32,de,8d));
	outFields->push(HX_("strumLineNotes",24,f1,48,a4));
	outFields->push(HX_("opponentStrums",87,04,01,1c));
	outFields->push(HX_("playerStrums",4b,e1,2a,0d));
	outFields->push(HX_("grpNoteSplashes",2c,f3,de,7b));
	outFields->push(HX_("grpNoteHoldSplashes",0b,67,2b,7e));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("camZoomingMult",70,ff,2e,c0));
	outFields->push(HX_("camZoomingDecay",ba,fb,ba,2f));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("healthBarOverlay",b9,71,55,78));
	outFields->push(HX_("songPercent",70,03,67,31));
	outFields->push(HX_("timeBarBG",0b,1b,aa,62));
	outFields->push(HX_("timeBar",c6,e3,d4,d8));
	outFields->push(HX_("ratingsData",00,fb,a3,bb));
	outFields->push(HX_("sicks",f5,99,c7,7c));
	outFields->push(HX_("goods",96,00,f9,97));
	outFields->push(HX_("bads",0e,db,10,41));
	outFields->push(HX_("shits",b3,f8,22,7c));
	outFields->push(HX_("comboSpr",87,d9,19,72));
	outFields->push(HX_("comboSprY",f2,7c,84,64));
	outFields->push(HX_("comboNumSpr",7d,f9,38,ca));
	outFields->push(HX_("comboSprTween",64,57,5f,6b));
	outFields->push(HX_("comboNumSprTween",ae,9b,da,ae));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("updateTime",b6,b6,b1,05));
	outFields->push(HX_("healthGain",3b,c3,f4,00));
	outFields->push(HX_("healthLoss",9f,7c,4d,04));
	outFields->push(HX_("instakillOnMiss",94,43,20,66));
	outFields->push(HX_("cpuControlled",d6,1f,47,9e));
	outFields->push(HX_("practiceMode",be,79,8f,7f));
	outFields->push(HX_("haveUsePractice",9a,36,4a,40));
	outFields->push(HX_("haveUseBotplay",7c,66,64,05));
	outFields->push(HX_("botplaySine",68,97,39,87));
	outFields->push(HX_("botplayTxt",b5,49,12,88));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("camOther",41,4c,ae,3e));
	outFields->push(HX_("cameraSpeed",a2,8a,af,75));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("dialogueJson",60,07,8e,0c));
	outFields->push(HX_("dadbattleBlack",80,86,3f,0f));
	outFields->push(HX_("dadbattleLight",97,41,4a,cf));
	outFields->push(HX_("dadbattleSmokes",43,ea,14,b1));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songHits",35,a1,e6,32));
	outFields->push(HX_("songMisses",1f,08,d9,b1));
	outFields->push(HX_("songScoreLerp",54,dc,47,0e));
	outFields->push(HX_("timeTxt",63,a0,e2,d8));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("singAnimations",1e,68,5b,a3));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("skipCountdown",32,d2,d1,d7));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("boyfriendCameraOffset",a2,48,c6,c1));
	outFields->push(HX_("opponentCameraOffset",55,d9,b7,ff));
	outFields->push(HX_("girlfriendCameraOffset",f2,e8,79,8a));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("keysPressed",0e,ff,53,27));
	outFields->push(HX_("boyfriendIdleTime",cb,18,1d,7c));
	outFields->push(HX_("boyfriendIdled",06,71,93,0c));
	outFields->push(HX_("mobileControls",f8,20,dc,92));
	outFields->push(HX_("luaArray",c1,48,f2,a3));
	outFields->push(HX_("luaDebugGroup",c4,37,82,dd));
	outFields->push(HX_("introSoundsSuffix",41,f3,b4,4c));
	outFields->push(HX_("debugKeysChart",77,c1,bc,d8));
	outFields->push(HX_("debugKeysCharacter",c2,c0,8b,12));
	outFields->push(HX_("keysArray",05,67,3a,17));
	outFields->push(HX_("controlArray",fc,20,68,ea));
	outFields->push(HX_("precacheList",3d,2f,95,47));
	outFields->push(HX_("VOCALS",5e,bc,d3,0b));
	outFields->push(HX_("discordBG",71,b6,97,54));
	outFields->push(HX_("discordTopBar",0a,45,a0,6e));
	outFields->push(HX_("discordMessage",7b,71,8b,15));
	outFields->push(HX_("discordChannels",1c,ac,68,fa));
	outFields->push(HX_("discordMembers",8d,68,ea,95));
	outFields->push(HX_("discordPlayer",2d,a2,3e,11));
	outFields->push(HX_("discordOpponent",69,bb,32,88));
	outFields->push(HX_("redOverlay",3f,ce,7d,a8));
	outFields->push(HX_("glitchy",e4,e2,b8,ab));
	outFields->push(HX_("ytBG",60,10,53,50));
	outFields->push(HX_("ytBGVideo",fb,17,ff,84));
	outFields->push(HX_("ytBGVideoTitle",9d,9f,e9,32));
	outFields->push(HX_("ytTopBar",79,c2,40,aa));
	outFields->push(HX_("ytBGTopBar",be,9a,ba,89));
	outFields->push(HX_("ytComments",2f,92,42,13));
	outFields->push(HX_("oldTelevisionShader",1e,f1,f2,ef));
	outFields->push(HX_("glitchingShader",12,db,da,92));
	outFields->push(HX_("backGlow",54,f4,66,07));
	outFields->push(HX_("backGlowOver",c8,6b,2b,0a));
	outFields->push(HX_("downGlow",0f,4c,4f,79));
	outFields->push(HX_("voidParticles",79,51,63,d5));
	outFields->push(HX_("ratePrefix",92,08,c1,c4));
	outFields->push(HX_("scorePrefix",84,0a,1d,7b));
	outFields->push(HX_("missPrefix",ae,05,d2,a7));
	outFields->push(HX_("comboPrefix",80,a4,80,d7));
	outFields->push(HX_("lives",07,f0,07,75));
	outFields->push(HX_("curLives",67,ea,b5,bc));
	outFields->push(HX_("iconSpeed",4e,69,2d,bb));
	outFields->push(HX_("lerpHealth",73,62,1e,34));
	outFields->push(HX_("hudStyle",fa,cc,c8,50));
	outFields->push(HX_("discordHealthText",35,ac,e6,ec));
	outFields->push(HX_("newHealthSystem",2b,bd,ac,65));
	outFields->push(HX_("HUDtoRight",aa,3c,68,06));
	outFields->push(HX_("lightHUD",81,05,e8,8c));
	outFields->push(HX_("lightHUDTween",2a,81,8d,b3));
	outFields->push(HX_("noteColor",11,bc,e9,87));
	outFields->push(HX_("enableCoolLightNote",5c,87,ac,93));
	outFields->push(HX_("songTitle",83,5d,b5,3f));
	outFields->push(HX_("songLogo",e0,fd,8f,35));
	outFields->push(HX_("songDesc",c6,bc,3e,30));
	outFields->push(HX_("songDiff",7a,ba,41,30));
	outFields->push(HX_("countdownText",fe,f5,5c,18));
	outFields->push(HX_("countdownTween",fa,a7,d1,44));
	outFields->push(HX_("countdownTweenColor",09,0f,93,11));
	outFields->push(HX_("introTimer",b9,1d,b1,f6));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("rateTxt",70,df,aa,5a));
	outFields->push(HX_("comboTxt",c2,a2,1a,72));
	outFields->push(HX_("missTxt",d4,d8,74,33));
	outFields->push(HX_("scoreTxtTween",4d,27,f9,cd));
	outFields->push(HX_("rateTxtTween",db,44,23,c7));
	outFields->push(HX_("comboTxtTween",49,38,f4,bd));
	outFields->push(HX_("missTxtTween",f7,c0,42,4e));
	outFields->push(HX_("barOffset",c6,5d,ea,85));
	outFields->push(HX_("lerpShakeBar",44,28,d0,96));
	outFields->push(HX_("runtimeShaders",b6,bf,45,a4));
	outFields->push(HX_("videoCutscene",25,60,e8,9c));
	outFields->push(HX_("dialogueCount",97,10,4a,e5));
	outFields->push(HX_("psychDialogue",73,c5,7a,86));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("finishTimer",72,e2,3a,37));
	outFields->push(HX_("countdownReady",f2,9d,1b,12));
	outFields->push(HX_("countdownSet",71,c7,ba,2b));
	outFields->push(HX_("countdownGo",39,dd,2f,3e));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("noteTypeMap",30,92,3e,ac));
	outFields->push(HX_("eventPushedMap",e9,eb,7f,23));
	outFields->push(HX_("skipArrowStartTween",13,8e,1f,fa));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("canReset",9f,8b,5b,55));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("limoSpeed",e8,bf,60,9e));
	outFields->push(HX_("isDead",ae,13,cd,5f));
	outFields->push(HX_("cameraTwn",e6,d3,33,3a));
	outFields->push(HX_("doneFinishSong",ea,20,70,31));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("achievementObj",c8,36,56,b1));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("showCombo",11,8e,c1,78));
	outFields->push(HX_("showComboNum",b5,68,a3,9d));
	outFields->push(HX_("showRating",fa,d8,fe,24));
	outFields->push(HX_("ratingPosition",e6,75,e3,e8));
	outFields->push(HX_("comboPosition",17,83,ff,11));
	outFields->push(HX_("strumsBlocked",02,35,0d,fa));
	outFields->push(HX_("onHoldSplash",05,5a,08,c1));
	outFields->push(HX_("lastStepHit",b1,62,ed,35));
	outFields->push(HX_("lastBeatHit",c7,9e,b0,28));
	outFields->push(HX_("ratingName",08,a5,2b,05));
	outFields->push(HX_("ratingPercent",28,0c,c7,29));
	outFields->push(HX_("ratingFC",9a,72,95,59));
	outFields->push(HX_("beatHardSnares",1b,94,07,d9));
	outFields->push(HX_("zoomMultiply",57,0c,fd,da));
	outFields->push(HX_("opponentHitDistract",5c,1d,41,7e));
	outFields->push(HX_("shakeNote",d8,fd,1d,e4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::modchart::ModManager */ ,(int)offsetof(PlayState_obj,modManager),HX_("modManager",cb,df,28,8f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,notesToSpawn),HX_("notesToSpawn",7f,b0,93,48)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,useModchart),HX_("useModchart",43,ce,b7,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isCameraOnForcedPos),HX_("isCameraOnForcedPos",ed,e7,4d,ae)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,boyfriendMap),HX_("boyfriendMap",52,d7,52,7c)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,dadMap),HX_("dadMap",95,72,e2,17)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,gfMap),HX_("gfMap",bd,45,ec,91)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,variables),HX_("variables",b7,e2,62,82)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartTweens),HX_("modchartTweens",a4,3b,b0,60)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartSprites),HX_("modchartSprites",52,dd,4d,c2)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartTimers),HX_("modchartTimers",0a,d5,5d,56)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartSounds),HX_("modchartSounds",c0,70,ba,69)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartTexts),HX_("modchartTexts",aa,96,8f,cd)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,modchartSaves),HX_("modchartSaves",1a,96,82,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,BF_X),HX_("BF_X",dd,85,d5,2b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,BF_Y),HX_("BF_Y",de,85,d5,2b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,DAD_X),HX_("DAD_X",00,3d,6a,52)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,DAD_Y),HX_("DAD_Y",01,3d,6a,52)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,GF_X),HX_("GF_X",f8,96,23,2f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,GF_Y),HX_("GF_Y",f9,96,23,2f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,playbackRate),HX_("playbackRate",9b,3a,8b,c0)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,boyfriendGroup),HX_("boyfriendGroup",75,99,09,ef)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,dadGroup),HX_("dadGroup",78,cb,28,42)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,gfGroup),HX_("gfGroup",a0,b8,ab,b0)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PlayState_obj,opponentVocals),HX_("opponentVocals",db,d1,18,64)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,separateVocals),HX_("separateVocals",21,d0,2f,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(PlayState_obj,dad),HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(PlayState_obj,gf),HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(PlayState_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,eventNotes),HX_("eventNotes",c7,e5,25,1c)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,spawnTime),HX_("spawnTime",e8,cf,87,ac)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,songSpeedTween),HX_("songSpeedTween",99,fd,00,0f)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songSpeed),HX_("songSpeed",72,df,e3,b0)},
	{::hx::fsString,(int)offsetof(PlayState_obj,songSpeedType),HX_("songSpeedType",4c,9f,4f,95)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,noteKillOffset),HX_("noteKillOffset",63,b4,6d,a3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollowPos),HX_("camFollowPos",94,32,de,8d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,strumLineNotes),HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,opponentStrums),HX_("opponentStrums",87,04,01,1c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,playerStrums),HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpNoteSplashes),HX_("grpNoteSplashes",2c,f3,de,7b)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,grpNoteHoldSplashes),HX_("grpNoteHoldSplashes",0b,67,2b,7e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camZoomingMult),HX_("camZoomingMult",70,ff,2e,c0)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,camZoomingDecay),HX_("camZoomingDecay",ba,fb,ba,2f)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsObject /*  ::AttachedSprite */ ,(int)offsetof(PlayState_obj,healthBarOverlay),HX_("healthBarOverlay",b9,71,55,78)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPercent),HX_("songPercent",70,03,67,31)},
	{::hx::fsObject /*  ::AttachedSprite */ ,(int)offsetof(PlayState_obj,timeBarBG),HX_("timeBarBG",0b,1b,aa,62)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,timeBar),HX_("timeBar",c6,e3,d4,d8)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,ratingsData),HX_("ratingsData",00,fb,a3,bb)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,sicks),HX_("sicks",f5,99,c7,7c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,goods),HX_("goods",96,00,f9,97)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,bads),HX_("bads",0e,db,10,41)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,shits),HX_("shits",b3,f8,22,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,comboSpr),HX_("comboSpr",87,d9,19,72)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,comboSprY),HX_("comboSprY",f2,7c,84,64)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,comboNumSpr),HX_("comboNumSpr",7d,f9,38,ca)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,comboSprTween),HX_("comboSprTween",64,57,5f,6b)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,comboNumSprTween),HX_("comboNumSprTween",ae,9b,da,ae)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,updateTime),HX_("updateTime",b6,b6,b1,05)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,healthGain),HX_("healthGain",3b,c3,f4,00)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,healthLoss),HX_("healthLoss",9f,7c,4d,04)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,instakillOnMiss),HX_("instakillOnMiss",94,43,20,66)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,cpuControlled),HX_("cpuControlled",d6,1f,47,9e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,practiceMode),HX_("practiceMode",be,79,8f,7f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,haveUsePractice),HX_("haveUsePractice",9a,36,4a,40)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,haveUseBotplay),HX_("haveUseBotplay",7c,66,64,05)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,botplaySine),HX_("botplaySine",68,97,39,87)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botplayTxt),HX_("botplayTxt",b5,49,12,88)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camOther),HX_("camOther",41,4c,ae,3e)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,cameraSpeed),HX_("cameraSpeed",a2,8a,af,75)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,dialogueJson),HX_("dialogueJson",60,07,8e,0c)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,dadbattleBlack),HX_("dadbattleBlack",80,86,3f,0f)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,dadbattleLight),HX_("dadbattleLight",97,41,4a,cf)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(PlayState_obj,dadbattleSmokes),HX_("dadbattleSmokes",43,ea,14,b1)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songHits),HX_("songHits",35,a1,e6,32)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songMisses),HX_("songMisses",1f,08,d9,b1)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songScoreLerp),HX_("songScoreLerp",54,dc,47,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,timeTxt),HX_("timeTxt",63,a0,e2,d8)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,singAnimations),HX_("singAnimations",1e,68,5b,a3)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipCountdown),HX_("skipCountdown",32,d2,d1,d7)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,boyfriendCameraOffset),HX_("boyfriendCameraOffset",a2,48,c6,c1)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,opponentCameraOffset),HX_("opponentCameraOffset",55,d9,b7,ff)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,girlfriendCameraOffset),HX_("girlfriendCameraOffset",f2,e8,79,8a)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,keysPressed),HX_("keysPressed",0e,ff,53,27)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,boyfriendIdleTime),HX_("boyfriendIdleTime",cb,18,1d,7c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,boyfriendIdled),HX_("boyfriendIdled",06,71,93,0c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,mobileControls),HX_("mobileControls",f8,20,dc,92)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaArray),HX_("luaArray",c1,48,f2,a3)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,luaDebugGroup),HX_("luaDebugGroup",c4,37,82,dd)},
	{::hx::fsString,(int)offsetof(PlayState_obj,introSoundsSuffix),HX_("introSoundsSuffix",41,f3,b4,4c)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PlayState_obj,debugKeysChart),HX_("debugKeysChart",77,c1,bc,d8)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PlayState_obj,debugKeysCharacter),HX_("debugKeysCharacter",c2,c0,8b,12)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PlayState_obj,keysArray),HX_("keysArray",05,67,3a,17)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,controlArray),HX_("controlArray",fc,20,68,ea)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,precacheList),HX_("precacheList",3d,2f,95,47)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,VOCALS),HX_("VOCALS",5e,bc,d3,0b)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,discordBG),HX_("discordBG",71,b6,97,54)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,discordTopBar),HX_("discordTopBar",0a,45,a0,6e)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,discordMessage),HX_("discordMessage",7b,71,8b,15)},
	{::hx::fsObject /*  ::stagesprite::DiscordChannels */ ,(int)offsetof(PlayState_obj,discordChannels),HX_("discordChannels",1c,ac,68,fa)},
	{::hx::fsObject /*  ::stagesprite::DiscordMembers */ ,(int)offsetof(PlayState_obj,discordMembers),HX_("discordMembers",8d,68,ea,95)},
	{::hx::fsObject /*  ::stagesprite::DiscordUser */ ,(int)offsetof(PlayState_obj,discordPlayer),HX_("discordPlayer",2d,a2,3e,11)},
	{::hx::fsObject /*  ::stagesprite::DiscordUser */ ,(int)offsetof(PlayState_obj,discordOpponent),HX_("discordOpponent",69,bb,32,88)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,redOverlay),HX_("redOverlay",3f,ce,7d,a8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,glitchy),HX_("glitchy",e4,e2,b8,ab)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,ytBG),HX_("ytBG",60,10,53,50)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,ytBGVideo),HX_("ytBGVideo",fb,17,ff,84)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,ytBGVideoTitle),HX_("ytBGVideoTitle",9d,9f,e9,32)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,ytTopBar),HX_("ytTopBar",79,c2,40,aa)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,ytBGTopBar),HX_("ytBGTopBar",be,9a,ba,89)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,ytComments),HX_("ytComments",2f,92,42,13)},
	{::hx::fsObject /*  ::shaders::OldTelevision */ ,(int)offsetof(PlayState_obj,oldTelevisionShader),HX_("oldTelevisionShader",1e,f1,f2,ef)},
	{::hx::fsObject /*  ::shaders::Glitching */ ,(int)offsetof(PlayState_obj,glitchingShader),HX_("glitchingShader",12,db,da,92)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,backGlow),HX_("backGlow",54,f4,66,07)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,backGlowOver),HX_("backGlowOver",c8,6b,2b,0a)},
	{::hx::fsObject /*  ::BGSprite */ ,(int)offsetof(PlayState_obj,downGlow),HX_("downGlow",0f,4c,4f,79)},
	{::hx::fsObject /*  ::flixel::effects::particles::FlxTypedEmitter */ ,(int)offsetof(PlayState_obj,voidParticles),HX_("voidParticles",79,51,63,d5)},
	{::hx::fsString,(int)offsetof(PlayState_obj,ratePrefix),HX_("ratePrefix",92,08,c1,c4)},
	{::hx::fsString,(int)offsetof(PlayState_obj,scorePrefix),HX_("scorePrefix",84,0a,1d,7b)},
	{::hx::fsString,(int)offsetof(PlayState_obj,missPrefix),HX_("missPrefix",ae,05,d2,a7)},
	{::hx::fsString,(int)offsetof(PlayState_obj,comboPrefix),HX_("comboPrefix",80,a4,80,d7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lives),HX_("lives",07,f0,07,75)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curLives),HX_("curLives",67,ea,b5,bc)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,iconSpeed),HX_("iconSpeed",4e,69,2d,bb)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,lerpHealth),HX_("lerpHealth",73,62,1e,34)},
	{::hx::fsString,(int)offsetof(PlayState_obj,hudStyle),HX_("hudStyle",fa,cc,c8,50)},
	{::hx::fsObject /*  ::stagesprite::AttachedNormalText */ ,(int)offsetof(PlayState_obj,discordHealthText),HX_("discordHealthText",35,ac,e6,ec)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,newHealthSystem),HX_("newHealthSystem",2b,bd,ac,65)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,HUDtoRight),HX_("HUDtoRight",aa,3c,68,06)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,lightHUD),HX_("lightHUD",81,05,e8,8c)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,lightHUDTween),HX_("lightHUDTween",2a,81,8d,b3)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(PlayState_obj,noteColor),HX_("noteColor",11,bc,e9,87)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,enableCoolLightNote),HX_("enableCoolLightNote",5c,87,ac,93)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songTitle),HX_("songTitle",83,5d,b5,3f)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,songLogo),HX_("songLogo",e0,fd,8f,35)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songDesc),HX_("songDesc",c6,bc,3e,30)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songDiff),HX_("songDiff",7a,ba,41,30)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,countdownText),HX_("countdownText",fe,f5,5c,18)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,countdownTween),HX_("countdownTween",fa,a7,d1,44)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,countdownTweenColor),HX_("countdownTweenColor",09,0f,93,11)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,introTimer),HX_("introTimer",b9,1d,b1,f6)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,rateTxt),HX_("rateTxt",70,df,aa,5a)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,comboTxt),HX_("comboTxt",c2,a2,1a,72)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,missTxt),HX_("missTxt",d4,d8,74,33)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,scoreTxtTween),HX_("scoreTxtTween",4d,27,f9,cd)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,rateTxtTween),HX_("rateTxtTween",db,44,23,c7)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,comboTxtTween),HX_("comboTxtTween",49,38,f4,bd)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,missTxtTween),HX_("missTxtTween",f7,c0,42,4e)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,barOffset),HX_("barOffset",c6,5d,ea,85)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,lerpShakeBar),HX_("lerpShakeBar",44,28,d0,96)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,runtimeShaders),HX_("runtimeShaders",b6,bf,45,a4)},
	{::hx::fsObject /*  ::hxvlc::flixel::FlxVideoSprite */ ,(int)offsetof(PlayState_obj,videoCutscene),HX_("videoCutscene",25,60,e8,9c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,dialogueCount),HX_("dialogueCount",97,10,4a,e5)},
	{::hx::fsObject /*  ::DialogueBoxPsych */ ,(int)offsetof(PlayState_obj,psychDialogue),HX_("psychDialogue",73,c5,7a,86)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,finishTimer),HX_("finishTimer",72,e2,3a,37)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownReady),HX_("countdownReady",f2,9d,1b,12)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownSet),HX_("countdownSet",71,c7,ba,2b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,countdownGo),HX_("countdownGo",39,dd,2f,3e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,noteTypeMap),HX_("noteTypeMap",30,92,3e,ac)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PlayState_obj,eventPushedMap),HX_("eventPushedMap",e9,eb,7f,23)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,skipArrowStartTween),HX_("skipArrowStartTween",13,8e,1f,fa)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canReset),HX_("canReset",9f,8b,5b,55)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,limoSpeed),HX_("limoSpeed",e8,bf,60,9e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isDead),HX_("isDead",ae,13,cd,5f)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(PlayState_obj,cameraTwn),HX_("cameraTwn",e6,d3,33,3a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,doneFinishSong),HX_("doneFinishSong",ea,20,70,31)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsObject /*  ::AchievementObject */ ,(int)offsetof(PlayState_obj,achievementObj),HX_("achievementObj",c8,36,56,b1)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showCombo),HX_("showCombo",11,8e,c1,78)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showComboNum),HX_("showComboNum",b5,68,a3,9d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,showRating),HX_("showRating",fa,d8,fe,24)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,ratingPosition),HX_("ratingPosition",e6,75,e3,e8)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,comboPosition),HX_("comboPosition",17,83,ff,11)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,strumsBlocked),HX_("strumsBlocked",02,35,0d,fa)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,onHoldSplash),HX_("onHoldSplash",05,5a,08,c1)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastStepHit),HX_("lastStepHit",b1,62,ed,35)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastBeatHit),HX_("lastBeatHit",c7,9e,b0,28)},
	{::hx::fsString,(int)offsetof(PlayState_obj,ratingName),HX_("ratingName",08,a5,2b,05)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,ratingPercent),HX_("ratingPercent",28,0c,c7,29)},
	{::hx::fsString,(int)offsetof(PlayState_obj,ratingFC),HX_("ratingFC",9a,72,95,59)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,beatHardSnares),HX_("beatHardSnares",1b,94,07,d9)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,zoomMultiply),HX_("zoomMultiply",57,0c,fd,da)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,opponentHitDistract),HX_("opponentHitDistract",5c,1d,41,7e)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,shakeNote),HX_("shakeNote",d8,fd,1d,e4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &PlayState_obj::STRUM_X,HX_("STRUM_X",82,44,b5,80)},
	{::hx::fsInt,(void *) &PlayState_obj::STRUM_X_MIDDLESCROLL,HX_("STRUM_X_MIDDLESCROLL",3f,d6,d5,06)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(void *) &PlayState_obj::ratingStuff,HX_("ratingStuff",97,c9,9a,6e)},
	{::hx::fsString,(void *) &PlayState_obj::curStage,HX_("curStage",1e,65,b9,cb)},
	{::hx::fsBool,(void *) &PlayState_obj::isPixelStage,HX_("isPixelStage",e2,d6,18,f5)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsString,(void *) &PlayState_obj::storyName,HX_("storyName",e0,50,20,29)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollowPos,HX_("prevCamFollowPos",27,5e,2b,c8)},
	{::hx::fsBool,(void *) &PlayState_obj::changedDifficulty,HX_("changedDifficulty",4f,3c,c6,3f)},
	{::hx::fsBool,(void *) &PlayState_obj::chartingMode,HX_("chartingMode",47,00,06,09)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignMisses,HX_("campaignMisses",9a,a9,70,e4)},
	{::hx::fsBool,(void *) &PlayState_obj::seenCutscene,HX_("seenCutscene",25,d1,95,b5)},
	{::hx::fsInt,(void *) &PlayState_obj::deathCounter,HX_("deathCounter",28,56,4b,1f)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::lastRating,HX_("lastRating",13,17,65,86)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::lastCombo,HX_("lastCombo",18,56,0a,97)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &PlayState_obj::lastScore,HX_("lastScore",1c,a1,86,c5)},
	{::hx::fsFloat,(void *) &PlayState_obj::startOnTime,HX_("startOnTime",ce,32,6d,67)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("modManager",cb,df,28,8f),
	HX_("notesToSpawn",7f,b0,93,48),
	HX_("useModchart",43,ce,b7,fd),
	HX_("isCameraOnForcedPos",ed,e7,4d,ae),
	HX_("boyfriendMap",52,d7,52,7c),
	HX_("dadMap",95,72,e2,17),
	HX_("gfMap",bd,45,ec,91),
	HX_("variables",b7,e2,62,82),
	HX_("modchartTweens",a4,3b,b0,60),
	HX_("modchartSprites",52,dd,4d,c2),
	HX_("modchartTimers",0a,d5,5d,56),
	HX_("modchartSounds",c0,70,ba,69),
	HX_("modchartTexts",aa,96,8f,cd),
	HX_("modchartSaves",1a,96,82,37),
	HX_("BF_X",dd,85,d5,2b),
	HX_("BF_Y",de,85,d5,2b),
	HX_("DAD_X",00,3d,6a,52),
	HX_("DAD_Y",01,3d,6a,52),
	HX_("GF_X",f8,96,23,2f),
	HX_("GF_Y",f9,96,23,2f),
	HX_("playbackRate",9b,3a,8b,c0),
	HX_("boyfriendGroup",75,99,09,ef),
	HX_("dadGroup",78,cb,28,42),
	HX_("gfGroup",a0,b8,ab,b0),
	HX_("vocals",5e,10,51,59),
	HX_("opponentVocals",db,d1,18,64),
	HX_("separateVocals",21,d0,2f,00),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("eventNotes",c7,e5,25,1c),
	HX_("spawnTime",e8,cf,87,ac),
	HX_("songSpeedTween",99,fd,00,0f),
	HX_("songSpeed",72,df,e3,b0),
	HX_("songSpeedType",4c,9f,4f,95),
	HX_("noteKillOffset",63,b4,6d,a3),
	HX_("strumLine",dd,79,d7,ee),
	HX_("camFollow",e0,6e,47,22),
	HX_("camFollowPos",94,32,de,8d),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("opponentStrums",87,04,01,1c),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("grpNoteSplashes",2c,f3,de,7b),
	HX_("grpNoteHoldSplashes",0b,67,2b,7e),
	HX_("camZooming",60,3b,bf,d6),
	HX_("camZoomingMult",70,ff,2e,c0),
	HX_("camZoomingDecay",ba,fb,ba,2f),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("healthBarOverlay",b9,71,55,78),
	HX_("songPercent",70,03,67,31),
	HX_("timeBarBG",0b,1b,aa,62),
	HX_("timeBar",c6,e3,d4,d8),
	HX_("ratingsData",00,fb,a3,bb),
	HX_("sicks",f5,99,c7,7c),
	HX_("goods",96,00,f9,97),
	HX_("bads",0e,db,10,41),
	HX_("shits",b3,f8,22,7c),
	HX_("comboSpr",87,d9,19,72),
	HX_("comboSprY",f2,7c,84,64),
	HX_("comboNumSpr",7d,f9,38,ca),
	HX_("comboSprTween",64,57,5f,6b),
	HX_("comboNumSprTween",ae,9b,da,ae),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("endingSong",5c,73,d7,67),
	HX_("startingSong",b5,31,61,33),
	HX_("updateTime",b6,b6,b1,05),
	HX_("healthGain",3b,c3,f4,00),
	HX_("healthLoss",9f,7c,4d,04),
	HX_("instakillOnMiss",94,43,20,66),
	HX_("cpuControlled",d6,1f,47,9e),
	HX_("practiceMode",be,79,8f,7f),
	HX_("haveUsePractice",9a,36,4a,40),
	HX_("haveUseBotplay",7c,66,64,05),
	HX_("botplaySine",68,97,39,87),
	HX_("botplayTxt",b5,49,12,88),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camGame",a1,47,50,cf),
	HX_("camOther",41,4c,ae,3e),
	HX_("cameraSpeed",a2,8a,af,75),
	HX_("dialogue",18,2d,94,a7),
	HX_("dialogueJson",60,07,8e,0c),
	HX_("dadbattleBlack",80,86,3f,0f),
	HX_("dadbattleLight",97,41,4a,cf),
	HX_("dadbattleSmokes",43,ea,14,b1),
	HX_("songScore",3d,bb,53,a8),
	HX_("songHits",35,a1,e6,32),
	HX_("songMisses",1f,08,d9,b1),
	HX_("songScoreLerp",54,dc,47,0e),
	HX_("timeTxt",63,a0,e2,d8),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("singAnimations",1e,68,5b,a3),
	HX_("inCutscene",8f,21,01,56),
	HX_("skipCountdown",32,d2,d1,d7),
	HX_("songLength",9b,3a,8c,fa),
	HX_("boyfriendCameraOffset",a2,48,c6,c1),
	HX_("opponentCameraOffset",55,d9,b7,ff),
	HX_("girlfriendCameraOffset",f2,e8,79,8a),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("keysPressed",0e,ff,53,27),
	HX_("boyfriendIdleTime",cb,18,1d,7c),
	HX_("boyfriendIdled",06,71,93,0c),
	HX_("mobileControls",f8,20,dc,92),
	HX_("luaArray",c1,48,f2,a3),
	HX_("luaDebugGroup",c4,37,82,dd),
	HX_("introSoundsSuffix",41,f3,b4,4c),
	HX_("debugKeysChart",77,c1,bc,d8),
	HX_("debugKeysCharacter",c2,c0,8b,12),
	HX_("keysArray",05,67,3a,17),
	HX_("controlArray",fc,20,68,ea),
	HX_("precacheList",3d,2f,95,47),
	HX_("VOCALS",5e,bc,d3,0b),
	HX_("discordBG",71,b6,97,54),
	HX_("discordTopBar",0a,45,a0,6e),
	HX_("discordMessage",7b,71,8b,15),
	HX_("discordChannels",1c,ac,68,fa),
	HX_("discordMembers",8d,68,ea,95),
	HX_("discordPlayer",2d,a2,3e,11),
	HX_("discordOpponent",69,bb,32,88),
	HX_("redOverlay",3f,ce,7d,a8),
	HX_("glitchy",e4,e2,b8,ab),
	HX_("ytBG",60,10,53,50),
	HX_("ytBGVideo",fb,17,ff,84),
	HX_("ytBGVideoTitle",9d,9f,e9,32),
	HX_("ytTopBar",79,c2,40,aa),
	HX_("ytBGTopBar",be,9a,ba,89),
	HX_("ytComments",2f,92,42,13),
	HX_("oldTelevisionShader",1e,f1,f2,ef),
	HX_("glitchingShader",12,db,da,92),
	HX_("backGlow",54,f4,66,07),
	HX_("backGlowOver",c8,6b,2b,0a),
	HX_("downGlow",0f,4c,4f,79),
	HX_("voidParticles",79,51,63,d5),
	HX_("ratePrefix",92,08,c1,c4),
	HX_("scorePrefix",84,0a,1d,7b),
	HX_("missPrefix",ae,05,d2,a7),
	HX_("comboPrefix",80,a4,80,d7),
	HX_("lives",07,f0,07,75),
	HX_("curLives",67,ea,b5,bc),
	HX_("iconSpeed",4e,69,2d,bb),
	HX_("lerpHealth",73,62,1e,34),
	HX_("hudStyle",fa,cc,c8,50),
	HX_("discordHealthText",35,ac,e6,ec),
	HX_("newHealthSystem",2b,bd,ac,65),
	HX_("HUDtoRight",aa,3c,68,06),
	HX_("lightHUD",81,05,e8,8c),
	HX_("lightHUDTween",2a,81,8d,b3),
	HX_("noteColor",11,bc,e9,87),
	HX_("enableCoolLightNote",5c,87,ac,93),
	HX_("songTitle",83,5d,b5,3f),
	HX_("songLogo",e0,fd,8f,35),
	HX_("songDesc",c6,bc,3e,30),
	HX_("songDiff",7a,ba,41,30),
	HX_("countdownText",fe,f5,5c,18),
	HX_("countdownTween",fa,a7,d1,44),
	HX_("countdownTweenColor",09,0f,93,11),
	HX_("introTimer",b9,1d,b1,f6),
	HX_("create",fc,66,0f,7c),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("rateTxt",70,df,aa,5a),
	HX_("comboTxt",c2,a2,1a,72),
	HX_("missTxt",d4,d8,74,33),
	HX_("scoreTxtTween",4d,27,f9,cd),
	HX_("rateTxtTween",db,44,23,c7),
	HX_("comboTxtTween",49,38,f4,bd),
	HX_("missTxtTween",f7,c0,42,4e),
	HX_("barOffset",c6,5d,ea,85),
	HX_("lerpShakeBar",44,28,d0,96),
	HX_("createHUD",1b,0b,dd,49),
	HX_("sortByTimeVocals",80,0d,6b,2a),
	HX_("vocalsSetup",3f,f9,bd,99),
	HX_("createMobileControls",14,dd,d8,fe),
	HX_("runtimeShaders",b6,bf,45,a4),
	HX_("createRuntimeShader",81,55,08,17),
	HX_("initLuaShader",cd,69,3d,b0),
	HX_("set_songSpeed",55,95,4d,b7),
	HX_("set_playbackRate",98,14,6c,1b),
	HX_("addTextToDebug",0a,a1,fa,14),
	HX_("reloadHealthBarColors",4e,b0,fa,fc),
	HX_("addCharacterToList",e1,1e,4c,45),
	HX_("startCharacterLua",11,f1,a3,c5),
	HX_("getLuaObject",21,03,b3,3c),
	HX_("startCharacterPos",ed,f4,a6,c5),
	HX_("videoCutscene",25,60,e8,9c),
	HX_("startVideo",b9,ec,12,53),
	HX_("startAndEnd",46,3f,e6,d8),
	HX_("dialogueCount",97,10,4a,e5),
	HX_("psychDialogue",73,c5,7a,86),
	HX_("startDialogue",9a,8f,4f,ac),
	HX_("startTimer",03,98,4c,2c),
	HX_("finishTimer",72,e2,3a,37),
	HX_("countdownReady",f2,9d,1b,12),
	HX_("countdownSet",71,c7,ba,2b),
	HX_("countdownGo",39,dd,2f,3e),
	HX_("cacheCountdown",0f,3e,43,67),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("addBehindGF",9a,c8,d5,d1),
	HX_("addBehindBF",3f,c4,d5,d1),
	HX_("addBehindDad",4c,8f,37,c9),
	HX_("clearNotesBefore",13,f3,9b,ac),
	HX_("updateScore",89,dc,71,5e),
	HX_("setSongTime",44,f4,35,6b),
	HX_("startNextDialogue",ad,e4,be,ee),
	HX_("skipDialogue",b7,16,64,0f),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("songTime",82,2a,d5,3a),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("noteTypeMap",30,92,3e,ac),
	HX_("eventPushedMap",e9,eb,7f,23),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("eventPushed",73,60,7a,c5),
	HX_("eventNoteEarlyTrigger",21,7e,c3,33),
	HX_("sortByShit",35,ff,86,6e),
	HX_("sortByOrderNote",0b,3c,25,56),
	HX_("sortByOrderStrumNote",22,db,1c,59),
	HX_("sortByTime",82,fb,30,6f),
	HX_("skipArrowStartTween",13,8e,1f,fa),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("onFocus",39,fe,c6,9a),
	HX_("onFocusLost",bd,e4,85,41),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("canReset",9f,8b,5b,55),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("limoSpeed",e8,bf,60,9e),
	HX_("update",09,86,05,87),
	HX_("openPauseMenu",8b,0e,89,68),
	HX_("openChartEditor",81,41,b3,10),
	HX_("isDead",ae,13,cd,5f),
	HX_("doDeathCheck",5f,34,16,ce),
	HX_("checkEventNote",44,0f,ce,5e),
	HX_("getControl",67,f1,e2,68),
	HX_("triggerEventNote",d4,44,42,0a),
	HX_("moveCameraSection",ef,4b,d5,47),
	HX_("cameraTwn",e6,d3,33,3a),
	HX_("moveCamera",96,c0,ba,07),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("snapCamFollowToPos",c3,bb,92,8e),
	HX_("doneFinishSong",ea,20,70,31),
	HX_("finishSong",c8,b5,92,d8),
	HX_("transitioning",6d,6a,93,94),
	HX_("endSong",50,dd,7c,2e),
	HX_("achievementObj",c8,36,56,b1),
	HX_("startAchievement",2d,5b,b8,dd),
	HX_("achievementEnd",ac,aa,4e,b1),
	HX_("KillNotes",a3,ef,fb,2e),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("showCombo",11,8e,c1,78),
	HX_("showComboNum",b5,68,a3,9d),
	HX_("showRating",fa,d8,fe,24),
	HX_("ratingPosition",e6,75,e3,e8),
	HX_("comboPosition",17,83,ff,11),
	HX_("cachePopUpScore",48,66,94,1e),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("strumsBlocked",02,35,0d,fa),
	HX_("onKeyPress",a3,cd,a8,ea),
	HX_("sortHitNotes",6c,aa,d7,58),
	HX_("onKeyRelease",e7,c7,b8,9f),
	HX_("getKeyFromEvent",67,b2,00,25),
	HX_("keyShit",ff,40,2c,a6),
	HX_("parseKeys",c7,33,ad,ce),
	HX_("noteMiss",0e,78,8f,57),
	HX_("noteMissPress",95,58,12,aa),
	HX_("opponentNoteHit",64,75,4c,b1),
	HX_("onHoldSplash",05,5a,08,c1),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("spawnNoteSplashOnNote",e5,04,43,52),
	HX_("spawnNoteSplash",14,69,b8,ca),
	HX_("destroy",fa,2c,86,24),
	HX_("lastStepHit",b1,62,ed,35),
	HX_("stepHit",67,ae,41,81),
	HX_("lastBeatHit",c7,9e,b0,28),
	HX_("beatHit",7d,ea,04,74),
	HX_("sectionHit",6e,f5,cd,be),
	HX_("callOnLuas",b8,07,76,15),
	HX_("setOnLuas",bc,a5,ed,49),
	HX_("StrumPlayAnim",6e,44,3b,88),
	HX_("ratingName",08,a5,2b,05),
	HX_("ratingPercent",28,0c,c7,29),
	HX_("ratingFC",9a,72,95,59),
	HX_("RecalculateRating",b0,cb,cd,f8),
	HX_("checkForAchievement",ce,c6,ae,67),
	HX_("beatHardSnares",1b,94,07,d9),
	HX_("zoomMultiply",57,0c,fd,da),
	HX_("opponentHitDistract",5c,1d,41,7e),
	HX_("shakeNote",d8,fd,1d,e4),
	HX_("songStepEvent",99,76,04,1d),
	HX_("songUpdateEvent",7c,bb,7a,02),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::STRUM_X,"STRUM_X");
	HX_MARK_MEMBER_NAME(PlayState_obj::STRUM_X_MIDDLESCROLL,"STRUM_X_MIDDLESCROLL");
	HX_MARK_MEMBER_NAME(PlayState_obj::ratingStuff,"ratingStuff");
	HX_MARK_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::isPixelStage,"isPixelStage");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyName,"storyName");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollowPos,"prevCamFollowPos");
	HX_MARK_MEMBER_NAME(PlayState_obj::changedDifficulty,"changedDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::chartingMode,"chartingMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_MARK_MEMBER_NAME(PlayState_obj::seenCutscene,"seenCutscene");
	HX_MARK_MEMBER_NAME(PlayState_obj::deathCounter,"deathCounter");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::lastRating,"lastRating");
	HX_MARK_MEMBER_NAME(PlayState_obj::lastCombo,"lastCombo");
	HX_MARK_MEMBER_NAME(PlayState_obj::lastScore,"lastScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::startOnTime,"startOnTime");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::STRUM_X,"STRUM_X");
	HX_VISIT_MEMBER_NAME(PlayState_obj::STRUM_X_MIDDLESCROLL,"STRUM_X_MIDDLESCROLL");
	HX_VISIT_MEMBER_NAME(PlayState_obj::ratingStuff,"ratingStuff");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curStage,"curStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isPixelStage,"isPixelStage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyName,"storyName");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollowPos,"prevCamFollowPos");
	HX_VISIT_MEMBER_NAME(PlayState_obj::changedDifficulty,"changedDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::chartingMode,"chartingMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::seenCutscene,"seenCutscene");
	HX_VISIT_MEMBER_NAME(PlayState_obj::deathCounter,"deathCounter");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::lastRating,"lastRating");
	HX_VISIT_MEMBER_NAME(PlayState_obj::lastCombo,"lastCombo");
	HX_VISIT_MEMBER_NAME(PlayState_obj::lastScore,"lastScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::startOnTime,"startOnTime");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("STRUM_X",82,44,b5,80),
	HX_("STRUM_X_MIDDLESCROLL",3f,d6,d5,06),
	HX_("ratingStuff",97,c9,9a,6e),
	HX_("curStage",1e,65,b9,cb),
	HX_("isPixelStage",e2,d6,18,f5),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyName",e0,50,20,29),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("prevCamFollowPos",27,5e,2b,c8),
	HX_("changedDifficulty",4f,3c,c6,3f),
	HX_("chartingMode",47,00,06,09),
	HX_("campaignScore",22,22,d6,07),
	HX_("campaignMisses",9a,a9,70,e4),
	HX_("seenCutscene",25,d1,95,b5),
	HX_("deathCounter",28,56,4b,1f),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("instance",95,1f,e1,59),
	HX_("lastRating",13,17,65,86),
	HX_("lastCombo",18,56,0a,97),
	HX_("lastScore",1c,a1,86,c5),
	HX_("startOnTime",ce,32,6d,67),
	HX_("cancelMusicFadeTween",04,b9,8e,55),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_110_boot)
HXDLIN( 110)		STRUM_X = 55;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_111_boot)
HXDLIN( 111)		STRUM_X_MIDDLESCROLL = -265;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_113_boot)
HXDLIN( 113)		ratingStuff = ::cpp::VirtualArray_obj::__new(11)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("WHAT",44,6b,b8,39))->init(1,((Float)0.1)))->init(1,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("How",70,03,37,00))->init(1,((Float)0.2)))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Bad",a5,69,32,00))->init(1,((Float)0.4)))->init(3,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Uncool",c2,35,2e,94))->init(1,((Float)0.5)))->init(4,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Cool",e9,e6,9d,2c))->init(1,((Float)0.6)))->init(5,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Nice",bd,a7,de,33))->init(1,((Float)0.69)))->init(6,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Good",5d,c1,42,2f))->init(1,((Float)0.7)))->init(7,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Great",2d,7b,1a,2d))->init(1,((Float)0.8)))->init(8,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Sick!",83,09,f5,0f))->init(1,((Float)0.9)))->init(9,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Awesome!!",a3,74,94,ba))->init(1,((Float)0.99)))->init(10,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Perfect!!",0d,5f,8e,32))->init(1,1));
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_166_boot)
HXDLIN( 166)		curStage = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_167_boot)
HXDLIN( 167)		isPixelStage = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_168_boot)
HXDLIN( 168)		SONG = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_169_boot)
HXDLIN( 169)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_170_boot)
HXDLIN( 170)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_171_boot)
HXDLIN( 171)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_172_boot)
HXDLIN( 172)		storyName = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_173_boot)
HXDLIN( 173)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_240_boot)
HXDLIN( 240)		changedDifficulty = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_241_boot)
HXDLIN( 241)		chartingMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_276_boot)
HXDLIN( 276)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_277_boot)
HXDLIN( 277)		campaignMisses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_278_boot)
HXDLIN( 278)		seenCutscene = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_279_boot)
HXDLIN( 279)		deathCounter = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_284_boot)
HXDLIN( 284)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_331_boot)
HXDLIN( 331)		lastScore = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1876_boot)
HXDLIN(1876)		startOnTime = ((Float)0);
            	}
}

