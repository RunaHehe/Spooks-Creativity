// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_FlxFunkSoundTray
#include <FlxFunkSoundTray.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSoundTray
#include <flixel/system/ui/FlxSoundTray.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_30c549631f65372a_222_new,"FlxFunkSoundTray","new",0xe16f2639,"FlxFunkSoundTray.new","Main.hx",222,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_30c549631f65372a_247_update,"FlxFunkSoundTray","update",0xc75c9dd0,"FlxFunkSoundTray.update","Main.hx",247,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_30c549631f65372a_250_show,"FlxFunkSoundTray","show",0x63229d04,"FlxFunkSoundTray.show","Main.hx",250,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_30c549631f65372a_265_screenCenter,"FlxFunkSoundTray","screenCenter",0x3f6ad568,"FlxFunkSoundTray.screenCenter","Main.hx",265,0x087e5c05)

void FlxFunkSoundTray_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_30c549631f65372a_222_new)
HXLINE( 223)		super::__construct();
HXLINE( 224)		this->removeChildren(null(),null());
HXLINE( 226)		 ::openfl::display::Bitmap bg =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,80,25,false,-12632257),null(),null());
HXLINE( 227)		this->addChild(bg);
HXLINE( 229)		this->_bar =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,75,25,false,-1),null(),null());
HXLINE( 230)		this->_bar->set_x(((Float)2.5));
HXLINE( 231)		this->addChild(this->_bar);
HXLINE( 233)		 ::openfl::display::Bitmap tmp =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getBitmapData(HX_("assets/images/soundtray.png",75,73,e9,fe),false),null(),true);
HXLINE( 234)		this->addChild(tmp);
HXLINE( 235)		this->screenCenter();
HXLINE( 237)		tmp->set_scaleX(((Float)0.5));
HXLINE( 238)		tmp->set_scaleY(((Float)0.5));
HXLINE( 239)		Float _hx_tmp = tmp->get_x();
HXDLIN( 239)		tmp->set_x((_hx_tmp - (tmp->get_width() * ((Float)0.2))));
HXLINE( 240)		tmp->set_y((tmp->get_y() - ( (Float)(5) )));
HXLINE( 242)		this->set_y(-(this->get_height()));
HXLINE( 243)		this->set_visible(false);
            	}

Dynamic FlxFunkSoundTray_obj::__CreateEmpty() { return new FlxFunkSoundTray_obj; }

void *FlxFunkSoundTray_obj::_hx_vtable = 0;

Dynamic FlxFunkSoundTray_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxFunkSoundTray_obj > _hx_result = new FlxFunkSoundTray_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxFunkSoundTray_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x232a5d76) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417 || inClassId==(int)0x232a5d76;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x3fe94887 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void FlxFunkSoundTray_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_30c549631f65372a_247_update)
HXDLIN( 247)		this->super::update((elapsed / ( (Float)(4) )));
            	}


void FlxFunkSoundTray_obj::show(::hx::Null< bool >  __o_up){
            		bool up = __o_up.Default(false);
            	HX_STACKFRAME(&_hx_pos_30c549631f65372a_250_show)
HXLINE( 251)		if (!(this->silent)) {
HXLINE( 253)			 ::openfl::media::Sound sound = ::flixel::_hx_system::FlxAssets_obj::getSound(HX_("assets/sounds/scrollMenu",2b,4b,80,92));
HXLINE( 254)			if (::hx::IsNotNull( sound )) {
HXLINE( 255)				::flixel::FlxG_obj::sound->load(sound,null(),null(),null(),null(),null(),null(),null(),null())->play(null(),null(),null());
            			}
            		}
HXLINE( 259)		this->_timer = ((Float)0.25);
HXLINE( 260)		this->set_y(( (Float)(0) ));
HXLINE( 261)		this->set_visible((this->active = true));
HXLINE( 262)		Float _hx_tmp;
HXDLIN( 262)		if (::flixel::FlxG_obj::sound->muted) {
HXLINE( 262)			_hx_tmp = ( (Float)(0) );
            		}
            		else {
HXLINE( 262)			_hx_tmp = ::flixel::FlxG_obj::sound->volume;
            		}
HXDLIN( 262)		this->_bar->set_scaleX(_hx_tmp);
            	}


void FlxFunkSoundTray_obj::screenCenter(){
            	HX_STACKFRAME(&_hx_pos_30c549631f65372a_265_screenCenter)
HXLINE( 266)		Float _hx_tmp = (( (Float)(::openfl::Lib_obj::get_current()->stage->stageWidth) ) / ( (Float)(::flixel::FlxG_obj::width) ));
HXDLIN( 266)		this->_defaultScale = (::Math_obj::min(_hx_tmp,(( (Float)(::openfl::Lib_obj::get_current()->stage->stageHeight) ) / ( (Float)(::flixel::FlxG_obj::height) ))) * ( (Float)(2) ));
HXLINE( 267)		this->super::screenCenter();
            	}



::hx::ObjectPtr< FlxFunkSoundTray_obj > FlxFunkSoundTray_obj::__new() {
	::hx::ObjectPtr< FlxFunkSoundTray_obj > __this = new FlxFunkSoundTray_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxFunkSoundTray_obj > FlxFunkSoundTray_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxFunkSoundTray_obj *__this = (FlxFunkSoundTray_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxFunkSoundTray_obj), true, "FlxFunkSoundTray"));
	*(void **)__this = FlxFunkSoundTray_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxFunkSoundTray_obj::FlxFunkSoundTray_obj()
{
}

void FlxFunkSoundTray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxFunkSoundTray);
	HX_MARK_MEMBER_NAME(_bar,"_bar");
	 ::flixel::_hx_system::ui::FlxSoundTray_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxFunkSoundTray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_bar,"_bar");
	 ::flixel::_hx_system::ui::FlxSoundTray_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxFunkSoundTray_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_bar") ) { return ::hx::Val( _bar ); }
		if (HX_FIELD_EQ(inName,"show") ) { return ::hx::Val( show_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenCenter") ) { return ::hx::Val( screenCenter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxFunkSoundTray_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_bar") ) { _bar=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxFunkSoundTray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_bar",d4,f6,15,3f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxFunkSoundTray_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(FlxFunkSoundTray_obj,_bar),HX_("_bar",d4,f6,15,3f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxFunkSoundTray_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxFunkSoundTray_obj_sMemberFields[] = {
	HX_("_bar",d4,f6,15,3f),
	HX_("update",09,86,05,87),
	HX_("show",fd,d4,52,4c),
	HX_("screenCenter",61,2e,f9,e2),
	::String(null()) };

::hx::Class FlxFunkSoundTray_obj::__mClass;

void FlxFunkSoundTray_obj::__register()
{
	FlxFunkSoundTray_obj _hx_dummy;
	FlxFunkSoundTray_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FlxFunkSoundTray",c7,95,07,6a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxFunkSoundTray_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxFunkSoundTray_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxFunkSoundTray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxFunkSoundTray_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

