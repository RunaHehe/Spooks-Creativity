// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AttachedSprite
#include <AttachedSprite.h>
#endif
#ifndef INCLUDED_CheckSprite
#include <CheckSprite.h>
#endif
#ifndef INCLUDED_Checkbox
#include <Checkbox.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CustomFadeTransition
#include <CustomFadeTransition.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameplayChangersSubstate
#include <GameplayChangersSubstate.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainMenuStateAmmar
#include <MainMenuStateAmmar.h>
#endif
#ifndef INCLUDED_MenuSprite
#include <MenuSprite.h>
#endif
#ifndef INCLUDED_MenuText
#include <MenuText.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StorySprite
#include <StorySprite.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_WeekData
#include <WeekData.h>
#endif
#ifndef INCLUDED_antidebug_DebugSave
#include <antidebug/DebugSave.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEvent
#include <flixel/input/mouse/FlxMouseEvent.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormat
#include <flixel/text/FlxTextFormat.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextFormatMarkerPair
#include <flixel/text/FlxTextFormatMarkerPair.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool
#include <flixel/util/FlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_options_OptionsState
#include <options/OptionsState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9edd12dd35689126_43_new,"MainMenuStateAmmar","new",0x76e5b78b,"MainMenuStateAmmar.new","MainMenuStateAmmar.hx",43,0x38c8c245)
static const ::String _hx_array_data_9f229619_1[] = {
	HX_("freeplay",a0,90,86,22),HX_("badges",f0,77,3f,4b),HX_("options1",13,bf,6e,1e),HX_("options2",14,bf,6e,1e),
};
static const ::String _hx_array_data_9f229619_2[] = {
	HX_("Discord Annoyer",c4,10,a6,66),HX_("Hating Problem",a6,86,0d,38),HX_("Debug",33,c2,4c,6a),HX_("Kaiju Paradise",39,ba,e5,5c),
};
static const int _hx_array_data_9f229619_3[] = {
	(int)1,(int)2,(int)2,
};
static const int _hx_array_data_9f229619_4[] = {
	(int)3,(int)4,(int)7,
};
static const int _hx_array_data_9f229619_5[] = {
	(int)4,(int)5,(int)6,
};
static const int _hx_array_data_9f229619_6[] = {
	(int)4,(int)5,(int)6,
};
static const int _hx_array_data_9f229619_7[] = {
	(int)7,(int)8,(int)8,
};
static const int _hx_array_data_9f229619_8[] = {
	(int)7,(int)9,(int)10,
};
static const int _hx_array_data_9f229619_9[] = {
	(int)5,(int)6,(int)6,
};
static const int _hx_array_data_9f229619_10[] = {
	(int)7,(int)8,(int)8,
};
static const int _hx_array_data_9f229619_11[] = {
	(int)0,(int)0,(int)0,
};
static const int _hx_array_data_9f229619_12[] = {
	(int)0,(int)0,(int)0,
};
static const int _hx_array_data_9f229619_13[] = {
	(int)0,(int)0,(int)0,
};
static const int _hx_array_data_9f229619_14[] = {
	(int)4,(int)6,(int)6,
};
static const int _hx_array_data_9f229619_15[] = {
	(int)8,(int)9,(int)10,
};
static const int _hx_array_data_9f229619_16[] = {
	(int)2,(int)3,(int)4,
};
static const int _hx_array_data_9f229619_17[] = {
	(int)8,(int)9,(int)10,
};
static const int _hx_array_data_9f229619_18[] = {
	(int)7,(int)8,(int)8,
};
static const int _hx_array_data_9f229619_19[] = {
	(int)5,(int)7,(int)9,
};
static const int _hx_array_data_9f229619_20[] = {
	(int)5,(int)7,(int)9,
};
static const int _hx_array_data_9f229619_21[] = {
	(int)3,(int)5,(int)6,
};
static const ::String _hx_array_data_9f229619_22[] = {
	HX_("Filter Curses",89,e9,9a,e1),HX_("Censored Bad Words. You must turn this on!11!1!",1b,e7,87,08),HX_("filterCurses",f9,b3,40,4b),
};
static const ::String _hx_array_data_9f229619_23[] = {
	HX_("Reduce Shakiness",67,3d,22,b8),HX_("Reduce the screen shake Intensity. Useful for People who easily get motion sick",8f,45,06,e4),HX_("reduceShakiness",db,59,2c,0e),
};
static const ::String _hx_array_data_9f229619_24[] = {
	HX_("Silly Bounce",25,29,c6,1f),HX_("Make The whole menu bop to the music",a5,28,56,55),HX_("sillybop",c0,26,0e,6e),
};
static const ::String _hx_array_data_9f229619_25[] = {
	HX_("Disable Promotion",ab,3d,cf,b4),HX_("Hide My Discord Server invite link",5e,ff,4b,72),HX_("nopromotion",c2,d5,1c,55),
};
static const ::String _hx_array_data_9f229619_26[] = {
	HX_("Developer Mode",39,14,d5,99),HX_("Enable developer Mode. Have access to Chart Editor, Change Scripts' Code",da,4a,a3,02),HX_("developer",4a,e3,1e,fd),
};
static const ::String _hx_array_data_9f229619_27[] = {
	HX_("Cute :3",f6,9d,35,b7),HX_("????? What is this setting? I never added this into the source code. Hmmmmmmmmmmmmmm. I wonder what is dis for...",47,64,5c,28),HX_("cute",a3,4c,c9,41),
};
static const ::String _hx_array_data_9f229619_28[] = {
	HX_("Hide Unused",b4,44,13,e7),HX_("Literally Hide Unused Song in Freeplay",a0,c1,ee,7a),HX_("hideunused",58,cb,73,ce),
};
static const ::String _hx_array_data_9f229619_29[] = {
	HX_("Erase Save Data",13,d2,5f,e8),HX_("Hold To Delete Your Save Files. However, this will still keep your developer mode enable.",da,11,76,b1),HX_("delete",2b,c0,d8,6a),
};
static const ::String _hx_array_data_9f229619_30[] = {
	HX_("Mod Options",c0,df,1a,5d),HX_("Engine Options",00,0d,88,6d),
};
static const ::String _hx_array_data_9f229619_31[] = {
	HX_("Story Mode",ae,07,32,40),HX_("Let's Begin the Story!",8b,98,7a,f4),
};
static const ::String _hx_array_data_9f229619_32[] = {
	HX_("Freeplay",c0,4c,38,fc),HX_("Play any song you like!",1e,13,fa,53),
};
static const ::String _hx_array_data_9f229619_33[] = {
	HX_("Badges",10,ec,d3,7f),HX_("Get the Achievements and become cool!",cb,b5,57,22),
};
static const ::String _hx_array_data_9f229619_34[] = {
	HX_("Credits",fa,35,af,e0),HX_("See the cool people who made this mod!                                                     fucking BI  sorry sorry i got too silly :3",01,a5,8d,9f),
};
static const ::String _hx_array_data_9f229619_35[] = {
	HX_("Options",3e,5b,4f,ad),HX_("Change the game's mechanics.",e2,7d,50,9f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_271_create,"MainMenuStateAmmar","create",0x82d40cb1,"MainMenuStateAmmar.create","MainMenuStateAmmar.hx",271,0x38c8c245)
static const ::String _hx_array_data_9f229619_38[] = {
	HX_("Easy",22,b8,e5,2d),HX_("Normal",47,e6,fd,64),HX_("Hard",0b,5b,e1,2f),HX_("Insane",ca,aa,6e,d2),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_695_destroy,"MainMenuStateAmmar","destroy",0x09d285a5,"MainMenuStateAmmar.destroy","MainMenuStateAmmar.hx",695,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_701_transProgress,"MainMenuStateAmmar","transProgress",0x87015ee0,"MainMenuStateAmmar.transProgress","MainMenuStateAmmar.hx",701,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_717_setSongDesc,"MainMenuStateAmmar","setSongDesc",0x947d10b3,"MainMenuStateAmmar.setSongDesc","MainMenuStateAmmar.hx",717,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_730_talking,"MainMenuStateAmmar","talking",0xfbf4afe1,"MainMenuStateAmmar.talking","MainMenuStateAmmar.hx",730,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_750_talking,"MainMenuStateAmmar","talking",0xfbf4afe1,"MainMenuStateAmmar.talking","MainMenuStateAmmar.hx",750,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_831_createMenu,"MainMenuStateAmmar","createMenu",0x68e92af0,"MainMenuStateAmmar.createMenu","MainMenuStateAmmar.hx",831,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_757_createMenu,"MainMenuStateAmmar","createMenu",0x68e92af0,"MainMenuStateAmmar.createMenu","MainMenuStateAmmar.hx",757,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_823_createMenu,"MainMenuStateAmmar","createMenu",0x68e92af0,"MainMenuStateAmmar.createMenu","MainMenuStateAmmar.hx",823,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_971_createFreeplay,"MainMenuStateAmmar","createFreeplay",0x9ce1f271,"MainMenuStateAmmar.createFreeplay","MainMenuStateAmmar.hx",971,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_982_createFreeplay,"MainMenuStateAmmar","createFreeplay",0x9ce1f271,"MainMenuStateAmmar.createFreeplay","MainMenuStateAmmar.hx",982,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_839_createFreeplay,"MainMenuStateAmmar","createFreeplay",0x9ce1f271,"MainMenuStateAmmar.createFreeplay","MainMenuStateAmmar.hx",839,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_946_createFreeplay,"MainMenuStateAmmar","createFreeplay",0x9ce1f271,"MainMenuStateAmmar.createFreeplay","MainMenuStateAmmar.hx",946,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_917_createFreeplay,"MainMenuStateAmmar","createFreeplay",0x9ce1f271,"MainMenuStateAmmar.createFreeplay","MainMenuStateAmmar.hx",917,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1103_createOptions,"MainMenuStateAmmar","createOptions",0xd635b6ad,"MainMenuStateAmmar.createOptions","MainMenuStateAmmar.hx",1103,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_992_createOptions,"MainMenuStateAmmar","createOptions",0xd635b6ad,"MainMenuStateAmmar.createOptions","MainMenuStateAmmar.hx",992,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1021_createOptions,"MainMenuStateAmmar","createOptions",0xd635b6ad,"MainMenuStateAmmar.createOptions","MainMenuStateAmmar.hx",1021,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1094_createOptions,"MainMenuStateAmmar","createOptions",0xd635b6ad,"MainMenuStateAmmar.createOptions","MainMenuStateAmmar.hx",1094,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1167_createBadges,"MainMenuStateAmmar","createBadges",0x9b901381,"MainMenuStateAmmar.createBadges","MainMenuStateAmmar.hx",1167,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1110_createBadges,"MainMenuStateAmmar","createBadges",0x9b901381,"MainMenuStateAmmar.createBadges","MainMenuStateAmmar.hx",1110,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1159_createBadges,"MainMenuStateAmmar","createBadges",0x9b901381,"MainMenuStateAmmar.createBadges","MainMenuStateAmmar.hx",1159,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1228_createCredits,"MainMenuStateAmmar","createCredits",0x09959169,"MainMenuStateAmmar.createCredits","MainMenuStateAmmar.hx",1228,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1174_createCredits,"MainMenuStateAmmar","createCredits",0x09959169,"MainMenuStateAmmar.createCredits","MainMenuStateAmmar.hx",1174,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1220_createCredits,"MainMenuStateAmmar","createCredits",0x09959169,"MainMenuStateAmmar.createCredits","MainMenuStateAmmar.hx",1220,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1235_update,"MainMenuStateAmmar","update",0x8dca2bbe,"MainMenuStateAmmar.update","MainMenuStateAmmar.hx",1235,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1299_backItem,"MainMenuStateAmmar","backItem",0xc640a7cf,"MainMenuStateAmmar.backItem","MainMenuStateAmmar.hx",1299,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1294_backItem,"MainMenuStateAmmar","backItem",0xc640a7cf,"MainMenuStateAmmar.backItem","MainMenuStateAmmar.hx",1294,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1309_backItem,"MainMenuStateAmmar","backItem",0xc640a7cf,"MainMenuStateAmmar.backItem","MainMenuStateAmmar.hx",1309,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1305_backItem,"MainMenuStateAmmar","backItem",0xc640a7cf,"MainMenuStateAmmar.backItem","MainMenuStateAmmar.hx",1305,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1325_backItem,"MainMenuStateAmmar","backItem",0xc640a7cf,"MainMenuStateAmmar.backItem","MainMenuStateAmmar.hx",1325,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1280_backItem,"MainMenuStateAmmar","backItem",0xc640a7cf,"MainMenuStateAmmar.backItem","MainMenuStateAmmar.hx",1280,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1286_backItem,"MainMenuStateAmmar","backItem",0xc640a7cf,"MainMenuStateAmmar.backItem","MainMenuStateAmmar.hx",1286,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1320_backItem,"MainMenuStateAmmar","backItem",0xc640a7cf,"MainMenuStateAmmar.backItem","MainMenuStateAmmar.hx",1320,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1352_holdOption,"MainMenuStateAmmar","holdOption",0x62a92e49,"MainMenuStateAmmar.holdOption","MainMenuStateAmmar.hx",1352,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1376_selectOption,"MainMenuStateAmmar","selectOption",0x3dae2306,"MainMenuStateAmmar.selectOption","MainMenuStateAmmar.hx",1376,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1415_selectItem,"MainMenuStateAmmar","selectItem",0xc25d5e64,"MainMenuStateAmmar.selectItem","MainMenuStateAmmar.hx",1415,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1449_selectItem,"MainMenuStateAmmar","selectItem",0xc25d5e64,"MainMenuStateAmmar.selectItem","MainMenuStateAmmar.hx",1449,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1518_itemMove,"MainMenuStateAmmar","itemMove",0x62de96b9,"MainMenuStateAmmar.itemMove","MainMenuStateAmmar.hx",1518,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1524_itemMove,"MainMenuStateAmmar","itemMove",0x62de96b9,"MainMenuStateAmmar.itemMove","MainMenuStateAmmar.hx",1524,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1530_itemMove,"MainMenuStateAmmar","itemMove",0x62de96b9,"MainMenuStateAmmar.itemMove","MainMenuStateAmmar.hx",1530,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1538_itemMove,"MainMenuStateAmmar","itemMove",0x62de96b9,"MainMenuStateAmmar.itemMove","MainMenuStateAmmar.hx",1538,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1517_itemMove,"MainMenuStateAmmar","itemMove",0x62de96b9,"MainMenuStateAmmar.itemMove","MainMenuStateAmmar.hx",1517,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1550_changeStoryScene,"MainMenuStateAmmar","changeStoryScene",0x5e4c389c,"MainMenuStateAmmar.changeStoryScene","MainMenuStateAmmar.hx",1550,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1631_createStorySprites,"MainMenuStateAmmar","createStorySprites",0xec2473aa,"MainMenuStateAmmar.createStorySprites","MainMenuStateAmmar.hx",1631,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1571_createStorySprites,"MainMenuStateAmmar","createStorySprites",0xec2473aa,"MainMenuStateAmmar.createStorySprites","MainMenuStateAmmar.hx",1571,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1629_createStorySprites,"MainMenuStateAmmar","createStorySprites",0xec2473aa,"MainMenuStateAmmar.createStorySprites","MainMenuStateAmmar.hx",1629,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1639_sortByOrder,"MainMenuStateAmmar","sortByOrder",0x3473d1a4,"MainMenuStateAmmar.sortByOrder","MainMenuStateAmmar.hx",1639,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1643_playSong,"MainMenuStateAmmar","playSong",0xf9ecc4de,"MainMenuStateAmmar.playSong","MainMenuStateAmmar.hx",1643,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1684_playSong,"MainMenuStateAmmar","playSong",0xf9ecc4de,"MainMenuStateAmmar.playSong","MainMenuStateAmmar.hx",1684,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1692_playSong,"MainMenuStateAmmar","playSong",0xf9ecc4de,"MainMenuStateAmmar.playSong","MainMenuStateAmmar.hx",1692,0x38c8c245)
static const ::String _hx_array_data_9f229619_105[] = {
	HX_("Easy",22,b8,e5,2d),HX_("Normal",47,e6,fd,64),HX_("Hard",0b,5b,e1,2f),HX_("Insane",ca,aa,6e,d2),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1740_playStory,"MainMenuStateAmmar","playStory",0xb88e5acc,"MainMenuStateAmmar.playStory","MainMenuStateAmmar.hx",1740,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1707_playStory,"MainMenuStateAmmar","playStory",0xb88e5acc,"MainMenuStateAmmar.playStory","MainMenuStateAmmar.hx",1707,0x38c8c245)
static const ::String _hx_array_data_9f229619_109[] = {
	HX_("Easy",22,b8,e5,2d),HX_("Normal",47,e6,fd,64),HX_("Hard",0b,5b,e1,2f),HX_("Insane",ca,aa,6e,d2),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1763_changeItem,"MainMenuStateAmmar","changeItem",0x2e0b1ed8,"MainMenuStateAmmar.changeItem","MainMenuStateAmmar.hx",1763,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1745_changeItem,"MainMenuStateAmmar","changeItem",0x2e0b1ed8,"MainMenuStateAmmar.changeItem","MainMenuStateAmmar.hx",1745,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1833_changeDiff,"MainMenuStateAmmar","changeDiff",0x2ab4b5ca,"MainMenuStateAmmar.changeDiff","MainMenuStateAmmar.hx",1833,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1877_checkSongFinish,"MainMenuStateAmmar","checkSongFinish",0x5002c89b,"MainMenuStateAmmar.checkSongFinish","MainMenuStateAmmar.hx",1877,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1881_beatHit,"MainMenuStateAmmar","beatHit",0x59514328,"MainMenuStateAmmar.beatHit","MainMenuStateAmmar.hx",1881,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1889_popLocked,"MainMenuStateAmmar","popLocked",0xe9d0f2e6,"MainMenuStateAmmar.popLocked","MainMenuStateAmmar.hx",1889,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1901_difficultyDraw,"MainMenuStateAmmar","difficultyDraw",0xb5dbc294,"MainMenuStateAmmar.difficultyDraw","MainMenuStateAmmar.hx",1901,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1946_displayList,"MainMenuStateAmmar","displayList",0x638345eb,"MainMenuStateAmmar.displayList","MainMenuStateAmmar.hx",1946,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_1944_displayList,"MainMenuStateAmmar","displayList",0x638345eb,"MainMenuStateAmmar.displayList","MainMenuStateAmmar.hx",1944,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_2012_buttonControls,"MainMenuStateAmmar","buttonControls",0xd46dc93d,"MainMenuStateAmmar.buttonControls","MainMenuStateAmmar.hx",2012,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_2103_dragSystem,"MainMenuStateAmmar","dragSystem",0xa950ca38,"MainMenuStateAmmar.dragSystem","MainMenuStateAmmar.hx",2103,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_2112_dragSystem,"MainMenuStateAmmar","dragSystem",0xa950ca38,"MainMenuStateAmmar.dragSystem","MainMenuStateAmmar.hx",2112,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_2134_getSwipeEnable,"MainMenuStateAmmar","getSwipeEnable",0x1671185c,"MainMenuStateAmmar.getSwipeEnable","MainMenuStateAmmar.hx",2134,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_2138_closeSubState,"MainMenuStateAmmar","closeSubState",0x1226c334,"MainMenuStateAmmar.closeSubState","MainMenuStateAmmar.hx",2138,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_46_boot,"MainMenuStateAmmar","boot",0x8a33e2a7,"MainMenuStateAmmar.boot","MainMenuStateAmmar.hx",46,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_84_boot,"MainMenuStateAmmar","boot",0x8a33e2a7,"MainMenuStateAmmar.boot","MainMenuStateAmmar.hx",84,0x38c8c245)
static const ::String _hx_array_data_9f229619_128[] = {
	HX_("easy",02,8c,0c,43),HX_("normal",27,72,69,30),HX_("hard",eb,2e,08,45),HX_("insane",aa,36,da,9d),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_122_boot,"MainMenuStateAmmar","boot",0x8a33e2a7,"MainMenuStateAmmar.boot","MainMenuStateAmmar.hx",122,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_9edd12dd35689126_253_boot,"MainMenuStateAmmar","boot",0x8a33e2a7,"MainMenuStateAmmar.boot","MainMenuStateAmmar.hx",253,0x38c8c245)

void MainMenuStateAmmar_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_43_new)
HXLINE(2101)		this->swipeAvaiable = ::Array_obj< ::String >::fromData( _hx_array_data_9f229619_1,4);
HXLINE(2099)		this->dragEnable = true;
HXLINE(2098)		this->isSwiping = false;
HXLINE(2097)		this->lastSelect = 0;
HXLINE(2096)		this->swipeDistance = ((Float)0);
HXLINE(2095)		this->mouseJustClick = false;
HXLINE(2011)		this->holdOptionPass = 0;
HXLINE(1943)		this->lastCurSelect = 0;
HXLINE(1375)		this->haveToReset = false;
HXLINE( 728)		this->prevTalk = HX_("",00,00,00,00);
HXLINE( 262)		this->openWithCute = false;
HXLINE( 257)		this->holdOptionTime = ((Float)0);
HXLINE( 255)		this->progress = ((Float)0);
HXLINE( 252)		this->selectedSomething = true;
HXLINE( 234)		this->lastDiffPoint = 0;
HXLINE( 233)		this->difficultyPointLerp = ((Float)0);
HXLINE( 232)		this->difficultyPoint = 0;
HXLINE( 228)		this->curPage = HX_("main",39,38,56,48);
HXLINE( 216)		this->creditsList = ::Array_obj< ::Dynamic>::__new(9)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("Spook",ae,a6,9e,14))->init(1,HX_("spook",ce,36,71,81))->init(2,HX_("Main Programmer, Main Charter, Director",15,1d,ea,d1))->init(3,HX_("https://spookupt.carrd.co/",67,da,5c,4f)))->init(1,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("uwenalil",59,9e,17,71))->init(1,HX_("dave",ec,57,63,42))->init(2,HX_("Programmer, Visual Artist, Charter, Tester",2d,ce,3c,7d))->init(3,HX_("https://uwenalil.netlify.app/uwenalil/links",18,65,11,d5)))->init(2,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("An Ammar",bf,8d,de,e4))->init(1,HX_("ammar",32,91,3d,22))->init(2,HX_("Programmer, Visual Artist, Tester",90,a7,4e,69))->init(3,HX_("https://www.youtube.com/@anammar",64,37,0c,e0)))->init(3,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("Luna",1c,5f,95,32))->init(1,HX_("luna",fc,32,bc,47))->init(2,HX_("Tester, 32bit Tester",c4,f3,e8,d9))->init(3,HX_("https://www.youtube.com/@yoitsluna2001",cc,a5,9e,ba)))->init(4,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("tututoller",aa,e0,d3,08))->init(1,HX_("tutu",42,ed,05,4d))->init(2,HX_("Main Artist, Main Animator, Programmer, Charter, Visual Artist, Tester",05,36,86,c3))->init(3,HX_("https://x.com/tututoller",fd,64,f0,a8)))->init(5,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("Mintoctoling",c7,cb,70,4b))->init(1,HX_("mint",a2,4e,5c,48))->init(2,HX_("Main Editor, Artist, Tester",e2,70,58,6c))->init(3,HX_("https://youtube.com/@mintoctoling",5f,b5,12,ba)))->init(6,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("Tarzr",3d,58,1d,9e))->init(1,HX_("duck",79,74,72,42))->init(2,HX_("Tester",5f,cd,ce,09))->init(3,HX_("https://www.youtube.com/@new1_on",4c,62,8a,e6)))->init(7,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("Looky",1a,5d,27,0c))->init(1,HX_("looky",3a,ed,f9,78))->init(2,HX_("Tester",5f,cd,ce,09))->init(3,HX_("https://www.youtube.com/channel/UCI165PBPVnyQmTvtlJZ-kAw",7d,1a,d3,89)))->init(8,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("Vision",08,88,17,24))->init(1,HX_("vision",e8,13,83,ef))->init(2,HX_("Tester",5f,cd,ce,09))->init(3,HX_("https://www.youtube.com/@Vision1567",4e,42,b3,67)));
HXLINE( 203)		this->badgesList = ::Array_obj< ::Dynamic>::__new(9)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Social Expert",fd,12,72,0e))->init(1,HX_("social",ad,03,45,26))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Complete the Discord Annoyer Week",26,87,5b,41))->init(1,HX_("Completed the Discord Annoyer Week",54,5c,3b,31))))->init(1,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Hater Beater",3b,58,bc,23))->init(1,HX_("hater",88,64,22,22))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Complete the Hating Problem Week",58,b2,9b,47))->init(1,HX_("Completed the Hating Problem Week",ea,1c,79,f9))))->init(2,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Debug Access",11,1c,06,c9))->init(1,HX_("ammar",32,91,3d,22))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Have access to Debug",32,4a,cd,32))->init(1,HX_("Successfully have access to debug",6b,3f,64,64))))->init(3,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Furry Conversation",d9,6a,69,d0))->init(1,HX_("furry",ca,06,8c,08))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("The suspicious option",09,7e,d5,e1))->init(1,HX_("Completed the Kaiju Paradise Week",77,14,7e,3f))))->init(4,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Unloseable",68,11,77,08))->init(1,HX_("myselfghost",57,fb,0c,fc))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Complete Myself without ghost tapping on Normal Difficulty",48,65,81,71))->init(1,HX_("Completed Myself without ghost tapping on Normal Difficulty",5a,3e,3f,b4))))->init(5,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Relaxing Song",63,36,14,8a))->init(1,HX_("relaxsong",65,a2,81,38))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Complete The Easiest Song With Easy Difficulty",e8,b9,2d,9a))->init(1,HX_("Completed The Easiest Song (Discord Annoyer) With Easy Difficulty",ad,3e,b2,5e))))->init(6,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Dark Google",23,6e,0f,b8))->init(1,HX_("darkgoogle",af,d4,68,46))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Complete Google on Hard Difficulty",2f,08,3b,a9))->init(1,HX_("Completed Google on Hard Difficulty",41,bb,35,9d))))->init(7,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Unbeatable User",62,70,7c,1d))->init(1,HX_("twitterhard",de,aa,c1,59))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Complete Twitter Argument on Hard Difficulty",de,99,99,50))->init(1,HX_("Completed Twitter Argument on Hard Difficulty.\nwowwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",f3,2f,f8,11))))->init(8,::cpp::VirtualArray_obj::__new(3)->init(0,HX_("Ammar is a Furry",c3,57,38,a7))->init(1,HX_("ammarfurry",58,e0,58,66))->init(2,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("Ammar Furry",1c,1d,c9,00))->init(1,HX_("Completed Furry Femboy song",2c,74,3c,13))));
HXLINE( 201)		this->weeksList = ::Array_obj< ::String >::fromData( _hx_array_data_9f229619_2,4);
HXLINE( 150)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 150)		_g->set(HX_("Discord Annoyer",c4,10,a6,66),::Array_obj< int >::fromData( _hx_array_data_9f229619_3,3));
HXDLIN( 150)		_g->set(HX_("Shut Up",c7,38,3a,bb),::Array_obj< int >::fromData( _hx_array_data_9f229619_4,3));
HXDLIN( 150)		_g->set(HX_("Depression",c6,d2,1a,bd),::Array_obj< int >::fromData( _hx_array_data_9f229619_5,3));
HXDLIN( 150)		_g->set(HX_("Moderator",e5,1f,0e,c4),::Array_obj< int >::fromData( _hx_array_data_9f229619_6,3));
HXDLIN( 150)		_g->set(HX_("Hate Comment",e9,1c,2a,22),::Array_obj< int >::fromData( _hx_array_data_9f229619_7,3));
HXDLIN( 150)		_g->set(HX_("Twitter Argument",0a,7a,44,92),::Array_obj< int >::fromData( _hx_array_data_9f229619_8,3));
HXDLIN( 150)		_g->set(HX_("Google",d9,37,7e,96),::Array_obj< int >::fromData( _hx_array_data_9f229619_9,3));
HXDLIN( 150)		_g->set(HX_("Big Problem",bf,2b,4a,db),::Array_obj< int >::fromData( _hx_array_data_9f229619_10,3));
HXDLIN( 150)		_g->set(HX_("Chaos",20,0a,e1,d8),::Array_obj< int >::fromData( _hx_array_data_9f229619_11,3));
HXDLIN( 150)		_g->set(HX_("Owen Was Her",af,3c,bd,0f),::Array_obj< int >::fromData( _hx_array_data_9f229619_12,3));
HXDLIN( 150)		_g->set(HX_("Death By Notes",c4,03,c5,6a),::Array_obj< int >::fromData( _hx_array_data_9f229619_13,3));
HXDLIN( 150)		_g->set(HX_("No Debug",34,91,e5,aa),::Array_obj< int >::fromData( _hx_array_data_9f229619_14,3));
HXDLIN( 150)		_g->set(HX_("Myself",18,85,47,c1),::Array_obj< int >::fromData( _hx_array_data_9f229619_15,3));
HXDLIN( 150)		_g->set(HX_("Furry Appeared",8a,fe,20,ef),::Array_obj< int >::fromData( _hx_array_data_9f229619_16,3));
HXDLIN( 150)		_g->set(HX_("Protogen",c8,12,18,da),::Array_obj< int >::fromData( _hx_array_data_9f229619_17,3));
HXDLIN( 150)		_g->set(HX_("Furry Femboy",54,c3,fa,18),::Array_obj< int >::fromData( _hx_array_data_9f229619_18,3));
HXDLIN( 150)		_g->set(HX_("Programming An Ammar",c6,43,58,9e),::Array_obj< int >::fromData( _hx_array_data_9f229619_19,3));
HXDLIN( 150)		_g->set(HX_("Identity Crisis",25,33,3c,14),::Array_obj< int >::fromData( _hx_array_data_9f229619_20,3));
HXDLIN( 150)		_g->set(HX_("Note Nova",9a,90,e8,ec),::Array_obj< int >::fromData( _hx_array_data_9f229619_21,3));
HXDLIN( 150)		this->songsDifficulty = _g;
HXLINE( 108)		this->optionsList = ::Array_obj< ::Dynamic>::__new(8)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_22,3))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_23,3))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_24,3))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_25,3))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_26,3))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_27,3))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_28,3))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_29,3));
HXLINE( 105)		this->optionsMode = ::Array_obj< ::String >::fromData( _hx_array_data_9f229619_30,2);
HXLINE(  97)		this->menuList = ::Array_obj< ::Dynamic>::__new(5)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_31,2))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_32,2))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_33,2))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_34,2))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_9f229619_35,2));
HXLINE(  88)		 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  88)		_g1->set(HX_("main",39,38,56,48),-7283929);
HXDLIN(  88)		_g1->set(HX_("story",f5,13,16,84),-16761587);
HXDLIN(  88)		_g1->set(HX_("freeplay",a0,90,86,22),-15299);
HXDLIN(  88)		_g1->set(HX_("options",5e,33,fe,df),-5855578);
HXDLIN(  88)		_g1->set(HX_("badge",23,c7,ae,ad),-9699433);
HXDLIN(  88)		_g1->set(HX_("credits",1a,0e,5e,13),-16741377);
HXDLIN(  88)		this->menuColor = _g1;
HXLINE(  86)		this->diffLockYOffset = ((Float)0);
HXLINE(  85)		this->diffSelect = 1;
HXLINE(  83)		this->diffROffset = ((Float)0);
HXLINE(  82)		this->diffLOffset = ((Float)0);
HXLINE(  81)		this->hoverDifficulty = false;
HXLINE(  80)		this->difficulty = HX_("Normal",47,e6,fd,64);
HXLINE(  78)		this->weeks = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  76)		this->weekHatingProblem = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  75)		this->weekDebug = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  74)		this->weekKaijuParadise = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  73)		this->weekDiscordAnnoyer = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  51)		this->curSelected = 0;
HXLINE(  43)		super::__construct(TransIn,TransOut);
            	}

Dynamic MainMenuStateAmmar_obj::__CreateEmpty() { return new MainMenuStateAmmar_obj; }

void *MainMenuStateAmmar_obj::_hx_vtable = 0;

Dynamic MainMenuStateAmmar_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainMenuStateAmmar_obj > _hx_result = new MainMenuStateAmmar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MainMenuStateAmmar_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5dda833d) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x5dda833d;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MainMenuStateAmmar_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_271_create)
HXLINE( 274)		::Paths_obj::pushGlobalMods();
HXLINE( 276)		::WeekData_obj::loadTheFirstEnabledMod();
HXLINE( 280)		::String _hx_tmp;
HXDLIN( 280)		if (::ClientPrefs_obj::cute) {
HXLINE( 280)			_hx_tmp = HX_("Cute ",fd,31,87,e1);
            		}
            		else {
HXLINE( 280)			_hx_tmp = HX_("",00,00,00,00);
            		}
HXDLIN( 280)		::DiscordClient_obj::changePresence(((HX_("In the ",8a,20,af,90) + _hx_tmp) + HX_("Menus",d4,15,f1,98)),null(),null(),null(),null());
HXLINE( 283)		::Paths_obj::clearStoredMemory(null());
HXLINE( 284)		::Paths_obj::clearUnusedMemory();
HXLINE( 285)		::WeekData_obj::reloadWeekFiles(true);
HXLINE( 286)		::Highscore_obj::calculateProgress();
HXLINE( 287)		this->progress = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("progress",ad,f7,2a,86),::hx::paccDynamic)) );
HXLINE( 288)		this->openWithCute = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cute",a3,4c,c9,41),::hx::paccDynamic)) );
HXLINE( 290)		if (::ClientPrefs_obj::cute) {
HXLINE( 291)			this->menuColor->set(HX_("main",39,38,56,48),-481032);
HXLINE( 292)			this->optionsList->__get(5).StaticCast< ::Array< ::String > >()[1] = HX_("I added this!",4c,7a,ba,1d);
            		}
HXLINE( 294)		if (!(::ClientPrefs_obj::developer)) {
HXLINE( 296)			int _g = 0;
HXDLIN( 296)			int _g1 = (this->optionsList->length - 1);
HXDLIN( 296)			while((_g < _g1)){
HXLINE( 296)				_g = (_g + 1);
HXDLIN( 296)				int i = (_g - 1);
HXLINE( 297)				if ((this->optionsList->__get(i).StaticCast< ::Array< ::String > >()->__get(2) == HX_("hideunused",58,cb,73,ce))) {
HXLINE( 298)					this->optionsList->remove(this->optionsList->__get(i).StaticCast< ::Array< ::String > >());
            				}
            			}
            		}
HXLINE( 301)		if (::hx::IsNotEq( ::flixel::FlxG_obj::save->data->__Field(HX_("prevVersion",65,64,3a,e3),::hx::paccDynamic),HX_("4.2",78,9d,27,00) )) {
HXLINE( 303)			::haxe::Log_obj::trace(HX_("Old Version detected",63,b7,a6,60),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),303,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("create",fc,66,0f,7c)));
            		}
HXLINE( 309)		this->camBG =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 310)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 311)		this->camOther =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 312)		{
HXLINE( 312)			 ::flixel::FlxCamera _hx_tmp1 = this->camHUD;
HXDLIN( 312)			_hx_tmp1->bgColor = (_hx_tmp1->bgColor & 16777215);
HXDLIN( 312)			 ::flixel::FlxCamera _hx_tmp2 = this->camHUD;
HXDLIN( 312)			_hx_tmp2->bgColor = (_hx_tmp2->bgColor | 0);
            		}
HXLINE( 313)		{
HXLINE( 313)			 ::flixel::FlxCamera _hx_tmp3 = this->camOther;
HXDLIN( 313)			_hx_tmp3->bgColor = (_hx_tmp3->bgColor & 16777215);
HXDLIN( 313)			 ::flixel::FlxCamera _hx_tmp4 = this->camOther;
HXDLIN( 313)			_hx_tmp4->bgColor = (_hx_tmp4->bgColor | 0);
            		}
HXLINE( 315)		::flixel::FlxG_obj::cameras->reset(this->camBG);
HXLINE( 316)		::flixel::FlxG_obj::cameras->add(this->camHUD,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 317)		::flixel::FlxG_obj::cameras->add(this->camOther,false).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 318)		::flixel::FlxG_obj::cameras->setDefaultDrawTarget(this->camBG,true);
HXLINE( 320)		this->bgFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 321)		this->bgFollow->setPosition(((Float)640.),((Float)360.));
HXLINE( 322)		this->hudFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 323)		this->hudFollow->setPosition(((Float)640.),((Float)360.));
HXLINE( 324)		this->camBG->follow(this->bgFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),1);
HXLINE( 325)		this->camHUD->follow(this->hudFollow,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),1);
HXLINE( 326)		::CustomFadeTransition_obj::nextCamera = this->camHUD;
HXLINE( 328)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE( 330)		this->progressBG =  ::AttachedSprite_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 331)		this->progressBG->makeGraphic(810,20,-16777216,null(),null());
HXLINE( 332)		{
HXLINE( 332)			 ::flixel::math::FlxBasePoint this1 = this->progressBG->scrollFactor;
HXDLIN( 332)			this1->set_x(( (Float)(0) ));
HXDLIN( 332)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 333)		this->progressBG->xAdd = ( (Float)(-5) );
HXLINE( 334)		this->progressBG->yAdd = ( (Float)(-5) );
HXLINE( 335)		this->progressBG->set_camera(this->camHUD);
HXLINE( 336)		this->add(this->progressBG);
HXLINE( 338)		this->progressBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,0,-50,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),800,10,null(),HX_("",00,00,00,00),0,1,null());
HXLINE( 339)		{
HXLINE( 339)			 ::flixel::math::FlxBasePoint this2 = this->progressBar->scrollFactor;
HXDLIN( 339)			this2->set_x(( (Float)(0) ));
HXDLIN( 339)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 340)		this->progressBar->createFilledBar(-16777216,-1,null(),null());
HXLINE( 341)		this->progressBar->set_numDivisions(300);
HXLINE( 342)		this->progressBar->set_alpha(( (Float)(1) ));
HXLINE( 343)		this->progressBar->set_percent(( (Float)(0) ));
HXLINE( 344)		this->add(this->progressBar);
HXLINE( 345)		{
HXLINE( 345)			 ::flixel::ui::FlxBar _this = this->progressBar;
HXDLIN( 345)			int axes = 1;
HXDLIN( 345)			bool _hx_tmp5;
HXDLIN( 345)			if ((axes != 1)) {
HXLINE( 345)				_hx_tmp5 = (axes == 17);
            			}
            			else {
HXLINE( 345)				_hx_tmp5 = true;
            			}
HXDLIN( 345)			if (_hx_tmp5) {
HXLINE( 345)				int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN( 345)				_this->set_x(((( (Float)(_hx_tmp6) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 345)			bool _hx_tmp7;
HXDLIN( 345)			if ((axes != 16)) {
HXLINE( 345)				_hx_tmp7 = (axes == 17);
            			}
            			else {
HXLINE( 345)				_hx_tmp7 = true;
            			}
HXDLIN( 345)			if (_hx_tmp7) {
HXLINE( 345)				int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN( 345)				_this->set_y(((( (Float)(_hx_tmp8) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 346)		this->progressBar->set_camera(this->camHUD);
HXLINE( 348)		this->progressBar->colorTransform->redMultiplier = ( (Float)(1) );
HXLINE( 349)		this->progressBar->colorTransform->greenMultiplier = ( (Float)(0) );
HXLINE( 350)		this->progressBar->colorTransform->blueMultiplier = ( (Float)(0) );
HXLINE( 352)		this->progressTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,400,HX_("Game Progress",9b,21,0a,bc),null(),null());
HXLINE( 353)		 ::flixel::text::FlxText _hx_tmp9 = this->progressTxt;
HXDLIN( 353)		::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("gaposiss.ttf",c7,20,63,f0)));
HXDLIN( 353)		::String _hx_tmp10;
HXDLIN( 353)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 353)			_hx_tmp10 = file;
            		}
            		else {
HXLINE( 353)			_hx_tmp10 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("gaposiss.ttf",c7,20,63,f0));
            		}
HXDLIN( 353)		_hx_tmp9->setFormat(_hx_tmp10,20,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 354)		this->progressTxt->set_borderSize(( (Float)(2) ));
HXLINE( 355)		{
HXLINE( 355)			 ::flixel::math::FlxBasePoint this3 = this->progressTxt->scrollFactor;
HXDLIN( 355)			this3->set_x(( (Float)(0) ));
HXDLIN( 355)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 356)		this->add(this->progressTxt);
HXLINE( 357)		this->progressTxt->setPosition(this->progressBar->x,(this->progressBar->y - ( (Float)(24) )));
HXLINE( 358)		this->progressTxt->set_camera(this->camHUD);
HXLINE( 360)		this->progressBG->sprTracker = this->progressBar;
HXLINE( 362)		if ((this->progress <= 0)) {
HXLINE( 363)			this->progressBG->set_visible(false);
HXLINE( 364)			this->progressBar->set_visible(false);
HXLINE( 365)			this->progressTxt->set_visible(false);
            		}
HXLINE( 368)		this->transProgress(true);
HXLINE( 370)		this->bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null())->makeGraphic(1300,800,-1,null(),null());
HXLINE( 371)		{
HXLINE( 371)			 ::flixel::math::FlxBasePoint this4 = this->bg->scrollFactor;
HXDLIN( 371)			this4->set_x(( (Float)(0) ));
HXDLIN( 371)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 372)		{
HXLINE( 372)			 ::flixel::FlxSprite _this1 = this->bg;
HXDLIN( 372)			int axes1 = 17;
HXDLIN( 372)			bool _hx_tmp11;
HXDLIN( 372)			if ((axes1 != 1)) {
HXLINE( 372)				_hx_tmp11 = (axes1 == 17);
            			}
            			else {
HXLINE( 372)				_hx_tmp11 = true;
            			}
HXDLIN( 372)			if (_hx_tmp11) {
HXLINE( 372)				int _hx_tmp12 = ::flixel::FlxG_obj::width;
HXDLIN( 372)				_this1->set_x(((( (Float)(_hx_tmp12) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 372)			bool _hx_tmp13;
HXDLIN( 372)			if ((axes1 != 16)) {
HXLINE( 372)				_hx_tmp13 = (axes1 == 17);
            			}
            			else {
HXLINE( 372)				_hx_tmp13 = true;
            			}
HXDLIN( 372)			if (_hx_tmp13) {
HXLINE( 372)				int _hx_tmp14 = ::flixel::FlxG_obj::height;
HXDLIN( 372)				_this1->set_y(((( (Float)(_hx_tmp14) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 373)		 ::flixel::FlxSprite _hx_tmp15 = this->bg;
HXDLIN( 373)		_hx_tmp15->set_color(this->menuColor->get_int(HX_("main",39,38,56,48)));
HXLINE( 374)		this->bg->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camBG));
HXLINE( 375)		this->add(this->bg);
HXLINE( 377)		::String library = null();
HXDLIN( 377)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("ammar/blackDots",cc,08,2a,a6),library);
HXDLIN( 377)		this->dots =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,returnAsset,1,null(),null());
HXLINE( 378)		this->dots->velocity->set_x(( (Float)(24) ));
HXLINE( 379)		{
HXLINE( 379)			 ::flixel::addons::display::FlxBackdrop _this2 = this->dots;
HXDLIN( 379)			int axes2 = 17;
HXDLIN( 379)			bool _hx_tmp16;
HXDLIN( 379)			if ((axes2 != 1)) {
HXLINE( 379)				_hx_tmp16 = (axes2 == 17);
            			}
            			else {
HXLINE( 379)				_hx_tmp16 = true;
            			}
HXDLIN( 379)			if (_hx_tmp16) {
HXLINE( 379)				int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN( 379)				_this2->set_x(((( (Float)(_hx_tmp17) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 379)			bool _hx_tmp18;
HXDLIN( 379)			if ((axes2 != 16)) {
HXLINE( 379)				_hx_tmp18 = (axes2 == 17);
            			}
            			else {
HXLINE( 379)				_hx_tmp18 = true;
            			}
HXDLIN( 379)			if (_hx_tmp18) {
HXLINE( 379)				int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN( 379)				_this2->set_y(((( (Float)(_hx_tmp19) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 380)		this->dots->set_alpha(((Float)0.25));
HXLINE( 381)		this->dots->set_y(( (Float)(200) ));
HXLINE( 382)		this->dots->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camBG));
HXLINE( 383)		{
HXLINE( 383)			 ::flixel::math::FlxBasePoint this5 = this->dots->scrollFactor;
HXDLIN( 383)			this5->set_x(( (Float)(1) ));
HXDLIN( 383)			this5->set_y(((Float)3.5));
            		}
HXLINE( 384)		this->add(this->dots);
HXLINE( 386)		this->ammar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1400,227,null());
HXLINE( 387)		 ::flixel::FlxSprite _hx_tmp20 = this->ammar;
HXDLIN( 387)		::String key;
HXDLIN( 387)		if (::ClientPrefs_obj::cute) {
HXLINE( 387)			key = HX_("Cute",c3,78,a2,2c);
            		}
            		else {
HXLINE( 387)			key = HX_("",00,00,00,00);
            		}
HXDLIN( 387)		::String key1 = (HX_("ammar/ammar",55,09,75,a2) + key);
HXDLIN( 387)		::String library1 = null();
HXDLIN( 387)		 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(key1,null());
HXDLIN( 387)		bool xmlExists = false;
HXDLIN( 387)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key1) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 387)			xmlExists = true;
            		}
HXDLIN( 387)		 ::Dynamic _hx_tmp21;
HXDLIN( 387)		if (::hx::IsNotNull( imageLoaded )) {
HXLINE( 387)			_hx_tmp21 = imageLoaded;
            		}
            		else {
HXLINE( 387)			 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(key1,library1);
HXDLIN( 387)			_hx_tmp21 = returnAsset1;
            		}
HXDLIN( 387)		 ::Dynamic _hx_tmp22;
HXDLIN( 387)		if (xmlExists) {
HXLINE( 387)			_hx_tmp22 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key1) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE( 387)			_hx_tmp22 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key1) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1);
            		}
HXDLIN( 387)		_hx_tmp20->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp21,_hx_tmp22));
HXLINE( 389)		this->ammar->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("idle",14,a7,b3,45),6,true,null(),null());
HXLINE( 390)		Float _hx_tmp23;
HXDLIN( 390)		if (::ClientPrefs_obj::cute) {
HXLINE( 390)			_hx_tmp23 = ( (Float)(20) );
            		}
            		else {
HXLINE( 390)			_hx_tmp23 = ( (Float)(20) );
            		}
HXDLIN( 390)		this->ammar->animation->addByPrefix(HX_("talking",36,57,a8,16),HX_("talking",36,57,a8,16),_hx_tmp23,true,null(),null());
HXLINE( 391)		this->ammar->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 392)		if (::ClientPrefs_obj::cute) {
HXLINE( 392)			 ::flixel::FlxSprite _hx_tmp24 = this->ammar;
HXDLIN( 392)			_hx_tmp24->setGraphicSize(::Std_obj::_hx_int((this->ammar->get_width() * ((Float)0.9))),null());
            		}
HXLINE( 393)		this->ammar->updateHitbox();
HXLINE( 394)		if (::ClientPrefs_obj::cute) {
HXLINE( 395)			{
HXLINE( 395)				 ::flixel::FlxSprite _this3 = this->ammar;
HXDLIN( 395)				int axes3 = 17;
HXDLIN( 395)				bool _hx_tmp25;
HXDLIN( 395)				if ((axes3 != 1)) {
HXLINE( 395)					_hx_tmp25 = (axes3 == 17);
            				}
            				else {
HXLINE( 395)					_hx_tmp25 = true;
            				}
HXDLIN( 395)				if (_hx_tmp25) {
HXLINE( 395)					int _hx_tmp26 = ::flixel::FlxG_obj::width;
HXDLIN( 395)					_this3->set_x(((( (Float)(_hx_tmp26) ) - _this3->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 395)				bool _hx_tmp27;
HXDLIN( 395)				if ((axes3 != 16)) {
HXLINE( 395)					_hx_tmp27 = (axes3 == 17);
            				}
            				else {
HXLINE( 395)					_hx_tmp27 = true;
            				}
HXDLIN( 395)				if (_hx_tmp27) {
HXLINE( 395)					int _hx_tmp28 = ::flixel::FlxG_obj::height;
HXDLIN( 395)					_this3->set_y(((( (Float)(_hx_tmp28) ) - _this3->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 396)			 ::flixel::FlxSprite fh = this->ammar;
HXDLIN( 396)			fh->set_x((fh->x + 60));
HXLINE( 397)			 ::flixel::FlxSprite fh1 = this->ammar;
HXDLIN( 397)			fh1->set_y((fh1->y - ( (Float)(200) )));
            		}
HXLINE( 400)		{
HXLINE( 400)			 ::flixel::math::FlxBasePoint this6 = this->ammar->scrollFactor;
HXDLIN( 400)			this6->set_x(((Float)0.4));
HXDLIN( 400)			this6->set_y(((Float)0.4));
            		}
HXLINE( 401)		Float _hx_tmp29;
HXDLIN( 401)		if (::ClientPrefs_obj::cute) {
HXLINE( 401)			_hx_tmp29 = ((Float)0.7);
            		}
            		else {
HXLINE( 401)			_hx_tmp29 = ((Float)0.8);
            		}
HXDLIN( 401)		this->ammar->set_alpha(_hx_tmp29);
HXLINE( 402)		this->ammar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camBG));
HXLINE( 403)		this->add(this->ammar);
HXLINE( 405)		this->border =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-700,-1,null());
HXLINE( 406)		 ::flixel::FlxSprite _hx_tmp30 = this->border;
HXDLIN( 406)		::String library2 = null();
HXDLIN( 406)		 ::flixel::graphics::FlxGraphic imageLoaded1 = ::Paths_obj::returnGraphic(HX_("ammar/barder",5b,d4,cf,04),null());
HXDLIN( 406)		bool xmlExists1 = false;
HXDLIN( 406)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("ammar/barder",5b,d4,cf,04)) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 406)			xmlExists1 = true;
            		}
HXDLIN( 406)		 ::Dynamic _hx_tmp31;
HXDLIN( 406)		if (::hx::IsNotNull( imageLoaded1 )) {
HXLINE( 406)			_hx_tmp31 = imageLoaded1;
            		}
            		else {
HXLINE( 406)			 ::flixel::graphics::FlxGraphic returnAsset2 = ::Paths_obj::returnGraphic(HX_("ammar/barder",5b,d4,cf,04),library2);
HXDLIN( 406)			_hx_tmp31 = returnAsset2;
            		}
HXDLIN( 406)		 ::Dynamic _hx_tmp32;
HXDLIN( 406)		if (xmlExists1) {
HXLINE( 406)			_hx_tmp32 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("ammar/barder",5b,d4,cf,04)) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE( 406)			_hx_tmp32 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("ammar/barder",5b,d4,cf,04)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library2);
            		}
HXDLIN( 406)		_hx_tmp30->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp31,_hx_tmp32));
HXLINE( 408)		this->border->animation->addByPrefix(HX_("loop",64,a6,b7,47),HX_("barder",de,2d,7e,54),4,true,null(),null());
HXLINE( 409)		this->border->animation->play(HX_("loop",64,a6,b7,47),null(),null(),null());
HXLINE( 410)		this->border->updateHitbox();
HXLINE( 412)		{
HXLINE( 412)			 ::flixel::math::FlxBasePoint this7 = this->border->scrollFactor;
HXDLIN( 412)			this7->set_x(((Float)0.8));
HXDLIN( 412)			this7->set_y(((Float)0.8));
            		}
HXLINE( 413)		this->border->set_alpha(((Float)0.8));
HXLINE( 414)		this->border->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camBG));
HXLINE( 415)		this->border->scale->set_y(((Float)1.05));
HXLINE( 416)		{
HXLINE( 416)			 ::flixel::FlxSprite _this4 = this->border;
HXDLIN( 416)			int axes4 = 16;
HXDLIN( 416)			bool _hx_tmp33;
HXDLIN( 416)			if ((axes4 != 1)) {
HXLINE( 416)				_hx_tmp33 = (axes4 == 17);
            			}
            			else {
HXLINE( 416)				_hx_tmp33 = true;
            			}
HXDLIN( 416)			if (_hx_tmp33) {
HXLINE( 416)				int _hx_tmp34 = ::flixel::FlxG_obj::width;
HXDLIN( 416)				_this4->set_x(((( (Float)(_hx_tmp34) ) - _this4->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 416)			bool _hx_tmp35;
HXDLIN( 416)			if ((axes4 != 16)) {
HXLINE( 416)				_hx_tmp35 = (axes4 == 17);
            			}
            			else {
HXLINE( 416)				_hx_tmp35 = true;
            			}
HXDLIN( 416)			if (_hx_tmp35) {
HXLINE( 416)				int _hx_tmp36 = ::flixel::FlxG_obj::height;
HXDLIN( 416)				_this4->set_y(((( (Float)(_hx_tmp36) ) - _this4->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 417)		this->add(this->border);
HXLINE( 419)		if (!(::ClientPrefs_obj::cute)) {
HXLINE( 420)			::flixel::tweens::FlxTween_obj::tween(this->ammar, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),860)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.5))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
            		}
HXLINE( 421)		 ::flixel::FlxSprite _hx_tmp37 = this->border;
HXDLIN( 421)		Float _hx_tmp38 = (((Float)640.) - (this->border->get_width() / ( (Float)(2) )));
HXDLIN( 421)		this->borderTween = ::flixel::tweens::FlxTween_obj::tween(_hx_tmp37, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),_hx_tmp38)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.2))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE( 423)		this->weeksSprites =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 424)		this->add(this->weeksSprites);
HXLINE( 426)		this->songBGDesc =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,800,null(),null())->makeGraphic(400,300,0,true,null());
HXLINE( 427)		::flixel::util::FlxSpriteUtil_obj::drawRoundRect(this->songBGDesc,( (Float)(0) ),( (Float)(0) ),( (Float)(400) ),( (Float)(300) ),( (Float)(20) ),( (Float)(20) ),-16777216,null(),null());
HXLINE( 428)		{
HXLINE( 428)			 ::flixel::math::FlxBasePoint this8 = this->songBGDesc->scrollFactor;
HXDLIN( 428)			this8->set_x(( (Float)(0) ));
HXDLIN( 428)			this8->set_y(( (Float)(0) ));
            		}
HXLINE( 429)		this->songBGDesc->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 430)		this->songBGDesc->set_alpha(((Float)0.5));
HXLINE( 431)		{
HXLINE( 431)			 ::flixel::FlxSprite _this5 = this->songBGDesc;
HXDLIN( 431)			int axes5 = 16;
HXDLIN( 431)			bool _hx_tmp39;
HXDLIN( 431)			if ((axes5 != 1)) {
HXLINE( 431)				_hx_tmp39 = (axes5 == 17);
            			}
            			else {
HXLINE( 431)				_hx_tmp39 = true;
            			}
HXDLIN( 431)			if (_hx_tmp39) {
HXLINE( 431)				int _hx_tmp40 = ::flixel::FlxG_obj::width;
HXDLIN( 431)				_this5->set_x(((( (Float)(_hx_tmp40) ) - _this5->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 431)			bool _hx_tmp41;
HXDLIN( 431)			if ((axes5 != 16)) {
HXLINE( 431)				_hx_tmp41 = (axes5 == 17);
            			}
            			else {
HXLINE( 431)				_hx_tmp41 = true;
            			}
HXDLIN( 431)			if (_hx_tmp41) {
HXLINE( 431)				int _hx_tmp42 = ::flixel::FlxG_obj::height;
HXDLIN( 431)				_this5->set_y(((( (Float)(_hx_tmp42) ) - _this5->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 432)		this->add(this->songBGDesc);
HXLINE( 434)		this->diffBGDesc =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1500,null(),null())->makeGraphic(480,94,0,true,null());
HXLINE( 435)		::flixel::util::FlxSpriteUtil_obj::drawRoundRect(this->diffBGDesc,( (Float)(0) ),( (Float)(0) ),( (Float)(480) ),( (Float)(94) ),( (Float)(20) ),( (Float)(20) ),-16777216,null(),null());
HXLINE( 436)		{
HXLINE( 436)			 ::flixel::math::FlxBasePoint this9 = this->diffBGDesc->scrollFactor;
HXDLIN( 436)			this9->set_x(( (Float)(0) ));
HXDLIN( 436)			this9->set_y(( (Float)(0) ));
            		}
HXLINE( 437)		this->diffBGDesc->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 438)		this->diffBGDesc->set_alpha(((Float)0.5));
HXLINE( 439)		this->add(this->diffBGDesc);
HXLINE( 441)		Float _hx_tmp43 = this->songBGDesc->x;
HXDLIN( 441)		Float _hx_tmp44 = (_hx_tmp43 + (this->songBGDesc->get_width() / ( (Float)(2) )));
HXDLIN( 441)		Float _hx_tmp45 = this->songBGDesc->y;
HXDLIN( 441)		this->difficultySprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp44,((_hx_tmp45 + this->songBGDesc->get_height()) + 20),null());
HXLINE( 442)		 ::flixel::FlxSprite _hx_tmp46 = this->difficultySprite;
HXDLIN( 442)		::String library3 = null();
HXDLIN( 442)		 ::flixel::graphics::FlxGraphic imageLoaded2 = ::Paths_obj::returnGraphic(HX_("ammar/difficulty",38,77,c1,71),null());
HXDLIN( 442)		bool xmlExists2 = false;
HXDLIN( 442)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("ammar/difficulty",38,77,c1,71)) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 442)			xmlExists2 = true;
            		}
HXDLIN( 442)		 ::Dynamic _hx_tmp47;
HXDLIN( 442)		if (::hx::IsNotNull( imageLoaded2 )) {
HXLINE( 442)			_hx_tmp47 = imageLoaded2;
            		}
            		else {
HXLINE( 442)			 ::flixel::graphics::FlxGraphic returnAsset3 = ::Paths_obj::returnGraphic(HX_("ammar/difficulty",38,77,c1,71),library3);
HXDLIN( 442)			_hx_tmp47 = returnAsset3;
            		}
HXDLIN( 442)		 ::Dynamic _hx_tmp48;
HXDLIN( 442)		if (xmlExists2) {
HXLINE( 442)			_hx_tmp48 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("ammar/difficulty",38,77,c1,71)) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE( 442)			_hx_tmp48 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("ammar/difficulty",38,77,c1,71)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library3);
            		}
HXDLIN( 442)		_hx_tmp46->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp47,_hx_tmp48));
HXLINE( 443)		this->difficultySprite->animation->addByPrefix(HX_("easy",02,8c,0c,43),HX_("Difficulty0000",db,ef,a5,2a),0,false,null(),null());
HXLINE( 444)		this->difficultySprite->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("Difficulty0001",dc,ef,a5,2a),0,false,null(),null());
HXLINE( 445)		this->difficultySprite->animation->addByPrefix(HX_("hard",eb,2e,08,45),HX_("Difficulty0002",dd,ef,a5,2a),0,false,null(),null());
HXLINE( 446)		this->difficultySprite->animation->addByPrefix(HX_("insane",aa,36,da,9d),HX_("Difficulty0003",de,ef,a5,2a),0,false,null(),null());
HXLINE( 447)		this->difficultySprite->animation->play(HX_("normal",27,72,69,30),true,null(),null());
HXLINE( 448)		this->difficultySprite->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 449)		this->add(this->difficultySprite);
HXLINE( 450)		 ::flixel::FlxSprite fh2 = this->difficultySprite;
HXDLIN( 450)		Float fh3 = fh2->x;
HXDLIN( 450)		fh2->set_x((fh3 - (this->difficultySprite->get_width() / ( (Float)(2) ))));
HXLINE( 462)		 ::flixel::FlxSprite _hx_tmp49 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 462)		::String library4 = null();
HXDLIN( 462)		 ::flixel::graphics::FlxGraphic returnAsset4 = ::Paths_obj::returnGraphic(HX_("ammar/diffLeft",69,76,b7,c0),library4);
HXDLIN( 462)		this->difficultyLeft = _hx_tmp49->loadGraphic(returnAsset4,null(),null(),null(),null(),null());
HXLINE( 463)		this->difficultyLeft->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 464)		this->add(this->difficultyLeft);
HXLINE( 465)		 ::flixel::FlxSprite _hx_tmp50 = this->difficultyLeft;
HXDLIN( 465)		_hx_tmp50->setGraphicSize(::Std_obj::_hx_int((this->difficultyLeft->get_width() * ((Float)0.5))),null());
HXDLIN( 465)		this->difficultyLeft->updateHitbox();
HXLINE( 466)		 ::flixel::FlxSprite _hx_tmp51 = this->difficultyLeft;
HXDLIN( 466)		Float _hx_tmp52 = this->difficultySprite->x;
HXDLIN( 466)		Float _hx_tmp53 = ((_hx_tmp52 - this->difficultyLeft->get_width()) - ( (Float)(25) ));
HXDLIN( 466)		Float _hx_tmp54 = this->difficultySprite->y;
HXDLIN( 466)		Float _hx_tmp55 = (_hx_tmp54 + (this->difficultySprite->get_height() / ( (Float)(2) )));
HXDLIN( 466)		_hx_tmp51->setPosition(_hx_tmp53,(_hx_tmp55 - (this->difficultyLeft->get_height() / ( (Float)(2) ))));
HXLINE( 468)		 ::flixel::FlxSprite _hx_tmp56 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 468)		::String library5 = null();
HXDLIN( 468)		 ::flixel::graphics::FlxGraphic returnAsset5 = ::Paths_obj::returnGraphic(HX_("ammar/diffRight",3a,33,dd,56),library5);
HXDLIN( 468)		this->difficultyRight = _hx_tmp56->loadGraphic(returnAsset5,null(),null(),null(),null(),null());
HXLINE( 469)		this->difficultyRight->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 470)		this->add(this->difficultyRight);
HXLINE( 471)		 ::flixel::FlxSprite _hx_tmp57 = this->difficultyRight;
HXDLIN( 471)		_hx_tmp57->setGraphicSize(::Std_obj::_hx_int((this->difficultyRight->get_width() * ((Float)0.5))),null());
HXDLIN( 471)		this->difficultyRight->updateHitbox();
HXLINE( 472)		 ::flixel::FlxSprite _hx_tmp58 = this->difficultyRight;
HXDLIN( 472)		Float _hx_tmp59 = this->difficultySprite->x;
HXDLIN( 472)		Float _hx_tmp60 = ((_hx_tmp59 + this->difficultySprite->get_width()) + 25);
HXDLIN( 472)		Float _hx_tmp61 = this->difficultySprite->y;
HXDLIN( 472)		Float _hx_tmp62 = (_hx_tmp61 + (this->difficultySprite->get_height() / ( (Float)(2) )));
HXDLIN( 472)		_hx_tmp58->setPosition(_hx_tmp60,(_hx_tmp62 - (this->difficultyRight->get_height() / ( (Float)(2) ))));
HXLINE( 474)		this->diffLOffset = this->difficultyLeft->offset->x;
HXLINE( 475)		this->diffROffset = this->difficultyRight->offset->x;
HXLINE( 496)		 ::flixel::FlxSprite _hx_tmp63 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1900,100,null());
HXDLIN( 496)		::String library6 = null();
HXDLIN( 496)		 ::flixel::graphics::FlxGraphic returnAsset6 = ::Paths_obj::returnGraphic(HX_("ammar/Lock",48,e5,32,a0),library6);
HXDLIN( 496)		this->diffLock = _hx_tmp63->loadGraphic(returnAsset6,null(),null(),null(),null(),null());
HXLINE( 497)		this->diffLock->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 498)		this->add(this->diffLock);
HXLINE( 499)		 ::flixel::FlxSprite _hx_tmp64 = this->diffLock;
HXDLIN( 499)		_hx_tmp64->setGraphicSize(::Std_obj::_hx_int(this->diffLock->get_width()),null());
HXDLIN( 499)		this->diffLock->updateHitbox();
HXLINE( 500)		this->diffLock->set_alpha(( (Float)(0) ));
HXLINE( 501)		this->diffLock->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 503)		this->diffLockYOffset = this->diffLock->offset->y;
HXLINE( 504)		 ::flixel::FlxSprite fh4 = this->diffLock;
HXDLIN( 504)		fh4->offset->set_y((fh4->offset->y + 30));
HXLINE( 506)		{
HXLINE( 506)			 ::flixel::math::FlxBasePoint this10 = this->difficultySprite->scrollFactor;
HXDLIN( 506)			this10->set_x(( (Float)(0) ));
HXDLIN( 506)			this10->set_y(( (Float)(0) ));
            		}
HXLINE( 507)		{
HXLINE( 507)			 ::flixel::math::FlxBasePoint this11 = this->difficultyLeft->scrollFactor;
HXDLIN( 507)			this11->set_x(( (Float)(0) ));
HXDLIN( 507)			this11->set_y(( (Float)(0) ));
            		}
HXLINE( 508)		{
HXLINE( 508)			 ::flixel::math::FlxBasePoint this12 = this->difficultyRight->scrollFactor;
HXDLIN( 508)			this12->set_x(( (Float)(0) ));
HXDLIN( 508)			this12->set_y(( (Float)(0) ));
            		}
HXLINE( 509)		{
HXLINE( 509)			 ::flixel::math::FlxBasePoint this13 = this->diffLock->scrollFactor;
HXDLIN( 509)			this13->set_x(( (Float)(0) ));
HXDLIN( 509)			this13->set_y(( (Float)(0) ));
            		}
HXLINE( 511)		this->difficultyChart =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,2000,null(),null());
HXLINE( 512)		 ::flixel::FlxSprite _hx_tmp65 = this->difficultyChart;
HXDLIN( 512)		::String library7 = null();
HXDLIN( 512)		 ::flixel::graphics::FlxGraphic imageLoaded3 = ::Paths_obj::returnGraphic(HX_("ammar/difficultyBar",7b,45,79,2a),null());
HXDLIN( 512)		bool xmlExists3 = false;
HXDLIN( 512)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("ammar/difficultyBar",7b,45,79,2a)) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 512)			xmlExists3 = true;
            		}
HXDLIN( 512)		 ::Dynamic _hx_tmp66;
HXDLIN( 512)		if (::hx::IsNotNull( imageLoaded3 )) {
HXLINE( 512)			_hx_tmp66 = imageLoaded3;
            		}
            		else {
HXLINE( 512)			 ::flixel::graphics::FlxGraphic returnAsset7 = ::Paths_obj::returnGraphic(HX_("ammar/difficultyBar",7b,45,79,2a),library7);
HXDLIN( 512)			_hx_tmp66 = returnAsset7;
            		}
HXDLIN( 512)		 ::Dynamic _hx_tmp67;
HXDLIN( 512)		if (xmlExists3) {
HXLINE( 512)			_hx_tmp67 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("ammar/difficultyBar",7b,45,79,2a)) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE( 512)			_hx_tmp67 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("ammar/difficultyBar",7b,45,79,2a)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library7);
            		}
HXDLIN( 512)		_hx_tmp65->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp66,_hx_tmp67));
HXLINE( 513)		this->difficultyChart->animation->addByPrefix(HX_("chart",de,9c,b3,45),HX_("Difficulty",5b,52,3f,3e),0,false,null(),null());
HXLINE( 514)		this->difficultyChart->animation->play(HX_("chart",de,9c,b3,45),true,null(),null());
HXLINE( 515)		this->add(this->difficultyChart);
HXLINE( 516)		this->difficultyChart->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 517)		{
HXLINE( 517)			 ::flixel::math::FlxBasePoint this14 = this->difficultyChart->scrollFactor;
HXDLIN( 517)			this14->set_x(( (Float)(0) ));
HXDLIN( 517)			this14->set_y(( (Float)(0) ));
            		}
HXLINE( 519)		 ::flixel::FlxSprite fh5 = this->songBGDesc;
HXDLIN( 519)		fh5->set_x((fh5->x + 550));
HXLINE( 521)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 522)		this->add(this->menuItems);
HXLINE( 524)		this->menuItemChecks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 525)		this->add(this->menuItemChecks);
HXLINE( 527)		this->menuIcons =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 528)		this->add(this->menuIcons);
HXLINE( 530)		this->menuChecks =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 531)		this->add(this->menuChecks);
HXLINE( 533)		this->ammarText =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,( (Float)(780) ),( (Float)(810) ),400,HX_("",00,00,00,00),null(),null());
HXLINE( 534)		 ::flixel::addons::text::FlxTypeText _hx_tmp68 = this->ammarText;
HXDLIN( 534)		::String file1 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN( 534)		::String _hx_tmp69;
HXDLIN( 534)		if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 534)			_hx_tmp69 = file1;
            		}
            		else {
HXLINE( 534)			_hx_tmp69 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            		}
HXDLIN( 534)		_hx_tmp68->setFormat(_hx_tmp69,24,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 535)		{
HXLINE( 535)			 ::flixel::addons::text::FlxTypeText _this6 = this->ammarText;
HXDLIN( 535)			_this6->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN( 535)			_this6->set_borderColor(-16777216);
HXDLIN( 535)			_this6->set_borderSize(( (Float)(2) ));
HXDLIN( 535)			_this6->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 536)		this->add(this->ammarText);
HXLINE( 537)		this->ammarText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 538)		 ::flixel::sound::FlxSound sound =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 538)		 ::flixel::sound::FlxSound sound1 = sound->loadEmbedded(::Paths_obj::sound(HX_("ammar/ammarDialogue",8d,cf,93,a7),null()),null(),null(),null());
HXLINE( 539)		sound1->set_volume(((Float)0.25));
HXLINE( 540)		this->ammarText->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,sound1);
HXLINE( 541)		this->ammarText->delay = ((Float)0.02);
HXLINE( 542)		this->talking(HX_("",00,00,00,00),null(),null());
HXLINE( 544)		this->modifierBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1300,25,-16777216,null(),null());
HXLINE( 545)		this->modifierBG->set_alpha(((Float)0.5));
HXLINE( 546)		this->modifierBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 547)		this->add(this->modifierBG);
HXLINE( 548)		this->modifierBG->set_y(( (Float)(695) ));
HXLINE( 549)		{
HXLINE( 549)			 ::flixel::FlxSprite _this7 = this->modifierBG;
HXDLIN( 549)			int axes6 = 1;
HXDLIN( 549)			bool _hx_tmp70;
HXDLIN( 549)			if ((axes6 != 1)) {
HXLINE( 549)				_hx_tmp70 = (axes6 == 17);
            			}
            			else {
HXLINE( 549)				_hx_tmp70 = true;
            			}
HXDLIN( 549)			if (_hx_tmp70) {
HXLINE( 549)				int _hx_tmp71 = ::flixel::FlxG_obj::width;
HXDLIN( 549)				_this7->set_x(((( (Float)(_hx_tmp71) ) - _this7->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 549)			bool _hx_tmp72;
HXDLIN( 549)			if ((axes6 != 16)) {
HXLINE( 549)				_hx_tmp72 = (axes6 == 17);
            			}
            			else {
HXLINE( 549)				_hx_tmp72 = true;
            			}
HXDLIN( 549)			if (_hx_tmp72) {
HXLINE( 549)				int _hx_tmp73 = ::flixel::FlxG_obj::height;
HXDLIN( 549)				_this7->set_y(((( (Float)(_hx_tmp73) ) - _this7->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 550)		{
HXLINE( 550)			 ::flixel::math::FlxBasePoint this15 = this->modifierBG->scrollFactor;
HXDLIN( 550)			this15->set_x(( (Float)(0) ));
HXDLIN( 550)			this15->set_y(( (Float)(0) ));
            		}
HXLINE( 552)		this->modifierText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1400,0,0,HX_("PRESS CTRL TO ADD MODIFIERS",70,65,46,fa),20,null());
HXLINE( 553)		 ::flixel::text::FlxText _hx_tmp74 = this->modifierText;
HXDLIN( 553)		::String file2 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN( 553)		::String _hx_tmp75;
HXDLIN( 553)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 553)			_hx_tmp75 = file2;
            		}
            		else {
HXLINE( 553)			_hx_tmp75 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            		}
HXDLIN( 553)		_hx_tmp74->setFormat(_hx_tmp75,20,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 554)		this->add(this->modifierText);
HXLINE( 555)		{
HXLINE( 555)			 ::flixel::text::FlxText _this8 = this->modifierText;
HXDLIN( 555)			int axes7 = 1;
HXDLIN( 555)			bool _hx_tmp76;
HXDLIN( 555)			if ((axes7 != 1)) {
HXLINE( 555)				_hx_tmp76 = (axes7 == 17);
            			}
            			else {
HXLINE( 555)				_hx_tmp76 = true;
            			}
HXDLIN( 555)			if (_hx_tmp76) {
HXLINE( 555)				int _hx_tmp77 = ::flixel::FlxG_obj::width;
HXDLIN( 555)				_this8->set_x(((( (Float)(_hx_tmp77) ) - _this8->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 555)			bool _hx_tmp78;
HXDLIN( 555)			if ((axes7 != 16)) {
HXLINE( 555)				_hx_tmp78 = (axes7 == 17);
            			}
            			else {
HXLINE( 555)				_hx_tmp78 = true;
            			}
HXDLIN( 555)			if (_hx_tmp78) {
HXLINE( 555)				int _hx_tmp79 = ::flixel::FlxG_obj::height;
HXDLIN( 555)				_this8->set_y(((( (Float)(_hx_tmp79) ) - _this8->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 556)		this->modifierText->set_y(( (Float)(695) ));
HXLINE( 557)		this->modifierText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 558)		{
HXLINE( 558)			 ::flixel::math::FlxBasePoint this16 = this->modifierText->scrollFactor;
HXDLIN( 558)			this16->set_x(( (Float)(0) ));
HXDLIN( 558)			this16->set_y(( (Float)(0) ));
            		}
HXLINE( 560)		 ::flixel::FlxSprite _hx_tmp80 = this->modifierBG;
HXDLIN( 560)		_hx_tmp80->set_alpha(this->modifierText->set_alpha(( (Float)(0) )));
HXLINE( 562)		this->songDescTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1400,0,600,HX_("TEST",52,90,ba,37),24,null());
HXLINE( 563)		 ::flixel::text::FlxText _hx_tmp81 = this->songDescTxt;
HXDLIN( 563)		::String file3 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN( 563)		::String _hx_tmp82;
HXDLIN( 563)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE( 563)			_hx_tmp82 = file3;
            		}
            		else {
HXLINE( 563)			_hx_tmp82 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            		}
HXDLIN( 563)		_hx_tmp81->setFormat(_hx_tmp82,28,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 564)		{
HXLINE( 564)			 ::flixel::text::FlxText _this9 = this->songDescTxt;
HXDLIN( 564)			_this9->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN( 564)			_this9->set_borderColor(-16777216);
HXDLIN( 564)			_this9->set_borderSize(( (Float)(2) ));
HXDLIN( 564)			_this9->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 565)		this->add(this->songDescTxt);
HXLINE( 566)		this->songDescTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 567)		{
HXLINE( 567)			 ::flixel::math::FlxBasePoint this17 = this->songDescTxt->scrollFactor;
HXDLIN( 567)			this17->set_x(( (Float)(0) ));
HXDLIN( 567)			this17->set_y(( (Float)(0) ));
            		}
HXLINE( 569)		this->cheatText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,600,600,HX_("Scores will not save\ndue to cheating",97,5e,e8,3a),24,null());
HXLINE( 570)		 ::flixel::text::FlxText _hx_tmp83 = this->cheatText;
HXDLIN( 570)		::String file4 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN( 570)		::String _hx_tmp84;
HXDLIN( 570)		if (::sys::FileSystem_obj::exists(file4)) {
HXLINE( 570)			_hx_tmp84 = file4;
            		}
            		else {
HXLINE( 570)			_hx_tmp84 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            		}
HXDLIN( 570)		_hx_tmp83->setFormat(_hx_tmp84,28,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 571)		{
HXLINE( 571)			 ::flixel::text::FlxText _this10 = this->cheatText;
HXDLIN( 571)			_this10->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 571)			_this10->set_borderColor(-16777216);
HXDLIN( 571)			_this10->set_borderSize(( (Float)(2) ));
HXDLIN( 571)			_this10->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 572)		{
HXLINE( 572)			 ::flixel::text::FlxText _this11 = this->cheatText;
HXDLIN( 572)			int axes8 = 1;
HXDLIN( 572)			bool _hx_tmp85;
HXDLIN( 572)			if ((axes8 != 1)) {
HXLINE( 572)				_hx_tmp85 = (axes8 == 17);
            			}
            			else {
HXLINE( 572)				_hx_tmp85 = true;
            			}
HXDLIN( 572)			if (_hx_tmp85) {
HXLINE( 572)				int _hx_tmp86 = ::flixel::FlxG_obj::width;
HXDLIN( 572)				_this11->set_x(((( (Float)(_hx_tmp86) ) - _this11->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 572)			bool _hx_tmp87;
HXDLIN( 572)			if ((axes8 != 16)) {
HXLINE( 572)				_hx_tmp87 = (axes8 == 17);
            			}
            			else {
HXLINE( 572)				_hx_tmp87 = true;
            			}
HXDLIN( 572)			if (_hx_tmp87) {
HXLINE( 572)				int _hx_tmp88 = ::flixel::FlxG_obj::height;
HXDLIN( 572)				_this11->set_y(((( (Float)(_hx_tmp88) ) - _this11->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 573)		this->add(this->cheatText);
HXLINE( 574)		this->cheatText->set_alpha(( (Float)(0) ));
HXLINE( 575)		this->cheatText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 576)		{
HXLINE( 576)			 ::flixel::math::FlxBasePoint this18 = this->cheatText->scrollFactor;
HXDLIN( 576)			this18->set_x(( (Float)(0) ));
HXDLIN( 576)			this18->set_y(( (Float)(0) ));
            		}
HXLINE( 578)		 ::flixel::FlxSprite _hx_tmp89 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 578)		::String library8 = null();
HXDLIN( 578)		 ::flixel::graphics::FlxGraphic returnAsset8 = ::Paths_obj::returnGraphic(HX_("ammar/locked",87,ab,18,0a),library8);
HXDLIN( 578)		this->locked = _hx_tmp89->loadGraphic(returnAsset8,null(),null(),null(),null(),null());
HXLINE( 579)		this->add(this->locked);
HXLINE( 580)		this->locked->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 581)		 ::flixel::FlxSprite _hx_tmp90 = this->locked;
HXDLIN( 581)		_hx_tmp90->setGraphicSize(::Std_obj::_hx_int((this->locked->get_width() * ((Float)0.8))),null());
HXLINE( 582)		this->locked->updateHitbox();
HXLINE( 583)		{
HXLINE( 583)			 ::flixel::FlxSprite _this12 = this->locked;
HXDLIN( 583)			int axes9 = 17;
HXDLIN( 583)			bool _hx_tmp91;
HXDLIN( 583)			if ((axes9 != 1)) {
HXLINE( 583)				_hx_tmp91 = (axes9 == 17);
            			}
            			else {
HXLINE( 583)				_hx_tmp91 = true;
            			}
HXDLIN( 583)			if (_hx_tmp91) {
HXLINE( 583)				int _hx_tmp92 = ::flixel::FlxG_obj::width;
HXDLIN( 583)				_this12->set_x(((( (Float)(_hx_tmp92) ) - _this12->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 583)			bool _hx_tmp93;
HXDLIN( 583)			if ((axes9 != 16)) {
HXLINE( 583)				_hx_tmp93 = (axes9 == 17);
            			}
            			else {
HXLINE( 583)				_hx_tmp93 = true;
            			}
HXDLIN( 583)			if (_hx_tmp93) {
HXLINE( 583)				int _hx_tmp94 = ::flixel::FlxG_obj::height;
HXDLIN( 583)				_this12->set_y(((( (Float)(_hx_tmp94) ) - _this12->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 584)		 ::flixel::FlxSprite fh6 = this->locked;
HXDLIN( 584)		fh6->set_y((fh6->y - ( (Float)(50) )));
HXLINE( 585)		{
HXLINE( 585)			 ::flixel::math::FlxBasePoint this19 = this->locked->scrollFactor;
HXDLIN( 585)			this19->set_x(( (Float)(0) ));
HXDLIN( 585)			this19->set_y(( (Float)(0) ));
            		}
HXLINE( 586)		this->locked->set_alpha(( (Float)(0) ));
HXLINE( 588)		this->requiredText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1400,0,500,HX_("",00,00,00,00),24,null());
HXLINE( 589)		 ::flixel::text::FlxText _hx_tmp95 = this->requiredText;
HXDLIN( 589)		::String file5 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN( 589)		::String _hx_tmp96;
HXDLIN( 589)		if (::sys::FileSystem_obj::exists(file5)) {
HXLINE( 589)			_hx_tmp96 = file5;
            		}
            		else {
HXLINE( 589)			_hx_tmp96 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            		}
HXDLIN( 589)		_hx_tmp95->setFormat(_hx_tmp96,24,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE( 590)		{
HXLINE( 590)			 ::flixel::text::FlxText _this13 = this->requiredText;
HXDLIN( 590)			_this13->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::SHADOW_dyn());
HXDLIN( 590)			_this13->set_borderColor(-16777216);
HXDLIN( 590)			_this13->set_borderSize(( (Float)(2) ));
HXDLIN( 590)			_this13->set_borderQuality(( (Float)(1) ));
            		}
HXLINE( 591)		{
HXLINE( 591)			 ::flixel::text::FlxText _this14 = this->requiredText;
HXDLIN( 591)			int axes10 = 17;
HXDLIN( 591)			bool _hx_tmp97;
HXDLIN( 591)			if ((axes10 != 1)) {
HXLINE( 591)				_hx_tmp97 = (axes10 == 17);
            			}
            			else {
HXLINE( 591)				_hx_tmp97 = true;
            			}
HXDLIN( 591)			if (_hx_tmp97) {
HXLINE( 591)				int _hx_tmp98 = ::flixel::FlxG_obj::width;
HXDLIN( 591)				_this14->set_x(((( (Float)(_hx_tmp98) ) - _this14->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 591)			bool _hx_tmp99;
HXDLIN( 591)			if ((axes10 != 16)) {
HXLINE( 591)				_hx_tmp99 = (axes10 == 17);
            			}
            			else {
HXLINE( 591)				_hx_tmp99 = true;
            			}
HXDLIN( 591)			if (_hx_tmp99) {
HXLINE( 591)				int _hx_tmp100 = ::flixel::FlxG_obj::height;
HXDLIN( 591)				_this14->set_y(((( (Float)(_hx_tmp100) ) - _this14->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 592)		this->add(this->requiredText);
HXLINE( 593)		this->requiredText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 594)		{
HXLINE( 594)			 ::flixel::math::FlxBasePoint this20 = this->requiredText->scrollFactor;
HXDLIN( 594)			this20->set_x(( (Float)(0) ));
HXDLIN( 594)			this20->set_y(( (Float)(0) ));
            		}
HXLINE( 596)		this->mobileButtons =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 597)		this->mobileButtons->set_camera(this->camOther);
HXLINE( 598)		this->add(this->mobileButtons);
HXLINE( 670)		if (this->dragEnable) {
HXLINE( 671)			Float x = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN( 671)			Float y = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN( 671)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get().StaticCast<  ::flixel::math::FlxBasePoint >()->set(x,y);
HXDLIN( 671)			point->_inPool = false;
HXDLIN( 671)			this->lastHoldPos = point;
            		}
HXLINE( 673)		this->setSongDesc(HX_("\n        [ SONG NAME ]\n        SCORES: !123456!\n        MISSES: !10!\n        ACCURACY: !90%!\n        ",ce,ef,ce,89));
HXLINE( 680)		this->createMenu();
HXLINE( 681)		this->createStorySprites();
HXLINE( 682)		this->changeItem(0,null(),null());
HXLINE( 684)		this->super::create();
HXLINE( 685)		::CustomFadeTransition_obj::nextCamera = this->camHUD;
HXLINE( 686)		::CustomFadeTransition_obj::newLoading = true;
HXLINE( 689)		::CoolUtil_obj::difficulties = ::Array_obj< ::String >::fromData( _hx_array_data_9f229619_38,4);
HXLINE( 692)		::Conductor_obj::changeBPM(( (Float)(102) ));
            	}


void MainMenuStateAmmar_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_695_destroy)
HXLINE( 696)		::flixel::input::mouse::FlxMouseEvent_obj::globalManager->removeAll();
HXLINE( 697)		::flixel::input::mouse::FlxMouseEvent_obj::globalManager->removeAll();
HXLINE( 698)		this->super::destroy();
            	}


void MainMenuStateAmmar_obj::transProgress(::hx::Null< bool >  __o_inTrans){
            		bool inTrans = __o_inTrans.Default(true);
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_701_transProgress)
HXLINE( 702)		Float rcolor = (( (Float)(1) ) - this->progress);
HXLINE( 703)		Float gcolor = this->progress;
HXLINE( 704)		if (inTrans) {
HXLINE( 705)			::flixel::tweens::FlxTween_obj::tween(this->progressBar, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),50)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 706)			::flixel::tweens::FlxTween_obj::tween(this->progressTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),26)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 707)			::flixel::tweens::FlxTween_obj::tween(this->progressBar, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("percent",c5,aa,da,78),(this->progress * ( (Float)(100) )))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 708)			::flixel::tweens::FlxTween_obj::tween(this->progressBar->colorTransform, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("redMultiplier",32,f4,e9,4e),rcolor)
            				->setFixed(1,HX_("greenMultiplier",24,2c,40,6f),gcolor)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            		}
            		else {
HXLINE( 710)			::flixel::tweens::FlxTween_obj::tween(this->progressBar, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),-50)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
HXLINE( 711)			::flixel::tweens::FlxTween_obj::tween(this->progressTxt, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),-74)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
HXLINE( 712)			::flixel::tweens::FlxTween_obj::tween(this->progressBar, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("percent",c5,aa,da,78),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
HXLINE( 713)			::flixel::tweens::FlxTween_obj::tween(this->progressBar->colorTransform, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("redMultiplier",32,f4,e9,4e),0)
            				->setFixed(1,HX_("greenMultiplier",24,2c,40,6f),0)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuStateAmmar_obj,transProgress,(void))

void MainMenuStateAmmar_obj::setSongDesc(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_717_setSongDesc)
HXLINE( 718)		 ::flixel::text::FlxTextFormat redFormat =  ::flixel::text::FlxTextFormat_obj::__alloc( HX_CTX ,-262400,true,null(),null());
HXLINE( 719)		 ::flixel::text::FlxTextFormatMarkerPair red =  ::flixel::text::FlxTextFormatMarkerPair_obj::__alloc( HX_CTX ,redFormat,HX_("!",21,00,00,00));
HXLINE( 720)		this->songDescTxt->applyMarkup(text,::Array_obj< ::Dynamic>::__new(1)->init(0,red));
HXLINE( 722)		 ::flixel::text::FlxTextFormat formatt =  ::flixel::text::FlxTextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 723)		formatt->set_leading(-10);
HXLINE( 724)		this->songDescTxt->addFormat(formatt,null(),null());
HXLINE( 725)		{
HXLINE( 725)			 ::flixel::text::FlxText _this = this->songDescTxt;
HXDLIN( 725)			int axes = 16;
HXDLIN( 725)			bool _hx_tmp;
HXDLIN( 725)			if ((axes != 1)) {
HXLINE( 725)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 725)				_hx_tmp = true;
            			}
HXDLIN( 725)			if (_hx_tmp) {
HXLINE( 725)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 725)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 725)			bool _hx_tmp2;
HXDLIN( 725)			if ((axes != 16)) {
HXLINE( 725)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 725)				_hx_tmp2 = true;
            			}
HXDLIN( 725)			if (_hx_tmp2) {
HXLINE( 725)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 725)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuStateAmmar_obj,setSongDesc,(void))

void MainMenuStateAmmar_obj::talking(::String text,::hx::Null< bool >  __o_noRepeat,::hx::Null< Float >  __o_textSpeedMul){
            		bool noRepeat = __o_noRepeat.Default(false);
            		Float textSpeedMul = __o_textSpeedMul.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_730_talking)
HXDLIN( 730)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 731)		bool _hx_tmp;
HXDLIN( 731)		if (this->openWithCute) {
HXLINE( 731)			_hx_tmp = (text != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 731)			_hx_tmp = false;
            		}
HXDLIN( 731)		if (_hx_tmp) {
HXLINE( 732)			 ::EReg redexcute =  ::EReg_obj::__alloc( HX_CTX ,HX_("r",72,00,00,00),HX_("g",67,00,00,00));
HXLINE( 733)			::String text1 = (redexcute->replace(text,HX_("w",77,00,00,00)) + HX_(" ",20,00,00,00));
HXDLIN( 733)			::String text2;
HXDLIN( 733)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 50)) {
HXLINE( 733)				text2 = HX_("UwU",93,e7,40,00);
            			}
            			else {
HXLINE( 733)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 75)) {
HXLINE( 733)					text2 = HX_("OwO",07,5a,3c,00);
            				}
            				else {
HXLINE( 733)					text2 = HX_("",00,00,00,00);
            				}
            			}
HXDLIN( 733)			text = (text1 + text2);
            		}
HXLINE( 735)		if ((text == HX_("",00,00,00,00))) {
HXLINE( 736)			this->ammarText->set_text(HX_("",00,00,00,00));
HXLINE( 737)			this->ammar->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
HXLINE( 738)			this->prevTalk = HX_("",00,00,00,00);
HXLINE( 739)			return;
            		}
HXLINE( 741)		bool _hx_tmp1;
HXDLIN( 741)		if (noRepeat) {
HXLINE( 741)			_hx_tmp1 = (this->prevTalk != text);
            		}
            		else {
HXLINE( 741)			_hx_tmp1 = true;
            		}
HXDLIN( 741)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuStateAmmar,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_750_talking)
HXLINE( 750)				_gthis->ammar->animation->play(HX_("idle",14,a7,b3,45),true,null(),null());
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 742)			this->ammar->animation->play(HX_("talking",36,57,a8,16),true,null(),null());
HXLINE( 744)			this->ammarText->_finalText = text;
HXLINE( 745)			this->ammarText->set_text(text);
HXLINE( 746)			 ::flixel::sound::FlxSound sound =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXDLIN( 746)			 ::flixel::sound::FlxSound sound1 = sound->loadEmbedded(::Paths_obj::sound(HX_("ammar/ammarDialogue",8d,cf,93,a7),null()),null(),null(),null());
HXLINE( 747)			sound1->set_volume(((Float)0.25));
HXLINE( 748)			this->ammarText->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,sound1);
HXLINE( 749)			this->ammarText->start((((Float)0.05) / textSpeedMul),true,false,null(), ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
HXLINE( 753)		this->prevTalk = text;
            	}


HX_DEFINE_DYNAMIC_FUNC3(MainMenuStateAmmar_obj,talking,(void))

void MainMenuStateAmmar_obj::createMenu(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_831_createMenu)
HXLINE( 832)			_gthis->changeItem(0,null(),null());
HXLINE( 833)			_gthis->selectedSomething = false;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_757_createMenu)
HXDLIN( 757)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 758)		this->transProgress(true);
HXLINE( 759)		this->curPage = HX_("main",39,38,56,48);
HXLINE( 765)		int _hx_tmp = this->bg->color;
HXDLIN( 765)		if (::hx::IsNotEq( _hx_tmp,this->menuColor->get(HX_("main",39,38,56,48)) )) {
HXLINE( 767)			bool _hx_tmp1;
HXDLIN( 767)			if (::hx::IsNotNull( this->bgColorTween )) {
HXLINE( 767)				_hx_tmp1 = this->bgColorTween->active;
            			}
            			else {
HXLINE( 767)				_hx_tmp1 = false;
            			}
HXDLIN( 767)			if (_hx_tmp1) {
HXLINE( 768)				this->bgColorTween->cancel();
            			}
HXLINE( 769)			 ::flixel::FlxSprite _hx_tmp2 = this->bg;
HXDLIN( 769)			int _hx_tmp3 = this->bg->color;
HXDLIN( 769)			this->bgColorTween = ::flixel::tweens::FlxTween_obj::color(_hx_tmp2,1,_hx_tmp3,this->menuColor->get_int(HX_("main",39,38,56,48)),null());
            		}
HXLINE( 772)		int idd = 0;
HXLINE( 773)		{
HXLINE( 773)			int _g = 0;
HXDLIN( 773)			::Array< ::Dynamic> _g1 = this->menuList;
HXDLIN( 773)			while((_g < _g1->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuText,menuItem1) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_823_createMenu)
HXLINE( 823)					menuItem1->noMove = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 773)				::Array< ::String > menu = _g1->__get(_g).StaticCast< ::Array< ::String > >();
HXDLIN( 773)				_g = (_g + 1);
HXLINE( 775)				::String menuName = menu->__get(0);
HXLINE( 776)				::String menuDesc = menu->__get(1);
HXLINE( 778)				 ::EReg redexcute =  ::EReg_obj::__alloc( HX_CTX ,HX_("r",72,00,00,00),HX_("g",67,00,00,00));
HXLINE( 779)				::String menuItem;
HXDLIN( 779)				if (::ClientPrefs_obj::cute) {
HXLINE( 779)					menuItem = redexcute->replace(menuName,HX_("w",77,00,00,00));
            				}
            				else {
HXLINE( 779)					menuItem = menuName;
            				}
HXDLIN( 779)				 ::MenuText menuItem1 =  ::MenuText_obj::__alloc( HX_CTX ,-800,(80 + (idd * 130)),0,menuItem,100,null());
HXLINE( 780)				 ::MenuText menuItem2 = menuItem1;
HXDLIN( 780)				::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/PhantomMuff Difficult Font.ttf",3b,15,26,22)));
HXDLIN( 780)				::String _hx_tmp4;
HXDLIN( 780)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 780)					_hx_tmp4 = file;
            				}
            				else {
HXLINE( 780)					_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/PhantomMuff Difficult Font.ttf",3b,15,26,22));
            				}
HXDLIN( 780)				menuItem2->set_font(_hx_tmp4);
HXLINE( 781)				menuItem1->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 782)				int _hx_tmp5;
HXDLIN( 782)				if ((idd == this->curSelected)) {
HXLINE( 782)					_hx_tmp5 = -1;
            				}
            				else {
HXLINE( 782)					_hx_tmp5 = -6250336;
            				}
HXDLIN( 782)				menuItem1->set_color(_hx_tmp5);
HXLINE( 783)				{
HXLINE( 783)					menuItem1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 783)					menuItem1->set_borderColor((int)-1610612736);
HXDLIN( 783)					menuItem1->set_borderSize(( (Float)(5) ));
HXDLIN( 783)					menuItem1->set_borderQuality(( (Float)(1) ));
            				}
HXLINE( 784)				menuItem1->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 785)				menuItem1->origin->set_x(( (Float)(5) ));
HXLINE( 786)				menuItem1->objectID = idd;
HXLINE( 787)				menuItem1->partOf = HX_("main",39,38,56,48);
HXLINE( 788)				menuItem1->extraData->set(HX_("desc",51,5e,66,42),menuDesc);
HXLINE( 789)				this->menuItems->add(menuItem1).StaticCast<  ::MenuText >();
HXLINE( 790)				this->menuItems->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 808)				::String library = null();
HXDLIN( 808)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic((HX_("ammar/icon/",b9,1a,0f,37) + menuName.toLowerCase()),library);
HXDLIN( 808)				 ::MenuSprite menuIcon =  ::MenuSprite_obj::__alloc( HX_CTX ,1300,0,returnAsset);
HXLINE( 809)				menuIcon->partner = menuItem1;
HXLINE( 810)				menuIcon->objectID = idd;
HXLINE( 811)				{
HXLINE( 811)					 ::flixel::math::FlxBasePoint this1 = menuIcon->scale;
HXDLIN( 811)					this1->set_x(((Float)0.8));
HXDLIN( 811)					this1->set_y(((Float)0.8));
            				}
HXLINE( 812)				menuIcon->updateHitbox();
HXLINE( 813)				{
HXLINE( 813)					int axes = 16;
HXDLIN( 813)					bool _hx_tmp6;
HXDLIN( 813)					if ((axes != 1)) {
HXLINE( 813)						_hx_tmp6 = (axes == 17);
            					}
            					else {
HXLINE( 813)						_hx_tmp6 = true;
            					}
HXDLIN( 813)					if (_hx_tmp6) {
HXLINE( 813)						int _hx_tmp7 = ::flixel::FlxG_obj::width;
HXDLIN( 813)						menuIcon->set_x(((( (Float)(_hx_tmp7) ) - menuIcon->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 813)					bool _hx_tmp8;
HXDLIN( 813)					if ((axes != 16)) {
HXLINE( 813)						_hx_tmp8 = (axes == 17);
            					}
            					else {
HXLINE( 813)						_hx_tmp8 = true;
            					}
HXDLIN( 813)					if (_hx_tmp8) {
HXLINE( 813)						int _hx_tmp9 = ::flixel::FlxG_obj::height;
HXDLIN( 813)						menuIcon->set_y(((( (Float)(_hx_tmp9) ) - menuIcon->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 814)				menuIcon->set_y((menuIcon->y - ( (Float)(50) )));
HXLINE( 815)				menuIcon->partOf = HX_("main",39,38,56,48);
HXLINE( 816)				this->menuIcons->add(menuIcon).StaticCast<  ::MenuSprite >();
HXLINE( 817)				menuIcon->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 819)				menuItem1->partner = menuIcon;
HXLINE( 821)				menuItem1->noMove = true;
HXLINE( 822)				int _hx_tmp10;
HXDLIN( 822)				if ((idd == this->curSelected)) {
HXLINE( 822)					_hx_tmp10 = 40;
            				}
            				else {
HXLINE( 822)					_hx_tmp10 = 0;
            				}
HXDLIN( 822)				::flixel::tweens::FlxTween_obj::tween(menuItem1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),(50 + _hx_tmp10))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (( (Float)(idd) ) * ((Float)0.1))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            					->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(menuItem1)))));
HXLINE( 826)				idd = (idd + 1);
            			}
            		}
HXLINE( 829)		this->selectedSomething = true;
HXLINE( 830)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,createMenu,(void))

void MainMenuStateAmmar_obj::createFreeplay(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_971_createFreeplay)
HXLINE( 972)			_gthis->changeItem(0,null(),null());
HXLINE( 973)			_gthis->selectedSomething = false;
HXLINE( 974)			_gthis->ammarText->set_text(HX_("",00,00,00,00));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::tweens::FlxTween tween){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_982_createFreeplay)
HXLINE( 982)			_gthis->songBGDescTween = null();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_839_createFreeplay)
HXDLIN( 839)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 840)		this->curPage = HX_("freeplay",a0,90,86,22);
HXLINE( 841)		int _hx_tmp = this->bg->color;
HXDLIN( 841)		if (::hx::IsNotEq( _hx_tmp,this->menuColor->get(HX_("freeplay",a0,90,86,22)) )) {
HXLINE( 843)			bool _hx_tmp1;
HXDLIN( 843)			if (::hx::IsNotNull( this->bgColorTween )) {
HXLINE( 843)				_hx_tmp1 = this->bgColorTween->active;
            			}
            			else {
HXLINE( 843)				_hx_tmp1 = false;
            			}
HXDLIN( 843)			if (_hx_tmp1) {
HXLINE( 844)				this->bgColorTween->cancel();
            			}
HXLINE( 845)			 ::flixel::FlxSprite _hx_tmp2 = this->bg;
HXDLIN( 845)			int _hx_tmp3 = this->bg->color;
HXDLIN( 845)			this->bgColorTween = ::flixel::tweens::FlxTween_obj::color(_hx_tmp2,1,_hx_tmp3,this->menuColor->get_int(HX_("freeplay",a0,90,86,22)),null());
            		}
HXLINE( 848)		::Array< ::Dynamic> newSongsList = ::MainMenuStateAmmar_obj::songsList->copy();
HXLINE( 849)		::String unusedWeekName = HX_("Unused (DEV)",92,c2,7f,a8);
HXLINE( 850)		bool _hx_tmp4;
HXDLIN( 850)		if (::ClientPrefs_obj::developer) {
HXLINE( 850)			_hx_tmp4 = (::MainMenuStateAmmar_obj::songsList->length < 14);
            		}
            		else {
HXLINE( 850)			_hx_tmp4 = false;
            		}
HXDLIN( 850)		if (_hx_tmp4) {
HXLINE( 853)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 853)			_g->set(HX_("song",d5,23,58,4c),HX_("Chaos",20,0a,e1,d8));
HXDLIN( 853)			_g->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 853)			_g->set(HX_("week",f4,5f,f5,4e),unusedWeekName);
HXLINE( 854)			 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 854)			_g1->set(HX_("song",d5,23,58,4c),HX_("Owen Was Her",af,3c,bd,0f));
HXDLIN( 854)			_g1->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 854)			_g1->set(HX_("week",f4,5f,f5,4e),unusedWeekName);
HXLINE( 855)			 ::haxe::ds::StringMap _g2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 855)			_g2->set(HX_("song",d5,23,58,4c),HX_("Death By Notes",c4,03,c5,6a));
HXDLIN( 855)			_g2->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 855)			_g2->set(HX_("week",f4,5f,f5,4e),unusedWeekName);
HXLINE( 857)			 ::haxe::ds::StringMap _g3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 857)			_g3->set(HX_("song",d5,23,58,4c),HX_("Banned",fe,5d,75,86));
HXDLIN( 857)			_g3->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 857)			_g3->set(HX_("week",f4,5f,f5,4e),unusedWeekName);
HXLINE( 858)			 ::haxe::ds::StringMap _g4 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 858)			_g4->set(HX_("song",d5,23,58,4c),HX_("Voice Faceoff",44,c2,7c,f3));
HXDLIN( 858)			_g4->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 858)			_g4->set(HX_("week",f4,5f,f5,4e),unusedWeekName);
HXLINE( 852)			::Array< ::Dynamic> newSongNeedToAdd = ::Array_obj< ::Dynamic>::__new(5)->init(0,_g)->init(1,_g1)->init(2,_g2)->init(3,_g3)->init(4,_g4);
HXLINE( 860)			{
HXLINE( 860)				int _g5 = 0;
HXDLIN( 860)				while((_g5 < newSongNeedToAdd->length)){
HXLINE( 860)					 ::haxe::ds::StringMap item = newSongNeedToAdd->__get(_g5).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 860)					_g5 = (_g5 + 1);
HXLINE( 861)					newSongsList->push(item);
            				}
            			}
            		}
HXLINE( 864)		{
HXLINE( 864)			int _g6 = 0;
HXDLIN( 864)			while((_g6 < newSongsList->length)){
HXLINE( 864)				 ::haxe::ds::StringMap item1 = newSongsList->__get(_g6).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 864)				_g6 = (_g6 + 1);
HXLINE( 865)				if (::hx::IsEq( item1->get(HX_("week",f4,5f,f5,4e)),HX_("Furry Femboy",54,c3,fa,18) )) {
HXLINE( 866)					bool _hx_tmp5;
HXDLIN( 866)					if (::ClientPrefs_obj::cute) {
HXLINE( 866)						_hx_tmp5 = this->checkSongFinish(HX_("myself",f8,10,b3,8c),null());
            					}
            					else {
HXLINE( 866)						_hx_tmp5 = false;
            					}
HXDLIN( 866)					if (_hx_tmp5) {
HXLINE( 867)						::haxe::Log_obj::trace(HX_("yes furry femboy",ad,9d,49,35),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),867,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("createFreeplay",bc,0f,c1,74)));
            					}
            					else {
HXLINE( 869)						::haxe::Log_obj::trace(HX_("no furry femboy",53,7e,a9,41),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),869,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("createFreeplay",bc,0f,c1,74)));
HXLINE( 870)						newSongsList->remove(item1);
            					}
HXLINE( 872)					goto _hx_goto_49;
            				}
            			}
            			_hx_goto_49:;
            		}
HXLINE( 875)		int idd = 0;
HXLINE( 876)		::Array< ::String > addedWeek = ::Array_obj< ::String >::__new(0);
HXLINE( 877)		{
HXLINE( 877)			int _g7 = 0;
HXDLIN( 877)			while((_g7 < newSongsList->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MenuText,menuItem2) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_946_createFreeplay)
HXLINE( 946)					menuItem2->noMove = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 877)				 ::haxe::ds::StringMap songArray = newSongsList->__get(_g7).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 877)				_g7 = (_g7 + 1);
HXLINE( 879)				::String songName = ( (::String)(songArray->get(HX_("song",d5,23,58,4c))) );
HXLINE( 880)				::String icon = ( (::String)(songArray->get(HX_("icon",79,e7,b2,45))) );
HXLINE( 881)				::String week = ( (::String)(songArray->get(HX_("week",f4,5f,f5,4e))) );
HXLINE( 882)				bool _hx_tmp6;
HXDLIN( 882)				if ((unusedWeekName == week)) {
HXLINE( 882)					_hx_tmp6 = ::ClientPrefs_obj::hideunused;
            				}
            				else {
HXLINE( 882)					_hx_tmp6 = false;
            				}
HXDLIN( 882)				if (_hx_tmp6) {
HXLINE( 882)					continue;
            				}
HXLINE( 883)				bool hidden = ( (bool)(songArray->get(HX_("hidden",6a,ff,95,4c))) );
HXDLIN( 883)				if (::hx::IsNull( songArray->get(HX_("hidden",6a,ff,95,4c)) )) {
HXLINE( 883)					hidden = false;
            				}
HXLINE( 884)				::Array< ::String > songNeeded = ( (::Array< ::String >)(songArray->get(HX_("unlocked",23,34,0e,5c))) );
HXLINE( 885)				bool isSongUnlocked;
HXDLIN( 885)				if (::hx::IsNotNull( songNeeded )) {
HXLINE( 885)					isSongUnlocked = ::hx::IsPointerEq( songNeeded,::Array_obj< ::String >::__new(0) );
            				}
            				else {
HXLINE( 885)					isSongUnlocked = true;
            				}
HXLINE( 886)				if (!(isSongUnlocked)) {
HXLINE( 887)					isSongUnlocked = true;
HXLINE( 888)					{
HXLINE( 888)						int _g8 = 0;
HXDLIN( 888)						while((_g8 < songNeeded->length)){
HXLINE( 888)							::String song = songNeeded->__get(_g8);
HXDLIN( 888)							_g8 = (_g8 + 1);
HXLINE( 889)							if (!(this->checkSongFinish(song,null()))) {
HXLINE( 890)								isSongUnlocked = false;
HXLINE( 891)								goto _hx_goto_51;
            							}
            						}
            						_hx_goto_51:;
            					}
            				}
HXLINE( 896)				bool _hx_tmp7;
HXDLIN( 896)				if (!(isSongUnlocked)) {
HXLINE( 896)					_hx_tmp7 = hidden;
            				}
            				else {
HXLINE( 896)					_hx_tmp7 = false;
            				}
HXDLIN( 896)				if (_hx_tmp7) {
HXLINE( 897)					continue;
            				}
HXLINE( 899)				if (!(addedWeek->contains(week))) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuText,weekItem1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_917_createFreeplay)
HXLINE( 917)						weekItem1->noMove = false;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 900)					addedWeek->push(week);
HXLINE( 901)					int weekItem = (310 + ((idd - this->curSelected) * 80));
HXDLIN( 901)					 ::MenuText weekItem1 =  ::MenuText_obj::__alloc( HX_CTX ,1280,weekItem,0,((HX_("<- ",8f,ae,2d,00) + week.toUpperCase()) + HX_(" ->",91,6f,18,00)),50,null());
HXLINE( 902)					 ::MenuText weekItem2 = weekItem1;
HXDLIN( 902)					::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/PhantomMuff Empty Letters.ttf",60,10,86,aa)));
HXDLIN( 902)					::String _hx_tmp8;
HXDLIN( 902)					if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 902)						_hx_tmp8 = file;
            					}
            					else {
HXLINE( 902)						_hx_tmp8 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/PhantomMuff Empty Letters.ttf",60,10,86,aa));
            					}
HXDLIN( 902)					weekItem2->set_font(_hx_tmp8);
HXLINE( 903)					weekItem1->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 904)					{
HXLINE( 904)						weekItem1->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 904)						weekItem1->set_borderColor((int)-1610612736);
HXDLIN( 904)						weekItem1->set_borderSize(( (Float)(6) ));
HXDLIN( 904)						weekItem1->set_borderQuality(( (Float)(1) ));
            					}
HXLINE( 905)					weekItem1->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 906)					weekItem1->origin->set_x(( (Float)(5) ));
HXLINE( 907)					weekItem1->objectID = idd;
HXLINE( 908)					weekItem1->partOf = HX_("freeplay",a0,90,86,22);
HXLINE( 909)					this->menuItems->add(weekItem1).StaticCast<  ::MenuText >();
HXLINE( 910)					weekItem1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 912)					weekItem1->extraData->set(HX_("week",f4,5f,f5,4e),week);
HXLINE( 913)					weekItem1->extraData->set(HX_("isTitle",4e,b9,c0,ac),true);
HXLINE( 915)					weekItem1->noMove = true;
HXLINE( 916)					int _hx_tmp9;
HXDLIN( 916)					if ((idd == this->curSelected)) {
HXLINE( 916)						_hx_tmp9 = 40;
            					}
            					else {
HXLINE( 916)						_hx_tmp9 = 0;
            					}
HXDLIN( 916)					::flixel::tweens::FlxTween_obj::tween(weekItem1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),((140 + _hx_tmp9) + -(::Math_obj::abs(( (Float)((20 * (idd - this->curSelected))) )))))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (( (Float)(idd) ) * (((Float)0.5) / ( (Float)(this->menuItems->length) )))))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            						->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(weekItem1)))));
HXLINE( 921)					idd = (idd + 1);
            				}
HXLINE( 924)				 ::EReg redex =  ::EReg_obj::__alloc( HX_CTX ,HX_("[a-zA-Z0-9_.-]",20,7c,20,78),HX_("g",67,00,00,00));
HXLINE( 925)				 ::EReg redexcute =  ::EReg_obj::__alloc( HX_CTX ,HX_("r",72,00,00,00),HX_("g",67,00,00,00));
HXLINE( 926)				int menuItem = (310 + ((idd - this->curSelected) * 80));
HXDLIN( 926)				::String menuItem1;
HXDLIN( 926)				if (isSongUnlocked) {
HXLINE( 926)					if (::ClientPrefs_obj::cute) {
HXLINE( 926)						menuItem1 = redexcute->replace(songName,HX_("w",77,00,00,00));
            					}
            					else {
HXLINE( 926)						menuItem1 = songName;
            					}
            				}
            				else {
HXLINE( 926)					menuItem1 = redex->replace(songName,HX_("?",3f,00,00,00));
            				}
HXDLIN( 926)				 ::MenuText menuItem2 =  ::MenuText_obj::__alloc( HX_CTX ,1280,menuItem,0,menuItem1,50,null());
HXLINE( 927)				 ::MenuText menuItem3 = menuItem2;
HXDLIN( 927)				::String file1 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN( 927)				::String _hx_tmp10;
HXDLIN( 927)				if (::sys::FileSystem_obj::exists(file1)) {
HXLINE( 927)					_hx_tmp10 = file1;
            				}
            				else {
HXLINE( 927)					_hx_tmp10 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            				}
HXDLIN( 927)				menuItem3->set_font(_hx_tmp10);
HXLINE( 928)				menuItem2->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 929)				int _hx_tmp11;
HXDLIN( 929)				if ((idd == this->curSelected)) {
HXLINE( 929)					_hx_tmp11 = -1;
            				}
            				else {
HXLINE( 929)					_hx_tmp11 = -6250336;
            				}
HXDLIN( 929)				menuItem2->set_color(_hx_tmp11);
HXLINE( 930)				{
HXLINE( 930)					menuItem2->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN( 930)					menuItem2->set_borderColor((int)-1610612736);
HXDLIN( 930)					menuItem2->set_borderSize(( (Float)(5) ));
HXDLIN( 930)					menuItem2->set_borderQuality(( (Float)(1) ));
            				}
HXLINE( 931)				menuItem2->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 932)				menuItem2->origin->set_x(( (Float)(5) ));
HXLINE( 933)				menuItem2->objectID = idd;
HXLINE( 934)				menuItem2->partOf = HX_("freeplay",a0,90,86,22);
HXLINE( 935)				this->menuItems->add(menuItem2).StaticCast<  ::MenuText >();
HXLINE( 936)				this->menuItems->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE( 938)				menuItem2->extraData->set(HX_("song",d5,23,58,4c),songName);
HXLINE( 939)				menuItem2->extraData->set(HX_("icon",79,e7,b2,45),icon);
HXLINE( 940)				menuItem2->extraData->set(HX_("week",f4,5f,f5,4e),week);
HXLINE( 941)				menuItem2->extraData->set(HX_("locked",0a,05,c7,59),!(isSongUnlocked));
HXLINE( 942)				menuItem2->extraData->set(HX_("isTitle",4e,b9,c0,ac),false);
HXLINE( 944)				menuItem2->noMove = true;
HXLINE( 945)				int _hx_tmp12;
HXDLIN( 945)				if ((idd == this->curSelected)) {
HXLINE( 945)					_hx_tmp12 = 40;
            				}
            				else {
HXLINE( 945)					_hx_tmp12 = 0;
            				}
HXDLIN( 945)				::flixel::tweens::FlxTween_obj::tween(menuItem2, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),((140 + _hx_tmp12) + -(::Math_obj::abs(( (Float)((20 * (idd - this->curSelected))) )))))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (( (Float)(idd) ) * (((Float)0.5) / ( (Float)((::MainMenuStateAmmar_obj::songsList->length + 3)) )))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            					->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(menuItem2)))));
HXLINE( 949)				bool _hx_tmp13;
HXDLIN( 949)				bool _hx_tmp14;
HXDLIN( 949)				if (!(this->checkSongFinish(songName,0))) {
HXLINE( 949)					_hx_tmp14 = this->checkSongFinish(songName,1);
            				}
            				else {
HXLINE( 949)					_hx_tmp14 = true;
            				}
HXDLIN( 949)				if (!(_hx_tmp14)) {
HXLINE( 949)					_hx_tmp13 = this->checkSongFinish(songName,2);
            				}
            				else {
HXLINE( 949)					_hx_tmp13 = true;
            				}
HXDLIN( 949)				if (_hx_tmp13) {
HXLINE( 950)					int _g9 = 0;
HXDLIN( 950)					while((_g9 < 3)){
HXLINE( 950)						_g9 = (_g9 + 1);
HXDLIN( 950)						int i = (_g9 - 1);
HXLINE( 952)						if (this->checkSongFinish(songName,i)) {
HXLINE( 953)							 ::CheckSprite check =  ::CheckSprite_obj::__alloc( HX_CTX ,0,0,i);
HXLINE( 954)							check->partner = menuItem2;
HXLINE( 955)							check->followPartner = true;
HXLINE( 956)							check->setGraphicSize(::Std_obj::_hx_int((check->get_width() * ((Float)0.75))),null());
HXLINE( 957)							check->addX = ((menuItem2->get_width() + 25) + (60 * i));
HXLINE( 958)							Float _hx_tmp15 = (menuItem2->get_height() / ( (Float)(2) ));
HXDLIN( 958)							check->addY = (_hx_tmp15 - (check->get_height() / ( (Float)(2) )));
HXLINE( 959)							menuItem2->checks->push(check);
HXLINE( 960)							this->menuItemChecks->add(check).StaticCast<  ::CheckSprite >();
            						}
            					}
            				}
HXLINE( 965)				idd = (idd + 1);
            			}
            		}
HXLINE( 968)		this->selectedSomething = true;
HXLINE( 969)		this->talking(HX_(" ",20,00,00,00),true,5);
HXLINE( 970)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.75), ::Dynamic(new _hx_Closure_2(_gthis)),null());
HXLINE( 976)		this->ammarText->set_text(HX_("",00,00,00,00));
HXLINE( 978)		bool _hx_tmp16;
HXDLIN( 978)		if (::hx::IsNotNull( this->songBGDescTween )) {
HXLINE( 978)			_hx_tmp16 = this->songBGDescTween->active;
            		}
            		else {
HXLINE( 978)			_hx_tmp16 = false;
            		}
HXDLIN( 978)		if (_hx_tmp16) {
HXLINE( 979)			this->songBGDescTween->cancel();
            		}
HXLINE( 981)		this->songBGDescTween = ::flixel::tweens::FlxTween_obj::tween(this->songBGDesc, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),800)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_3(_gthis)))));
HXLINE( 985)		if (::ClientPrefs_obj::developer) {
HXLINE( 986)			this->modifierBG->set_alpha(((Float)0.5));
HXLINE( 987)			this->modifierText->set_alpha(( (Float)(1) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,createFreeplay,(void))

void MainMenuStateAmmar_obj::createOptions(::hx::Null< int >  __o_page){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1103_createOptions)
HXLINE(1104)			_gthis->changeItem(0,null(),null());
HXLINE(1105)			_gthis->selectedSomething = false;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int page = __o_page.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_992_createOptions)
HXDLIN( 992)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 993)		this->curPage = (HX_("options",5e,33,fe,df) + page);
HXLINE( 994)		int _hx_tmp = this->bg->color;
HXDLIN( 994)		if (::hx::IsNotEq( _hx_tmp,this->menuColor->get(HX_("options",5e,33,fe,df)) )) {
HXLINE( 996)			bool _hx_tmp1;
HXDLIN( 996)			if (::hx::IsNotNull( this->bgColorTween )) {
HXLINE( 996)				_hx_tmp1 = this->bgColorTween->active;
            			}
            			else {
HXLINE( 996)				_hx_tmp1 = false;
            			}
HXDLIN( 996)			if (_hx_tmp1) {
HXLINE( 997)				this->bgColorTween->cancel();
            			}
HXLINE( 998)			 ::flixel::FlxSprite _hx_tmp2 = this->bg;
HXDLIN( 998)			int _hx_tmp3 = this->bg->color;
HXDLIN( 998)			this->bgColorTween = ::flixel::tweens::FlxTween_obj::color(_hx_tmp2,1,_hx_tmp3,this->menuColor->get_int(HX_("options",5e,33,fe,df)),null());
            		}
HXLINE(1001)		int idd = 0;
HXLINE(1002)		if ((page == 0)) {
HXLINE(1003)			int _g = 0;
HXDLIN(1003)			::Array< ::String > _g1 = this->optionsMode;
HXDLIN(1003)			while((_g < _g1->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuText,menuItem) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1021_createOptions)
HXLINE(1021)					menuItem->noMove = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1003)				::String option = _g1->__get(_g);
HXDLIN(1003)				_g = (_g + 1);
HXLINE(1005)				 ::MenuText menuItem =  ::MenuText_obj::__alloc( HX_CTX ,1280,(270 + (idd * 100)),0,option,60,null());
HXLINE(1006)				 ::MenuText menuItem1 = menuItem;
HXDLIN(1006)				::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN(1006)				::String _hx_tmp4;
HXDLIN(1006)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE(1006)					_hx_tmp4 = file;
            				}
            				else {
HXLINE(1006)					_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            				}
HXDLIN(1006)				menuItem1->set_font(_hx_tmp4);
HXLINE(1007)				menuItem->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(1009)				int _hx_tmp5;
HXDLIN(1009)				if ((idd == this->curSelected)) {
HXLINE(1009)					_hx_tmp5 = -1;
            				}
            				else {
HXLINE(1009)					_hx_tmp5 = -6250336;
            				}
HXDLIN(1009)				menuItem->set_color(_hx_tmp5);
HXLINE(1011)				{
HXLINE(1011)					menuItem->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(1011)					menuItem->set_borderColor((int)-1610612736);
HXDLIN(1011)					menuItem->set_borderSize(( (Float)(5) ));
HXDLIN(1011)					menuItem->set_borderQuality(( (Float)(1) ));
            				}
HXLINE(1012)				menuItem->set_alignment(HX_("left",07,08,b0,47));
HXLINE(1013)				menuItem->origin->set_x(( (Float)(5) ));
HXLINE(1014)				menuItem->objectID = idd;
HXLINE(1015)				menuItem->partOf = HX_("options0",12,bf,6e,1e);
HXLINE(1016)				this->menuItems->add(menuItem).StaticCast<  ::MenuText >();
HXLINE(1017)				this->menuItems->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1019)				menuItem->noMove = true;
HXLINE(1020)				int _hx_tmp6;
HXDLIN(1020)				if ((idd == this->curSelected)) {
HXLINE(1020)					_hx_tmp6 = 40;
            				}
            				else {
HXLINE(1020)					_hx_tmp6 = 0;
            				}
HXDLIN(1020)				::flixel::tweens::FlxTween_obj::tween(menuItem, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),((80 + _hx_tmp6) + -(::Math_obj::abs(( (Float)((20 * (idd - this->curSelected))) )))))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (( (Float)(idd) ) * (((Float)0.3) / ( (Float)(this->optionsMode->length) )))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            					->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(menuItem)))));
HXLINE(1037)				idd = (idd + 1);
            			}
            		}
            		else {
HXLINE(1039)			if ((page == 1)) {
HXLINE(1040)				int _g2 = 0;
HXDLIN(1040)				::Array< ::Dynamic> _g3 = this->optionsList;
HXDLIN(1040)				while((_g2 < _g3->length)){
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MenuText,menuItem2) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1094_createOptions)
HXLINE(1094)						menuItem2->noMove = false;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1040)					::Array< ::String > option1 = _g3->__get(_g2).StaticCast< ::Array< ::String > >();
HXDLIN(1040)					_g2 = (_g2 + 1);
HXLINE(1042)					::String optionName = option1->__get(0);
HXLINE(1043)					::String optionDesc = option1->__get(1);
HXLINE(1044)					 ::MenuText menuItem2 =  ::MenuText_obj::__alloc( HX_CTX ,1280,(310 + ((idd - this->curSelected) * 80)),0,optionName,50,null());
HXLINE(1045)					 ::MenuText menuItem3 = menuItem2;
HXDLIN(1045)					::String file1 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN(1045)					::String _hx_tmp7;
HXDLIN(1045)					if (::sys::FileSystem_obj::exists(file1)) {
HXLINE(1045)						_hx_tmp7 = file1;
            					}
            					else {
HXLINE(1045)						_hx_tmp7 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            					}
HXDLIN(1045)					menuItem3->set_font(_hx_tmp7);
HXLINE(1046)					menuItem2->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(1047)					int _hx_tmp8;
HXDLIN(1047)					if ((idd == this->curSelected)) {
HXLINE(1047)						_hx_tmp8 = -1;
            					}
            					else {
HXLINE(1047)						_hx_tmp8 = -6250336;
            					}
HXDLIN(1047)					menuItem2->set_color(_hx_tmp8);
HXLINE(1048)					{
HXLINE(1048)						menuItem2->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(1048)						menuItem2->set_borderColor((int)-1610612736);
HXDLIN(1048)						menuItem2->set_borderSize(( (Float)(5) ));
HXDLIN(1048)						menuItem2->set_borderQuality(( (Float)(1) ));
            					}
HXLINE(1049)					menuItem2->set_alignment(HX_("left",07,08,b0,47));
HXLINE(1050)					menuItem2->origin->set_x(( (Float)(5) ));
HXLINE(1051)					menuItem2->objectID = idd;
HXLINE(1052)					menuItem2->partOf = HX_("options1",13,bf,6e,1e);
HXLINE(1053)					menuItem2->extraData->set(HX_("desc",51,5e,66,42),optionDesc);
HXLINE(1054)					{
HXLINE(1054)						 ::Dynamic v = option1->__get(2);
HXDLIN(1054)						menuItem2->extraData->set(HX_("save",3d,8b,4d,4c),v);
            					}
HXLINE(1055)					this->menuItems->add(menuItem2).StaticCast<  ::MenuText >();
HXLINE(1056)					this->menuItems->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1057)					if ((option1->__get(2) == HX_("cute",a3,4c,c9,41))) {
HXLINE(1058)						int _hx_tmp9;
HXDLIN(1058)						if ((idd == this->curSelected)) {
HXLINE(1058)							_hx_tmp9 = -1965833;
            						}
            						else {
HXLINE(1058)							_hx_tmp9 = -6750041;
            						}
HXDLIN(1058)						menuItem2->set_color(_hx_tmp9);
            					}
HXLINE(1070)					 ::Checkbox checkbox =  ::Checkbox_obj::__alloc( HX_CTX ,0,0,::Reflect_obj::getProperty(::hx::ClassOf< ::ClientPrefs >(),option1->__get(2)));
HXLINE(1071)					checkbox->sprTracker = menuItem2;
HXLINE(1072)					checkbox->offsetX = (menuItem2->get_width() + 250);
HXLINE(1073)					checkbox->offsetY = -(menuItem2->get_height());
HXLINE(1074)					if ((option1->__get(2) != HX_("delete",2b,c0,d8,6a))) {
HXLINE(1075)						this->menuChecks->add(checkbox).StaticCast<  ::Checkbox >();
            					}
HXLINE(1076)					checkbox->objectID = idd;
HXLINE(1092)					menuItem2->noMove = true;
HXLINE(1093)					int _hx_tmp10;
HXDLIN(1093)					if ((idd == this->curSelected)) {
HXLINE(1093)						_hx_tmp10 = 40;
            					}
            					else {
HXLINE(1093)						_hx_tmp10 = 0;
            					}
HXDLIN(1093)					::flixel::tweens::FlxTween_obj::tween(menuItem2, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),((80 + _hx_tmp10) + -(::Math_obj::abs(( (Float)((20 * (idd - this->curSelected))) )))))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (( (Float)(idd) ) * (( (Float)(1) ) / ( (Float)(this->optionsList->length) )))))
            						->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            						->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(menuItem2)))));
HXLINE(1097)					idd = (idd + 1);
            				}
            			}
            		}
HXLINE(1101)		this->selectedSomething = true;
HXLINE(1102)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuStateAmmar_obj,createOptions,(void))

void MainMenuStateAmmar_obj::createBadges(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1167_createBadges)
HXLINE(1168)			_gthis->changeItem(0,null(),null());
HXLINE(1169)			_gthis->selectedSomething = false;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1110_createBadges)
HXDLIN(1110)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1111)		this->curPage = HX_("badges",f0,77,3f,4b);
HXLINE(1112)		int _hx_tmp = this->bg->color;
HXDLIN(1112)		if (::hx::IsNotEq( _hx_tmp,this->menuColor->get(HX_("badge",23,c7,ae,ad)) )) {
HXLINE(1114)			bool _hx_tmp1;
HXDLIN(1114)			if (::hx::IsNotNull( this->bgColorTween )) {
HXLINE(1114)				_hx_tmp1 = this->bgColorTween->active;
            			}
            			else {
HXLINE(1114)				_hx_tmp1 = false;
            			}
HXDLIN(1114)			if (_hx_tmp1) {
HXLINE(1115)				this->bgColorTween->cancel();
            			}
HXLINE(1116)			 ::flixel::FlxSprite _hx_tmp2 = this->bg;
HXDLIN(1116)			int _hx_tmp3 = this->bg->color;
HXDLIN(1116)			this->bgColorTween = ::flixel::tweens::FlxTween_obj::color(_hx_tmp2,1,_hx_tmp3,this->menuColor->get_int(HX_("badge",23,c7,ae,ad)),null());
            		}
HXLINE(1119)		int idd = 0;
HXLINE(1120)		{
HXLINE(1120)			int _g = 0;
HXDLIN(1120)			::Array< ::Dynamic> _g1 = this->badgesList;
HXDLIN(1120)			while((_g < _g1->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuText,menuItem2) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1159_createBadges)
HXLINE(1159)					menuItem2->noMove = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1120)				::cpp::VirtualArray badgeGroup = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(1120)				_g = (_g + 1);
HXLINE(1122)				::String badgeName = ( (::String)(badgeGroup->__get(0)) );
HXLINE(1123)				::String badgeSave = ( (::String)(badgeGroup->__get(1)) );
HXLINE(1124)				::Array< ::String > badgeDesc = ( (::Array< ::String >)(badgeGroup->__get(2)) );
HXLINE(1125)				bool badgeGot = ::ClientPrefs_obj::badges->contains(badgeSave);
HXLINE(1126)				 ::EReg redex =  ::EReg_obj::__alloc( HX_CTX ,HX_("[a-zA-Z0-9_.-]",20,7c,20,78),HX_("g",67,00,00,00));
HXLINE(1128)				int menuItem = (310 + ((idd - this->curSelected) * 80));
HXDLIN(1128)				::String menuItem1;
HXDLIN(1128)				if (badgeGot) {
HXLINE(1128)					menuItem1 = badgeName;
            				}
            				else {
HXLINE(1128)					menuItem1 = redex->replace(badgeName,HX_("?",3f,00,00,00));
            				}
HXDLIN(1128)				 ::MenuText menuItem2 =  ::MenuText_obj::__alloc( HX_CTX ,1280,menuItem,0,menuItem1,50,null());
HXLINE(1129)				 ::MenuText menuItem3 = menuItem2;
HXDLIN(1129)				::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN(1129)				::String _hx_tmp4;
HXDLIN(1129)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE(1129)					_hx_tmp4 = file;
            				}
            				else {
HXLINE(1129)					_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            				}
HXDLIN(1129)				menuItem3->set_font(_hx_tmp4);
HXLINE(1130)				menuItem2->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(1131)				int _hx_tmp5;
HXDLIN(1131)				if ((idd == this->curSelected)) {
HXLINE(1131)					_hx_tmp5 = -1;
            				}
            				else {
HXLINE(1131)					_hx_tmp5 = -6250336;
            				}
HXDLIN(1131)				menuItem2->set_color(_hx_tmp5);
HXLINE(1132)				{
HXLINE(1132)					menuItem2->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(1132)					menuItem2->set_borderColor((int)-1610612736);
HXDLIN(1132)					menuItem2->set_borderSize(( (Float)(5) ));
HXDLIN(1132)					menuItem2->set_borderQuality(( (Float)(1) ));
            				}
HXLINE(1133)				menuItem2->set_alignment(HX_("left",07,08,b0,47));
HXLINE(1134)				menuItem2->origin->set_x(( (Float)(5) ));
HXLINE(1135)				menuItem2->objectID = idd;
HXLINE(1136)				menuItem2->partOf = HX_("badges",f0,77,3f,4b);
HXLINE(1137)				{
HXLINE(1137)					int _hx_tmp6;
HXDLIN(1137)					if (badgeGot) {
HXLINE(1137)						_hx_tmp6 = 1;
            					}
            					else {
HXLINE(1137)						_hx_tmp6 = 0;
            					}
HXDLIN(1137)					menuItem2->extraData->set(HX_("desc",51,5e,66,42),badgeDesc->__get(_hx_tmp6));
            				}
HXLINE(1138)				this->menuItems->add(menuItem2).StaticCast<  ::MenuText >();
HXLINE(1139)				this->menuItems->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1141)				::String imagePath;
HXDLIN(1141)				if (badgeGot) {
HXLINE(1141)					bool imagePath1;
HXDLIN(1141)					if ((badgeSave != HX_("ammarfurry",58,e0,58,66))) {
HXLINE(1141)						imagePath1 = (badgeSave == HX_("furry",ca,06,8c,08));
            					}
            					else {
HXLINE(1141)						imagePath1 = true;
            					}
HXDLIN(1141)					if (imagePath1) {
HXLINE(1141)						imagePath = HX_("badgeGotCute",2c,73,dc,6d);
            					}
            					else {
HXLINE(1141)						imagePath = HX_("badgeGot",e9,51,e0,33);
            					}
            				}
            				else {
HXLINE(1141)					imagePath = HX_("badgeNotGot",7c,cd,20,69);
            				}
HXLINE(1143)				::String library = null();
HXDLIN(1143)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic((HX_("ammar/",bd,7a,a1,d3) + imagePath),library);
HXDLIN(1143)				 ::MenuSprite menuIcon =  ::MenuSprite_obj::__alloc( HX_CTX ,1300,0,returnAsset);
HXLINE(1144)				menuIcon->partner = menuItem2;
HXLINE(1145)				menuIcon->objectID = idd;
HXLINE(1146)				{
HXLINE(1146)					 ::flixel::math::FlxBasePoint this1 = menuIcon->scale;
HXDLIN(1146)					this1->set_x(((Float)0.35));
HXDLIN(1146)					this1->set_y(((Float)0.35));
            				}
HXLINE(1147)				menuIcon->updateHitbox();
HXLINE(1148)				menuIcon->followPartner = true;
HXLINE(1149)				menuIcon->addX = (menuItem2->get_width() + 20);
HXLINE(1150)				menuIcon->addY = -((menuIcon->get_height() / ( (Float)(4) )));
HXLINE(1151)				menuIcon->partOf = HX_("badges",f0,77,3f,4b);
HXLINE(1152)				this->menuIcons->add(menuIcon).StaticCast<  ::MenuSprite >();
HXLINE(1153)				menuIcon->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1155)				menuItem2->partner = menuIcon;
HXLINE(1157)				menuItem2->noMove = true;
HXLINE(1158)				int _hx_tmp7;
HXDLIN(1158)				if ((idd == this->curSelected)) {
HXLINE(1158)					_hx_tmp7 = 40;
            				}
            				else {
HXLINE(1158)					_hx_tmp7 = 0;
            				}
HXDLIN(1158)				::flixel::tweens::FlxTween_obj::tween(menuItem2, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),(50 + _hx_tmp7))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (( (Float)(idd) ) * ((Float)0.1))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            					->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(menuItem2)))));
HXLINE(1162)				idd = (idd + 1);
            			}
            		}
HXLINE(1165)		this->selectedSomething = true;
HXLINE(1166)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,createBadges,(void))

void MainMenuStateAmmar_obj::createCredits(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1228_createCredits)
HXLINE(1229)			_gthis->changeItem(0,null(),null());
HXLINE(1230)			_gthis->selectedSomething = false;
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1174_createCredits)
HXDLIN(1174)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1175)		this->curPage = HX_("credits",1a,0e,5e,13);
HXLINE(1176)		int _hx_tmp = this->bg->color;
HXDLIN(1176)		if (::hx::IsNotEq( _hx_tmp,this->menuColor->get(HX_("credits",1a,0e,5e,13)) )) {
HXLINE(1178)			bool _hx_tmp1;
HXDLIN(1178)			if (::hx::IsNotNull( this->bgColorTween )) {
HXLINE(1178)				_hx_tmp1 = this->bgColorTween->active;
            			}
            			else {
HXLINE(1178)				_hx_tmp1 = false;
            			}
HXDLIN(1178)			if (_hx_tmp1) {
HXLINE(1179)				this->bgColorTween->cancel();
            			}
HXLINE(1180)			 ::flixel::FlxSprite _hx_tmp2 = this->bg;
HXDLIN(1180)			int _hx_tmp3 = this->bg->color;
HXDLIN(1180)			this->bgColorTween = ::flixel::tweens::FlxTween_obj::color(_hx_tmp2,1,_hx_tmp3,this->menuColor->get_int(HX_("credits",1a,0e,5e,13)),null());
            		}
HXLINE(1183)		int idd = 0;
HXLINE(1184)		{
HXLINE(1184)			int _g = 0;
HXDLIN(1184)			::Array< ::Dynamic> _g1 = this->creditsList;
HXDLIN(1184)			while((_g < _g1->length)){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuText,menuItem) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1220_createCredits)
HXLINE(1220)					menuItem->noMove = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1184)				::cpp::VirtualArray creditsGroup = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(1184)				_g = (_g + 1);
HXLINE(1186)				::String creditsName = ( (::String)(creditsGroup->__get(0)) );
HXLINE(1187)				::String creditsImage = ( (::String)(creditsGroup->__get(1)) );
HXLINE(1188)				::String creditsDesc = ( (::String)(creditsGroup->__get(2)) );
HXLINE(1189)				::String creditsLink = ( (::String)(creditsGroup->__get(3)) );
HXLINE(1191)				 ::MenuText menuItem =  ::MenuText_obj::__alloc( HX_CTX ,1280,(310 + ((idd - this->curSelected) * 80)),0,creditsName,50,null());
HXLINE(1192)				 ::MenuText menuItem1 = menuItem;
HXDLIN(1192)				::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN(1192)				::String _hx_tmp4;
HXDLIN(1192)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE(1192)					_hx_tmp4 = file;
            				}
            				else {
HXLINE(1192)					_hx_tmp4 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            				}
HXDLIN(1192)				menuItem1->set_font(_hx_tmp4);
HXLINE(1193)				menuItem->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(1194)				int _hx_tmp5;
HXDLIN(1194)				if ((idd == this->curSelected)) {
HXLINE(1194)					_hx_tmp5 = -1;
            				}
            				else {
HXLINE(1194)					_hx_tmp5 = -6250336;
            				}
HXDLIN(1194)				menuItem->set_color(_hx_tmp5);
HXLINE(1195)				{
HXLINE(1195)					menuItem->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(1195)					menuItem->set_borderColor((int)-1610612736);
HXDLIN(1195)					menuItem->set_borderSize(( (Float)(5) ));
HXDLIN(1195)					menuItem->set_borderQuality(( (Float)(1) ));
            				}
HXLINE(1196)				menuItem->set_alignment(HX_("left",07,08,b0,47));
HXLINE(1197)				menuItem->origin->set_x(( (Float)(5) ));
HXLINE(1198)				menuItem->objectID = idd;
HXLINE(1199)				menuItem->partOf = HX_("credits",1a,0e,5e,13);
HXLINE(1200)				menuItem->extraData->set(HX_("desc",51,5e,66,42),creditsDesc);
HXLINE(1201)				this->menuItems->add(menuItem).StaticCast<  ::MenuText >();
HXLINE(1202)				this->menuItems->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1204)				::String library = null();
HXDLIN(1204)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic((HX_("credits/",d5,48,ee,de) + creditsImage),library);
HXDLIN(1204)				 ::MenuSprite menuIcon =  ::MenuSprite_obj::__alloc( HX_CTX ,1300,0,returnAsset);
HXLINE(1205)				menuIcon->partner = menuItem;
HXLINE(1206)				menuIcon->objectID = idd;
HXLINE(1207)				{
HXLINE(1207)					 ::flixel::math::FlxBasePoint this1 = menuIcon->scale;
HXDLIN(1207)					this1->set_x(((Float)0.75));
HXDLIN(1207)					this1->set_y(((Float)0.75));
            				}
HXLINE(1208)				menuIcon->updateHitbox();
HXLINE(1209)				menuIcon->followPartner = true;
HXLINE(1210)				menuIcon->addX = (menuItem->get_width() + 20);
HXLINE(1211)				menuIcon->addY = -((menuIcon->get_height() / ( (Float)(4) )));
HXLINE(1212)				menuIcon->partOf = HX_("credits",1a,0e,5e,13);
HXLINE(1213)				this->menuIcons->add(menuIcon).StaticCast<  ::MenuSprite >();
HXLINE(1214)				menuIcon->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1216)				menuItem->partner = menuIcon;
HXLINE(1218)				menuItem->noMove = true;
HXLINE(1219)				int _hx_tmp6;
HXDLIN(1219)				if ((idd == this->curSelected)) {
HXLINE(1219)					_hx_tmp6 = 40;
            				}
            				else {
HXLINE(1219)					_hx_tmp6 = 0;
            				}
HXDLIN(1219)				::flixel::tweens::FlxTween_obj::tween(menuItem, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),(50 + _hx_tmp6))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (( (Float)(idd) ) * ((Float)0.1))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backOut_dyn())
            					->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(menuItem)))));
HXLINE(1223)				idd = (idd + 1);
            			}
            		}
HXLINE(1226)		this->selectedSomething = true;
HXLINE(1227)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,createCredits,(void))

void MainMenuStateAmmar_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1235_update)
HXLINE(1236)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.8))) {
HXLINE(1238)			 ::flixel::sound::FlxSound fh = ::flixel::FlxG_obj::sound->music;
HXDLIN(1238)			fh->set_volume((fh->_volume + (((Float)0.5) * elapsed)));
HXLINE(1239)			if (::hx::IsNotNull( ::FreeplayState_obj::vocals )) {
HXLINE(1239)				 ::flixel::sound::FlxSound fh1 = ::FreeplayState_obj::vocals;
HXDLIN(1239)				fh1->set_volume((fh1->_volume + (((Float)0.5) * elapsed)));
            			}
            		}
HXLINE(1242)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1243)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE(1246)		this->dragSystem();
HXLINE(1248)		Float intensity = ((( (Float)(this->curSelected) ) - (( (Float)(this->menuItems->length) ) / ( (Float)(2) ))) * ((( (Float)(1) ) / ( (Float)(this->menuItems->length) )) * ( (Float)(4) )));
HXLINE(1249)		Float intensityPercent = (( (Float)(this->curSelected) ) / ( (Float)((this->menuItems->length - 1)) ));
HXLINE(1251)		this->songDescTxt->set_x((this->songBGDesc->x - ( (Float)(158) )));
HXLINE(1252)		 ::flixel::FlxSprite _hx_tmp = this->diffBGDesc;
HXDLIN(1252)		Float _hx_tmp1 = this->songBGDesc->x;
HXDLIN(1252)		Float _hx_tmp2 = (_hx_tmp1 + (this->songBGDesc->get_width() / ( (Float)(2) )));
HXDLIN(1252)		_hx_tmp->set_x((_hx_tmp2 - (this->diffBGDesc->get_width() / ( (Float)(2) ))));
HXLINE(1253)		 ::flixel::FlxSprite _hx_tmp3 = this->diffBGDesc;
HXDLIN(1253)		Float _hx_tmp4 = this->songBGDesc->y;
HXDLIN(1253)		_hx_tmp3->set_y(((_hx_tmp4 + this->songBGDesc->get_height()) + 10));
HXLINE(1254)		 ::flixel::FlxSprite _hx_tmp5 = this->difficultyChart;
HXDLIN(1254)		Float _hx_tmp6 = this->songBGDesc->x;
HXDLIN(1254)		Float _hx_tmp7 = (_hx_tmp6 + (this->songBGDesc->get_width() / ( (Float)(2) )));
HXDLIN(1254)		Float _hx_tmp8 = ((_hx_tmp7 - (this->songBGDesc->get_width() / ( (Float)(2) ))) + 5);
HXDLIN(1254)		Float _hx_tmp9 = this->songBGDesc->y;
HXDLIN(1254)		_hx_tmp5->setPosition(_hx_tmp8,((_hx_tmp9 - this->difficultyChart->get_height()) - ( (Float)(10) )));
HXLINE(1256)		this->difficultyDraw();
HXLINE(1258)		this->displayList();
HXLINE(1260)		bool _hx_tmp10;
HXDLIN(1260)		bool _hx_tmp11;
HXDLIN(1260)		if ((this->curPage != HX_("freeplay",a0,90,86,22))) {
HXLINE(1260)			_hx_tmp11 = (this->curPage == HX_("story",f5,13,16,84));
            		}
            		else {
HXLINE(1260)			_hx_tmp11 = true;
            		}
HXDLIN(1260)		if (_hx_tmp11) {
HXLINE(1260)			bool _hx_tmp12;
HXDLIN(1260)			bool _hx_tmp13;
HXDLIN(1260)			bool _hx_tmp14;
HXDLIN(1260)			bool _hx_tmp15;
HXDLIN(1260)			bool _hx_tmp16;
HXDLIN(1260)			 ::Dynamic defaultValue = false;
HXDLIN(1260)			 ::Dynamic _hx_tmp17;
HXDLIN(1260)			if (::PlayState_obj::isStoryMode) {
HXLINE(1260)				_hx_tmp17 = defaultValue;
            			}
            			else {
HXLINE(1260)				if (::ClientPrefs_obj::gameplaySettings->exists(HX_("practice",bb,00,e7,a0))) {
HXLINE(1260)					_hx_tmp17 = ::ClientPrefs_obj::gameplaySettings->get(HX_("practice",bb,00,e7,a0));
            				}
            				else {
HXLINE(1260)					_hx_tmp17 = defaultValue;
            				}
            			}
HXDLIN(1260)			if (!(( (bool)(_hx_tmp17) ))) {
HXLINE(1260)				 ::Dynamic defaultValue1 = false;
HXDLIN(1260)				if (::PlayState_obj::isStoryMode) {
HXLINE(1260)					_hx_tmp16 = ( (bool)(defaultValue1) );
            				}
            				else {
HXLINE(1260)					if (::ClientPrefs_obj::gameplaySettings->exists(HX_("botplay",7b,fb,a9,61))) {
HXLINE(1260)						_hx_tmp16 = ::ClientPrefs_obj::gameplaySettings->get_bool(HX_("botplay",7b,fb,a9,61));
            					}
            					else {
HXLINE(1260)						_hx_tmp16 = ( (bool)(defaultValue1) );
            					}
            				}
            			}
            			else {
HXLINE(1260)				_hx_tmp16 = true;
            			}
HXDLIN(1260)			if (!(_hx_tmp16)) {
HXLINE(1261)				 ::Dynamic defaultValue2 = 1;
HXDLIN(1261)				 ::Dynamic _hx_tmp18;
HXDLIN(1261)				if (::PlayState_obj::isStoryMode) {
HXLINE(1261)					_hx_tmp18 = defaultValue2;
            				}
            				else {
HXLINE(1261)					if (::ClientPrefs_obj::gameplaySettings->exists(HX_("healthgain",1b,97,1b,16))) {
HXLINE(1261)						_hx_tmp18 = ::ClientPrefs_obj::gameplaySettings->get(HX_("healthgain",1b,97,1b,16));
            					}
            					else {
HXLINE(1261)						_hx_tmp18 = defaultValue2;
            					}
            				}
HXLINE(1260)				_hx_tmp15 = ::hx::IsGreater( _hx_tmp18,1 );
            			}
            			else {
HXLINE(1260)				_hx_tmp15 = true;
            			}
HXDLIN(1260)			if (!(_hx_tmp15)) {
HXLINE(1261)				 ::Dynamic defaultValue3 = 1;
HXDLIN(1261)				 ::Dynamic _hx_tmp19;
HXDLIN(1261)				if (::PlayState_obj::isStoryMode) {
HXLINE(1261)					_hx_tmp19 = defaultValue3;
            				}
            				else {
HXLINE(1261)					if (::ClientPrefs_obj::gameplaySettings->exists(HX_("healthloss",7f,50,74,19))) {
HXLINE(1261)						_hx_tmp19 = ::ClientPrefs_obj::gameplaySettings->get(HX_("healthloss",7f,50,74,19));
            					}
            					else {
HXLINE(1261)						_hx_tmp19 = defaultValue3;
            					}
            				}
HXLINE(1260)				_hx_tmp14 = ::hx::IsLess( _hx_tmp19,1 );
            			}
            			else {
HXLINE(1260)				_hx_tmp14 = true;
            			}
HXDLIN(1260)			if (!(_hx_tmp14)) {
HXLINE(1262)				 ::Dynamic defaultValue4 = true;
HXDLIN(1262)				 ::Dynamic _hx_tmp20;
HXDLIN(1262)				if (::PlayState_obj::isStoryMode) {
HXLINE(1262)					_hx_tmp20 = defaultValue4;
            				}
            				else {
HXLINE(1262)					if (::ClientPrefs_obj::gameplaySettings->exists(HX_("mechanics",6f,ef,7e,2e))) {
HXLINE(1262)						_hx_tmp20 = ::ClientPrefs_obj::gameplaySettings->get(HX_("mechanics",6f,ef,7e,2e));
            					}
            					else {
HXLINE(1262)						_hx_tmp20 = defaultValue4;
            					}
            				}
HXLINE(1260)				_hx_tmp13 = !(( (bool)(_hx_tmp20) ));
            			}
            			else {
HXLINE(1260)				_hx_tmp13 = true;
            			}
HXDLIN(1260)			if (!(_hx_tmp13)) {
HXLINE(1262)				 ::Dynamic defaultValue5 = true;
HXDLIN(1262)				 ::Dynamic _hx_tmp21;
HXDLIN(1262)				if (::PlayState_obj::isStoryMode) {
HXLINE(1262)					_hx_tmp21 = defaultValue5;
            				}
            				else {
HXLINE(1262)					if (::ClientPrefs_obj::gameplaySettings->exists(HX_("specialnotes",68,b3,b2,60))) {
HXLINE(1262)						_hx_tmp21 = ::ClientPrefs_obj::gameplaySettings->get(HX_("specialnotes",68,b3,b2,60));
            					}
            					else {
HXLINE(1262)						_hx_tmp21 = defaultValue5;
            					}
            				}
HXLINE(1260)				_hx_tmp12 = !(( (bool)(_hx_tmp21) ));
            			}
            			else {
HXLINE(1260)				_hx_tmp12 = true;
            			}
HXDLIN(1260)			if (!(_hx_tmp12)) {
HXLINE(1262)				 ::Dynamic defaultValue6 = true;
HXDLIN(1262)				 ::Dynamic _hx_tmp22;
HXDLIN(1262)				if (::PlayState_obj::isStoryMode) {
HXLINE(1262)					_hx_tmp22 = defaultValue6;
            				}
            				else {
HXLINE(1262)					if (::ClientPrefs_obj::gameplaySettings->exists(HX_("modchart",dc,c6,ac,a3))) {
HXLINE(1262)						_hx_tmp22 = ::ClientPrefs_obj::gameplaySettings->get(HX_("modchart",dc,c6,ac,a3));
            					}
            					else {
HXLINE(1262)						_hx_tmp22 = defaultValue6;
            					}
            				}
HXLINE(1260)				_hx_tmp10 = !(( (bool)(_hx_tmp22) ));
            			}
            			else {
HXLINE(1260)				_hx_tmp10 = true;
            			}
            		}
            		else {
HXLINE(1260)			_hx_tmp10 = false;
            		}
HXDLIN(1260)		if (_hx_tmp10) {
HXLINE(1263)			this->cheatText->set_alpha(( (Float)(1) ));
            		}
            		else {
HXLINE(1265)			this->cheatText->set_alpha(( (Float)(0) ));
            		}
HXLINE(1268)		Float a = this->hudFollow->y;
HXDLIN(1268)		Float _hx_tmp23;
HXDLIN(1268)		if ((this->curPage == HX_("credits",1a,0e,5e,13))) {
HXLINE(1268)			_hx_tmp23 = (intensityPercent * ( (Float)(69) ));
            		}
            		else {
HXLINE(1268)			_hx_tmp23 = intensity;
            		}
HXDLIN(1268)		this->hudFollow->set_y((a + ((elapsed * ( (Float)(8) )) * ((((Float)360.) + _hx_tmp23) - a))));
HXLINE(1269)		if (::ClientPrefs_obj::sillybop) {
HXLINE(1270)			this->bgFollow->set_y((((Float)360.) + (::Math_obj::abs(::Math_obj::sin(((::hx::Mod((this->curDecBeat / ( (Float)(2) )),1) * ( (Float)(2) )) * ::Math_obj::PI))) * ( (Float)(6) ))));
            		}
            		else {
HXLINE(1272)			Float a1 = this->bgFollow->y;
HXDLIN(1272)			this->bgFollow->set_y((a1 + ((elapsed * ( (Float)(8) )) * ((((Float)360.) + (intensityPercent * ( (Float)(20) ))) - a1))));
            		}
HXLINE(1275)		this->buttonControls();
HXLINE(1277)		this->super::update(elapsed);
            	}


void MainMenuStateAmmar_obj::backItem(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::MenuText member){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::MainMenuStateAmmar,_gthis, ::MenuText,member) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1299_backItem)
HXLINE(1300)				_gthis->menuItems->remove(member,true).StaticCast<  ::MenuText >();
HXLINE(1301)				member->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1294_backItem)
HXLINE(1295)			member->noMove = true;
HXLINE(1296)			Float targetX;
HXDLIN(1296)			if ((member->partOf == HX_("freeplay",a0,90,86,22))) {
HXLINE(1296)				targetX = (member->x + 1100);
            			}
            			else {
HXLINE(1296)				Float targetX1 = (member->x - ( (Float)(400) ));
HXDLIN(1296)				targetX = (targetX1 - member->get_width());
            			}
HXLINE(1297)			::flixel::input::mouse::FlxMouseEvent_obj::globalManager->remove(member).StaticCast<  ::MenuText >();
HXLINE(1298)			::flixel::tweens::FlxTween_obj::cancelTweensOf(member,null());
HXLINE(1299)			::flixel::tweens::FlxTween_obj::tween(member, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),targetX)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(( (Float)(member->objectID) ) * (((Float)0.5) / ( (Float)(_gthis->menuItems->length) ))))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backIn_dyn())
            				->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis,member)))));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::Checkbox member){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::MainMenuStateAmmar,_gthis, ::Checkbox,member) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1309_backItem)
HXLINE(1310)				_gthis->menuChecks->remove(member,true).StaticCast<  ::Checkbox >();
HXLINE(1311)				member->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1305_backItem)
HXLINE(1306)			member->sprTracker = null();
HXLINE(1307)			Float targetX = (member->x + 1100);
HXLINE(1308)			::flixel::tweens::FlxTween_obj::cancelTweensOf(member,null());
HXLINE(1309)			::flixel::tweens::FlxTween_obj::tween(member, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),targetX)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(( (Float)(member->objectID) ) * (((Float)0.5) / ( (Float)(_gthis->menuItems->length) ))))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backIn_dyn())
            				->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_3(_gthis,member)))));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(1)
            		void _hx_run( ::MenuSprite daMem){
            			HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1325_backItem)
HXLINE(1325)			if ((daMem->partOf == HX_("badges",f0,77,3f,4b))) {
HXLINE(1325)				daMem->destroy();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1280_backItem)
HXDLIN(1280)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1281)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1281)		_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE(1282)		if (this->haveToReset) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1286_backItem)
HXLINE(1287)				{
HXLINE(1287)					 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1287)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(1288)				::flixel::FlxG_obj::sound->music = null();
HXLINE(1289)				::flixel::FlxG_obj::game->_resetGame = true;
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(1283)			::TitleState_obj::initialized = false;
HXLINE(1284)			::TitleState_obj::closedState = false;
HXLINE(1285)			{
HXLINE(1285)				 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1285)				 ::Dynamic onComplete = null();
HXDLIN(1285)				if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1285)					_this->fadeTween->cancel();
            				}
HXDLIN(1285)				_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(0) ),((Float)0.3), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            			}
HXLINE(1286)			::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.5),false, ::Dynamic(new _hx_Closure_0()),true);
HXLINE(1291)			return;
            		}
HXLINE(1294)		this->menuItems->forEachAlive( ::Dynamic(new _hx_Closure_2(_gthis)),null());
HXLINE(1305)		this->menuChecks->forEachAlive( ::Dynamic(new _hx_Closure_4(_gthis)),null());
HXLINE(1315)		if ((this->curPage == HX_("freeplay",a0,90,86,22))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1320_backItem)
HXLINE(1320)				_gthis->songBGDescTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1316)			bool _hx_tmp1;
HXDLIN(1316)			if (::hx::IsNotNull( this->songBGDescTween )) {
HXLINE(1316)				_hx_tmp1 = this->songBGDescTween->active;
            			}
            			else {
HXLINE(1316)				_hx_tmp1 = false;
            			}
HXDLIN(1316)			if (_hx_tmp1) {
HXLINE(1317)				this->songBGDescTween->cancel();
            			}
HXLINE(1319)			this->songBGDescTween = ::flixel::tweens::FlxTween_obj::tween(this->songBGDesc, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),1350)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backIn_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_5(_gthis)))));
            		}
HXLINE(1324)		this->menuIcons->forEach( ::Dynamic(new _hx_Closure_6()),null());
HXLINE(1328)		if ((this->curPage == HX_("options1",13,bf,6e,1e))) {
HXLINE(1329)			this->createOptions(0);
HXLINE(1330)			::ClientPrefs_obj::saveSettings();
            		}
            		else {
HXLINE(1332)			::ClientPrefs_obj::saveSettings();
HXLINE(1334)			::String _hx_tmp2;
HXDLIN(1334)			if (::ClientPrefs_obj::cute) {
HXLINE(1334)				_hx_tmp2 = HX_("Cute ",fd,31,87,e1);
            			}
            			else {
HXLINE(1334)				_hx_tmp2 = HX_("",00,00,00,00);
            			}
HXDLIN(1334)			::DiscordClient_obj::changePresence(((HX_("In the ",8a,20,af,90) + _hx_tmp2) + HX_("Menu",bf,71,32,33)),null(),null(),null(),null());
HXLINE(1337)			this->ammarText->set_visible(true);
HXDLIN(1337)			this->ammarText->set_alpha(( (Float)(1) ));
HXLINE(1338)			this->createMenu();
            		}
HXLINE(1341)		this->changeItem(-(this->curSelected),true,false);
HXLINE(1343)		 ::flixel::FlxSprite _hx_tmp3 = this->modifierBG;
HXDLIN(1343)		_hx_tmp3->set_alpha(this->modifierText->set_alpha(( (Float)(0) )));
HXLINE(1345)		bool _hx_tmp4;
HXDLIN(1345)		if (::hx::IsNotNull( this->borderTween )) {
HXLINE(1345)			_hx_tmp4 = this->borderTween->active;
            		}
            		else {
HXLINE(1345)			_hx_tmp4 = false;
            		}
HXDLIN(1345)		if (_hx_tmp4) {
HXLINE(1346)			this->borderTween->cancel();
            		}
HXLINE(1347)		this->border->set_x(( (Float)(-80) ));
HXLINE(1348)		 ::flixel::FlxSprite _hx_tmp5 = this->border;
HXDLIN(1348)		Float _hx_tmp6 = (((Float)640.) - (this->border->get_width() / ( (Float)(2) )));
HXDLIN(1348)		this->borderTween = ::flixel::tweens::FlxTween_obj::tween(_hx_tmp5, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),_hx_tmp6)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,backItem,(void))

void MainMenuStateAmmar_obj::holdOption(){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1352_holdOption)
HXLINE(1353)		 ::MenuText targetMember = Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >();
HXLINE(1354)		::String saveName = this->optionsList->__get(targetMember->objectID).StaticCast< ::Array< ::String > >()->__get(2);
HXLINE(1356)		if ((saveName == HX_("delete",2b,c0,d8,6a))) {
HXLINE(1357)			 ::MainMenuStateAmmar _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1357)			_hx_tmp->holdOptionTime = (_hx_tmp->holdOptionTime + ::flixel::FlxG_obj::elapsed);
HXLINE(1358)			this->camBG->shake((this->holdOptionTime / ( (Float)(100) )),((Float)0.1),null(),null(),null());
HXLINE(1359)			this->camHUD->shake((this->holdOptionTime / ( (Float)(100) )),((Float)0.1),null(),null(),null());
HXLINE(1360)			::flixel::FlxG_obj::sound->music->set_volume((( (Float)(1) ) - (this->holdOptionTime / ((Float)2.5))));
HXLINE(1361)			this->holdOptionPass = 0;
HXLINE(1362)			if ((this->holdOptionTime >= 3)) {
HXLINE(1363)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1363)				_hx_tmp1->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE(1364)				::TitleState_obj::initialized = false;
HXLINE(1365)				::TitleState_obj::closedState = false;
HXLINE(1366)				{
HXLINE(1366)					 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1366)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(1367)				::flixel::FlxG_obj::sound->music = null();
HXLINE(1368)				::ClientPrefs_obj::resetSaves();
HXLINE(1369)				::flixel::FlxG_obj::game->_resetGame = true;
HXLINE(1370)				::haxe::Log_obj::trace(HX_W(u"Delete Save Files \U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628\U0001f628",73b8,d701),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),1370,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("holdOption",14,0a,a7,54)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,holdOption,(void))

void MainMenuStateAmmar_obj::selectOption(int select){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1376_selectOption)
HXLINE(1377)		 ::MenuText targetMember = Dynamic( this->menuItems->members->__get(select)).StaticCast<  ::MenuText >();
HXLINE(1378)		::String saveName = this->optionsList->__get(targetMember->objectID).StaticCast< ::Array< ::String > >()->__get(2);
HXLINE(1379)		if ((this->optionsList->__get(targetMember->objectID).StaticCast< ::Array< ::String > >()->__get(2) == HX_("cute",a3,4c,c9,41))) {
HXLINE(1380)			bool _hx_tmp;
HXDLIN(1380)			bool _hx_tmp1;
HXDLIN(1380)			bool _hx_tmp2;
HXDLIN(1380)			if (this->checkSongFinish(HX_("discord-annoyer",97,ac,58,20),null())) {
HXLINE(1380)				_hx_tmp2 = this->checkSongFinish(HX_("shut-up",14,0a,f3,ed),null());
            			}
            			else {
HXLINE(1380)				_hx_tmp2 = false;
            			}
HXDLIN(1380)			if (_hx_tmp2) {
HXLINE(1380)				_hx_tmp1 = this->checkSongFinish(HX_("depression",a6,ce,69,c6),null());
            			}
            			else {
HXLINE(1380)				_hx_tmp1 = false;
            			}
HXDLIN(1380)			if (_hx_tmp1) {
HXLINE(1380)				_hx_tmp = this->checkSongFinish(HX_("moderator",05,40,3b,22),null());
            			}
            			else {
HXLINE(1380)				_hx_tmp = false;
            			}
HXDLIN(1380)			if (!(_hx_tmp)) {
HXLINE(1383)				this->popLocked(HX_("Beat Discord Annoyer first before accessing the cute option. OvO",80,e5,0e,ae));
HXLINE(1384)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(1384)				_hx_tmp3->play(::MainMenuStateAmmar_obj::sounds->get(HX_("locked",0a,05,c7,59)),null(),null(),null(),null(),null());
HXLINE(1385)				return;
            			}
            		}
HXLINE(1389)		if ((this->optionsList->__get(targetMember->objectID).StaticCast< ::Array< ::String > >()->__get(2) == HX_("developer",4a,e3,1e,fd))) {
HXLINE(1391)			bool _hx_tmp4;
HXDLIN(1391)			if (this->checkSongFinish(HX_("no-debug",07,16,aa,70),null())) {
HXLINE(1391)				_hx_tmp4 = this->checkSongFinish(HX_("myself",f8,10,b3,8c),null());
            			}
            			else {
HXLINE(1391)				_hx_tmp4 = false;
            			}
HXDLIN(1391)			if (!(_hx_tmp4)) {
HXLINE(1394)				this->popLocked(HX_("Beat Debug first before becoming developer",88,78,10,7a));
HXLINE(1395)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN(1395)				_hx_tmp5->play(::MainMenuStateAmmar_obj::sounds->get(HX_("locked",0a,05,c7,59)),null(),null(),null(),null(),null());
HXLINE(1396)				return;
            			}
HXLINE(1399)			if (( (bool)(::Reflect_obj::getProperty(::hx::ClassOf< ::ClientPrefs >(),saveName)) )) {
HXLINE(1399)				return;
            			}
            		}
HXLINE(1401)		if ((saveName == HX_("delete",2b,c0,d8,6a))) {
HXLINE(1401)			return;
            		}
HXLINE(1402)		 ::Checkbox targetCheck = Dynamic( this->menuChecks->members->__get(targetMember->objectID)).StaticCast<  ::Checkbox >();
HXLINE(1404)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp6 = ::flixel::FlxG_obj::sound;
HXDLIN(1404)		_hx_tmp6->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
HXLINE(1406)		::Reflect_obj::setProperty(::hx::ClassOf< ::ClientPrefs >(),saveName,!(( (bool)(::Reflect_obj::getProperty(::hx::ClassOf< ::ClientPrefs >(),saveName)) )));
HXLINE(1407)		targetCheck->set_daValue(( (bool)(::Reflect_obj::getProperty(::hx::ClassOf< ::ClientPrefs >(),saveName)) ));
HXLINE(1409)		if ((this->optionsList->__get(targetMember->objectID).StaticCast< ::Array< ::String > >()->__get(2) == HX_("cute",a3,4c,c9,41))) {
HXLINE(1410)			this->haveToReset = (this->openWithCute != ::ClientPrefs_obj::cute);
HXLINE(1411)			::ClientPrefs_obj::saveSettings();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuStateAmmar_obj,selectOption,(void))

void MainMenuStateAmmar_obj::selectItem(){
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1415_selectItem)
HXDLIN(1415)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1419)		::String selectedButton = HX_("",00,00,00,00);
HXLINE(1420)		bool _hx_tmp;
HXDLIN(1420)		bool _hx_tmp1;
HXDLIN(1420)		bool _hx_tmp2;
HXDLIN(1420)		if ((this->curPage != HX_("freeplay",a0,90,86,22))) {
HXLINE(1420)			_hx_tmp2 = (this->curPage != HX_("story menu",aa,49,a0,5e));
            		}
            		else {
HXLINE(1420)			_hx_tmp2 = false;
            		}
HXDLIN(1420)		if (_hx_tmp2) {
HXLINE(1420)			_hx_tmp1 = (this->curPage != HX_("badges",f0,77,3f,4b));
            		}
            		else {
HXLINE(1420)			_hx_tmp1 = false;
            		}
HXDLIN(1420)		if (_hx_tmp1) {
HXLINE(1420)			_hx_tmp = (this->curPage != HX_("credits",1a,0e,5e,13));
            		}
            		else {
HXLINE(1420)			_hx_tmp = false;
            		}
HXDLIN(1420)		if (_hx_tmp) {
HXLINE(1421)			this->selectedSomething = true;
HXLINE(1422)			this->itemMove();
            		}
HXLINE(1427)		if ((this->curPage == HX_("freeplay",a0,90,86,22))) {
HXLINE(1428)			this->playSong();
            		}
            		else {
HXLINE(1429)			if ((this->curPage == HX_("story menu",aa,49,a0,5e))) {
HXLINE(1430)				::CustomFadeTransition_obj::nextCamera = this->camHUD;
HXLINE(1431)				this->selectedSomething = true;
HXLINE(1432)				this->playStory();
            			}
            			else {
HXLINE(1434)				if ((this->curPage == HX_("main",39,38,56,48))) {
HXLINE(1435)					this->transProgress(false);
HXLINE(1436)					selectedButton = ::StringTools_obj::trim(this->menuList->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(0).toLowerCase());
HXLINE(1437)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(1437)					_hx_tmp3->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE(1438)					::String _hx_switch_0 = selectedButton;
            					if (  (_hx_switch_0==HX_("badges",f0,77,3f,4b)) ){
HXLINE(1466)						this->createBadges();
HXLINE(1468)						::String _hx_tmp4;
HXDLIN(1468)						if (::ClientPrefs_obj::cute) {
HXLINE(1468)							_hx_tmp4 = HX_("Cute ",fd,31,87,e1);
            						}
            						else {
HXLINE(1468)							_hx_tmp4 = HX_("",00,00,00,00);
            						}
HXDLIN(1468)						::DiscordClient_obj::changePresence(((HX_("In the ",8a,20,af,90) + _hx_tmp4) + HX_("Badges",10,ec,d3,7f)),null(),null(),null(),null());
HXLINE(1465)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_0==HX_("credits",1a,0e,5e,13)) ){
HXLINE(1471)						this->createCredits();
HXLINE(1473)						::String _hx_tmp5;
HXDLIN(1473)						if (::ClientPrefs_obj::cute) {
HXLINE(1473)							_hx_tmp5 = HX_("Cute ",fd,31,87,e1);
            						}
            						else {
HXLINE(1473)							_hx_tmp5 = HX_("",00,00,00,00);
            						}
HXDLIN(1473)						::DiscordClient_obj::changePresence(((HX_("In the ",8a,20,af,90) + _hx_tmp5) + HX_("Credits",fa,35,af,e0)),null(),null(),null(),null());
HXLINE(1470)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_0==HX_("freeplay",a0,90,86,22)) ){
HXLINE(1461)						this->createFreeplay();
HXLINE(1463)						::String _hx_tmp6;
HXDLIN(1463)						if (::ClientPrefs_obj::cute) {
HXLINE(1463)							_hx_tmp6 = HX_("Cute ",fd,31,87,e1);
            						}
            						else {
HXLINE(1463)							_hx_tmp6 = HX_("",00,00,00,00);
            						}
HXDLIN(1463)						::DiscordClient_obj::changePresence(((HX_("In the ",8a,20,af,90) + _hx_tmp6) + HX_("Freeplay",c0,4c,38,fc)),null(),null(),null(),null());
HXLINE(1460)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_0==HX_("options",5e,33,fe,df)) ){
HXLINE(1476)						this->createOptions(0);
HXLINE(1478)						::String _hx_tmp7;
HXDLIN(1478)						if (::ClientPrefs_obj::cute) {
HXLINE(1478)							_hx_tmp7 = HX_("Cute ",fd,31,87,e1);
            						}
            						else {
HXLINE(1478)							_hx_tmp7 = HX_("",00,00,00,00);
            						}
HXDLIN(1478)						::DiscordClient_obj::changePresence(((HX_("In the ",8a,20,af,90) + _hx_tmp7) + HX_("Options",3e,5b,4f,ad)),null(),null(),null(),null());
HXLINE(1475)						goto _hx_goto_83;
            					}
            					if (  (_hx_switch_0==HX_("story mode",6e,d7,a7,5e)) ){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1449_selectItem)
HXLINE(1450)							_gthis->curSelected = 0;
HXLINE(1451)							_gthis->changeStoryScene(0);
HXLINE(1452)							_gthis->talking(HX_("",00,00,00,00),true,null());
HXLINE(1453)							_gthis->selectedSomething = false;
HXLINE(1454)							{
HXLINE(1454)								int _g = 0;
HXDLIN(1454)								::Array< ::Dynamic> _g1 = _gthis->weeks;
HXDLIN(1454)								while((_g < _g1->length)){
HXLINE(1454)									::Array< ::Dynamic> week = _g1->__get(_g).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(1454)									_g = (_g + 1);
HXLINE(1455)									{
HXLINE(1455)										int _g2 = 0;
HXDLIN(1455)										while((_g2 < week->length)){
HXLINE(1455)											 ::StorySprite sprite = week->__get(_g2).StaticCast<  ::StorySprite >();
HXDLIN(1455)											_g2 = (_g2 + 1);
HXLINE(1456)											sprite->set_alpha(( (Float)(1) ));
            										}
            									}
            								}
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1440)						this->curPage = HX_("story menu",aa,49,a0,5e);
HXLINE(1442)						::String _hx_tmp8;
HXDLIN(1442)						if (::ClientPrefs_obj::cute) {
HXLINE(1442)							_hx_tmp8 = HX_("Cute ",fd,31,87,e1);
            						}
            						else {
HXLINE(1442)							_hx_tmp8 = HX_("",00,00,00,00);
            						}
HXDLIN(1442)						::DiscordClient_obj::changePresence(((HX_("In the ",8a,20,af,90) + _hx_tmp8) + HX_("Story Mode",ae,07,32,40)),null(),null(),null(),null());
HXLINE(1447)						this->ammarText->set_visible(false);
HXDLIN(1447)						this->ammarText->set_alpha(( (Float)(0) ));
HXLINE(1448)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(1439)						goto _hx_goto_83;
            					}
            					_hx_goto_83:;
            				}
            				else {
HXLINE(1482)					if ((this->curPage == HX_("badges",f0,77,3f,4b))) {
HXLINE(1483)						::haxe::Log_obj::trace(HX_("badge",23,c7,ae,ad),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),1483,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("selectItem",2f,3a,5b,b4)));
            					}
            					else {
HXLINE(1484)						if ((this->curPage == HX_("credits",1a,0e,5e,13))) {
HXLINE(1485)							::haxe::Log_obj::trace(HX_("linklol",cf,f4,a6,23),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),1485,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("selectItem",2f,3a,5b,b4)));
HXLINE(1486)							bool _hx_tmp9;
HXDLIN(1486)							if (::hx::IsNotNull( ::cpp::VirtualArray( this->creditsList->__get(this->curSelected))->__get(3) )) {
HXLINE(1486)								_hx_tmp9 = ::hx::IsGreater( ::cpp::VirtualArray( this->creditsList->__get(this->curSelected))->__get(3)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),4 );
            							}
            							else {
HXLINE(1486)								_hx_tmp9 = true;
            							}
HXDLIN(1486)							if (_hx_tmp9) {
HXLINE(1488)								::CoolUtil_obj::browserLoad(( (::String)(::cpp::VirtualArray( this->creditsList->__get(this->curSelected))->__get(3)) ));
            							}
            						}
            						else {
HXLINE(1490)							if ((this->curPage == HX_("options0",12,bf,6e,1e))) {
HXLINE(1491)								if ((Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >()->text == HX_("Mod Options",c0,df,1a,5d))) {
HXLINE(1492)									this->createOptions(1);
            								}
            								else {
HXLINE(1494)									::flixel::input::mouse::FlxMouseEvent_obj::globalManager->removeAll();
HXLINE(1495)									::CustomFadeTransition_obj::nextCamera = this->camHUD;
HXLINE(1496)									::MusicBeatState_obj::switchState(::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::options::OptionsState_obj::__alloc( HX_CTX ,null(),null())) ),false));
HXLINE(1497)									if (::hx::IsNotNull( ::PlayState_obj::SONG )) {
HXLINE(1499)										::PlayState_obj::SONG->__SetField(HX_("arrowSkin",e6,d4,f8,07),null(),::hx::paccDynamic);
HXLINE(1500)										::PlayState_obj::SONG->__SetField(HX_("splashSkin",84,03,e1,a1),null(),::hx::paccDynamic);
            									}
            								}
HXLINE(1504)								::ClientPrefs_obj::saveSettings();
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1507)		bool _hx_tmp10;
HXDLIN(1507)		bool _hx_tmp11;
HXDLIN(1507)		bool _hx_tmp12;
HXDLIN(1507)		if ((this->curPage != HX_("freeplay",a0,90,86,22))) {
HXLINE(1507)			_hx_tmp12 = (this->curPage != HX_("story menu",aa,49,a0,5e));
            		}
            		else {
HXLINE(1507)			_hx_tmp12 = false;
            		}
HXDLIN(1507)		if (_hx_tmp12) {
HXLINE(1507)			_hx_tmp11 = (this->curPage != HX_("badges",f0,77,3f,4b));
            		}
            		else {
HXLINE(1507)			_hx_tmp11 = false;
            		}
HXDLIN(1507)		if (_hx_tmp11) {
HXLINE(1507)			_hx_tmp10 = (this->curPage != HX_("credits",1a,0e,5e,13));
            		}
            		else {
HXLINE(1507)			_hx_tmp10 = false;
            		}
HXDLIN(1507)		if (_hx_tmp10) {
HXLINE(1508)			this->changeItem(-(this->curSelected),true,false);
            		}
HXLINE(1510)		bool _hx_tmp13;
HXDLIN(1510)		if (::hx::IsNotNull( this->borderTween )) {
HXLINE(1510)			_hx_tmp13 = this->borderTween->active;
            		}
            		else {
HXLINE(1510)			_hx_tmp13 = false;
            		}
HXDLIN(1510)		if (_hx_tmp13) {
HXLINE(1511)			this->borderTween->cancel();
            		}
HXLINE(1512)		this->border->set_x(( (Float)(-80) ));
HXLINE(1513)		 ::flixel::FlxSprite _hx_tmp14 = this->border;
HXDLIN(1513)		Float _hx_tmp15 = (((Float)640.) - (this->border->get_width() / ( (Float)(2) )));
HXDLIN(1513)		this->borderTween = ::flixel::tweens::FlxTween_obj::tween(_hx_tmp14, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),_hx_tmp15)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,selectItem,(void))

void MainMenuStateAmmar_obj::itemMove(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            		void _hx_run( ::MenuText member){
            			HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1518_itemMove)
HXLINE(1519)			member->noMove = true;
HXLINE(1520)			Float targetX = (member->x - ( (Float)(400) ));
HXDLIN(1520)			Float targetX1 = (targetX - member->get_width());
HXLINE(1521)			::flixel::tweens::FlxTween_obj::cancelTweensOf(member,null());
HXLINE(1522)			bool _hx_tmp;
HXDLIN(1522)			if ((member->partOf == HX_("main",39,38,56,48))) {
HXLINE(1522)				_hx_tmp = (member->objectID == _gthis->curSelected);
            			}
            			else {
HXLINE(1522)				_hx_tmp = false;
            			}
HXDLIN(1522)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::MainMenuStateAmmar,_gthis, ::MenuText,member) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1524_itemMove)
HXLINE(1525)					_gthis->menuItems->remove(member,true).StaticCast<  ::MenuText >();
HXLINE(1526)					member->destroy();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1523)				::flixel::tweens::FlxTween_obj::tween(member, ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("x",78,00,00,00),(member->x + 50))
            					->setFixed(1,HX_("scale.x",94,2d,07,65),((Float)1.3))
            					->setFixed(2,HX_("scale.y",95,2d,07,65),((Float)1.3))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticOut_dyn())));
HXLINE(1524)				::flixel::tweens::FlxTween_obj::tween(member, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),targetX1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backIn_dyn())
            					->setFixed(2,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis,member)))));
            			}
            			else {
HXLINE(1529)				bool _hx_tmp1;
HXDLIN(1529)				bool _hx_tmp2;
HXDLIN(1529)				if ((member->objectID != _gthis->curSelected)) {
HXLINE(1529)					_hx_tmp2 = (member->partOf == HX_("freeplay",a0,90,86,22));
            				}
            				else {
HXLINE(1529)					_hx_tmp2 = false;
            				}
HXDLIN(1529)				if (!(_hx_tmp2)) {
HXLINE(1529)					_hx_tmp1 = (member->partOf != HX_("freeplay",a0,90,86,22));
            				}
            				else {
HXLINE(1529)					_hx_tmp1 = true;
            				}
HXDLIN(1529)				if (_hx_tmp1) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::MainMenuStateAmmar,_gthis, ::MenuText,member) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1530_itemMove)
HXLINE(1531)						_gthis->menuItems->remove(member,true).StaticCast<  ::MenuText >();
HXLINE(1532)						member->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1530)					::flixel::tweens::FlxTween_obj::tween(member, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),targetX1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backIn_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis,member)))));
            				}
            			}
HXLINE(1535)			bool _hx_tmp3;
HXDLIN(1535)			if (::hx::IsNotNull( member->partner )) {
HXLINE(1535)				_hx_tmp3 = (member->partOf == HX_("main",39,38,56,48));
            			}
            			else {
HXLINE(1535)				_hx_tmp3 = false;
            			}
HXDLIN(1535)			if (_hx_tmp3) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MenuText,member) HXARGC(1)
            				void _hx_run( ::flixel::tweens::FlxTween tween){
            					HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1538_itemMove)
HXLINE(1538)					member->partner->destroy();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1536)				member->partner->noMove = true;
HXLINE(1537)				::flixel::tweens::FlxTween_obj::tween(member->partner, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),(member->partner->x + 600))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backIn_dyn())
            					->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(member)))));
            			}
HXLINE(1541)			if (::hx::IsNotNull( member->checks )) {
HXLINE(1542)				int _g = 0;
HXDLIN(1542)				::Array< ::Dynamic> _g1 = member->checks;
HXDLIN(1542)				while((_g < _g1->length)){
HXLINE(1542)					 ::CheckSprite item = _g1->__get(_g).StaticCast<  ::CheckSprite >();
HXDLIN(1542)					_g = (_g + 1);
HXLINE(1543)					_gthis->menuItemChecks->remove(item,true).StaticCast<  ::CheckSprite >();
HXLINE(1544)					item->destroy();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1517_itemMove)
HXDLIN(1517)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1518)		this->menuItems->forEachAlive( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,itemMove,(void))

void MainMenuStateAmmar_obj::changeStoryScene(::hx::Null< int >  __o_select){
            		int select = __o_select.Default(0);
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1550_changeStoryScene)
HXLINE(1551)		bool _hx_tmp;
HXDLIN(1551)		if (::hx::IsNotNull( this->weeks->__get(select).StaticCast< ::Array< ::Dynamic> >() )) {
HXLINE(1551)			_hx_tmp = (select != -1);
            		}
            		else {
HXLINE(1551)			_hx_tmp = false;
            		}
HXDLIN(1551)		if (_hx_tmp) {
HXLINE(1552)			int _g = 0;
HXDLIN(1552)			::Array< ::Dynamic> _g1 = this->weeks->__get(select).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(1552)			while((_g < _g1->length)){
HXLINE(1552)				 ::StorySprite spr = _g1->__get(_g).StaticCast<  ::StorySprite >();
HXDLIN(1552)				_g = (_g + 1);
HXLINE(1553)				if (::hx::IsNotNull( spr->tween )) {
HXLINE(1553)					spr->tween->cancel();
            				}
HXLINE(1554)				spr->tween = ::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),spr->centerx)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1555)				if (::hx::IsNotNull( spr->alphatween )) {
HXLINE(1555)					spr->alphatween->cancel();
            				}
HXLINE(1556)				spr->alphatween = ::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),1)),((Float)0.1),null());
            			}
            		}
HXLINE(1559)		{
HXLINE(1559)			int _g2 = 0;
HXDLIN(1559)			int _g3 = this->weeks->length;
HXDLIN(1559)			while((_g2 < _g3)){
HXLINE(1559)				_g2 = (_g2 + 1);
HXDLIN(1559)				int i = (_g2 - 1);
HXLINE(1560)				if ((select != i)) {
HXLINE(1561)					int _g4 = 0;
HXDLIN(1561)					::Array< ::Dynamic> _g5 = this->weeks->__get(i).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(1561)					while((_g4 < _g5->length)){
HXLINE(1561)						 ::StorySprite spr1 = _g5->__get(_g4).StaticCast<  ::StorySprite >();
HXDLIN(1561)						_g4 = (_g4 + 1);
HXLINE(1562)						if (::hx::IsNotNull( spr1->tween )) {
HXLINE(1562)							spr1->tween->cancel();
            						}
HXLINE(1563)						int _hx_tmp1;
HXDLIN(1563)						if ((::hx::Mod(spr1->ID,2) == 0)) {
HXLINE(1563)							_hx_tmp1 = 1;
            						}
            						else {
HXLINE(1563)							_hx_tmp1 = -1;
            						}
HXDLIN(1563)						spr1->tween = ::flixel::tweens::FlxTween_obj::tween(spr1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("x",78,00,00,00),(spr1->centerx + (1280 * _hx_tmp1)))),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
HXLINE(1564)						if (::hx::IsNotNull( spr1->alphatween )) {
HXLINE(1564)							spr1->alphatween->cancel();
            						}
HXLINE(1565)						spr1->alphatween = ::flixel::tweens::FlxTween_obj::tween(spr1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.1), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuStateAmmar_obj,changeStoryScene,(void))

void MainMenuStateAmmar_obj::createStorySprites(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::StorySprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1631_createStorySprites)
HXLINE(1632)			spr->set_alpha(( (Float)(0) ));
HXLINE(1633)			int _hx_tmp;
HXDLIN(1633)			if ((::hx::Mod(spr->ID,2) == 0)) {
HXLINE(1633)				_hx_tmp = 1;
            			}
            			else {
HXLINE(1633)				_hx_tmp = -1;
            			}
HXDLIN(1633)			spr->set_x((spr->centerx + (1280 * _hx_tmp)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1571_createStorySprites)
HXLINE(1572)		::String folder = HX_("ammar/weeks",22,0e,f6,47);
HXLINE(1574)		 ::StorySprite bg =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/discordAnnoyer/bg",f9,8a,43,33)),null(),0);
HXDLIN(1574)		this->weeksSprites->add(bg).StaticCast<  ::StorySprite >();
HXDLIN(1574)		bg->zoomSin = true;
HXLINE(1575)		 ::StorySprite user =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/discordAnnoyer/user",7f,7c,0f,40)),null(),2);
HXDLIN(1575)		this->weeksSprites->add(user).StaticCast<  ::StorySprite >();
HXDLIN(1575)		user->sinY = true;
HXLINE(1576)		 ::StorySprite title =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/discordAnnoyer/title",e4,18,86,33)),null(),10);
HXDLIN(1576)		this->weeksSprites->add(title).StaticCast<  ::StorySprite >();
HXDLIN(1576)		title->sinY = true;
HXDLIN(1576)		title->sinOff = ((Float)0.75);
HXLINE(1577)		this->weekDiscordAnnoyer->push(title);
HXLINE(1578)		this->weekDiscordAnnoyer->push(user);
HXLINE(1579)		this->weekDiscordAnnoyer->push(bg);
HXLINE(1582)		 ::StorySprite bg1 =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/bg",2b,47,f8,b2)),null(),0);
HXDLIN(1582)		this->weeksSprites->add(bg1).StaticCast<  ::StorySprite >();
HXDLIN(1582)		bg1->zoomSin = true;
HXLINE(1583)		 ::StorySprite body =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/body",88,11,ff,96)),null(),2);
HXDLIN(1583)		this->weeksSprites->add(body).StaticCast<  ::StorySprite >();
HXDLIN(1583)		body->sinY = true;
HXLINE(1584)		 ::StorySprite rgbbody =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/rgbbody",09,9d,b6,59)),null(),3);
HXDLIN(1584)		this->weeksSprites->add(rgbbody).StaticCast<  ::StorySprite >();
HXLINE(1585)		rgbbody->set_blend(0);
HXLINE(1586)		 ::StorySprite vignette =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/vignette",a0,42,0f,40)),null(),5);
HXDLIN(1586)		this->weeksSprites->add(vignette).StaticCast<  ::StorySprite >();
HXLINE(1587)		 ::StorySprite rgbhead =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/rgbhead",87,4b,a6,5d)),null(),6);
HXDLIN(1587)		this->weeksSprites->add(rgbhead).StaticCast<  ::StorySprite >();
HXLINE(1588)		rgbhead->set_blend(0);
HXLINE(1589)		 ::StorySprite head =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/head",06,c0,ee,9a)),null(),7);
HXDLIN(1589)		this->weeksSprites->add(head).StaticCast<  ::StorySprite >();
HXDLIN(1589)		head->sinY = true;
HXLINE(1590)		 ::StorySprite redVignette =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/redVignette",05,c1,98,22)),null(),8);
HXDLIN(1590)		this->weeksSprites->add(redVignette).StaticCast<  ::StorySprite >();
HXDLIN(1590)		redVignette->zoomSin = true;
HXLINE(1591)		 ::StorySprite rgbtitle =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/rgbtitle",51,0d,5e,7f)),null(),9);
HXDLIN(1591)		this->weeksSprites->add(rgbtitle).StaticCast<  ::StorySprite >();
HXDLIN(1591)		rgbtitle->sinY = true;
HXDLIN(1591)		rgbtitle->sinOff = ((Float)0.25);
HXLINE(1592)		rgbtitle->set_blend(0);
HXLINE(1593)		 ::StorySprite title1 =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/hatingProblem/title",f2,87,7b,e1)),null(),10);
HXDLIN(1593)		this->weeksSprites->add(title1).StaticCast<  ::StorySprite >();
HXDLIN(1593)		title1->sinY = true;
HXDLIN(1593)		title1->sinOff = ((Float)0.25);
HXLINE(1594)		this->weekHatingProblem->push(bg1);
HXLINE(1595)		this->weekHatingProblem->push(body);
HXLINE(1596)		this->weekHatingProblem->push(rgbbody);
HXLINE(1597)		this->weekHatingProblem->push(vignette);
HXLINE(1598)		this->weekHatingProblem->push(rgbhead);
HXLINE(1599)		this->weekHatingProblem->push(head);
HXLINE(1600)		this->weekHatingProblem->push(redVignette);
HXLINE(1601)		this->weekHatingProblem->push(rgbtitle);
HXLINE(1602)		this->weekHatingProblem->push(title1);
HXLINE(1605)		 ::StorySprite bg2 =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/debug/bg",70,ea,12,4b)),null(),0);
HXDLIN(1605)		this->weeksSprites->add(bg2).StaticCast<  ::StorySprite >();
HXDLIN(1605)		bg2->zoomSin = true;
HXLINE(1606)		 ::StorySprite pattern =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/debug/pattern",c5,a5,92,95)),((Float)1.05),1);
HXDLIN(1606)		this->weeksSprites->add(pattern).StaticCast<  ::StorySprite >();
HXDLIN(1606)		pattern->sinY = true;
HXLINE(1607)		 ::StorySprite particle =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/debug/particle",31,25,a1,80)),((Float)1.04),2);
HXDLIN(1607)		this->weeksSprites->add(particle).StaticCast<  ::StorySprite >();
HXDLIN(1607)		particle->sinY = true;
HXDLIN(1607)		particle->sinOff = ((Float)0.5);
HXLINE(1608)		particle->set_blend(0);
HXLINE(1609)		 ::StorySprite title2 =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/debug/title",cd,7d,04,c1)),null(),10);
HXDLIN(1609)		this->weeksSprites->add(title2).StaticCast<  ::StorySprite >();
HXDLIN(1609)		title2->sinY = true;
HXDLIN(1609)		title2->sinOff = ((Float)0.75);
HXLINE(1610)		this->weekDebug->push(title2);
HXLINE(1611)		this->weekDebug->push(pattern);
HXLINE(1612)		this->weekDebug->push(particle);
HXLINE(1613)		this->weekDebug->push(bg2);
HXLINE(1616)		 ::StorySprite bg3 =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/paradise/bg",0e,01,20,9f)),null(),0);
HXDLIN(1616)		this->weeksSprites->add(bg3).StaticCast<  ::StorySprite >();
HXDLIN(1616)		bg3->zoomSin = true;
HXLINE(1617)		 ::StorySprite _hx_char =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(5) ),((HX_("",00,00,00,00) + folder) + HX_("/paradise/char",5f,2e,97,a8)),null(),2);
HXDLIN(1617)		this->weeksSprites->add(_hx_char).StaticCast<  ::StorySprite >();
HXDLIN(1617)		_hx_char->sinY = true;
HXLINE(1618)		 ::StorySprite title3 =  ::StorySprite_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),((HX_("",00,00,00,00) + folder) + HX_("/paradise/title",ef,dd,38,a6)),null(),10);
HXDLIN(1618)		this->weeksSprites->add(title3).StaticCast<  ::StorySprite >();
HXDLIN(1618)		title3->sinY = true;
HXDLIN(1618)		title3->sinOff = ((Float)0.75);
HXLINE(1619)		this->weekKaijuParadise->push(title3);
HXLINE(1620)		this->weekKaijuParadise->push(_hx_char);
HXLINE(1621)		this->weekKaijuParadise->push(bg3);
HXLINE(1624)		if (::ClientPrefs_obj::cute) {
HXLINE(1625)			this->weeks = ::Array_obj< ::Dynamic>::__new(4)->init(0,this->weekDiscordAnnoyer)->init(1,this->weekHatingProblem)->init(2,this->weekDebug)->init(3,this->weekKaijuParadise);
            		}
            		else {
HXLINE(1627)			this->weeks = ::Array_obj< ::Dynamic>::__new(3)->init(0,this->weekDiscordAnnoyer)->init(1,this->weekHatingProblem)->init(2,this->weekDebug);
            		}
HXLINE(1629)		{
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::StorySprite a2, ::StorySprite a3){
            				HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1629_createStorySprites)
HXLINE(1629)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1629)			 ::Dynamic _g = this->sortByOrder_dyn();
HXDLIN(1629)			int a1 = -1;
HXDLIN(1629)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(1629)			this->weeksSprites->members->sort(_hx_tmp);
            		}
HXLINE(1631)		this->weeksSprites->forEachAlive( ::Dynamic(new _hx_Closure_1()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,createStorySprites,(void))

int MainMenuStateAmmar_obj::sortByOrder(int Order, ::StorySprite Obj1, ::StorySprite Obj2){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1639_sortByOrder)
HXDLIN(1639)		Float Value1 = ( (Float)(Obj1->daOrder) );
HXDLIN(1639)		Float Value2 = ( (Float)(Obj2->daOrder) );
HXDLIN(1639)		int result = 0;
HXDLIN(1639)		if ((Value1 < Value2)) {
HXDLIN(1639)			result = Order;
            		}
            		else {
HXDLIN(1639)			if ((Value1 > Value2)) {
HXDLIN(1639)				result = -(Order);
            			}
            		}
HXDLIN(1639)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC3(MainMenuStateAmmar_obj,sortByOrder,return )

void MainMenuStateAmmar_obj::playSong(){
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1643_playSong)
HXDLIN(1643)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1644)		bool _hx_tmp;
HXDLIN(1644)		bool _hx_tmp1;
HXDLIN(1644)		if ((this->difficulty.toLowerCase() == HX_("hard",eb,2e,08,45))) {
HXLINE(1644)			_hx_tmp1 = !(this->checkSongFinish(( (::String)(Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >()->extraData->get(HX_("song",d5,23,58,4c))) ),1));
            		}
            		else {
HXLINE(1644)			_hx_tmp1 = false;
            		}
HXDLIN(1644)		if (!(_hx_tmp1)) {
HXLINE(1644)			_hx_tmp = Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >()->extraData->get_bool(HX_("locked",0a,05,c7,59));
            		}
            		else {
HXLINE(1644)			_hx_tmp = true;
            		}
HXDLIN(1644)		if (_hx_tmp) {
HXLINE(1645)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(1645)			_hx_tmp2->play(::MainMenuStateAmmar_obj::sounds->get(HX_("locked",0a,05,c7,59)),((Float)0.5),null(),null(),null(),null());
HXLINE(1646)			this->popLocked(HX_("You need to complete The Week first",9e,ed,0f,76));
HXLINE(1647)			return;
            		}
HXLINE(1649)		this->itemMove();
HXLINE(1651)		this->changeDiff(0);
HXLINE(1652)		::String path = ( (::String)(Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >()->extraData->get(HX_("song",d5,23,58,4c))) );
HXDLIN(1652)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1652)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1652)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1652)		::String songLowercase = hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE(1654)		if (!(::ClientPrefs_obj::developer)) {
HXLINE(1655)			::antidebug::DebugSave_obj::updateFolder(songLowercase);
            		}
HXLINE(1657)		::ClientPrefs_obj::aDifficulty = this->difficulty;
HXLINE(1658)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(1658)		_hx_tmp3->play(::MainMenuStateAmmar_obj::sounds->get(HX_("impact",c6,f4,77,08)),((Float)0.5),null(),null(),null(),null());
HXLINE(1659)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(1659)		_hx_tmp4->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE(1660)		this->camHUD->flash((int)-2046820353,1,null(),null());
HXLINE(1662)		this->persistentUpdate = false;
HXLINE(1663)		::String pathName = songLowercase;
HXLINE(1664)		if ((this->difficulty.toLowerCase() != HX_("normal",27,72,69,30))) {
HXLINE(1664)			pathName = (pathName + (HX_("-",2d,00,00,00) + this->difficulty.toLowerCase()));
            		}
HXLINE(1665)		 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(1665)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(1665)		::String path2 = invalidChars1->split(::StringTools_obj::replace(pathName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(1665)		::String songName = hideChars1->split(path2)->join(HX_("",00,00,00,00)).toLowerCase();
HXLINE(1666)		::String key = ((((HX_("data/",c5,0e,88,d4) + songLowercase) + HX_("/",2f,00,00,00)) + pathName) + HX_(".json",56,f1,d6,c2));
HXDLIN(1666)		bool _hx_tmp5;
HXDLIN(1666)		bool _hx_tmp6;
HXDLIN(1666)		::String key1 = ((::Paths_obj::currentModDirectory + HX_("/",2f,00,00,00)) + key);
HXDLIN(1666)		if (::hx::IsNull( key1 )) {
HXLINE(1666)			key1 = HX_("",00,00,00,00);
            		}
HXDLIN(1666)		if (!(::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key1)))) {
HXLINE(1666)			::String key2 = key;
HXDLIN(1666)			if (::hx::IsNull( key2 )) {
HXLINE(1666)				key2 = HX_("",00,00,00,00);
            			}
HXDLIN(1666)			_hx_tmp6 = ::sys::FileSystem_obj::exists((HX_("mods/",9e,2f,58,0c) + key2));
            		}
            		else {
HXLINE(1666)			_hx_tmp6 = true;
            		}
HXDLIN(1666)		if (_hx_tmp6) {
HXLINE(1666)			_hx_tmp5 = true;
            		}
            		else {
HXLINE(1666)			if (::openfl::utils::Assets_obj::exists(::Paths_obj::getPath(key,HX_("TEXT",ad,94,ba,37),null()),null())) {
HXLINE(1666)				_hx_tmp5 = true;
            			}
            			else {
HXLINE(1666)				_hx_tmp5 = false;
            			}
            		}
HXDLIN(1666)		if (!(_hx_tmp5)) {
HXLINE(1667)			::haxe::Log_obj::trace((((((((HX_("no ",bf,d8,53,00) + this->difficulty) + HX_(" found : ",e4,ed,1b,90)) + HX_("data/",c5,0e,88,d4)) + songLowercase) + HX_("/",2f,00,00,00)) + pathName) + HX_(".json",56,f1,d6,c2)),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),1667,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("playSong",e9,87,6b,3c)));
HXLINE(1668)			songName = songLowercase;
            		}
HXLINE(1672)		::haxe::Log_obj::trace(this->difficulty,::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),1672,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("playSong",e9,87,6b,3c)));
HXLINE(1673)		::haxe::Log_obj::trace(songName,::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),1673,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("playSong",e9,87,6b,3c)));
HXLINE(1674)		try {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            			void _hx_run( ::MenuText member){
            				HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1684_playSong)
HXLINE(1684)				if ((member->objectID != _gthis->curSelected)) {
HXLINE(1685)					 ::Dynamic CompletionCallback = null();
HXDLIN(1685)					 ::Dynamic ProgressCallback = null();
HXDLIN(1685)					::flixel::effects::FlxFlicker_obj::flicker(member,((Float)0.3),((Float)0.04),false,true,CompletionCallback,ProgressCallback);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1692_playSong)
HXLINE(1692)				::MusicBeatState_obj::switchState(::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1676)			::CoolUtil_obj::difficulties = ::Array_obj< ::String >::fromData( _hx_array_data_9f229619_105,4);
HXLINE(1677)			::haxe::Log_obj::trace(((HX_("-------- ",a0,a2,8b,76) + songName) + HX_(" --------",a0,4d,49,c0)),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),1677,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("playSong",e9,87,6b,3c)));
HXLINE(1678)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(songName,songLowercase);
HXLINE(1679)			::PlayState_obj::isStoryMode = false;
HXLINE(1680)			::PlayState_obj::storyDifficulty = this->diffSelect;
HXLINE(1682)			{
HXLINE(1682)				 ::Dynamic CompletionCallback = null();
HXDLIN(1682)				 ::Dynamic ProgressCallback = null();
HXDLIN(1682)				::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >()) ),1,((Float)0.08),true,true,CompletionCallback,ProgressCallback);
            			}
HXLINE(1683)			this->menuItems->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(1688)			this->selectedSomething = true;
HXLINE(1689)			{
HXLINE(1689)				 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1689)				 ::Dynamic To = 0;
HXDLIN(1689)				 ::Dynamic onComplete = null();
HXDLIN(1689)				if (::hx::IsNull( To )) {
HXLINE(1689)					To = 0;
            				}
HXDLIN(1689)				if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1689)					_this->fadeTween->cancel();
            				}
HXDLIN(1689)				_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),1, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            			}
HXLINE(1690)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1()),null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(1698)				{
HXLINE(1698)					null();
            				}
HXDLIN(1698)				 ::Dynamic e = _g;
HXLINE(1700)				::CoolUtil_obj::showPopUp(( (::String)(e) ),HX_("ERROR!",79,2f,eb,03));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,playSong,(void))

void MainMenuStateAmmar_obj::playStory(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1740_playStory)
HXLINE(1740)			::MusicBeatState_obj::switchState(::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),true));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_1707_playStory)
HXLINE(1708)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1708)		_hx_tmp->play(::MainMenuStateAmmar_obj::sounds->get(HX_("impact",c6,f4,77,08)),((Float)0.5),null(),null(),null(),null());
HXLINE(1709)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1709)		_hx_tmp1->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE(1710)		this->camHUD->flash((int)-2046820353,1,null(),true);
HXLINE(1712)		{
HXLINE(1712)			 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1712)			 ::Dynamic To = 0;
HXDLIN(1712)			 ::Dynamic onComplete = null();
HXDLIN(1712)			if (::hx::IsNull( To )) {
HXLINE(1712)				To = 0;
            			}
HXDLIN(1712)			if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(1712)				_this->fadeTween->cancel();
            			}
HXDLIN(1712)			_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            		}
HXLINE(1713)		::Array< ::String > songArray = ::Array_obj< ::String >::__new(0);
HXLINE(1714)		{
HXLINE(1714)			int _g = 0;
HXDLIN(1714)			::Array< ::Dynamic> _g1 = ::MainMenuStateAmmar_obj::songsList;
HXDLIN(1714)			while((_g < _g1->length)){
HXLINE(1714)				 ::haxe::ds::StringMap song = _g1->__get(_g).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN(1714)				_g = (_g + 1);
HXLINE(1715)				 ::Dynamic _hx_tmp2 = song->get(HX_("week",f4,5f,f5,4e));
HXDLIN(1715)				if (::hx::IsEq( _hx_tmp2,this->weeksList->__get(this->curSelected) )) {
HXLINE(1716)					songArray->push(song->get(HX_("song",d5,23,58,4c)));
            				}
            			}
            		}
HXLINE(1720)		if (!(::ClientPrefs_obj::developer)) {
HXLINE(1721)			::antidebug::DebugSave_obj::updateFolder(songArray->__get(0));
            		}
HXLINE(1723)		::CoolUtil_obj::difficulties = ::Array_obj< ::String >::fromData( _hx_array_data_9f229619_109,4);
HXLINE(1724)		::PlayState_obj::storyPlaylist = songArray;
HXLINE(1725)		::PlayState_obj::isStoryMode = true;
HXLINE(1726)		::PlayState_obj::storyName = this->weeksList->__get(this->curSelected);
HXLINE(1727)		::PlayState_obj::storyWeek = this->curSelected;
HXLINE(1729)		int curDiff = 1;
HXLINE(1730)		::String diffic = ::CoolUtil_obj::getDifficultyFilePath(curDiff);
HXDLIN(1730)		if (::hx::IsNull( diffic )) {
HXLINE(1730)			diffic = HX_("",00,00,00,00);
            		}
HXLINE(1731)		::ClientPrefs_obj::aDifficulty = ::CoolUtil_obj::difficulties->__get(curDiff);
HXLINE(1733)		::PlayState_obj::storyDifficulty = curDiff;
HXLINE(1735)		::PlayState_obj::campaignScore = 0;
HXLINE(1736)		::PlayState_obj::campaignMisses = 0;
HXLINE(1737)		::String _hx_tmp3 = (::PlayState_obj::storyPlaylist->__get(0).toLowerCase() + diffic);
HXDLIN(1737)		::PlayState_obj::SONG = ::Song_obj::loadFromJson(_hx_tmp3,::PlayState_obj::storyPlaylist->__get(0).toLowerCase());
HXLINE(1738)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,playStory,(void))

void MainMenuStateAmmar_obj::changeItem(::hx::Null< int >  __o_amount,::hx::Null< bool >  __o_noChangeColor,::hx::Null< bool >  __o_canTalk){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::MainMenuStateAmmar,_gthis,bool,noChangeColor) HXARGC(1)
            		void _hx_run( ::MenuText member){
            			HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1763_changeItem)
HXLINE(1765)			if (!(noChangeColor)) {
HXLINE(1766)				bool _hx_tmp;
HXDLIN(1766)				if ((member->partOf == HX_("options1",13,bf,6e,1e))) {
HXLINE(1766)					_hx_tmp = (_gthis->optionsList->__get(member->objectID).StaticCast< ::Array< ::String > >()->__get(2) == HX_("cute",a3,4c,c9,41));
            				}
            				else {
HXLINE(1766)					_hx_tmp = false;
            				}
HXDLIN(1766)				if (_hx_tmp) {
HXLINE(1767)					int _hx_tmp1;
HXDLIN(1767)					if ((member->objectID == _gthis->curSelected)) {
HXLINE(1767)						_hx_tmp1 = -1965833;
            					}
            					else {
HXLINE(1767)						_hx_tmp1 = -6750041;
            					}
HXDLIN(1767)					member->set_color(_hx_tmp1);
            				}
            				else {
HXLINE(1769)					int _hx_tmp2;
HXDLIN(1769)					bool _hx_tmp3;
HXDLIN(1769)					if ((member->objectID != _gthis->curSelected)) {
HXLINE(1769)						if ((member->partOf == HX_("freeplay",a0,90,86,22))) {
HXLINE(1769)							_hx_tmp3 = member->extraData->get_bool(HX_("isTitle",4e,b9,c0,ac));
            						}
            						else {
HXLINE(1769)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(1769)						_hx_tmp3 = true;
            					}
HXDLIN(1769)					if (_hx_tmp3) {
HXLINE(1769)						_hx_tmp2 = -1;
            					}
            					else {
HXLINE(1769)						_hx_tmp2 = -6250336;
            					}
HXDLIN(1769)					member->set_color(_hx_tmp2);
            				}
            			}
HXLINE(1770)			bool _hx_tmp4;
HXDLIN(1770)			if ((member->partOf == HX_("main",39,38,56,48))) {
HXLINE(1770)				_hx_tmp4 = !(member->partner->noMove);
            			}
            			else {
HXLINE(1770)				_hx_tmp4 = false;
            			}
HXDLIN(1770)			if (_hx_tmp4) {
HXLINE(1771)				if ((member->objectID == _gthis->curSelected)) {
HXLINE(1772)					::flixel::tweens::FlxTween_obj::cancelTweensOf(member->partner,null());
HXLINE(1773)					::flixel::tweens::FlxTween_obj::tween(member->partner, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("x",78,00,00,00),800)
            						->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
            				}
            				else {
HXLINE(1775)					::flixel::tweens::FlxTween_obj::cancelTweensOf(member->partner,null());
HXLINE(1776)					::flixel::tweens::FlxTween_obj::tween(member->partner, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("x",78,00,00,00),1300)
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.25), ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int amount = __o_amount.Default(0);
            		bool noChangeColor = __o_noChangeColor.Default(false);
            		bool canTalk = __o_canTalk.Default(true);
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1745_changeItem)
HXDLIN(1745)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1746)		int prevSelect = this->curSelected;
HXLINE(1747)		 ::MainMenuStateAmmar _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1747)		_hx_tmp->curSelected = (_hx_tmp->curSelected + amount);
HXLINE(1748)		if ((this->curPage != HX_("story menu",aa,49,a0,5e))) {
HXLINE(1749)			this->curSelected = ::flixel::math::FlxMath_obj::wrap(this->curSelected,0,(this->menuItems->length - 1));
            		}
            		else {
HXLINE(1751)			this->curSelected = ::flixel::math::FlxMath_obj::wrap(this->curSelected,0,(this->weeks->length - 1));
HXLINE(1752)			this->changeStoryScene(this->curSelected);
HXLINE(1753)			this->talking(HX_("",00,00,00,00),true,null());
HXLINE(1754)			return;
            		}
HXLINE(1756)		 ::MenuText curMember = Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >();
HXLINE(1757)		bool _hx_tmp1;
HXDLIN(1757)		if ((curMember->partOf == HX_("freeplay",a0,90,86,22))) {
HXLINE(1757)			_hx_tmp1 = curMember->extraData->get_bool(HX_("isTitle",4e,b9,c0,ac));
            		}
            		else {
HXLINE(1757)			_hx_tmp1 = false;
            		}
HXDLIN(1757)		if (_hx_tmp1) {
HXLINE(1758)			 ::MainMenuStateAmmar _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1758)			int _hx_tmp3;
HXDLIN(1758)			if ((amount < 0)) {
HXLINE(1758)				_hx_tmp3 = -1;
            			}
            			else {
HXLINE(1758)				_hx_tmp3 = 1;
            			}
HXDLIN(1758)			_hx_tmp2->curSelected = (_hx_tmp2->curSelected + _hx_tmp3);
HXLINE(1759)			this->curSelected = ::flixel::math::FlxMath_obj::wrap(this->curSelected,0,(this->menuItems->length - 1));
            		}
HXLINE(1763)		this->menuItems->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,noChangeColor)),null());
HXLINE(1782)		::flixel::tweens::FlxTween_obj::cancelTweensOf(this->ammarText,null());
HXLINE(1783)		if ((this->curPage == HX_("main",39,38,56,48))) {
HXLINE(1784)			::flixel::tweens::FlxTween_obj::tween(this->ammarText, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),780)
            				->setFixed(1,HX_("y",79,00,00,00),510)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
            		}
HXLINE(1786)		int _hx_tmp4;
HXDLIN(1786)		if (this->openWithCute) {
HXLINE(1786)			_hx_tmp4 = -150;
            		}
            		else {
HXLINE(1786)			_hx_tmp4 = 0;
            		}
HXDLIN(1786)		this->ammar->set_y(( (Float)((237 + _hx_tmp4)) ));
HXLINE(1787)		bool _hx_tmp5;
HXDLIN(1787)		if (::hx::IsNotNull( this->ammarTalkingTween )) {
HXLINE(1787)			_hx_tmp5 = this->ammarTalkingTween->active;
            		}
            		else {
HXLINE(1787)			_hx_tmp5 = false;
            		}
HXDLIN(1787)		if (_hx_tmp5) {
HXLINE(1788)			this->ammarTalkingTween->cancel();
            		}
HXLINE(1790)		int _hx_tmp6;
HXDLIN(1790)		if (this->openWithCute) {
HXLINE(1790)			_hx_tmp6 = -150;
            		}
            		else {
HXLINE(1790)			_hx_tmp6 = 0;
            		}
HXDLIN(1790)		this->ammarTalkingTween = ::flixel::tweens::FlxTween_obj::tween(this->ammar, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(227 + _hx_tmp6))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(1793)		bool _hx_tmp7;
HXDLIN(1793)		if ((curMember->partOf == HX_("freeplay",a0,90,86,22))) {
HXLINE(1793)			_hx_tmp7 = !(( (bool)(curMember->extraData->get(HX_("isTitle",4e,b9,c0,ac))) ));
            		}
            		else {
HXLINE(1793)			_hx_tmp7 = false;
            		}
HXDLIN(1793)		if (_hx_tmp7) {
HXLINE(1794)			::String songName = ( (::String)(curMember->extraData->get(HX_("song",d5,23,58,4c))->__Field(HX_("toUpperCase",37,30,fd,38),::hx::paccDynamic)()) );
HXLINE(1795)			Float scores = ( (Float)(::Highscore_obj::getScore(songName,this->diffSelect)) );
HXLINE(1796)			Float misses = ( (Float)(::Highscore_obj::getMiss(songName,this->diffSelect)) );
HXLINE(1797)			Float accuracy = ::Highscore_obj::floorDecimal((::Highscore_obj::getRating(songName,this->diffSelect) * ( (Float)(100) )),2);
HXLINE(1798)			if (( (bool)(curMember->extraData->get(HX_("locked",0a,05,c7,59))) )) {
HXLINE(1798)				songName = HX_("???",1f,05,30,00);
            			}
HXLINE(1799)			this->setSongDesc(((((((((HX_("\n                [ ",ef,f9,5f,d2) + songName) + HX_(" ]\n                SCORES: !",ad,4f,42,80)) + scores) + HX_("!\n                MISSES: !",a8,ee,61,f2)) + misses) + HX_("!\n                ACCURACY: !",f9,65,61,b7)) + accuracy) + HX_("%!\n            ",2e,65,ec,bb)));
            		}
HXLINE(1806)		if ((curMember->partOf == HX_("freeplay",a0,90,86,22))) {
HXLINE(1807)			::Dynamic this1 = this->songsDifficulty;
HXDLIN(1807)			::Array< int > getSong = ( (::Array< int >)(( ( ::haxe::ds::StringMap)(this1) )->get(( (::String)(curMember->extraData->get(HX_("song",d5,23,58,4c))) ))) );
HXLINE(1808)			if (::hx::IsNotNull( getSong )) {
HXLINE(1809)				this->difficultyPoint = getSong->__get(this->diffSelect);
            			}
            		}
HXLINE(1812)		if (canTalk) {
HXLINE(1813)			if ((curMember->partOf == HX_("options1",13,bf,6e,1e))) {
HXLINE(1814)				this->talking(this->optionsList->__get(this->curSelected).StaticCast< ::Array< ::String > >()->__get(1),true,2);
            			}
            			else {
HXLINE(1815)				if ((curMember->partOf == HX_("main",39,38,56,48))) {
HXLINE(1816)					this->talking(this->menuList->__get(curMember->objectID).StaticCast< ::Array< ::String > >()->__get(1),true,1);
            				}
            				else {
HXLINE(1817)					if ((this->curPage == HX_("badges",f0,77,3f,4b))) {
HXLINE(1818)						this->talking(( (::String)(curMember->extraData->get(HX_("desc",51,5e,66,42))) ),true,1);
            					}
            					else {
HXLINE(1819)						if ((this->curPage == HX_("credits",1a,0e,5e,13))) {
HXLINE(1820)							this->talking(( (::String)(curMember->extraData->get(HX_("desc",51,5e,66,42))) ),true,1);
            						}
            						else {
HXLINE(1821)							if ((this->curPage == HX_("freeplay",a0,90,86,22))) {
HXLINE(1822)								this->ammarText->set_text(HX_("",00,00,00,00));
            							}
            							else {
HXLINE(1824)								this->ammarText->set_text(HX_("",00,00,00,00));
HXLINE(1825)								this->talking(HX_(" ",20,00,00,00),true,null());
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1829)		if ((amount != 0)) {
HXLINE(1829)			this->changeDiff(0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(MainMenuStateAmmar_obj,changeItem,(void))

void MainMenuStateAmmar_obj::changeDiff(::hx::Null< int >  __o_amount){
            		int amount = __o_amount.Default(0);
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1833_changeDiff)
HXLINE(1834)		 ::MainMenuStateAmmar _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1834)		_hx_tmp->diffSelect = (_hx_tmp->diffSelect + amount);
HXLINE(1835)		this->diffSelect = ::flixel::math::FlxMath_obj::wrap(this->diffSelect,0,2);
HXLINE(1839)		this->difficulty = ::MainMenuStateAmmar_obj::difficultyArray->__get(this->diffSelect);
HXLINE(1841)		bool hardSongLocked;
HXDLIN(1841)		if ((this->difficulty.toLowerCase() == HX_("hard",eb,2e,08,45))) {
HXLINE(1841)			hardSongLocked = !(this->checkSongFinish(( (::String)(Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >()->extraData->get(HX_("song",d5,23,58,4c))) ),1));
            		}
            		else {
HXLINE(1841)			hardSongLocked = false;
            		}
HXLINE(1843)		 ::flixel::FlxSprite targetArrow;
HXDLIN(1843)		if ((amount < 0)) {
HXLINE(1843)			targetArrow = this->difficultyLeft;
            		}
            		else {
HXLINE(1843)			targetArrow = this->difficultyRight;
            		}
HXLINE(1844)		if ((amount != 0)) {
HXLINE(1845)			if ((amount < 0)) {
HXLINE(1846)				if (::hx::IsNotNull( this->diffLTween )) {
HXLINE(1846)					this->diffLTween->cancel();
            				}
            			}
            			else {
HXLINE(1848)				if (::hx::IsNotNull( this->diffRTween )) {
HXLINE(1848)					this->diffRTween->cancel();
            				}
            			}
HXLINE(1849)			{
HXLINE(1849)				Float x;
HXDLIN(1849)				if ((amount < 0)) {
HXLINE(1849)					x = this->diffLOffset;
            				}
            				else {
HXLINE(1849)					x = this->diffROffset;
            				}
HXDLIN(1849)				int x1;
HXDLIN(1849)				if ((amount < 0)) {
HXLINE(1849)					x1 = 10;
            				}
            				else {
HXLINE(1849)					x1 = -10;
            				}
HXDLIN(1849)				targetArrow->offset->set_x((x + x1));
            			}
HXLINE(1850)			if ((amount < 0)) {
HXLINE(1851)				this->diffLTween = ::flixel::tweens::FlxTween_obj::tween(this->difficultyLeft->offset, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),this->diffLOffset)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            			}
            			else {
HXLINE(1853)				this->diffRTween = ::flixel::tweens::FlxTween_obj::tween(this->difficultyRight->offset, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),this->diffROffset)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            			}
            		}
HXLINE(1856)		if (::hx::IsNotNull( this->diffSpriteTween )) {
HXLINE(1856)			this->diffSpriteTween->cancel();
            		}
HXLINE(1857)		{
HXLINE(1857)			 ::flixel::math::FlxBasePoint this1 = this->difficultySprite->scale;
HXDLIN(1857)			this1->set_x(((Float)1.1));
HXDLIN(1857)			this1->set_y(((Float)1.1));
            		}
HXLINE(1858)		this->diffSpriteTween = ::flixel::tweens::FlxTween_obj::tween(this->difficultySprite, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("scale.x",94,2d,07,65),1)
            			->setFixed(1,HX_("scale.y",95,2d,07,65),1)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE(1860)		this->difficultySprite->animation->play(this->difficulty,true,null(),null());
HXLINE(1861)		 ::flixel::FlxSprite _hx_tmp1 = this->difficultySprite;
HXDLIN(1861)		Float _hx_tmp2 = this->songBGDesc->x;
HXDLIN(1861)		Float _hx_tmp3 = (_hx_tmp2 + (this->songBGDesc->get_width() / ( (Float)(2) )));
HXDLIN(1861)		_hx_tmp1->set_x((_hx_tmp3 - (this->difficultySprite->get_width() / ( (Float)(2) ))));
HXLINE(1863)		if (::hx::IsNotNull( this->diffLockTween )) {
HXLINE(1863)			this->diffLockTween->cancel();
            		}
HXLINE(1864)		if (hardSongLocked) {
HXLINE(1865)			this->difficultySprite->set_color(-11513776);
HXLINE(1866)			this->diffLockTween = ::flixel::tweens::FlxTween_obj::tween(this->diffLock, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("offset.y",de,0a,03,a1),this->diffLockYOffset)
            				->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            		}
            		else {
HXLINE(1868)			this->difficultySprite->set_color(-1);
HXLINE(1869)			this->diffLockTween = ::flixel::tweens::FlxTween_obj::tween(this->diffLock, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("offset.y",de,0a,03,a1),(this->diffLockYOffset + 30))
            				->setFixed(1,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
            		}
HXLINE(1872)		this->changeItem(0,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuStateAmmar_obj,changeDiff,(void))

bool MainMenuStateAmmar_obj::checkSongFinish(::String __o_songName,::hx::Null< int >  __o_diff){
            		::String songName = __o_songName;
            		if (::hx::IsNull(__o_songName)) songName = HX_("discord-annoyer",97,ac,58,20);
            		int diff = __o_diff.Default(1);
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1877_checkSongFinish)
HXDLIN(1877)		return (::Highscore_obj::getScore(songName,diff) >= 100);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MainMenuStateAmmar_obj,checkSongFinish,return )

void MainMenuStateAmmar_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1881_beatHit)
HXLINE(1882)		this->super::beatHit();
HXLINE(1883)		this->dots->velocity->set_x(( (Float)(44) ));
HXLINE(1884)		::flixel::tweens::FlxTween_obj::tween(this->dots->velocity, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),24)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            	}


void MainMenuStateAmmar_obj::popLocked(::String __o_text){
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1889_popLocked)
HXLINE(1890)		if (::hx::IsNotNull( this->lockedTween )) {
HXLINE(1890)			this->lockedTween->cancel();
            		}
HXLINE(1891)		if (::hx::IsNotNull( this->lockedTextTween )) {
HXLINE(1891)			this->lockedTextTween->cancel();
            		}
HXLINE(1892)		this->locked->set_alpha(( (Float)(1) ));
HXLINE(1893)		this->requiredText->set_text(text);
HXDLIN(1893)		this->requiredText->set_alpha(( (Float)(1) ));
HXLINE(1895)		this->lockedTween = ::flixel::tweens::FlxTween_obj::tween(this->locked, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
HXLINE(1896)		this->lockedTextTween = ::flixel::tweens::FlxTween_obj::tween(this->requiredText, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuStateAmmar_obj,popLocked,(void))

void MainMenuStateAmmar_obj::difficultyDraw(){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1901_difficultyDraw)
HXLINE(1902)		if ((this->curPage == HX_("freeplay",a0,90,86,22))) {
HXLINE(1904)			if ((this->difficultyPoint > this->difficultyPointLerp)) {
HXLINE(1905)				 ::MainMenuStateAmmar _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1905)				_hx_tmp->difficultyPointLerp = (_hx_tmp->difficultyPointLerp + (::flixel::FlxG_obj::elapsed * ( (Float)(10) )));
            			}
            			else {
HXLINE(1906)				if ((this->difficultyPoint < this->difficultyPointLerp)) {
HXLINE(1907)					 ::MainMenuStateAmmar _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(1907)					_hx_tmp1->difficultyPointLerp = (_hx_tmp1->difficultyPointLerp - (::flixel::FlxG_obj::elapsed * ( (Float)(10) )));
            				}
            			}
HXLINE(1908)			if ((::Math_obj::floor(this->difficultyPointLerp) == this->difficultyPoint)) {
HXLINE(1908)				this->difficultyPointLerp = ( (Float)(this->difficultyPoint) );
            			}
HXLINE(1909)			if ((this->lastDiffPoint != ::Math_obj::floor(this->difficultyPointLerp))) {
HXLINE(1910)				if (::hx::IsNotNull( this->difficultyChartTween )) {
HXLINE(1910)					this->difficultyChartTween->cancel();
            				}
HXLINE(1911)				this->difficultyChart->scale->set_y(((Float)1.05));
HXLINE(1915)				this->difficultyChartTween = ::flixel::tweens::FlxTween_obj::tween(this->difficultyChart, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("scale.y",95,2d,07,65),1)),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(1916)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(1916)				_hx_tmp2->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),((Float)0.4),null(),null(),null(),null());
HXLINE(1917)				this->difficultyChart->animation->set_frameIndex(::Math_obj::floor(this->difficultyPointLerp));
            			}
HXLINE(1919)			this->lastDiffPoint = this->difficultyChart->animation->frameIndex;
HXLINE(1921)			if ((this->difficultyPointLerp <= 4)) {
HXLINE(1922)				this->difficultyChart->set_color(-10027182);
            			}
            			else {
HXLINE(1923)				if ((this->difficultyPointLerp <= 9)) {
HXLINE(1924)					this->difficultyChart->set_color(-786614);
            				}
            				else {
HXLINE(1926)					this->difficultyChart->set_color(-44462);
            				}
            			}
            		}
HXLINE(1930)		int intensity;
HXDLIN(1930)		if ((this->difficulty == HX_("insane",aa,36,da,9d))) {
HXLINE(1930)			intensity = 15;
            		}
            		else {
HXLINE(1930)			intensity = 5;
            		}
HXLINE(1931)		Float shakeX;
HXDLIN(1931)		bool shakeX1;
HXDLIN(1931)		if ((this->difficulty != HX_("hard",eb,2e,08,45))) {
HXLINE(1931)			shakeX1 = (this->difficulty == HX_("insane",aa,36,da,9d));
            		}
            		else {
HXLINE(1931)			shakeX1 = true;
            		}
HXDLIN(1931)		if (shakeX1) {
HXLINE(1931)			shakeX = ::flixel::FlxG_obj::random->_hx_float(-(intensity),intensity,null());
            		}
            		else {
HXLINE(1931)			shakeX = ( (Float)(0) );
            		}
HXLINE(1932)		Float shakeY;
HXDLIN(1932)		bool shakeY1;
HXDLIN(1932)		if ((this->difficulty != HX_("hard",eb,2e,08,45))) {
HXLINE(1932)			shakeY1 = (this->difficulty == HX_("insane",aa,36,da,9d));
            		}
            		else {
HXLINE(1932)			shakeY1 = true;
            		}
HXDLIN(1932)		if (shakeY1) {
HXLINE(1932)			shakeY = ::flixel::FlxG_obj::random->_hx_float(-(intensity),intensity,null());
            		}
            		else {
HXLINE(1932)			shakeY = ( (Float)(0) );
            		}
HXLINE(1933)		 ::flixel::FlxSprite _hx_tmp3 = this->difficultySprite;
HXDLIN(1933)		Float _hx_tmp4 = this->diffBGDesc->x;
HXDLIN(1933)		Float _hx_tmp5 = (_hx_tmp4 + (this->diffBGDesc->get_width() / ( (Float)(2) )));
HXDLIN(1933)		_hx_tmp3->set_x(((_hx_tmp5 - (this->difficultySprite->get_width() / ( (Float)(2) ))) + shakeX));
HXLINE(1934)		 ::flixel::FlxSprite _hx_tmp6 = this->difficultySprite;
HXDLIN(1934)		Float _hx_tmp7 = this->songBGDesc->y;
HXDLIN(1934)		_hx_tmp6->set_y((((_hx_tmp7 + this->songBGDesc->get_height()) + 20) + shakeY));
HXLINE(1936)		 ::flixel::FlxSprite _hx_tmp8 = this->difficultyLeft;
HXDLIN(1936)		Float _hx_tmp9 = this->difficultySprite->x;
HXDLIN(1936)		Float _hx_tmp10 = (((_hx_tmp9 - this->difficultyLeft->get_width()) - ( (Float)(25) )) - shakeX);
HXDLIN(1936)		Float _hx_tmp11 = this->difficultySprite->y;
HXDLIN(1936)		Float _hx_tmp12 = (_hx_tmp11 + (this->difficultySprite->get_height() / ( (Float)(2) )));
HXDLIN(1936)		_hx_tmp8->setPosition(_hx_tmp10,((_hx_tmp12 - (this->difficultyLeft->get_height() / ( (Float)(2) ))) - shakeY));
HXLINE(1937)		 ::flixel::FlxSprite _hx_tmp13 = this->difficultyRight;
HXDLIN(1937)		Float _hx_tmp14 = this->difficultySprite->x;
HXDLIN(1937)		Float _hx_tmp15 = (((_hx_tmp14 + this->difficultySprite->get_width()) + 25) - shakeX);
HXDLIN(1937)		Float _hx_tmp16 = this->difficultySprite->y;
HXDLIN(1937)		Float _hx_tmp17 = (_hx_tmp16 + (this->difficultySprite->get_height() / ( (Float)(2) )));
HXDLIN(1937)		_hx_tmp13->setPosition(_hx_tmp15,((_hx_tmp17 - (this->difficultyRight->get_height() / ( (Float)(2) ))) - shakeY));
HXLINE(1939)		 ::flixel::FlxSprite _hx_tmp18 = this->diffLock;
HXDLIN(1939)		Float _hx_tmp19 = this->difficultySprite->x;
HXDLIN(1939)		Float _hx_tmp20 = (_hx_tmp19 + (this->difficultySprite->get_width() / ( (Float)(2) )));
HXDLIN(1939)		_hx_tmp18->set_x(((_hx_tmp20 - (this->diffLock->get_width() / ( (Float)(2) ))) - shakeX));
HXLINE(1940)		 ::flixel::FlxSprite _hx_tmp21 = this->diffLock;
HXDLIN(1940)		Float _hx_tmp22 = this->difficultySprite->y;
HXDLIN(1940)		Float _hx_tmp23 = (_hx_tmp22 + (this->difficultySprite->get_height() / ( (Float)(2) )));
HXDLIN(1940)		_hx_tmp21->set_y(((_hx_tmp23 - (this->diffLock->get_height() / ( (Float)(2) ))) - shakeY));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,difficultyDraw,(void))

void MainMenuStateAmmar_obj::displayList(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::MainMenuStateAmmar,_gthis,Float,elapsed) HXARGC(1)
            		void _hx_run( ::MenuText member){
            			HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1946_displayList)
HXLINE(1947)			int space;
HXDLIN(1947)			if ((member->partOf == HX_("freeplay",a0,90,86,22))) {
HXLINE(1947)				space = 80;
            			}
            			else {
HXLINE(1947)				space = 140;
            			}
HXLINE(1948)			Float posX = ( (Float)(0) );
HXLINE(1949)			if (!(member->noMove)) {
HXLINE(1950)				if ((member->partOf == HX_("main",39,38,56,48))) {
HXLINE(1951)					Float a = member->scale->x;
HXDLIN(1951)					Float Value = (elapsed * ( (Float)(13) ));
HXDLIN(1951)					Float lowerBound;
HXDLIN(1951)					if ((Value < 0)) {
HXLINE(1951)						lowerBound = ( (Float)(0) );
            					}
            					else {
HXLINE(1951)						lowerBound = Value;
            					}
HXDLIN(1951)					Float scale;
HXDLIN(1951)					if ((lowerBound > 1)) {
HXLINE(1951)						scale = ( (Float)(1) );
            					}
            					else {
HXLINE(1951)						scale = lowerBound;
            					}
HXDLIN(1951)					Float scale1;
HXDLIN(1951)					if ((member->objectID == _gthis->curSelected)) {
HXLINE(1951)						scale1 = ((Float)1.1);
            					}
            					else {
HXLINE(1951)						scale1 = ( (Float)(1) );
            					}
HXDLIN(1951)					Float scale2 = (a + (scale * (scale1 - a)));
HXLINE(1952)					Float shakeX;
HXDLIN(1952)					bool shakeX1;
HXDLIN(1952)					bool shakeX2;
HXDLIN(1952)					if (::ClientPrefs_obj::cute) {
HXLINE(1952)						shakeX2 = (member->text.toLowerCase() == HX_("stowy mode",33,29,93,2e));
            					}
            					else {
HXLINE(1952)						shakeX2 = false;
            					}
HXDLIN(1952)					if (shakeX2) {
HXLINE(1952)						bool shakeX3;
HXDLIN(1952)						if (_gthis->checkSongFinish(HX_("furry-appeared",57,03,5c,21),null())) {
HXLINE(1952)							shakeX3 = _gthis->checkSongFinish(HX_("protogen",a8,56,66,00),null());
            						}
            						else {
HXLINE(1952)							shakeX3 = false;
            						}
HXDLIN(1952)						shakeX1 = !(shakeX3);
            					}
            					else {
HXLINE(1952)						shakeX1 = false;
            					}
HXDLIN(1952)					if (shakeX1) {
HXLINE(1952)						shakeX = ::flixel::FlxG_obj::random->_hx_float(-10,10,null());
            					}
            					else {
HXLINE(1952)						shakeX = ( (Float)(0) );
            					}
HXLINE(1953)					Float a1 = member->x;
HXDLIN(1953)					Float Value1 = (elapsed * ( (Float)(13) ));
HXDLIN(1953)					Float lowerBound1;
HXDLIN(1953)					if ((Value1 < 0)) {
HXLINE(1953)						lowerBound1 = ( (Float)(0) );
            					}
            					else {
HXLINE(1953)						lowerBound1 = Value1;
            					}
HXDLIN(1953)					Float _hx_tmp;
HXDLIN(1953)					if ((lowerBound1 > 1)) {
HXLINE(1953)						_hx_tmp = ( (Float)(1) );
            					}
            					else {
HXLINE(1953)						_hx_tmp = lowerBound1;
            					}
HXDLIN(1953)					int _hx_tmp1;
HXDLIN(1953)					if ((member->objectID == _gthis->curSelected)) {
HXLINE(1953)						_hx_tmp1 = 40;
            					}
            					else {
HXLINE(1953)						_hx_tmp1 = 0;
            					}
HXDLIN(1953)					member->set_x((((a1 + (_hx_tmp * (( (Float)((50 + _hx_tmp1)) ) - a1))) + posX) + shakeX));
HXLINE(1954)					{
HXLINE(1954)						 ::flixel::math::FlxBasePoint this1 = member->scale;
HXDLIN(1954)						this1->set_x(scale2);
HXDLIN(1954)						this1->set_y(scale2);
            					}
HXLINE(1955)					member->partner->set_angle((::Math_obj::sin((::flixel::FlxG_obj::sound->music->_time / ( (Float)(1000) ))) * ( (Float)(5) )));
            				}
HXLINE(1957)				bool _hx_tmp2;
HXDLIN(1957)				bool _hx_tmp3;
HXDLIN(1957)				if ((member->partOf != HX_("freeplay",a0,90,86,22))) {
HXLINE(1957)					_hx_tmp3 = (member->partOf == HX_("badges",f0,77,3f,4b));
            				}
            				else {
HXLINE(1957)					_hx_tmp3 = true;
            				}
HXDLIN(1957)				if (!(_hx_tmp3)) {
HXLINE(1957)					_hx_tmp2 = (member->partOf == HX_("credits",1a,0e,5e,13));
            				}
            				else {
HXLINE(1957)					_hx_tmp2 = true;
            				}
HXDLIN(1957)				if (_hx_tmp2) {
HXLINE(1958)					if (_gthis->getSwipeEnable()) {
HXLINE(1960)						member->set_y((member->lastPos->y + _gthis->swipeDistance));
HXLINE(1961)						bool _hx_tmp4;
HXDLIN(1961)						if (!(( (bool)(member->extraData->get(HX_("isTitle",4e,b9,c0,ac))) ))) {
HXLINE(1961)							Float _hx_tmp5 = member->getGraphicMidpoint(null())->y;
HXDLIN(1961)							_hx_tmp4 = (::Math_obj::abs((_hx_tmp5 - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )))) <= 40);
            						}
            						else {
HXLINE(1961)							_hx_tmp4 = false;
            						}
HXDLIN(1961)						if (_hx_tmp4) {
HXLINE(1962)							_gthis->curSelected = member->objectID;
HXLINE(1963)							if ((_gthis->lastCurSelect != _gthis->curSelected)) {
HXLINE(1964)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp6 = ::flixel::FlxG_obj::sound;
HXDLIN(1964)								_hx_tmp6->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
            							}
HXLINE(1966)							_gthis->lastCurSelect = _gthis->curSelected;
            						}
HXLINE(1968)						Float a2 = member->x;
HXDLIN(1968)						Float Value2 = (elapsed * ( (Float)(12) ));
HXDLIN(1968)						Float lowerBound2;
HXDLIN(1968)						if ((Value2 < 0)) {
HXLINE(1968)							lowerBound2 = ( (Float)(0) );
            						}
            						else {
HXLINE(1968)							lowerBound2 = Value2;
            						}
HXDLIN(1968)						Float _hx_tmp7;
HXDLIN(1968)						if ((lowerBound2 > 1)) {
HXLINE(1968)							_hx_tmp7 = ( (Float)(1) );
            						}
            						else {
HXLINE(1968)							_hx_tmp7 = lowerBound2;
            						}
HXDLIN(1968)						int _hx_tmp8;
HXDLIN(1968)						if ((member->objectID == _gthis->curSelected)) {
HXLINE(1968)							_hx_tmp8 = 40;
            						}
            						else {
HXLINE(1968)							_hx_tmp8 = 0;
            						}
HXDLIN(1968)						member->set_x(((a2 + (_hx_tmp7 * (((140 + _hx_tmp8) + -(::Math_obj::abs(( (Float)((20 * (member->objectID - _gthis->curSelected))) )))) - a2))) + posX));
HXLINE(1970)						int _hx_tmp9;
HXDLIN(1970)						bool _hx_tmp10;
HXDLIN(1970)						if ((member->objectID != _gthis->curSelected)) {
HXLINE(1970)							if ((member->partOf == HX_("freeplay",a0,90,86,22))) {
HXLINE(1970)								_hx_tmp10 = member->extraData->get_bool(HX_("isTitle",4e,b9,c0,ac));
            							}
            							else {
HXLINE(1970)								_hx_tmp10 = false;
            							}
            						}
            						else {
HXLINE(1970)							_hx_tmp10 = true;
            						}
HXDLIN(1970)						if (_hx_tmp10) {
HXLINE(1970)							_hx_tmp9 = -1;
            						}
            						else {
HXLINE(1970)							_hx_tmp9 = -6250336;
            						}
HXDLIN(1970)						member->set_color(_hx_tmp9);
            					}
            					else {
HXLINE(1973)						Float a3 = member->x;
HXDLIN(1973)						Float Value3 = (elapsed * ( (Float)(12) ));
HXDLIN(1973)						Float lowerBound3;
HXDLIN(1973)						if ((Value3 < 0)) {
HXLINE(1973)							lowerBound3 = ( (Float)(0) );
            						}
            						else {
HXLINE(1973)							lowerBound3 = Value3;
            						}
HXDLIN(1973)						Float _hx_tmp11;
HXDLIN(1973)						if ((lowerBound3 > 1)) {
HXLINE(1973)							_hx_tmp11 = ( (Float)(1) );
            						}
            						else {
HXLINE(1973)							_hx_tmp11 = lowerBound3;
            						}
HXDLIN(1973)						int _hx_tmp12;
HXDLIN(1973)						if ((member->objectID == _gthis->curSelected)) {
HXLINE(1973)							_hx_tmp12 = 40;
            						}
            						else {
HXLINE(1973)							_hx_tmp12 = 0;
            						}
HXDLIN(1973)						member->set_x(((a3 + (_hx_tmp11 * (((140 + _hx_tmp12) + -(::Math_obj::abs(( (Float)((20 * (member->objectID - _gthis->curSelected))) )))) - a3))) + posX));
HXLINE(1974)						Float a4 = member->y;
HXDLIN(1974)						Float Value4 = (elapsed * ( (Float)(9) ));
HXDLIN(1974)						Float lowerBound4;
HXDLIN(1974)						if ((Value4 < 0)) {
HXLINE(1974)							lowerBound4 = ( (Float)(0) );
            						}
            						else {
HXLINE(1974)							lowerBound4 = Value4;
            						}
HXDLIN(1974)						Float _hx_tmp13;
HXDLIN(1974)						if ((lowerBound4 > 1)) {
HXLINE(1974)							_hx_tmp13 = ( (Float)(1) );
            						}
            						else {
HXLINE(1974)							_hx_tmp13 = lowerBound4;
            						}
HXDLIN(1974)						member->set_y((a4 + (_hx_tmp13 * (( (Float)((310 + ((member->objectID - _gthis->curSelected) * space))) ) - a4))));
            					}
            				}
HXLINE(1977)				if (::StringTools_obj::startsWith(member->partOf,HX_("options",5e,33,fe,df))) {
HXLINE(1978)					bool _hx_tmp14;
HXDLIN(1978)					if (_gthis->getSwipeEnable()) {
HXLINE(1978)						_hx_tmp14 = (member->partOf == HX_("options1",13,bf,6e,1e));
            					}
            					else {
HXLINE(1978)						_hx_tmp14 = false;
            					}
HXDLIN(1978)					if (_hx_tmp14) {
HXLINE(1979)						member->set_y((member->lastPos->y + _gthis->swipeDistance));
HXLINE(1980)						Float a5 = member->x;
HXDLIN(1980)						Float Value5 = (elapsed * ( (Float)(11) ));
HXDLIN(1980)						Float lowerBound5;
HXDLIN(1980)						if ((Value5 < 0)) {
HXLINE(1980)							lowerBound5 = ( (Float)(0) );
            						}
            						else {
HXLINE(1980)							lowerBound5 = Value5;
            						}
HXDLIN(1980)						Float _hx_tmp15;
HXDLIN(1980)						if ((lowerBound5 > 1)) {
HXLINE(1980)							_hx_tmp15 = ( (Float)(1) );
            						}
            						else {
HXLINE(1980)							_hx_tmp15 = lowerBound5;
            						}
HXDLIN(1980)						int _hx_tmp16;
HXDLIN(1980)						if ((member->objectID == _gthis->curSelected)) {
HXLINE(1980)							_hx_tmp16 = 40;
            						}
            						else {
HXLINE(1980)							_hx_tmp16 = 0;
            						}
HXDLIN(1980)						member->set_x(((a5 + (_hx_tmp15 * (((80 + _hx_tmp16) + -(::Math_obj::abs(( (Float)((20 * (member->objectID - _gthis->curSelected))) )))) - a5))) + posX));
HXLINE(1981)						Float _hx_tmp17 = member->getGraphicMidpoint(null())->y;
HXDLIN(1981)						if ((::Math_obj::abs((_hx_tmp17 - (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )))) <= 40)) {
HXLINE(1982)							_gthis->curSelected = member->objectID;
HXLINE(1983)							if ((_gthis->lastCurSelect != _gthis->curSelected)) {
HXLINE(1984)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp18 = ::flixel::FlxG_obj::sound;
HXDLIN(1984)								_hx_tmp18->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
            							}
HXLINE(1986)							_gthis->lastCurSelect = _gthis->curSelected;
            						}
HXLINE(1988)						if ((_gthis->optionsList->__get(member->objectID).StaticCast< ::Array< ::String > >()->__get(2) == HX_("cute",a3,4c,c9,41))) {
HXLINE(1989)							int _hx_tmp19;
HXDLIN(1989)							if ((member->objectID == _gthis->curSelected)) {
HXLINE(1989)								_hx_tmp19 = -1965833;
            							}
            							else {
HXLINE(1989)								_hx_tmp19 = -6750041;
            							}
HXDLIN(1989)							member->set_color(_hx_tmp19);
            						}
            						else {
HXLINE(1991)							int _hx_tmp20;
HXDLIN(1991)							if ((member->objectID == _gthis->curSelected)) {
HXLINE(1991)								_hx_tmp20 = -1;
            							}
            							else {
HXLINE(1991)								_hx_tmp20 = -6250336;
            							}
HXDLIN(1991)							member->set_color(_hx_tmp20);
            						}
            					}
            					else {
HXLINE(1994)						Float a6 = member->x;
HXDLIN(1994)						Float Value6 = (elapsed * ( (Float)(11) ));
HXDLIN(1994)						Float lowerBound6;
HXDLIN(1994)						if ((Value6 < 0)) {
HXLINE(1994)							lowerBound6 = ( (Float)(0) );
            						}
            						else {
HXLINE(1994)							lowerBound6 = Value6;
            						}
HXDLIN(1994)						Float _hx_tmp21;
HXDLIN(1994)						if ((lowerBound6 > 1)) {
HXLINE(1994)							_hx_tmp21 = ( (Float)(1) );
            						}
            						else {
HXLINE(1994)							_hx_tmp21 = lowerBound6;
            						}
HXDLIN(1994)						int _hx_tmp22;
HXDLIN(1994)						if ((member->objectID == _gthis->curSelected)) {
HXLINE(1994)							_hx_tmp22 = 40;
            						}
            						else {
HXLINE(1994)							_hx_tmp22 = 0;
            						}
HXDLIN(1994)						member->set_x(((a6 + (_hx_tmp21 * (((80 + _hx_tmp22) + -(::Math_obj::abs(( (Float)((20 * (member->objectID - _gthis->curSelected))) )))) - a6))) + posX));
HXLINE(1995)						if ((member->partOf == HX_("options1",13,bf,6e,1e))) {
HXLINE(1996)							Float a7 = member->y;
HXDLIN(1996)							Float Value7 = (elapsed * ( (Float)(8) ));
HXDLIN(1996)							Float lowerBound7;
HXDLIN(1996)							if ((Value7 < 0)) {
HXLINE(1996)								lowerBound7 = ( (Float)(0) );
            							}
            							else {
HXLINE(1996)								lowerBound7 = Value7;
            							}
HXDLIN(1996)							Float _hx_tmp23;
HXDLIN(1996)							if ((lowerBound7 > 1)) {
HXLINE(1996)								_hx_tmp23 = ( (Float)(1) );
            							}
            							else {
HXLINE(1996)								_hx_tmp23 = lowerBound7;
            							}
HXDLIN(1996)							int _hx_tmp24;
HXDLIN(1996)							if ((member->partOf == HX_("options0",12,bf,6e,1e))) {
HXLINE(1996)								_hx_tmp24 = 110;
            							}
            							else {
HXLINE(1996)								_hx_tmp24 = 100;
            							}
HXDLIN(1996)							member->set_y((a7 + (_hx_tmp23 * (( (Float)((310 + ((member->objectID - _gthis->curSelected) * _hx_tmp24))) ) - a7))));
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_1944_displayList)
HXDLIN(1944)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1945)		Float elapsed = ::flixel::FlxG_obj::elapsed;
HXLINE(1946)		this->menuItems->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,elapsed)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,displayList,(void))

void MainMenuStateAmmar_obj::buttonControls(){
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_2012_buttonControls)
HXLINE(2013)		 ::MainMenuStateAmmar _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2013)		_hx_tmp->holdOptionPass = (_hx_tmp->holdOptionPass + 1);
HXLINE(2014)		if (!(this->selectedSomething)) {
HXLINE(2015)			if ((this->curPage == HX_("story menu",aa,49,a0,5e))) {
HXLINE(2016)				if (::PlayerSettings_obj::player1->controls->_ui_leftP->check()) {
HXLINE(2018)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(2018)					_hx_tmp1->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
HXLINE(2019)					this->changeItem(-1,null(),null());
            				}
HXLINE(2021)				if (::PlayerSettings_obj::player1->controls->_ui_rightP->check()) {
HXLINE(2023)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN(2023)					_hx_tmp2->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
HXLINE(2024)					this->changeItem(1,null(),null());
            				}
            			}
            			else {
HXLINE(2027)				if (::PlayerSettings_obj::player1->controls->_ui_upP->check()) {
HXLINE(2029)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN(2029)					_hx_tmp3->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
HXLINE(2030)					this->changeItem(-1,null(),null());
            				}
HXLINE(2032)				if (::PlayerSettings_obj::player1->controls->_ui_downP->check()) {
HXLINE(2034)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN(2034)					_hx_tmp4->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
HXLINE(2035)					this->changeItem(1,null(),null());
            				}
HXLINE(2037)				if ((this->curPage == HX_("freeplay",a0,90,86,22))) {
HXLINE(2038)					if (::PlayerSettings_obj::player1->controls->_ui_leftP->check()) {
HXLINE(2040)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp5 = ::flixel::FlxG_obj::sound;
HXDLIN(2040)						_hx_tmp5->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
HXLINE(2041)						this->changeDiff(-1);
            					}
HXLINE(2043)					if (::PlayerSettings_obj::player1->controls->_ui_rightP->check()) {
HXLINE(2045)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp6 = ::flixel::FlxG_obj::sound;
HXDLIN(2045)						_hx_tmp6->play(::MainMenuStateAmmar_obj::sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
HXLINE(2046)						this->changeDiff(1);
            					}
HXLINE(2048)					bool _hx_tmp7;
HXDLIN(2048)					if (::ClientPrefs_obj::developer) {
HXLINE(2048)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2048)						_hx_tmp7 = _this->keyManager->checkStatusUnsafe(17,_this->status);
            					}
            					else {
HXLINE(2048)						_hx_tmp7 = false;
            					}
HXDLIN(2048)					if (_hx_tmp7) {
HXLINE(2050)						this->persistentUpdate = false;
HXLINE(2051)						this->openSubState( ::GameplayChangersSubstate_obj::__alloc( HX_CTX ));
            					}
            				}
            			}
HXLINE(2055)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(2057)				if ((this->curPage == HX_("main",39,38,56,48))) {
HXLINE(2058)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp8 = ::flixel::FlxG_obj::sound;
HXDLIN(2058)					_hx_tmp8->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE(2059)					::MusicBeatState_obj::switchState( ::TitleState_obj::__alloc( HX_CTX ,null(),null()));
            				}
            				else {
HXLINE(2061)					if ((this->curPage == HX_("story menu",aa,49,a0,5e))) {
HXLINE(2062)						::haxe::Log_obj::trace(HX_("quit story",e4,24,20,e6),::hx::SourceInfo(HX_("source/MainMenuStateAmmar.hx",d1,d6,8f,77),2062,HX_("MainMenuStateAmmar",19,96,22,9f),HX_("buttonControls",88,e6,4c,ac)));
HXLINE(2063)						this->changeStoryScene(-1);
            					}
HXLINE(2065)					this->backItem();
            				}
            			}
HXLINE(2068)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE(2069)				bool _hx_tmp9;
HXDLIN(2069)				if (::hx::IsNotNull( Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >() )) {
HXLINE(2069)					_hx_tmp9 = (Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >()->partOf == HX_("options1",13,bf,6e,1e));
            				}
            				else {
HXLINE(2069)					_hx_tmp9 = false;
            				}
HXDLIN(2069)				if (_hx_tmp9) {
HXLINE(2070)					this->selectOption(this->curSelected);
            				}
            				else {
HXLINE(2072)					this->selectItem();
            				}
            			}
HXLINE(2074)			if ((this->curPage == HX_("options1",13,bf,6e,1e))) {
HXLINE(2075)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2075)				if (_this1->keyManager->checkStatusUnsafe(13,_this1->status)) {
HXLINE(2076)					if (::hx::IsNotNull( Dynamic( this->menuItems->members->__get(this->curSelected)).StaticCast<  ::MenuText >() )) {
HXLINE(2077)						this->holdOption();
            					}
            				}
HXLINE(2081)				bool _hx_tmp10;
HXDLIN(2081)				if ((this->holdOptionTime != 0)) {
HXLINE(2081)					_hx_tmp10 = (this->holdOptionPass >= 5);
            				}
            				else {
HXLINE(2081)					_hx_tmp10 = false;
            				}
HXDLIN(2081)				if (_hx_tmp10) {
HXLINE(2082)					this->holdOptionTime = ( (Float)(0) );
HXLINE(2083)					::flixel::FlxG_obj::sound->music->set_volume(( (Float)(1) ));
            				}
            			}
HXLINE(2088)			if (::MainMenuStateAmmar_obj::difficultyChosen) {
HXLINE(2089)				::MainMenuStateAmmar_obj::difficultyChosen = false;
HXLINE(2090)				this->playSong();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,buttonControls,(void))

void MainMenuStateAmmar_obj::dragSystem(){
            	HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_2103_dragSystem)
HXDLIN(2103)		 ::MainMenuStateAmmar _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2104)		if (!(this->dragEnable)) {
HXLINE(2104)			return;
            		}
HXLINE(2105)		 ::flixel::math::FlxBasePoint pos = ::flixel::FlxG_obj::mouse->getScreenPosition(::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >(),null());
HXLINE(2106)		bool _hx_tmp;
HXDLIN(2106)		if (!(this->mouseJustClick)) {
HXLINE(2106)			_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(2106)			_hx_tmp = false;
            		}
HXDLIN(2106)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuStateAmmar,_gthis) HXARGC(1)
            			void _hx_run( ::MenuText member){
            				HX_STACKFRAME(&_hx_pos_9edd12dd35689126_2112_dragSystem)
HXLINE(2112)				if ((member->partOf.indexOf(_gthis->curPage,null()) != -1)) {
HXLINE(2113)					member->setLastPos();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2107)			this->mouseJustClick = true;
HXLINE(2108)			{
HXLINE(2108)				 ::flixel::math::FlxBasePoint this1 = this->lastHoldPos;
HXDLIN(2108)				Float y = pos->y;
HXDLIN(2108)				this1->set_x(pos->x);
HXDLIN(2108)				this1->set_y(y);
            			}
HXLINE(2109)			this->lastSelect = this->curSelected;
HXLINE(2110)			this->isSwiping = true;
HXLINE(2111)			this->menuItems->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            		else {
HXLINE(2116)			bool _hx_tmp1;
HXDLIN(2116)			if (this->mouseJustClick) {
HXLINE(2116)				 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(2116)				if ((_this->current != 0)) {
HXLINE(2116)					_hx_tmp1 = (_this->current == -1);
            				}
            				else {
HXLINE(2116)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(2116)				_hx_tmp1 = false;
            			}
HXDLIN(2116)			if (_hx_tmp1) {
HXLINE(2117)				this->isSwiping = false;
HXLINE(2118)				this->mouseJustClick = false;
HXLINE(2119)				{
HXLINE(2119)					 ::flixel::math::FlxBasePoint this2 = this->lastHoldPos;
HXDLIN(2119)					Float y1 = ::Math_obj::NEGATIVE_INFINITY;
HXDLIN(2119)					this2->set_x(::Math_obj::NEGATIVE_INFINITY);
HXDLIN(2119)					this2->set_y(y1);
            				}
HXLINE(2120)				if ((this->curPage == HX_("options1",13,bf,6e,1e))) {
HXLINE(2120)					 ::Dynamic filter = null();
HXDLIN(2120)					 ::flixel::group::FlxTypedGroupIterator check =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->menuChecks->members,filter);
HXDLIN(2120)					while(check->hasNext()){
HXLINE(2120)						 ::Checkbox check1 = check->next().StaticCast<  ::Checkbox >();
HXDLIN(2120)						check1->set_alpha(( (Float)(1) ));
            					}
            				}
HXLINE(2121)				this->changeItem(0,null(),null());
            			}
            		}
HXLINE(2123)		 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(2123)		bool _hx_tmp2;
HXDLIN(2123)		if ((_this1->current != 1)) {
HXLINE(2123)			_hx_tmp2 = (_this1->current == 2);
            		}
            		else {
HXLINE(2123)			_hx_tmp2 = true;
            		}
HXDLIN(2123)		if (_hx_tmp2) {
HXLINE(2124)			this->swipeDistance = (pos->y - this->lastHoldPos->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,dragSystem,(void))

bool MainMenuStateAmmar_obj::getSwipeEnable(){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_2134_getSwipeEnable)
HXDLIN(2134)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuStateAmmar_obj,getSwipeEnable,return )

void MainMenuStateAmmar_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_2138_closeSubState)
HXLINE(2139)		this->persistentUpdate = true;
HXLINE(2140)		this->super::closeSubState();
            	}


 ::haxe::ds::StringMap MainMenuStateAmmar_obj::sounds;

::Array< ::String > MainMenuStateAmmar_obj::difficultyArray;

::Array< ::Dynamic> MainMenuStateAmmar_obj::songsList;

bool MainMenuStateAmmar_obj::difficultyChosen;


::hx::ObjectPtr< MainMenuStateAmmar_obj > MainMenuStateAmmar_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MainMenuStateAmmar_obj > __this = new MainMenuStateAmmar_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MainMenuStateAmmar_obj > MainMenuStateAmmar_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MainMenuStateAmmar_obj *__this = (MainMenuStateAmmar_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuStateAmmar_obj), true, "MainMenuStateAmmar"));
	*(void **)__this = MainMenuStateAmmar_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MainMenuStateAmmar_obj::MainMenuStateAmmar_obj()
{
}

void MainMenuStateAmmar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuStateAmmar);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(menuItemChecks,"menuItemChecks");
	HX_MARK_MEMBER_NAME(menuIcons,"menuIcons");
	HX_MARK_MEMBER_NAME(menuChecks,"menuChecks");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(dots,"dots");
	HX_MARK_MEMBER_NAME(ammar,"ammar");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(ammarTalkingTween,"ammarTalkingTween");
	HX_MARK_MEMBER_NAME(borderTween,"borderTween");
	HX_MARK_MEMBER_NAME(songBGDesc,"songBGDesc");
	HX_MARK_MEMBER_NAME(songBGDescTween,"songBGDescTween");
	HX_MARK_MEMBER_NAME(diffBGDesc,"diffBGDesc");
	HX_MARK_MEMBER_NAME(songDescTxt,"songDescTxt");
	HX_MARK_MEMBER_NAME(weeksSprites,"weeksSprites");
	HX_MARK_MEMBER_NAME(weekDiscordAnnoyer,"weekDiscordAnnoyer");
	HX_MARK_MEMBER_NAME(weekKaijuParadise,"weekKaijuParadise");
	HX_MARK_MEMBER_NAME(weekDebug,"weekDebug");
	HX_MARK_MEMBER_NAME(weekHatingProblem,"weekHatingProblem");
	HX_MARK_MEMBER_NAME(weeks,"weeks");
	HX_MARK_MEMBER_NAME(difficulty,"difficulty");
	HX_MARK_MEMBER_NAME(difficultySprite,"difficultySprite");
	HX_MARK_MEMBER_NAME(diffSpriteTween,"diffSpriteTween");
	HX_MARK_MEMBER_NAME(hoverDifficulty,"hoverDifficulty");
	HX_MARK_MEMBER_NAME(difficultyLeft,"difficultyLeft");
	HX_MARK_MEMBER_NAME(diffLOffset,"diffLOffset");
	HX_MARK_MEMBER_NAME(diffLTween,"diffLTween");
	HX_MARK_MEMBER_NAME(difficultyRight,"difficultyRight");
	HX_MARK_MEMBER_NAME(diffROffset,"diffROffset");
	HX_MARK_MEMBER_NAME(diffRTween,"diffRTween");
	HX_MARK_MEMBER_NAME(diffSelect,"diffSelect");
	HX_MARK_MEMBER_NAME(diffLock,"diffLock");
	HX_MARK_MEMBER_NAME(diffLockYOffset,"diffLockYOffset");
	HX_MARK_MEMBER_NAME(diffLockTween,"diffLockTween");
	HX_MARK_MEMBER_NAME(menuColor,"menuColor");
	HX_MARK_MEMBER_NAME(menuList,"menuList");
	HX_MARK_MEMBER_NAME(optionsMode,"optionsMode");
	HX_MARK_MEMBER_NAME(optionsList,"optionsList");
	HX_MARK_MEMBER_NAME(songsDifficulty,"songsDifficulty");
	HX_MARK_MEMBER_NAME(weeksList,"weeksList");
	HX_MARK_MEMBER_NAME(badgesList,"badgesList");
	HX_MARK_MEMBER_NAME(creditsList,"creditsList");
	HX_MARK_MEMBER_NAME(curPage,"curPage");
	HX_MARK_MEMBER_NAME(difficultyChart,"difficultyChart");
	HX_MARK_MEMBER_NAME(difficultyChartTween,"difficultyChartTween");
	HX_MARK_MEMBER_NAME(difficultyPoint,"difficultyPoint");
	HX_MARK_MEMBER_NAME(difficultyPointLerp,"difficultyPointLerp");
	HX_MARK_MEMBER_NAME(lastDiffPoint,"lastDiffPoint");
	HX_MARK_MEMBER_NAME(camBG,"camBG");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camOther,"camOther");
	HX_MARK_MEMBER_NAME(bgFollow,"bgFollow");
	HX_MARK_MEMBER_NAME(hudFollow,"hudFollow");
	HX_MARK_MEMBER_NAME(ammarText,"ammarText");
	HX_MARK_MEMBER_NAME(bgColorTween,"bgColorTween");
	HX_MARK_MEMBER_NAME(progressTxt,"progressTxt");
	HX_MARK_MEMBER_NAME(progressBar,"progressBar");
	HX_MARK_MEMBER_NAME(progressBG,"progressBG");
	HX_MARK_MEMBER_NAME(modifierBG,"modifierBG");
	HX_MARK_MEMBER_NAME(modifierText,"modifierText");
	HX_MARK_MEMBER_NAME(selectedSomething,"selectedSomething");
	HX_MARK_MEMBER_NAME(progress,"progress");
	HX_MARK_MEMBER_NAME(holdOptionTime,"holdOptionTime");
	HX_MARK_MEMBER_NAME(locked,"locked");
	HX_MARK_MEMBER_NAME(requiredText,"requiredText");
	HX_MARK_MEMBER_NAME(openWithCute,"openWithCute");
	HX_MARK_MEMBER_NAME(cheatText,"cheatText");
	HX_MARK_MEMBER_NAME(exitButton,"exitButton");
	HX_MARK_MEMBER_NAME(mobileButtons,"mobileButtons");
	HX_MARK_MEMBER_NAME(storyMobileButtons,"storyMobileButtons");
	HX_MARK_MEMBER_NAME(prevTalk,"prevTalk");
	HX_MARK_MEMBER_NAME(haveToReset,"haveToReset");
	HX_MARK_MEMBER_NAME(lockedTween,"lockedTween");
	HX_MARK_MEMBER_NAME(lockedTextTween,"lockedTextTween");
	HX_MARK_MEMBER_NAME(lastCurSelect,"lastCurSelect");
	HX_MARK_MEMBER_NAME(holdOptionPass,"holdOptionPass");
	HX_MARK_MEMBER_NAME(mouseJustClick,"mouseJustClick");
	HX_MARK_MEMBER_NAME(swipeDistance,"swipeDistance");
	HX_MARK_MEMBER_NAME(lastSelect,"lastSelect");
	HX_MARK_MEMBER_NAME(isSwiping,"isSwiping");
	HX_MARK_MEMBER_NAME(dragEnable,"dragEnable");
	HX_MARK_MEMBER_NAME(lastHoldPos,"lastHoldPos");
	HX_MARK_MEMBER_NAME(swipeAvaiable,"swipeAvaiable");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuStateAmmar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(menuItemChecks,"menuItemChecks");
	HX_VISIT_MEMBER_NAME(menuIcons,"menuIcons");
	HX_VISIT_MEMBER_NAME(menuChecks,"menuChecks");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(dots,"dots");
	HX_VISIT_MEMBER_NAME(ammar,"ammar");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(ammarTalkingTween,"ammarTalkingTween");
	HX_VISIT_MEMBER_NAME(borderTween,"borderTween");
	HX_VISIT_MEMBER_NAME(songBGDesc,"songBGDesc");
	HX_VISIT_MEMBER_NAME(songBGDescTween,"songBGDescTween");
	HX_VISIT_MEMBER_NAME(diffBGDesc,"diffBGDesc");
	HX_VISIT_MEMBER_NAME(songDescTxt,"songDescTxt");
	HX_VISIT_MEMBER_NAME(weeksSprites,"weeksSprites");
	HX_VISIT_MEMBER_NAME(weekDiscordAnnoyer,"weekDiscordAnnoyer");
	HX_VISIT_MEMBER_NAME(weekKaijuParadise,"weekKaijuParadise");
	HX_VISIT_MEMBER_NAME(weekDebug,"weekDebug");
	HX_VISIT_MEMBER_NAME(weekHatingProblem,"weekHatingProblem");
	HX_VISIT_MEMBER_NAME(weeks,"weeks");
	HX_VISIT_MEMBER_NAME(difficulty,"difficulty");
	HX_VISIT_MEMBER_NAME(difficultySprite,"difficultySprite");
	HX_VISIT_MEMBER_NAME(diffSpriteTween,"diffSpriteTween");
	HX_VISIT_MEMBER_NAME(hoverDifficulty,"hoverDifficulty");
	HX_VISIT_MEMBER_NAME(difficultyLeft,"difficultyLeft");
	HX_VISIT_MEMBER_NAME(diffLOffset,"diffLOffset");
	HX_VISIT_MEMBER_NAME(diffLTween,"diffLTween");
	HX_VISIT_MEMBER_NAME(difficultyRight,"difficultyRight");
	HX_VISIT_MEMBER_NAME(diffROffset,"diffROffset");
	HX_VISIT_MEMBER_NAME(diffRTween,"diffRTween");
	HX_VISIT_MEMBER_NAME(diffSelect,"diffSelect");
	HX_VISIT_MEMBER_NAME(diffLock,"diffLock");
	HX_VISIT_MEMBER_NAME(diffLockYOffset,"diffLockYOffset");
	HX_VISIT_MEMBER_NAME(diffLockTween,"diffLockTween");
	HX_VISIT_MEMBER_NAME(menuColor,"menuColor");
	HX_VISIT_MEMBER_NAME(menuList,"menuList");
	HX_VISIT_MEMBER_NAME(optionsMode,"optionsMode");
	HX_VISIT_MEMBER_NAME(optionsList,"optionsList");
	HX_VISIT_MEMBER_NAME(songsDifficulty,"songsDifficulty");
	HX_VISIT_MEMBER_NAME(weeksList,"weeksList");
	HX_VISIT_MEMBER_NAME(badgesList,"badgesList");
	HX_VISIT_MEMBER_NAME(creditsList,"creditsList");
	HX_VISIT_MEMBER_NAME(curPage,"curPage");
	HX_VISIT_MEMBER_NAME(difficultyChart,"difficultyChart");
	HX_VISIT_MEMBER_NAME(difficultyChartTween,"difficultyChartTween");
	HX_VISIT_MEMBER_NAME(difficultyPoint,"difficultyPoint");
	HX_VISIT_MEMBER_NAME(difficultyPointLerp,"difficultyPointLerp");
	HX_VISIT_MEMBER_NAME(lastDiffPoint,"lastDiffPoint");
	HX_VISIT_MEMBER_NAME(camBG,"camBG");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camOther,"camOther");
	HX_VISIT_MEMBER_NAME(bgFollow,"bgFollow");
	HX_VISIT_MEMBER_NAME(hudFollow,"hudFollow");
	HX_VISIT_MEMBER_NAME(ammarText,"ammarText");
	HX_VISIT_MEMBER_NAME(bgColorTween,"bgColorTween");
	HX_VISIT_MEMBER_NAME(progressTxt,"progressTxt");
	HX_VISIT_MEMBER_NAME(progressBar,"progressBar");
	HX_VISIT_MEMBER_NAME(progressBG,"progressBG");
	HX_VISIT_MEMBER_NAME(modifierBG,"modifierBG");
	HX_VISIT_MEMBER_NAME(modifierText,"modifierText");
	HX_VISIT_MEMBER_NAME(selectedSomething,"selectedSomething");
	HX_VISIT_MEMBER_NAME(progress,"progress");
	HX_VISIT_MEMBER_NAME(holdOptionTime,"holdOptionTime");
	HX_VISIT_MEMBER_NAME(locked,"locked");
	HX_VISIT_MEMBER_NAME(requiredText,"requiredText");
	HX_VISIT_MEMBER_NAME(openWithCute,"openWithCute");
	HX_VISIT_MEMBER_NAME(cheatText,"cheatText");
	HX_VISIT_MEMBER_NAME(exitButton,"exitButton");
	HX_VISIT_MEMBER_NAME(mobileButtons,"mobileButtons");
	HX_VISIT_MEMBER_NAME(storyMobileButtons,"storyMobileButtons");
	HX_VISIT_MEMBER_NAME(prevTalk,"prevTalk");
	HX_VISIT_MEMBER_NAME(haveToReset,"haveToReset");
	HX_VISIT_MEMBER_NAME(lockedTween,"lockedTween");
	HX_VISIT_MEMBER_NAME(lockedTextTween,"lockedTextTween");
	HX_VISIT_MEMBER_NAME(lastCurSelect,"lastCurSelect");
	HX_VISIT_MEMBER_NAME(holdOptionPass,"holdOptionPass");
	HX_VISIT_MEMBER_NAME(mouseJustClick,"mouseJustClick");
	HX_VISIT_MEMBER_NAME(swipeDistance,"swipeDistance");
	HX_VISIT_MEMBER_NAME(lastSelect,"lastSelect");
	HX_VISIT_MEMBER_NAME(isSwiping,"isSwiping");
	HX_VISIT_MEMBER_NAME(dragEnable,"dragEnable");
	HX_VISIT_MEMBER_NAME(lastHoldPos,"lastHoldPos");
	HX_VISIT_MEMBER_NAME(swipeAvaiable,"swipeAvaiable");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainMenuStateAmmar_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dots") ) { return ::hx::Val( dots ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ammar") ) { return ::hx::Val( ammar ); }
		if (HX_FIELD_EQ(inName,"weeks") ) { return ::hx::Val( weeks ); }
		if (HX_FIELD_EQ(inName,"camBG") ) { return ::hx::Val( camBG ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return ::hx::Val( border ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"locked") ) { return ::hx::Val( locked ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curPage") ) { return ::hx::Val( curPage ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diffLock") ) { return ::hx::Val( diffLock ); }
		if (HX_FIELD_EQ(inName,"menuList") ) { return ::hx::Val( menuList ); }
		if (HX_FIELD_EQ(inName,"camOther") ) { return ::hx::Val( camOther ); }
		if (HX_FIELD_EQ(inName,"bgFollow") ) { return ::hx::Val( bgFollow ); }
		if (HX_FIELD_EQ(inName,"progress") ) { return ::hx::Val( progress ); }
		if (HX_FIELD_EQ(inName,"prevTalk") ) { return ::hx::Val( prevTalk ); }
		if (HX_FIELD_EQ(inName,"backItem") ) { return ::hx::Val( backItem_dyn() ); }
		if (HX_FIELD_EQ(inName,"itemMove") ) { return ::hx::Val( itemMove_dyn() ); }
		if (HX_FIELD_EQ(inName,"playSong") ) { return ::hx::Val( playSong_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"menuIcons") ) { return ::hx::Val( menuIcons ); }
		if (HX_FIELD_EQ(inName,"weekDebug") ) { return ::hx::Val( weekDebug ); }
		if (HX_FIELD_EQ(inName,"menuColor") ) { return ::hx::Val( menuColor ); }
		if (HX_FIELD_EQ(inName,"weeksList") ) { return ::hx::Val( weeksList ); }
		if (HX_FIELD_EQ(inName,"hudFollow") ) { return ::hx::Val( hudFollow ); }
		if (HX_FIELD_EQ(inName,"ammarText") ) { return ::hx::Val( ammarText ); }
		if (HX_FIELD_EQ(inName,"cheatText") ) { return ::hx::Val( cheatText ); }
		if (HX_FIELD_EQ(inName,"playStory") ) { return ::hx::Val( playStory_dyn() ); }
		if (HX_FIELD_EQ(inName,"popLocked") ) { return ::hx::Val( popLocked_dyn() ); }
		if (HX_FIELD_EQ(inName,"isSwiping") ) { return ::hx::Val( isSwiping ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"menuChecks") ) { return ::hx::Val( menuChecks ); }
		if (HX_FIELD_EQ(inName,"songBGDesc") ) { return ::hx::Val( songBGDesc ); }
		if (HX_FIELD_EQ(inName,"diffBGDesc") ) { return ::hx::Val( diffBGDesc ); }
		if (HX_FIELD_EQ(inName,"difficulty") ) { return ::hx::Val( difficulty ); }
		if (HX_FIELD_EQ(inName,"diffLTween") ) { return ::hx::Val( diffLTween ); }
		if (HX_FIELD_EQ(inName,"diffRTween") ) { return ::hx::Val( diffRTween ); }
		if (HX_FIELD_EQ(inName,"diffSelect") ) { return ::hx::Val( diffSelect ); }
		if (HX_FIELD_EQ(inName,"badgesList") ) { return ::hx::Val( badgesList ); }
		if (HX_FIELD_EQ(inName,"progressBG") ) { return ::hx::Val( progressBG ); }
		if (HX_FIELD_EQ(inName,"modifierBG") ) { return ::hx::Val( modifierBG ); }
		if (HX_FIELD_EQ(inName,"exitButton") ) { return ::hx::Val( exitButton ); }
		if (HX_FIELD_EQ(inName,"createMenu") ) { return ::hx::Val( createMenu_dyn() ); }
		if (HX_FIELD_EQ(inName,"holdOption") ) { return ::hx::Val( holdOption_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectItem") ) { return ::hx::Val( selectItem_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeDiff") ) { return ::hx::Val( changeDiff_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastSelect") ) { return ::hx::Val( lastSelect ); }
		if (HX_FIELD_EQ(inName,"dragEnable") ) { return ::hx::Val( dragEnable ); }
		if (HX_FIELD_EQ(inName,"dragSystem") ) { return ::hx::Val( dragSystem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"borderTween") ) { return ::hx::Val( borderTween ); }
		if (HX_FIELD_EQ(inName,"songDescTxt") ) { return ::hx::Val( songDescTxt ); }
		if (HX_FIELD_EQ(inName,"diffLOffset") ) { return ::hx::Val( diffLOffset ); }
		if (HX_FIELD_EQ(inName,"diffROffset") ) { return ::hx::Val( diffROffset ); }
		if (HX_FIELD_EQ(inName,"optionsMode") ) { return ::hx::Val( optionsMode ); }
		if (HX_FIELD_EQ(inName,"optionsList") ) { return ::hx::Val( optionsList ); }
		if (HX_FIELD_EQ(inName,"creditsList") ) { return ::hx::Val( creditsList ); }
		if (HX_FIELD_EQ(inName,"progressTxt") ) { return ::hx::Val( progressTxt ); }
		if (HX_FIELD_EQ(inName,"progressBar") ) { return ::hx::Val( progressBar ); }
		if (HX_FIELD_EQ(inName,"setSongDesc") ) { return ::hx::Val( setSongDesc_dyn() ); }
		if (HX_FIELD_EQ(inName,"haveToReset") ) { return ::hx::Val( haveToReset ); }
		if (HX_FIELD_EQ(inName,"sortByOrder") ) { return ::hx::Val( sortByOrder_dyn() ); }
		if (HX_FIELD_EQ(inName,"lockedTween") ) { return ::hx::Val( lockedTween ); }
		if (HX_FIELD_EQ(inName,"displayList") ) { return ::hx::Val( displayList_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastHoldPos") ) { return ::hx::Val( lastHoldPos ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"weeksSprites") ) { return ::hx::Val( weeksSprites ); }
		if (HX_FIELD_EQ(inName,"bgColorTween") ) { return ::hx::Val( bgColorTween ); }
		if (HX_FIELD_EQ(inName,"modifierText") ) { return ::hx::Val( modifierText ); }
		if (HX_FIELD_EQ(inName,"requiredText") ) { return ::hx::Val( requiredText ); }
		if (HX_FIELD_EQ(inName,"openWithCute") ) { return ::hx::Val( openWithCute ); }
		if (HX_FIELD_EQ(inName,"createBadges") ) { return ::hx::Val( createBadges_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectOption") ) { return ::hx::Val( selectOption_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"diffLockTween") ) { return ::hx::Val( diffLockTween ); }
		if (HX_FIELD_EQ(inName,"lastDiffPoint") ) { return ::hx::Val( lastDiffPoint ); }
		if (HX_FIELD_EQ(inName,"mobileButtons") ) { return ::hx::Val( mobileButtons ); }
		if (HX_FIELD_EQ(inName,"transProgress") ) { return ::hx::Val( transProgress_dyn() ); }
		if (HX_FIELD_EQ(inName,"createOptions") ) { return ::hx::Val( createOptions_dyn() ); }
		if (HX_FIELD_EQ(inName,"createCredits") ) { return ::hx::Val( createCredits_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastCurSelect") ) { return ::hx::Val( lastCurSelect ); }
		if (HX_FIELD_EQ(inName,"swipeDistance") ) { return ::hx::Val( swipeDistance ); }
		if (HX_FIELD_EQ(inName,"swipeAvaiable") ) { return ::hx::Val( swipeAvaiable ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"menuItemChecks") ) { return ::hx::Val( menuItemChecks ); }
		if (HX_FIELD_EQ(inName,"difficultyLeft") ) { return ::hx::Val( difficultyLeft ); }
		if (HX_FIELD_EQ(inName,"holdOptionTime") ) { return ::hx::Val( holdOptionTime ); }
		if (HX_FIELD_EQ(inName,"createFreeplay") ) { return ::hx::Val( createFreeplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"difficultyDraw") ) { return ::hx::Val( difficultyDraw_dyn() ); }
		if (HX_FIELD_EQ(inName,"holdOptionPass") ) { return ::hx::Val( holdOptionPass ); }
		if (HX_FIELD_EQ(inName,"buttonControls") ) { return ::hx::Val( buttonControls_dyn() ); }
		if (HX_FIELD_EQ(inName,"mouseJustClick") ) { return ::hx::Val( mouseJustClick ); }
		if (HX_FIELD_EQ(inName,"getSwipeEnable") ) { return ::hx::Val( getSwipeEnable_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"songBGDescTween") ) { return ::hx::Val( songBGDescTween ); }
		if (HX_FIELD_EQ(inName,"diffSpriteTween") ) { return ::hx::Val( diffSpriteTween ); }
		if (HX_FIELD_EQ(inName,"hoverDifficulty") ) { return ::hx::Val( hoverDifficulty ); }
		if (HX_FIELD_EQ(inName,"difficultyRight") ) { return ::hx::Val( difficultyRight ); }
		if (HX_FIELD_EQ(inName,"diffLockYOffset") ) { return ::hx::Val( diffLockYOffset ); }
		if (HX_FIELD_EQ(inName,"songsDifficulty") ) { return ::hx::Val( songsDifficulty ); }
		if (HX_FIELD_EQ(inName,"difficultyChart") ) { return ::hx::Val( difficultyChart ); }
		if (HX_FIELD_EQ(inName,"difficultyPoint") ) { return ::hx::Val( difficultyPoint ); }
		if (HX_FIELD_EQ(inName,"checkSongFinish") ) { return ::hx::Val( checkSongFinish_dyn() ); }
		if (HX_FIELD_EQ(inName,"lockedTextTween") ) { return ::hx::Val( lockedTextTween ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"difficultySprite") ) { return ::hx::Val( difficultySprite ); }
		if (HX_FIELD_EQ(inName,"changeStoryScene") ) { return ::hx::Val( changeStoryScene_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"ammarTalkingTween") ) { return ::hx::Val( ammarTalkingTween ); }
		if (HX_FIELD_EQ(inName,"weekKaijuParadise") ) { return ::hx::Val( weekKaijuParadise ); }
		if (HX_FIELD_EQ(inName,"weekHatingProblem") ) { return ::hx::Val( weekHatingProblem ); }
		if (HX_FIELD_EQ(inName,"selectedSomething") ) { return ::hx::Val( selectedSomething ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"weekDiscordAnnoyer") ) { return ::hx::Val( weekDiscordAnnoyer ); }
		if (HX_FIELD_EQ(inName,"storyMobileButtons") ) { return ::hx::Val( storyMobileButtons ); }
		if (HX_FIELD_EQ(inName,"createStorySprites") ) { return ::hx::Val( createStorySprites_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultyPointLerp") ) { return ::hx::Val( difficultyPointLerp ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"difficultyChartTween") ) { return ::hx::Val( difficultyChartTween ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MainMenuStateAmmar_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sounds") ) { outValue = ( sounds ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"songsList") ) { outValue = ( songsList ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"difficultyArray") ) { outValue = ( difficultyArray ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"difficultyChosen") ) { outValue = ( difficultyChosen ); return true; }
	}
	return false;
}

::hx::Val MainMenuStateAmmar_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dots") ) { dots=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ammar") ) { ammar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weeks") ) { weeks=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camBG") ) { camBG=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"locked") ) { locked=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curPage") ) { curPage=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diffLock") ) { diffLock=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuList") ) { menuList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camOther") ) { camOther=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgFollow") ) { bgFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progress") ) { progress=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prevTalk") ) { prevTalk=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuIcons") ) { menuIcons=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekDebug") ) { weekDebug=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuColor") ) { menuColor=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weeksList") ) { weeksList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hudFollow") ) { hudFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ammarText") ) { ammarText=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cheatText") ) { cheatText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSwiping") ) { isSwiping=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"menuChecks") ) { menuChecks=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songBGDesc") ) { songBGDesc=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffBGDesc") ) { diffBGDesc=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"difficulty") ) { difficulty=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffLTween") ) { diffLTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffRTween") ) { diffRTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffSelect") ) { diffSelect=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"badgesList") ) { badgesList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progressBG") ) { progressBG=inValue.Cast<  ::AttachedSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modifierBG") ) { modifierBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"exitButton") ) { exitButton=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastSelect") ) { lastSelect=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragEnable") ) { dragEnable=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"borderTween") ) { borderTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songDescTxt") ) { songDescTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffLOffset") ) { diffLOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffROffset") ) { diffROffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"optionsMode") ) { optionsMode=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"optionsList") ) { optionsList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"creditsList") ) { creditsList=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progressTxt") ) { progressTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"progressBar") ) { progressBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"haveToReset") ) { haveToReset=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lockedTween") ) { lockedTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastHoldPos") ) { lastHoldPos=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"weeksSprites") ) { weeksSprites=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bgColorTween") ) { bgColorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modifierText") ) { modifierText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"requiredText") ) { requiredText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"openWithCute") ) { openWithCute=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"diffLockTween") ) { diffLockTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastDiffPoint") ) { lastDiffPoint=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mobileButtons") ) { mobileButtons=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastCurSelect") ) { lastCurSelect=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swipeDistance") ) { swipeDistance=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swipeAvaiable") ) { swipeAvaiable=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"menuItemChecks") ) { menuItemChecks=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"difficultyLeft") ) { difficultyLeft=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdOptionTime") ) { holdOptionTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdOptionPass") ) { holdOptionPass=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseJustClick") ) { mouseJustClick=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"songBGDescTween") ) { songBGDescTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffSpriteTween") ) { diffSpriteTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hoverDifficulty") ) { hoverDifficulty=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"difficultyRight") ) { difficultyRight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diffLockYOffset") ) { diffLockYOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songsDifficulty") ) { songsDifficulty=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"difficultyChart") ) { difficultyChart=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"difficultyPoint") ) { difficultyPoint=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lockedTextTween") ) { lockedTextTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"difficultySprite") ) { difficultySprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"ammarTalkingTween") ) { ammarTalkingTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekKaijuParadise") ) { weekKaijuParadise=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weekHatingProblem") ) { weekHatingProblem=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedSomething") ) { selectedSomething=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"weekDiscordAnnoyer") ) { weekDiscordAnnoyer=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storyMobileButtons") ) { storyMobileButtons=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"difficultyPointLerp") ) { difficultyPointLerp=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"difficultyChartTween") ) { difficultyChartTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MainMenuStateAmmar_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"sounds") ) { sounds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"songsList") ) { songsList=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"difficultyArray") ) { difficultyArray=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"difficultyChosen") ) { difficultyChosen=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void MainMenuStateAmmar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("menuItemChecks",9d,06,74,2d));
	outFields->push(HX_("menuIcons",bb,0c,b0,51));
	outFields->push(HX_("menuChecks",aa,51,93,9c));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("dots",ca,f5,6d,42));
	outFields->push(HX_("ammar",32,91,3d,22));
	outFields->push(HX_("border",ec,4c,1a,64));
	outFields->push(HX_("ammarTalkingTween",a7,bf,1d,91));
	outFields->push(HX_("borderTween",df,75,e9,a5));
	outFields->push(HX_("songBGDesc",4b,bc,30,99));
	outFields->push(HX_("songBGDescTween",20,ee,07,da));
	outFields->push(HX_("diffBGDesc",7b,38,02,70));
	outFields->push(HX_("songDescTxt",4a,29,bf,d1));
	outFields->push(HX_("weeksSprites",8f,88,89,4e));
	outFields->push(HX_("weekDiscordAnnoyer",40,0a,54,94));
	outFields->push(HX_("weekKaijuParadise",61,1a,bd,28));
	outFields->push(HX_("weekDebug",bf,0d,93,39));
	outFields->push(HX_("weekHatingProblem",24,31,0d,cb));
	outFields->push(HX_("weeks",ff,95,be,c7));
	outFields->push(HX_("difficulty",3b,4e,8e,47));
	outFields->push(HX_("difficultySprite",a0,7c,d9,7d));
	outFields->push(HX_("diffSpriteTween",21,6c,9f,3c));
	outFields->push(HX_("hoverDifficulty",17,3b,eb,a7));
	outFields->push(HX_("difficultyLeft",e2,bb,fa,92));
	outFields->push(HX_("diffLOffset",9a,ab,e9,f8));
	outFields->push(HX_("diffLTween",44,34,7f,0d));
	outFields->push(HX_("difficultyRight",a1,b7,76,7f));
	outFields->push(HX_("diffROffset",20,74,6a,f2));
	outFields->push(HX_("diffRTween",7e,5e,a3,73));
	outFields->push(HX_("diffSelect",e1,3c,89,9c));
	outFields->push(HX_("diffLock",90,0a,d9,1b));
	outFields->push(HX_("diffLockYOffset",3c,bc,e6,2f));
	outFields->push(HX_("diffLockTween",bb,c5,24,23));
	outFields->push(HX_("menuColor",44,db,34,e5));
	outFields->push(HX_("menuList",9d,49,22,4e));
	outFields->push(HX_("optionsMode",e1,39,78,79));
	outFields->push(HX_("optionsList",dc,82,ca,78));
	outFields->push(HX_("songsDifficulty",d9,72,14,e5));
	outFields->push(HX_("weeksList",fd,49,e7,38));
	outFields->push(HX_("badgesList",6e,78,7e,68));
	outFields->push(HX_("creditsList",98,6b,74,e1));
	outFields->push(HX_("curPage",ef,4b,67,b5));
	outFields->push(HX_("difficultyChart",a3,48,c6,db));
	outFields->push(HX_("difficultyChartTween",c8,a2,3e,41));
	outFields->push(HX_("difficultyPoint",15,60,a2,5c));
	outFields->push(HX_("difficultyPointLerp",2c,cd,45,17));
	outFields->push(HX_("lastDiffPoint",d5,f0,e7,8d));
	outFields->push(HX_("camBG",94,0f,1c,41));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camOther",41,4c,ae,3e));
	outFields->push(HX_("bgFollow",16,7d,9d,ce));
	outFields->push(HX_("hudFollow",88,39,ae,42));
	outFields->push(HX_("ammarText",ff,0a,b6,a0));
	outFields->push(HX_("bgColorTween",2d,e4,52,39));
	outFields->push(HX_("progressTxt",c3,78,63,e6));
	outFields->push(HX_("progressBar",26,bc,55,e6));
	outFields->push(HX_("progressBG",b2,36,9a,a0));
	outFields->push(HX_("modifierBG",dc,d8,f6,3c));
	outFields->push(HX_("modifierText",a4,cb,00,97));
	outFields->push(HX_("selectedSomething",9f,42,73,22));
	outFields->push(HX_("progress",ad,f7,2a,86));
	outFields->push(HX_("holdOptionTime",41,9c,cd,f1));
	outFields->push(HX_("locked",0a,05,c7,59));
	outFields->push(HX_("requiredText",ac,25,63,90));
	outFields->push(HX_("openWithCute",b3,03,93,52));
	outFields->push(HX_("cheatText",60,15,be,02));
	outFields->push(HX_("exitButton",b0,f7,69,1a));
	outFields->push(HX_("mobileButtons",ff,fd,2b,8f));
	outFields->push(HX_("storyMobileButtons",ca,24,57,2a));
	outFields->push(HX_("prevTalk",bf,99,c4,15));
	outFields->push(HX_("haveToReset",cc,28,5e,83));
	outFields->push(HX_("lockedTween",01,91,d6,49));
	outFields->push(HX_("lockedTextTween",14,24,ca,00));
	outFields->push(HX_("lastCurSelect",66,0f,f9,d8));
	outFields->push(HX_("holdOptionPass",05,b5,22,ef));
	outFields->push(HX_("mouseJustClick",97,1f,f8,f8));
	outFields->push(HX_("swipeDistance",cf,81,2c,60));
	outFields->push(HX_("lastSelect",f2,fd,0d,35));
	outFields->push(HX_("isSwiping",6d,a1,05,06));
	outFields->push(HX_("dragEnable",97,bd,f3,a0));
	outFields->push(HX_("lastHoldPos",df,11,9e,6c));
	outFields->push(HX_("swipeAvaiable",d1,3f,4e,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainMenuStateAmmar_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MainMenuStateAmmar_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuStateAmmar_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuStateAmmar_obj,menuItemChecks),HX_("menuItemChecks",9d,06,74,2d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuStateAmmar_obj,menuIcons),HX_("menuIcons",bb,0c,b0,51)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuStateAmmar_obj,menuChecks),HX_("menuChecks",aa,51,93,9c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(MainMenuStateAmmar_obj,dots),HX_("dots",ca,f5,6d,42)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,ammar),HX_("ammar",32,91,3d,22)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,border),HX_("border",ec,4c,1a,64)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,ammarTalkingTween),HX_("ammarTalkingTween",a7,bf,1d,91)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,borderTween),HX_("borderTween",df,75,e9,a5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,songBGDesc),HX_("songBGDesc",4b,bc,30,99)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,songBGDescTween),HX_("songBGDescTween",20,ee,07,da)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,diffBGDesc),HX_("diffBGDesc",7b,38,02,70)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuStateAmmar_obj,songDescTxt),HX_("songDescTxt",4a,29,bf,d1)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuStateAmmar_obj,weeksSprites),HX_("weeksSprites",8f,88,89,4e)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,weekDiscordAnnoyer),HX_("weekDiscordAnnoyer",40,0a,54,94)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,weekKaijuParadise),HX_("weekKaijuParadise",61,1a,bd,28)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,weekDebug),HX_("weekDebug",bf,0d,93,39)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,weekHatingProblem),HX_("weekHatingProblem",24,31,0d,cb)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,weeks),HX_("weeks",ff,95,be,c7)},
	{::hx::fsString,(int)offsetof(MainMenuStateAmmar_obj,difficulty),HX_("difficulty",3b,4e,8e,47)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,difficultySprite),HX_("difficultySprite",a0,7c,d9,7d)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,diffSpriteTween),HX_("diffSpriteTween",21,6c,9f,3c)},
	{::hx::fsBool,(int)offsetof(MainMenuStateAmmar_obj,hoverDifficulty),HX_("hoverDifficulty",17,3b,eb,a7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,difficultyLeft),HX_("difficultyLeft",e2,bb,fa,92)},
	{::hx::fsFloat,(int)offsetof(MainMenuStateAmmar_obj,diffLOffset),HX_("diffLOffset",9a,ab,e9,f8)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,diffLTween),HX_("diffLTween",44,34,7f,0d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,difficultyRight),HX_("difficultyRight",a1,b7,76,7f)},
	{::hx::fsFloat,(int)offsetof(MainMenuStateAmmar_obj,diffROffset),HX_("diffROffset",20,74,6a,f2)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,diffRTween),HX_("diffRTween",7e,5e,a3,73)},
	{::hx::fsInt,(int)offsetof(MainMenuStateAmmar_obj,diffSelect),HX_("diffSelect",e1,3c,89,9c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,diffLock),HX_("diffLock",90,0a,d9,1b)},
	{::hx::fsFloat,(int)offsetof(MainMenuStateAmmar_obj,diffLockYOffset),HX_("diffLockYOffset",3c,bc,e6,2f)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,diffLockTween),HX_("diffLockTween",bb,c5,24,23)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(MainMenuStateAmmar_obj,menuColor),HX_("menuColor",44,db,34,e5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,menuList),HX_("menuList",9d,49,22,4e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuStateAmmar_obj,optionsMode),HX_("optionsMode",e1,39,78,79)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,optionsList),HX_("optionsList",dc,82,ca,78)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(MainMenuStateAmmar_obj,songsDifficulty),HX_("songsDifficulty",d9,72,14,e5)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuStateAmmar_obj,weeksList),HX_("weeksList",fd,49,e7,38)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,badgesList),HX_("badgesList",6e,78,7e,68)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,creditsList),HX_("creditsList",98,6b,74,e1)},
	{::hx::fsString,(int)offsetof(MainMenuStateAmmar_obj,curPage),HX_("curPage",ef,4b,67,b5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,difficultyChart),HX_("difficultyChart",a3,48,c6,db)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,difficultyChartTween),HX_("difficultyChartTween",c8,a2,3e,41)},
	{::hx::fsInt,(int)offsetof(MainMenuStateAmmar_obj,difficultyPoint),HX_("difficultyPoint",15,60,a2,5c)},
	{::hx::fsFloat,(int)offsetof(MainMenuStateAmmar_obj,difficultyPointLerp),HX_("difficultyPointLerp",2c,cd,45,17)},
	{::hx::fsInt,(int)offsetof(MainMenuStateAmmar_obj,lastDiffPoint),HX_("lastDiffPoint",d5,f0,e7,8d)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(MainMenuStateAmmar_obj,camBG),HX_("camBG",94,0f,1c,41)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(MainMenuStateAmmar_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(MainMenuStateAmmar_obj,camOther),HX_("camOther",41,4c,ae,3e)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuStateAmmar_obj,bgFollow),HX_("bgFollow",16,7d,9d,ce)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuStateAmmar_obj,hudFollow),HX_("hudFollow",88,39,ae,42)},
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(MainMenuStateAmmar_obj,ammarText),HX_("ammarText",ff,0a,b6,a0)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,bgColorTween),HX_("bgColorTween",2d,e4,52,39)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuStateAmmar_obj,progressTxt),HX_("progressTxt",c3,78,63,e6)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(MainMenuStateAmmar_obj,progressBar),HX_("progressBar",26,bc,55,e6)},
	{::hx::fsObject /*  ::AttachedSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,progressBG),HX_("progressBG",b2,36,9a,a0)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,modifierBG),HX_("modifierBG",dc,d8,f6,3c)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuStateAmmar_obj,modifierText),HX_("modifierText",a4,cb,00,97)},
	{::hx::fsBool,(int)offsetof(MainMenuStateAmmar_obj,selectedSomething),HX_("selectedSomething",9f,42,73,22)},
	{::hx::fsFloat,(int)offsetof(MainMenuStateAmmar_obj,progress),HX_("progress",ad,f7,2a,86)},
	{::hx::fsFloat,(int)offsetof(MainMenuStateAmmar_obj,holdOptionTime),HX_("holdOptionTime",41,9c,cd,f1)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,locked),HX_("locked",0a,05,c7,59)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuStateAmmar_obj,requiredText),HX_("requiredText",ac,25,63,90)},
	{::hx::fsBool,(int)offsetof(MainMenuStateAmmar_obj,openWithCute),HX_("openWithCute",b3,03,93,52)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuStateAmmar_obj,cheatText),HX_("cheatText",60,15,be,02)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuStateAmmar_obj,exitButton),HX_("exitButton",b0,f7,69,1a)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuStateAmmar_obj,mobileButtons),HX_("mobileButtons",ff,fd,2b,8f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MainMenuStateAmmar_obj,storyMobileButtons),HX_("storyMobileButtons",ca,24,57,2a)},
	{::hx::fsString,(int)offsetof(MainMenuStateAmmar_obj,prevTalk),HX_("prevTalk",bf,99,c4,15)},
	{::hx::fsBool,(int)offsetof(MainMenuStateAmmar_obj,haveToReset),HX_("haveToReset",cc,28,5e,83)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,lockedTween),HX_("lockedTween",01,91,d6,49)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(MainMenuStateAmmar_obj,lockedTextTween),HX_("lockedTextTween",14,24,ca,00)},
	{::hx::fsInt,(int)offsetof(MainMenuStateAmmar_obj,lastCurSelect),HX_("lastCurSelect",66,0f,f9,d8)},
	{::hx::fsInt,(int)offsetof(MainMenuStateAmmar_obj,holdOptionPass),HX_("holdOptionPass",05,b5,22,ef)},
	{::hx::fsBool,(int)offsetof(MainMenuStateAmmar_obj,mouseJustClick),HX_("mouseJustClick",97,1f,f8,f8)},
	{::hx::fsFloat,(int)offsetof(MainMenuStateAmmar_obj,swipeDistance),HX_("swipeDistance",cf,81,2c,60)},
	{::hx::fsInt,(int)offsetof(MainMenuStateAmmar_obj,lastSelect),HX_("lastSelect",f2,fd,0d,35)},
	{::hx::fsBool,(int)offsetof(MainMenuStateAmmar_obj,isSwiping),HX_("isSwiping",6d,a1,05,06)},
	{::hx::fsBool,(int)offsetof(MainMenuStateAmmar_obj,dragEnable),HX_("dragEnable",97,bd,f3,a0)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(MainMenuStateAmmar_obj,lastHoldPos),HX_("lastHoldPos",df,11,9e,6c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuStateAmmar_obj,swipeAvaiable),HX_("swipeAvaiable",d1,3f,4e,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MainMenuStateAmmar_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &MainMenuStateAmmar_obj::sounds,HX_("sounds",c4,a8,2e,32)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &MainMenuStateAmmar_obj::difficultyArray,HX_("difficultyArray",5e,19,a2,bb)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &MainMenuStateAmmar_obj::songsList,HX_("songsList",7c,d6,ed,05)},
	{::hx::fsBool,(void *) &MainMenuStateAmmar_obj::difficultyChosen,HX_("difficultyChosen",4d,f8,fa,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MainMenuStateAmmar_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("menuItems",e1,15,e5,5c),
	HX_("menuItemChecks",9d,06,74,2d),
	HX_("menuIcons",bb,0c,b0,51),
	HX_("menuChecks",aa,51,93,9c),
	HX_("bg",c5,55,00,00),
	HX_("dots",ca,f5,6d,42),
	HX_("ammar",32,91,3d,22),
	HX_("border",ec,4c,1a,64),
	HX_("ammarTalkingTween",a7,bf,1d,91),
	HX_("borderTween",df,75,e9,a5),
	HX_("songBGDesc",4b,bc,30,99),
	HX_("songBGDescTween",20,ee,07,da),
	HX_("diffBGDesc",7b,38,02,70),
	HX_("songDescTxt",4a,29,bf,d1),
	HX_("weeksSprites",8f,88,89,4e),
	HX_("weekDiscordAnnoyer",40,0a,54,94),
	HX_("weekKaijuParadise",61,1a,bd,28),
	HX_("weekDebug",bf,0d,93,39),
	HX_("weekHatingProblem",24,31,0d,cb),
	HX_("weeks",ff,95,be,c7),
	HX_("difficulty",3b,4e,8e,47),
	HX_("difficultySprite",a0,7c,d9,7d),
	HX_("diffSpriteTween",21,6c,9f,3c),
	HX_("hoverDifficulty",17,3b,eb,a7),
	HX_("difficultyLeft",e2,bb,fa,92),
	HX_("diffLOffset",9a,ab,e9,f8),
	HX_("diffLTween",44,34,7f,0d),
	HX_("difficultyRight",a1,b7,76,7f),
	HX_("diffROffset",20,74,6a,f2),
	HX_("diffRTween",7e,5e,a3,73),
	HX_("diffSelect",e1,3c,89,9c),
	HX_("diffLock",90,0a,d9,1b),
	HX_("diffLockYOffset",3c,bc,e6,2f),
	HX_("diffLockTween",bb,c5,24,23),
	HX_("menuColor",44,db,34,e5),
	HX_("menuList",9d,49,22,4e),
	HX_("optionsMode",e1,39,78,79),
	HX_("optionsList",dc,82,ca,78),
	HX_("songsDifficulty",d9,72,14,e5),
	HX_("weeksList",fd,49,e7,38),
	HX_("badgesList",6e,78,7e,68),
	HX_("creditsList",98,6b,74,e1),
	HX_("curPage",ef,4b,67,b5),
	HX_("difficultyChart",a3,48,c6,db),
	HX_("difficultyChartTween",c8,a2,3e,41),
	HX_("difficultyPoint",15,60,a2,5c),
	HX_("difficultyPointLerp",2c,cd,45,17),
	HX_("lastDiffPoint",d5,f0,e7,8d),
	HX_("camBG",94,0f,1c,41),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camOther",41,4c,ae,3e),
	HX_("bgFollow",16,7d,9d,ce),
	HX_("hudFollow",88,39,ae,42),
	HX_("ammarText",ff,0a,b6,a0),
	HX_("bgColorTween",2d,e4,52,39),
	HX_("progressTxt",c3,78,63,e6),
	HX_("progressBar",26,bc,55,e6),
	HX_("progressBG",b2,36,9a,a0),
	HX_("modifierBG",dc,d8,f6,3c),
	HX_("modifierText",a4,cb,00,97),
	HX_("selectedSomething",9f,42,73,22),
	HX_("progress",ad,f7,2a,86),
	HX_("holdOptionTime",41,9c,cd,f1),
	HX_("locked",0a,05,c7,59),
	HX_("requiredText",ac,25,63,90),
	HX_("openWithCute",b3,03,93,52),
	HX_("cheatText",60,15,be,02),
	HX_("exitButton",b0,f7,69,1a),
	HX_("mobileButtons",ff,fd,2b,8f),
	HX_("storyMobileButtons",ca,24,57,2a),
	HX_("create",fc,66,0f,7c),
	HX_("destroy",fa,2c,86,24),
	HX_("transProgress",f5,b3,0c,79),
	HX_("setSongDesc",88,86,9f,60),
	HX_("prevTalk",bf,99,c4,15),
	HX_("talking",36,57,a8,16),
	HX_("createMenu",bb,06,e7,5a),
	HX_("createFreeplay",bc,0f,c1,74),
	HX_("createOptions",c2,0b,41,c8),
	HX_("createBadges",0c,b8,94,6d),
	HX_("createCredits",7e,e6,a0,fb),
	HX_("update",09,86,05,87),
	HX_("backItem",da,6a,bf,08),
	HX_("holdOption",14,0a,a7,54),
	HX_("haveToReset",cc,28,5e,83),
	HX_("selectOption",91,c7,b2,0f),
	HX_("selectItem",2f,3a,5b,b4),
	HX_("itemMove",c4,59,5d,a5),
	HX_("changeStoryScene",a7,7e,25,42),
	HX_("createStorySprites",75,92,63,6d),
	HX_("sortByOrder",79,47,96,00),
	HX_("playSong",e9,87,6b,3c),
	HX_("playStory",61,41,fa,a4),
	HX_("changeItem",a3,fa,08,20),
	HX_("changeDiff",95,91,b2,1c),
	HX_("checkSongFinish",f0,4c,5d,5b),
	HX_("beatHit",7d,ea,04,74),
	HX_("lockedTween",01,91,d6,49),
	HX_("lockedTextTween",14,24,ca,00),
	HX_("popLocked",7b,d9,3c,d6),
	HX_("difficultyDraw",df,df,ba,8d),
	HX_("lastCurSelect",66,0f,f9,d8),
	HX_("displayList",c0,bb,a5,2f),
	HX_("holdOptionPass",05,b5,22,ef),
	HX_("buttonControls",88,e6,4c,ac),
	HX_("mouseJustClick",97,1f,f8,f8),
	HX_("swipeDistance",cf,81,2c,60),
	HX_("lastSelect",f2,fd,0d,35),
	HX_("isSwiping",6d,a1,05,06),
	HX_("dragEnable",97,bd,f3,a0),
	HX_("lastHoldPos",df,11,9e,6c),
	HX_("swipeAvaiable",d1,3f,4e,49),
	HX_("dragSystem",03,a6,4e,9b),
	HX_("getSwipeEnable",a7,35,50,ee),
	HX_("closeSubState",49,18,32,04),
	::String(null()) };

static void MainMenuStateAmmar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainMenuStateAmmar_obj::sounds,"sounds");
	HX_MARK_MEMBER_NAME(MainMenuStateAmmar_obj::difficultyArray,"difficultyArray");
	HX_MARK_MEMBER_NAME(MainMenuStateAmmar_obj::songsList,"songsList");
	HX_MARK_MEMBER_NAME(MainMenuStateAmmar_obj::difficultyChosen,"difficultyChosen");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainMenuStateAmmar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainMenuStateAmmar_obj::sounds,"sounds");
	HX_VISIT_MEMBER_NAME(MainMenuStateAmmar_obj::difficultyArray,"difficultyArray");
	HX_VISIT_MEMBER_NAME(MainMenuStateAmmar_obj::songsList,"songsList");
	HX_VISIT_MEMBER_NAME(MainMenuStateAmmar_obj::difficultyChosen,"difficultyChosen");
};

#endif

::hx::Class MainMenuStateAmmar_obj::__mClass;

static ::String MainMenuStateAmmar_obj_sStaticFields[] = {
	HX_("sounds",c4,a8,2e,32),
	HX_("difficultyArray",5e,19,a2,bb),
	HX_("songsList",7c,d6,ed,05),
	HX_("difficultyChosen",4d,f8,fa,7a),
	::String(null())
};

void MainMenuStateAmmar_obj::__register()
{
	MainMenuStateAmmar_obj _hx_dummy;
	MainMenuStateAmmar_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MainMenuStateAmmar",19,96,22,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MainMenuStateAmmar_obj::__GetStatic;
	__mClass->mSetStaticField = &MainMenuStateAmmar_obj::__SetStatic;
	__mClass->mMarkFunc = MainMenuStateAmmar_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MainMenuStateAmmar_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainMenuStateAmmar_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainMenuStateAmmar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainMenuStateAmmar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuStateAmmar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuStateAmmar_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MainMenuStateAmmar_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_46_boot)
HXDLIN(  46)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  46)			_g->set(HX_("scroll",0d,d8,64,47),::Paths_obj::sound(HX_("ammar/menu/scroll",20,96,44,30),null()));
HXDLIN(  46)			_g->set(HX_("locked",0a,05,c7,59),::Paths_obj::sound(HX_("ammar/menu/locked",1d,c3,a6,42),null()));
HXDLIN(  46)			_g->set(HX_("impact",c6,f4,77,08),::Paths_obj::sound(HX_("ammar/menu/impact",d9,b2,57,f1),null()));
HXDLIN(  46)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_46_boot)
HXDLIN(  46)		sounds = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_84_boot)
HXDLIN(  84)		difficultyArray = ::Array_obj< ::String >::fromData( _hx_array_data_9f229619_128,4);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		::Array< ::Dynamic> _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_9edd12dd35689126_122_boot)
HXLINE( 124)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 124)			_g->set(HX_("song",d5,23,58,4c),HX_("Discord Annoyer",c4,10,a6,66));
HXDLIN( 124)			_g->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 124)			_g->set(HX_("week",f4,5f,f5,4e),HX_("Discord Annoyer",c4,10,a6,66));
HXLINE( 125)			 ::haxe::ds::StringMap _g1 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 125)			_g1->set(HX_("song",d5,23,58,4c),HX_("Shut Up",c7,38,3a,bb));
HXDLIN( 125)			_g1->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 125)			_g1->set(HX_("week",f4,5f,f5,4e),HX_("Discord Annoyer",c4,10,a6,66));
HXLINE( 126)			 ::haxe::ds::StringMap _g2 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 126)			_g2->set(HX_("song",d5,23,58,4c),HX_("Depression",c6,d2,1a,bd));
HXDLIN( 126)			_g2->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 126)			_g2->set(HX_("week",f4,5f,f5,4e),HX_("Discord Annoyer",c4,10,a6,66));
HXLINE( 127)			 ::haxe::ds::StringMap _g3 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 127)			_g3->set(HX_("song",d5,23,58,4c),HX_("Moderator",e5,1f,0e,c4));
HXDLIN( 127)			_g3->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 127)			_g3->set(HX_("week",f4,5f,f5,4e),HX_("Discord Annoyer",c4,10,a6,66));
HXDLIN( 127)			_g3->set(HX_("unlocked",23,34,0e,5c),::cpp::VirtualArray_obj::__new(4)->init(0,HX_("Discord Annoyer",c4,10,a6,66))->init(1,HX_("Shut Up",c7,38,3a,bb))->init(2,HX_("Depression",c6,d2,1a,bd))->init(3,HX_("Moderator",e5,1f,0e,c4)));
HXLINE( 129)			 ::haxe::ds::StringMap _g4 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 129)			_g4->set(HX_("song",d5,23,58,4c),HX_("Hate Comment",e9,1c,2a,22));
HXDLIN( 129)			_g4->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 129)			_g4->set(HX_("week",f4,5f,f5,4e),HX_("Hating Problem",a6,86,0d,38));
HXLINE( 130)			 ::haxe::ds::StringMap _g5 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 130)			_g5->set(HX_("song",d5,23,58,4c),HX_("Twitter Argument",0a,7a,44,92));
HXDLIN( 130)			_g5->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 130)			_g5->set(HX_("week",f4,5f,f5,4e),HX_("Hating Problem",a6,86,0d,38));
HXLINE( 131)			 ::haxe::ds::StringMap _g6 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 131)			_g6->set(HX_("song",d5,23,58,4c),HX_("Google",d9,37,7e,96));
HXDLIN( 131)			_g6->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 131)			_g6->set(HX_("week",f4,5f,f5,4e),HX_("Hating Problem",a6,86,0d,38));
HXLINE( 132)			 ::haxe::ds::StringMap _g7 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 132)			_g7->set(HX_("song",d5,23,58,4c),HX_("Big Problem",bf,2b,4a,db));
HXDLIN( 132)			_g7->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 132)			_g7->set(HX_("week",f4,5f,f5,4e),HX_("Hating Problem",a6,86,0d,38));
HXDLIN( 132)			_g7->set(HX_("unlocked",23,34,0e,5c),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Big Problem",bf,2b,4a,db)));
HXLINE( 138)			 ::haxe::ds::StringMap _g8 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 138)			_g8->set(HX_("song",d5,23,58,4c),HX_("No Debug",34,91,e5,aa));
HXDLIN( 138)			_g8->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 138)			_g8->set(HX_("week",f4,5f,f5,4e),HX_("Debug",33,c2,4c,6a));
HXDLIN( 138)			_g8->set(HX_("unlocked",23,34,0e,5c),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("No Debug",34,91,e5,aa)));
HXDLIN( 138)			_g8->set(HX_("hidden",6a,ff,95,4c),true);
HXLINE( 139)			 ::haxe::ds::StringMap _g9 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 139)			_g9->set(HX_("song",d5,23,58,4c),HX_("Myself",18,85,47,c1));
HXDLIN( 139)			_g9->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 139)			_g9->set(HX_("week",f4,5f,f5,4e),HX_("Debug",33,c2,4c,6a));
HXDLIN( 139)			_g9->set(HX_("unlocked",23,34,0e,5c),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Myself",18,85,47,c1)));
HXDLIN( 139)			_g9->set(HX_("hidden",6a,ff,95,4c),true);
HXLINE( 141)			 ::haxe::ds::StringMap _g10 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 141)			_g10->set(HX_("song",d5,23,58,4c),HX_("Furry Appeared",8a,fe,20,ef));
HXDLIN( 141)			_g10->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 141)			_g10->set(HX_("week",f4,5f,f5,4e),HX_("Kaiju Paradise",39,ba,e5,5c));
HXDLIN( 141)			_g10->set(HX_("unlocked",23,34,0e,5c),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Furry Appeared",8a,fe,20,ef)));
HXDLIN( 141)			_g10->set(HX_("hidden",6a,ff,95,4c),true);
HXLINE( 142)			 ::haxe::ds::StringMap _g11 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 142)			_g11->set(HX_("song",d5,23,58,4c),HX_("Protogen",c8,12,18,da));
HXDLIN( 142)			_g11->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 142)			_g11->set(HX_("week",f4,5f,f5,4e),HX_("Kaiju Paradise",39,ba,e5,5c));
HXDLIN( 142)			_g11->set(HX_("unlocked",23,34,0e,5c),::cpp::VirtualArray_obj::__new(1)->init(0,HX_("Protogen",c8,12,18,da)));
HXDLIN( 142)			_g11->set(HX_("hidden",6a,ff,95,4c),true);
HXLINE( 144)			 ::haxe::ds::StringMap _g12 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 144)			_g12->set(HX_("song",d5,23,58,4c),HX_("Furry Femboy",54,c3,fa,18));
HXDLIN( 144)			_g12->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 144)			_g12->set(HX_("week",f4,5f,f5,4e),HX_("Furry Femboy",54,c3,fa,18));
HXLINE( 146)			 ::haxe::ds::StringMap _g13 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 146)			_g13->set(HX_("song",d5,23,58,4c),HX_("Programming An Ammar",c6,43,58,9e));
HXDLIN( 146)			_g13->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 146)			_g13->set(HX_("week",f4,5f,f5,4e),HX_("Ammar Showdown",cd,b8,e3,8b));
HXLINE( 147)			 ::haxe::ds::StringMap _g14 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 147)			_g14->set(HX_("song",d5,23,58,4c),HX_("Identity Crisis",25,33,3c,14));
HXDLIN( 147)			_g14->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 147)			_g14->set(HX_("week",f4,5f,f5,4e),HX_("Ammar Showdown",cd,b8,e3,8b));
HXLINE( 148)			 ::haxe::ds::StringMap _g15 =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 148)			_g15->set(HX_("song",d5,23,58,4c),HX_("Note Nova",9a,90,e8,ec));
HXDLIN( 148)			_g15->set(HX_("icon",79,e7,b2,45),HX_("",00,00,00,00));
HXDLIN( 148)			_g15->set(HX_("week",f4,5f,f5,4e),HX_("Ammar Showdown",cd,b8,e3,8b));
HXLINE( 122)			return ::Array_obj< ::Dynamic>::__new(16)->init(0,_g)->init(1,_g1)->init(2,_g2)->init(3,_g3)->init(4,_g4)->init(5,_g5)->init(6,_g6)->init(7,_g7)->init(8,_g8)->init(9,_g9)->init(10,_g10)->init(11,_g11)->init(12,_g12)->init(13,_g13)->init(14,_g14)->init(15,_g15);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_122_boot)
HXDLIN( 122)		songsList = ( (::Array< ::Dynamic>)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_9edd12dd35689126_253_boot)
HXDLIN( 253)		difficultyChosen = false;
            	}
}

