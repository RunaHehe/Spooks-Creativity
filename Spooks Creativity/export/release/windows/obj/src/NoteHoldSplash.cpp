// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_ColorSwap
#include <ColorSwap.h>
#endif
#ifndef INCLUDED_ColorSwapShader
#include <ColorSwapShader.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_NoteHoldSplash
#include <NoteHoldSplash.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2ec9588728782648_7_new,"NoteHoldSplash","new",0xfe3ce7aa,"NoteHoldSplash.new","NoteHoldSplash.hx",7,0x699b3b06)
static const ::String _hx_array_data_11398ab8_1[] = {
	HX_("Purple",5c,6a,1e,a6),HX_("Blue",ba,6e,f2,2b),HX_("Green",a3,7e,1a,2d),HX_("Red",31,91,3e,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2ec9588728782648_29_setup,"NoteHoldSplash","setup",0x9604ac47,"NoteHoldSplash.setup","NoteHoldSplash.hx",29,0x699b3b06)
HX_LOCAL_STACK_FRAME(_hx_pos_2ec9588728782648_49_setPos,"NoteHoldSplash","setPos",0xadf5fe08,"NoteHoldSplash.setPos","NoteHoldSplash.hx",49,0x699b3b06)
HX_LOCAL_STACK_FRAME(_hx_pos_2ec9588728782648_54_endHold,"NoteHoldSplash","endHold",0xa09f0704,"NoteHoldSplash.endHold","NoteHoldSplash.hx",54,0x699b3b06)
HX_LOCAL_STACK_FRAME(_hx_pos_2ec9588728782648_66_loadAnims,"NoteHoldSplash","loadAnims",0x83a3c006,"NoteHoldSplash.loadAnims","NoteHoldSplash.hx",66,0x699b3b06)
HX_LOCAL_STACK_FRAME(_hx_pos_2ec9588728782648_59_loadAnims,"NoteHoldSplash","loadAnims",0x83a3c006,"NoteHoldSplash.loadAnims","NoteHoldSplash.hx",59,0x699b3b06)
HX_LOCAL_STACK_FRAME(_hx_pos_2ec9588728782648_72_update,"NoteHoldSplash","update",0xc58e98ff,"NoteHoldSplash.update","NoteHoldSplash.hx",72,0x699b3b06)
HX_LOCAL_STACK_FRAME(_hx_pos_2ec9588728782648_13_boot,"NoteHoldSplash","boot",0x6f26cda8,"NoteHoldSplash.boot","NoteHoldSplash.hx",13,0x699b3b06)
HX_LOCAL_STACK_FRAME(_hx_pos_2ec9588728782648_14_boot,"NoteHoldSplash","boot",0x6f26cda8,"NoteHoldSplash.boot","NoteHoldSplash.hx",14,0x699b3b06)

void NoteHoldSplash_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic __o_note){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            		 ::Dynamic note = __o_note;
            		if (::hx::IsNull(__o_note)) note = 0;
            	HX_GC_STACKFRAME(&_hx_pos_2ec9588728782648_7_new)
HXLINE(  12)		this->colors = ::Array_obj< ::String >::fromData( _hx_array_data_11398ab8_1,4);
HXLINE(  11)		this->textureLoaded = null();
HXLINE(   9)		this->colorSwap = null();
HXLINE(  17)		super::__construct(x,y,null());
HXLINE(  19)		::String skin = HX_("holdCover",78,c1,41,e3);
HXLINE(  20)		this->loadAnims(skin,null());
HXLINE(  22)		this->colorSwap =  ::ColorSwap_obj::__alloc( HX_CTX );
HXLINE(  23)		this->shader = this->colorSwap->shader;
HXLINE(  25)		this->setup(x,y,note,null(),null(),null(),null());
HXLINE(  26)		this->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
            	}

Dynamic NoteHoldSplash_obj::__CreateEmpty() { return new NoteHoldSplash_obj; }

void *NoteHoldSplash_obj::_hx_vtable = 0;

Dynamic NoteHoldSplash_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NoteHoldSplash_obj > _hx_result = new NoteHoldSplash_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool NoteHoldSplash_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x1a6315dc) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a6315dc;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void NoteHoldSplash_obj::setup(Float x,Float y,::hx::Null< int >  __o_note,::String texture,::hx::Null< Float >  __o_hueColor,::hx::Null< Float >  __o_satColor,::hx::Null< Float >  __o_brtColor){
            		int note = __o_note.Default(0);
            		Float hueColor = __o_hueColor.Default(0);
            		Float satColor = __o_satColor.Default(0);
            		Float brtColor = __o_brtColor.Default(0);
            	HX_STACKFRAME(&_hx_pos_2ec9588728782648_29_setup)
HXLINE(  30)		this->setPos(x,y);
HXLINE(  31)		{
HXLINE(  31)			 ::flixel::math::FlxBasePoint this1 = this->scrollFactor;
HXDLIN(  31)			Float y1 = ::NoteHoldSplash_obj::scrollY;
HXDLIN(  31)			this1->set_x(::NoteHoldSplash_obj::scrollX);
HXDLIN(  31)			this1->set_y(y1);
            		}
HXLINE(  32)		this->set_alpha(( (Float)(1) ));
HXLINE(  34)		texture = HX_("holdCover",78,c1,41,e3);
HXLINE(  36)		if ((this->textureLoaded != texture)) {
HXLINE(  37)			this->loadAnims(texture,note);
            		}
HXLINE(  39)		this->colorSwap->set_hue(hueColor);
HXLINE(  40)		this->colorSwap->set_saturation(satColor);
HXLINE(  41)		this->colorSwap->set_brightness(brtColor);
HXLINE(  42)		{
HXLINE(  42)			 ::flixel::math::FlxBasePoint this2 = this->offset;
HXDLIN(  42)			this2->set_x(( (Float)(10) ));
HXDLIN(  42)			this2->set_y(( (Float)(10) ));
            		}
HXLINE(  44)		this->animation->play(HX_("start",62,74,0b,84),true,null(),null());
HXLINE(  45)		if (::hx::IsNotNull( this->animation->_curAnim )) {
HXLINE(  45)			this->animation->_curAnim->set_frameRate(( (Float)(24) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(NoteHoldSplash_obj,setup,(void))

void NoteHoldSplash_obj::setPos(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_2ec9588728782648_49_setPos)
HXDLIN(  49)		this->setPosition((x - (::Note_obj::swagWidth * ((Float)0.9))),(y - (::Note_obj::swagWidth * ((Float)0.8))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NoteHoldSplash_obj,setPos,(void))

void NoteHoldSplash_obj::endHold(::hx::Null< bool >  __o_success){
            		bool success = __o_success.Default(false);
            	HX_STACKFRAME(&_hx_pos_2ec9588728782648_54_endHold)
HXDLIN(  54)		if (success) {
HXDLIN(  54)			this->animation->play(HX_("end",db,03,4d,00),true,null(),null());
            		}
            		else {
HXLINE(  55)			this->kill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NoteHoldSplash_obj,endHold,(void))

void NoteHoldSplash_obj::loadAnims(::String skin,::hx::Null< int >  __o_noteData){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::NoteHoldSplash,_gthis) HXARGC(1)
            		void _hx_run(::String name){
            			HX_STACKFRAME(&_hx_pos_2ec9588728782648_66_loadAnims)
HXLINE(  66)			if ((_gthis->animation->_curAnim->name == HX_("start",62,74,0b,84))) {
HXLINE(  66)				_gthis->animation->play(HX_("in",e5,5b,00,00),true,null(),null());
            			}
            			else {
HXLINE(  67)				if ((_gthis->animation->_curAnim->name == HX_("end",db,03,4d,00))) {
HXLINE(  67)					_gthis->kill();
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int noteData = __o_noteData.Default(0);
            	HX_STACKFRAME(&_hx_pos_2ec9588728782648_59_loadAnims)
HXDLIN(  59)		 ::NoteHoldSplash _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  60)		::String colorName = this->colors->__get(::hx::Mod(noteData,4));
HXLINE(  61)		::String key = (skin + colorName);
HXDLIN(  61)		::String library = null();
HXDLIN(  61)		 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(key,null());
HXDLIN(  61)		bool xmlExists = false;
HXDLIN(  61)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE(  61)			xmlExists = true;
            		}
HXDLIN(  61)		 ::Dynamic _hx_tmp;
HXDLIN(  61)		if (::hx::IsNotNull( imageLoaded )) {
HXLINE(  61)			_hx_tmp = imageLoaded;
            		}
            		else {
HXLINE(  61)			 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(key,library);
HXDLIN(  61)			_hx_tmp = returnAsset;
            		}
HXDLIN(  61)		 ::Dynamic _hx_tmp1;
HXDLIN(  61)		if (xmlExists) {
HXLINE(  61)			_hx_tmp1 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE(  61)			_hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + key) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library);
            		}
HXDLIN(  61)		this->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,_hx_tmp1));
HXLINE(  62)		this->animation->addByPrefix(HX_("start",62,74,0b,84),(HX_("holdCoverStart",ca,cf,ce,a3) + colorName),24,false,null(),null());
HXLINE(  63)		this->animation->addByPrefix(HX_("in",e5,5b,00,00),(HX_("holdCover",78,c1,41,e3) + colorName),24,true,null(),null());
HXLINE(  64)		this->animation->addByPrefix(HX_("end",db,03,4d,00),(HX_("holdCoverEnd",43,35,13,bd) + colorName),24,false,null(),null());
HXLINE(  65)		this->animation->finishCallback =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NoteHoldSplash_obj,loadAnims,(void))

void NoteHoldSplash_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_2ec9588728782648_72_update)
HXDLIN(  72)		this->super::update(elapsed);
            	}


Float NoteHoldSplash_obj::scrollX;

Float NoteHoldSplash_obj::scrollY;


::hx::ObjectPtr< NoteHoldSplash_obj > NoteHoldSplash_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic __o_note) {
	::hx::ObjectPtr< NoteHoldSplash_obj > __this = new NoteHoldSplash_obj();
	__this->__construct(__o_x,__o_y,__o_note);
	return __this;
}

::hx::ObjectPtr< NoteHoldSplash_obj > NoteHoldSplash_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y, ::Dynamic __o_note) {
	NoteHoldSplash_obj *__this = (NoteHoldSplash_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NoteHoldSplash_obj), true, "NoteHoldSplash"));
	*(void **)__this = NoteHoldSplash_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_note);
	return __this;
}

NoteHoldSplash_obj::NoteHoldSplash_obj()
{
}

void NoteHoldSplash_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NoteHoldSplash);
	HX_MARK_MEMBER_NAME(colorSwap,"colorSwap");
	HX_MARK_MEMBER_NAME(idleAnim,"idleAnim");
	HX_MARK_MEMBER_NAME(textureLoaded,"textureLoaded");
	HX_MARK_MEMBER_NAME(colors,"colors");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NoteHoldSplash_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(colorSwap,"colorSwap");
	HX_VISIT_MEMBER_NAME(idleAnim,"idleAnim");
	HX_VISIT_MEMBER_NAME(textureLoaded,"textureLoaded");
	HX_VISIT_MEMBER_NAME(colors,"colors");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NoteHoldSplash_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { return ::hx::Val( setup_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"colors") ) { return ::hx::Val( colors ); }
		if (HX_FIELD_EQ(inName,"setPos") ) { return ::hx::Val( setPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endHold") ) { return ::hx::Val( endHold_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"idleAnim") ) { return ::hx::Val( idleAnim ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"colorSwap") ) { return ::hx::Val( colorSwap ); }
		if (HX_FIELD_EQ(inName,"loadAnims") ) { return ::hx::Val( loadAnims_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureLoaded") ) { return ::hx::Val( textureLoaded ); }
	}
	return super::__Field(inName,inCallProp);
}

bool NoteHoldSplash_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { outValue = ( scrollX ); return true; }
		if (HX_FIELD_EQ(inName,"scrollY") ) { outValue = ( scrollY ); return true; }
	}
	return false;
}

::hx::Val NoteHoldSplash_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"colors") ) { colors=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"idleAnim") ) { idleAnim=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"colorSwap") ) { colorSwap=inValue.Cast<  ::ColorSwap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureLoaded") ) { textureLoaded=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool NoteHoldSplash_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"scrollX") ) { scrollX=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"scrollY") ) { scrollY=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void NoteHoldSplash_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("colorSwap",96,b5,cb,27));
	outFields->push(HX_("idleAnim",45,73,61,35));
	outFields->push(HX_("textureLoaded",40,1b,87,eb));
	outFields->push(HX_("colors",b0,c5,86,c6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NoteHoldSplash_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::ColorSwap */ ,(int)offsetof(NoteHoldSplash_obj,colorSwap),HX_("colorSwap",96,b5,cb,27)},
	{::hx::fsString,(int)offsetof(NoteHoldSplash_obj,idleAnim),HX_("idleAnim",45,73,61,35)},
	{::hx::fsString,(int)offsetof(NoteHoldSplash_obj,textureLoaded),HX_("textureLoaded",40,1b,87,eb)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(NoteHoldSplash_obj,colors),HX_("colors",b0,c5,86,c6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo NoteHoldSplash_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &NoteHoldSplash_obj::scrollX,HX_("scrollX",ab,33,d8,30)},
	{::hx::fsFloat,(void *) &NoteHoldSplash_obj::scrollY,HX_("scrollY",ac,33,d8,30)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String NoteHoldSplash_obj_sMemberFields[] = {
	HX_("colorSwap",96,b5,cb,27),
	HX_("idleAnim",45,73,61,35),
	HX_("textureLoaded",40,1b,87,eb),
	HX_("colors",b0,c5,86,c6),
	HX_("setup",7d,ae,2f,7a),
	HX_("setPos",12,eb,6c,6f),
	HX_("endHold",ba,82,37,27),
	HX_("loadAnims",3c,15,1b,3e),
	HX_("update",09,86,05,87),
	::String(null()) };

static void NoteHoldSplash_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NoteHoldSplash_obj::scrollX,"scrollX");
	HX_MARK_MEMBER_NAME(NoteHoldSplash_obj::scrollY,"scrollY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NoteHoldSplash_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NoteHoldSplash_obj::scrollX,"scrollX");
	HX_VISIT_MEMBER_NAME(NoteHoldSplash_obj::scrollY,"scrollY");
};

#endif

::hx::Class NoteHoldSplash_obj::__mClass;

static ::String NoteHoldSplash_obj_sStaticFields[] = {
	HX_("scrollX",ab,33,d8,30),
	HX_("scrollY",ac,33,d8,30),
	::String(null())
};

void NoteHoldSplash_obj::__register()
{
	NoteHoldSplash_obj _hx_dummy;
	NoteHoldSplash_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("NoteHoldSplash",b8,8a,39,11);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NoteHoldSplash_obj::__GetStatic;
	__mClass->mSetStaticField = &NoteHoldSplash_obj::__SetStatic;
	__mClass->mMarkFunc = NoteHoldSplash_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NoteHoldSplash_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NoteHoldSplash_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NoteHoldSplash_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NoteHoldSplash_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoteHoldSplash_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoteHoldSplash_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NoteHoldSplash_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2ec9588728782648_13_boot)
HXDLIN(  13)		scrollX = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2ec9588728782648_14_boot)
HXDLIN(  14)		scrollY = ((Float)1);
            	}
}

