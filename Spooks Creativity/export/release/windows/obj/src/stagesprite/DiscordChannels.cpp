// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_stagesprite_DiscordChannels
#include <stagesprite/DiscordChannels.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_355de6f7914b7c63_11_new,"stagesprite.DiscordChannels","new",0xf7b6d443,"stagesprite.DiscordChannels.new","stagesprite/DiscordChannels.hx",11,0x834ab8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_355de6f7914b7c63_33_stepHit,"stagesprite.DiscordChannels","stepHit",0x4dd7dfca,"stagesprite.DiscordChannels.stepHit","stagesprite/DiscordChannels.hx",33,0x834ab8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_355de6f7914b7c63_37_stepHit,"stagesprite.DiscordChannels","stepHit",0x4dd7dfca,"stagesprite.DiscordChannels.stepHit","stagesprite/DiscordChannels.hx",37,0x834ab8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_355de6f7914b7c63_42_stepHit,"stagesprite.DiscordChannels","stepHit",0x4dd7dfca,"stagesprite.DiscordChannels.stepHit","stagesprite/DiscordChannels.hx",42,0x834ab8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_355de6f7914b7c63_50_stepHit,"stagesprite.DiscordChannels","stepHit",0x4dd7dfca,"stagesprite.DiscordChannels.stepHit","stagesprite/DiscordChannels.hx",50,0x834ab8ce)
HX_LOCAL_STACK_FRAME(_hx_pos_355de6f7914b7c63_54_set_beatPhase,"stagesprite.DiscordChannels","set_beatPhase",0xe1773e6b,"stagesprite.DiscordChannels.set_beatPhase","stagesprite/DiscordChannels.hx",54,0x834ab8ce)
namespace stagesprite{

void DiscordChannels_obj::__construct(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_355de6f7914b7c63_11_new)
HXLINE(  32)		this->intensity = ((Float)16);
HXLINE(  31)		this->beatPhase = 1;
HXLINE(  14)		this->distanceScroll = ((Float)0);
HXLINE(  13)		this->defaultX = ((Float)0);
HXLINE(  17)		super::__construct(x,y,null());
HXLINE(  20)		::String library = null();
HXDLIN(  20)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("ChannelsList",ee,a6,38,a3),library);
HXDLIN(  20)		this->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(  21)		this->setGraphicSize(::Std_obj::_hx_int((this->get_width() * ((Float)0.85))),null());
HXLINE(  22)		this->updateHitbox();
HXLINE(  23)		this->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(  24)		{
HXLINE(  24)			 ::flixel::math::FlxBasePoint this1 = this->scrollFactor;
HXDLIN(  24)			this1->set_x(( (Float)(0) ));
HXDLIN(  24)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  26)		this->distanceScroll = (this->get_height() - ( (Float)(720) ));
            	}

Dynamic DiscordChannels_obj::__CreateEmpty() { return new DiscordChannels_obj; }

void *DiscordChannels_obj::_hx_vtable = 0;

Dynamic DiscordChannels_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiscordChannels_obj > _hx_result = new DiscordChannels_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DiscordChannels_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x0981c621) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0981c621;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void DiscordChannels_obj::stepHit(int step){
            	HX_STACKFRAME(&_hx_pos_355de6f7914b7c63_33_stepHit)
HXDLIN(  33)		 ::stagesprite::DiscordChannels _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  34)		if ((::hx::Mod(step,8) == 6)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::stagesprite::DiscordChannels,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tw){
            				HX_STACKFRAME(&_hx_pos_355de6f7914b7c63_37_stepHit)
HXLINE(  37)				_gthis->beatTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  35)			if (::hx::IsNotNull( this->beatTween )) {
HXLINE(  36)				this->beatTween->cancel();
            			}
HXLINE(  37)			this->beatTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),(this->defaultX - this->intensity))),((::Conductor_obj::crochet / ( (Float)(1000) )) / ( (Float)(2) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circIn_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            		}
HXLINE(  39)		if ((::hx::Mod(step,8) == 0)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::stagesprite::DiscordChannels,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tw){
            				HX_STACKFRAME(&_hx_pos_355de6f7914b7c63_42_stepHit)
HXLINE(  42)				_gthis->beatTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  40)			if (::hx::IsNotNull( this->beatTween )) {
HXLINE(  41)				this->beatTween->cancel();
            			}
HXLINE(  42)			this->beatTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),this->defaultX)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            		}
HXLINE(  46)		if ((::hx::Mod(step,64) == 0)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::stagesprite::DiscordChannels,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tw){
            				HX_STACKFRAME(&_hx_pos_355de6f7914b7c63_50_stepHit)
HXLINE(  50)				_gthis->scrollTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  47)			if (::hx::IsNotNull( this->scrollTween )) {
HXLINE(  48)				this->scrollTween->cancel();
            			}
HXLINE(  49)			Float targetY;
HXDLIN(  49)			if ((::hx::Mod(step,128) == 0)) {
HXLINE(  49)				targetY = ( (Float)(50) );
            			}
            			else {
HXLINE(  49)				targetY = (( (Float)(50) ) - this->distanceScroll);
            			}
HXLINE(  50)			this->scrollTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),targetY)),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(12) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordChannels_obj,stepHit,(void))

int DiscordChannels_obj::set_beatPhase(int value){
            	HX_STACKFRAME(&_hx_pos_355de6f7914b7c63_54_set_beatPhase)
HXLINE(  55)		bool _hx_tmp;
HXDLIN(  55)		if ((value != this->beatPhase)) {
HXLINE(  55)			_hx_tmp = (value == 2);
            		}
            		else {
HXLINE(  55)			_hx_tmp = false;
            		}
HXDLIN(  55)		if (_hx_tmp) {
HXLINE(  56)			if (::hx::IsNotNull( this->scrollTween )) {
HXLINE(  57)				this->scrollTween->cancel();
            			}
            		}
HXLINE(  59)		this->beatPhase = value;
HXLINE(  60)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordChannels_obj,set_beatPhase,return )


::hx::ObjectPtr< DiscordChannels_obj > DiscordChannels_obj::__new(Float x,Float y) {
	::hx::ObjectPtr< DiscordChannels_obj > __this = new DiscordChannels_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< DiscordChannels_obj > DiscordChannels_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y) {
	DiscordChannels_obj *__this = (DiscordChannels_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiscordChannels_obj), true, "stagesprite.DiscordChannels"));
	*(void **)__this = DiscordChannels_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

DiscordChannels_obj::DiscordChannels_obj()
{
}

void DiscordChannels_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DiscordChannels);
	HX_MARK_MEMBER_NAME(defaultX,"defaultX");
	HX_MARK_MEMBER_NAME(distanceScroll,"distanceScroll");
	HX_MARK_MEMBER_NAME(beatTween,"beatTween");
	HX_MARK_MEMBER_NAME(scrollTween,"scrollTween");
	HX_MARK_MEMBER_NAME(beatPhase,"beatPhase");
	HX_MARK_MEMBER_NAME(intensity,"intensity");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DiscordChannels_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(defaultX,"defaultX");
	HX_VISIT_MEMBER_NAME(distanceScroll,"distanceScroll");
	HX_VISIT_MEMBER_NAME(beatTween,"beatTween");
	HX_VISIT_MEMBER_NAME(scrollTween,"scrollTween");
	HX_VISIT_MEMBER_NAME(beatPhase,"beatPhase");
	HX_VISIT_MEMBER_NAME(intensity,"intensity");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DiscordChannels_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaultX") ) { return ::hx::Val( defaultX ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"beatTween") ) { return ::hx::Val( beatTween ); }
		if (HX_FIELD_EQ(inName,"beatPhase") ) { return ::hx::Val( beatPhase ); }
		if (HX_FIELD_EQ(inName,"intensity") ) { return ::hx::Val( intensity ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scrollTween") ) { return ::hx::Val( scrollTween ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_beatPhase") ) { return ::hx::Val( set_beatPhase_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"distanceScroll") ) { return ::hx::Val( distanceScroll ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DiscordChannels_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"defaultX") ) { defaultX=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"beatTween") ) { beatTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatPhase") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_beatPhase(inValue.Cast< int >()) );beatPhase=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intensity") ) { intensity=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scrollTween") ) { scrollTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"distanceScroll") ) { distanceScroll=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DiscordChannels_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("defaultX",77,d0,99,af));
	outFields->push(HX_("distanceScroll",22,b5,d4,17));
	outFields->push(HX_("beatTween",15,2d,f7,20));
	outFields->push(HX_("scrollTween",1e,f3,4d,63));
	outFields->push(HX_("beatPhase",e5,aa,6f,c9));
	outFields->push(HX_("intensity",b3,c6,dd,f4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DiscordChannels_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(DiscordChannels_obj,defaultX),HX_("defaultX",77,d0,99,af)},
	{::hx::fsFloat,(int)offsetof(DiscordChannels_obj,distanceScroll),HX_("distanceScroll",22,b5,d4,17)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(DiscordChannels_obj,beatTween),HX_("beatTween",15,2d,f7,20)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(DiscordChannels_obj,scrollTween),HX_("scrollTween",1e,f3,4d,63)},
	{::hx::fsInt,(int)offsetof(DiscordChannels_obj,beatPhase),HX_("beatPhase",e5,aa,6f,c9)},
	{::hx::fsFloat,(int)offsetof(DiscordChannels_obj,intensity),HX_("intensity",b3,c6,dd,f4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DiscordChannels_obj_sStaticStorageInfo = 0;
#endif

static ::String DiscordChannels_obj_sMemberFields[] = {
	HX_("defaultX",77,d0,99,af),
	HX_("distanceScroll",22,b5,d4,17),
	HX_("beatTween",15,2d,f7,20),
	HX_("scrollTween",1e,f3,4d,63),
	HX_("beatPhase",e5,aa,6f,c9),
	HX_("intensity",b3,c6,dd,f4),
	HX_("stepHit",67,ae,41,81),
	HX_("set_beatPhase",c8,60,d9,cf),
	::String(null()) };

::hx::Class DiscordChannels_obj::__mClass;

void DiscordChannels_obj::__register()
{
	DiscordChannels_obj _hx_dummy;
	DiscordChannels_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stagesprite.DiscordChannels",d1,f6,88,8b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DiscordChannels_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DiscordChannels_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiscordChannels_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiscordChannels_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stagesprite
