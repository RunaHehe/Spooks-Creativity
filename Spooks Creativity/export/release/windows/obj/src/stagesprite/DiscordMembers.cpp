// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_AttachedSprite
#include <AttachedSprite.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_stagesprite_DiscordMembers
#include <stagesprite/DiscordMembers.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e5f2f76e78bcedfc_11_new,"stagesprite.DiscordMembers","new",0x11c7686a,"stagesprite.DiscordMembers.new","stagesprite/DiscordMembers.hx",11,0xf8110125)
static const ::String _hx_array_data_23c4ab78_7[] = {
	HX_("User1",66,df,5f,3d),
};
static const ::String _hx_array_data_23c4ab78_8[] = {
	HX_("Mint",c2,7a,35,33),HX_("Lumi",45,5e,95,32),HX_("Blue Evil Spook",e8,2f,6d,67),
};
static const ::String _hx_array_data_23c4ab78_9[] = {
	HX_("Spook",ae,a6,9e,14),
};
static const ::String _hx_array_data_23c4ab78_10[] = {
	HX_("An Ammar",bf,8d,de,e4),HX_("Annoyer",58,7f,03,2a),HX_("Spook",ae,a6,9e,14),HX_("Mint",c2,7a,35,33),HX_("Tutu",62,19,df,37),HX_("Blue Evil Spook",e8,2f,6d,67),HX_("Dave",0c,84,3c,2d),HX_("Lumi",45,5e,95,32),HX_("Luna",1c,5f,95,32),HX_("Andro",34,72,0d,b6),
};
HX_LOCAL_STACK_FRAME(_hx_pos_e5f2f76e78bcedfc_80_addCategory,"stagesprite.DiscordMembers","addCategory",0xaf021449,"stagesprite.DiscordMembers.addCategory","stagesprite/DiscordMembers.hx",80,0xf8110125)
HX_LOCAL_STACK_FRAME(_hx_pos_e5f2f76e78bcedfc_93_sortAlphabet,"stagesprite.DiscordMembers","sortAlphabet",0xfd2804e7,"stagesprite.DiscordMembers.sortAlphabet","stagesprite/DiscordMembers.hx",93,0xf8110125)
HX_LOCAL_STACK_FRAME(_hx_pos_e5f2f76e78bcedfc_111_stepHit,"stagesprite.DiscordMembers","stepHit",0x72631371,"stagesprite.DiscordMembers.stepHit","stagesprite/DiscordMembers.hx",111,0xf8110125)
HX_LOCAL_STACK_FRAME(_hx_pos_e5f2f76e78bcedfc_115_stepHit,"stagesprite.DiscordMembers","stepHit",0x72631371,"stagesprite.DiscordMembers.stepHit","stagesprite/DiscordMembers.hx",115,0xf8110125)
HX_LOCAL_STACK_FRAME(_hx_pos_e5f2f76e78bcedfc_120_stepHit,"stagesprite.DiscordMembers","stepHit",0x72631371,"stagesprite.DiscordMembers.stepHit","stagesprite/DiscordMembers.hx",120,0xf8110125)
HX_LOCAL_STACK_FRAME(_hx_pos_e5f2f76e78bcedfc_128_stepHit,"stagesprite.DiscordMembers","stepHit",0x72631371,"stagesprite.DiscordMembers.stepHit","stagesprite/DiscordMembers.hx",128,0xf8110125)
HX_LOCAL_STACK_FRAME(_hx_pos_e5f2f76e78bcedfc_132_set_beatPhase,"stagesprite.DiscordMembers","set_beatPhase",0x676b2952,"stagesprite.DiscordMembers.set_beatPhase","stagesprite/DiscordMembers.hx",132,0xf8110125)
namespace stagesprite{

void DiscordMembers_obj::__construct(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_e5f2f76e78bcedfc_11_new)
HXLINE( 110)		this->intensity = ((Float)16);
HXLINE( 109)		this->beatPhase = 1;
HXLINE(  30)		this->distanceScroll = ((Float)0);
HXLINE(  29)		this->defaultX = ((Float)0);
HXLINE(  27)		this->categoryOffX = ( (Float)(23) );
HXLINE(  26)		this->offsetX = ((Float)7);
HXLINE(  25)		this->space = ((Float)40);
HXLINE(  24)		this->index = 0;
HXLINE(  22)		this->organizeMembers = ::Array_obj< ::String >::__new(0);
HXLINE(  20)		this->boosterList = ::Array_obj< ::String >::fromData( _hx_array_data_23c4ab78_7,1);
HXLINE(  19)		this->modList = ::Array_obj< ::String >::fromData( _hx_array_data_23c4ab78_8,3);
HXLINE(  18)		this->ownerList = ::Array_obj< ::String >::fromData( _hx_array_data_23c4ab78_9,1);
HXLINE(  16)		this->categories = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  15)		this->members = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  14)		this->daMembers = ::Array_obj< ::String >::fromData( _hx_array_data_23c4ab78_10,10);
HXLINE(  33)		super::__construct(x,y,null());
HXLINE(  36)		::String library = null();
HXDLIN(  36)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("MembersListBG",3c,43,09,eb),library);
HXDLIN(  36)		this->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(  37)		this->setGraphicSize(::Std_obj::_hx_int((this->get_width() * ((Float)0.85))),null());
HXLINE(  38)		this->updateHitbox();
HXLINE(  39)		{
HXLINE(  39)			 ::flixel::math::FlxBasePoint this1 = this->scrollFactor;
HXDLIN(  39)			this1->set_x(( (Float)(0) ));
HXDLIN(  39)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  41)		this->distanceScroll = (this->get_height() - ( (Float)(720) ));
HXLINE(  43)		this->daMembers->sort(this->sortAlphabet_dyn());
HXLINE(  44)		{
HXLINE(  44)			int _g = 0;
HXDLIN(  44)			::Array< ::String > _g1 = this->ownerList;
HXDLIN(  44)			while((_g < _g1->length)){
HXLINE(  44)				::String item = _g1->__get(_g);
HXDLIN(  44)				_g = (_g + 1);
HXDLIN(  44)				if (this->daMembers->contains(item)) {
HXLINE(  44)					this->organizeMembers->push(item);
            				}
            			}
            		}
HXLINE(  45)		{
HXLINE(  45)			int _g2 = 0;
HXDLIN(  45)			::Array< ::String > _g3 = this->modList;
HXDLIN(  45)			while((_g2 < _g3->length)){
HXLINE(  45)				::String item1 = _g3->__get(_g2);
HXDLIN(  45)				_g2 = (_g2 + 1);
HXDLIN(  45)				if (this->daMembers->contains(item1)) {
HXLINE(  45)					this->organizeMembers->push(item1);
            				}
            			}
            		}
HXLINE(  46)		{
HXLINE(  46)			int _g4 = 0;
HXDLIN(  46)			::Array< ::String > _g5 = this->boosterList;
HXDLIN(  46)			while((_g4 < _g5->length)){
HXLINE(  46)				::String item2 = _g5->__get(_g4);
HXDLIN(  46)				_g4 = (_g4 + 1);
HXDLIN(  46)				if (this->daMembers->contains(item2)) {
HXLINE(  46)					this->organizeMembers->push(item2);
            				}
            			}
            		}
HXLINE(  47)		{
HXLINE(  47)			int _g6 = 0;
HXDLIN(  47)			::Array< ::String > _g7 = this->daMembers;
HXDLIN(  47)			while((_g6 < _g7->length)){
HXLINE(  47)				::String item3 = _g7->__get(_g6);
HXDLIN(  47)				_g6 = (_g6 + 1);
HXDLIN(  47)				if (!(this->organizeMembers->contains(item3))) {
HXLINE(  47)					this->organizeMembers->push(item3);
            				}
            			}
            		}
HXLINE(  50)		if ((this->organizeMembers->length <= 12)) {
HXLINE(  51)			int _g8 = 0;
HXDLIN(  51)			int _g9 = (17 - this->organizeMembers->length);
HXDLIN(  51)			while((_g8 < _g9)){
HXLINE(  51)				_g8 = (_g8 + 1);
HXDLIN(  51)				int item4 = (_g8 - 1);
HXLINE(  52)				::Array< ::String > _hx_tmp = this->organizeMembers;
HXDLIN(  52)				_hx_tmp->push((HX_("User",6b,be,86,38) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())));
            			}
            		}
HXLINE(  54)		{
HXLINE(  54)			int _g10 = 0;
HXDLIN(  54)			::Array< ::String > _g11 = this->organizeMembers;
HXDLIN(  54)			while((_g10 < _g11->length)){
HXLINE(  54)				::String item5 = _g11->__get(_g10);
HXDLIN(  54)				_g10 = (_g10 + 1);
HXLINE(  55)				bool _hx_tmp1;
HXDLIN(  55)				bool _hx_tmp2;
HXDLIN(  55)				bool _hx_tmp3;
HXDLIN(  55)				if ((item5 != HX_("Spook",ae,a6,9e,14))) {
HXLINE(  55)					_hx_tmp3 = (item5 == HX_("Mint",c2,7a,35,33));
            				}
            				else {
HXLINE(  55)					_hx_tmp3 = true;
            				}
HXDLIN(  55)				if (!(_hx_tmp3)) {
HXLINE(  55)					_hx_tmp2 = (item5 == HX_("User1",66,df,5f,3d));
            				}
            				else {
HXLINE(  55)					_hx_tmp2 = true;
            				}
HXDLIN(  55)				if (!(_hx_tmp2)) {
HXLINE(  55)					_hx_tmp1 = (item5 == HX_("An Ammar",bf,8d,de,e4));
            				}
            				else {
HXLINE(  55)					_hx_tmp1 = true;
            				}
HXDLIN(  55)				if (_hx_tmp1) {
HXLINE(  56)					 ::stagesprite::DiscordMembers _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  56)					_hx_tmp4->space = (_hx_tmp4->space + 40);
            				}
HXLINE(  58)				 ::AttachedSprite member =  ::AttachedSprite_obj::__alloc( HX_CTX ,(HX_("members/",36,11,b7,07) + item5),null(),null(),null());
HXLINE(  59)				member->setGraphicSize(::Std_obj::_hx_int((member->get_width() * ((Float)0.75))),null());
HXLINE(  60)				member->updateHitbox();
HXLINE(  61)				member->yAdd = ((this->index * 66) + this->space);
HXLINE(  62)				member->xAdd = this->offsetX;
HXLINE(  63)				member->sprTracker = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  64)				 ::stagesprite::DiscordMembers _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  64)				_hx_tmp5->index = (_hx_tmp5->index + 1);
HXLINE(  65)				this->members->push(member);
HXLINE(  67)				{
HXLINE(  67)					::String library1 = null();
HXDLIN(  67)					 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(((HX_("members/",36,11,b7,07) + item5) + HX_(" L",2c,1c,00,00)),library1);
            				}
HXLINE(  69)				if ((item5 == HX_("Spook",ae,a6,9e,14))) {
HXLINE(  70)					this->addCategory(HX_("Content Creator",85,20,a3,3c),member);
            				}
            				else {
HXLINE(  71)					if ((item5 == HX_("Mint",c2,7a,35,33))) {
HXLINE(  72)						this->addCategory(HX_("Moderator",e5,1f,0e,c4),member);
            					}
            					else {
HXLINE(  73)						if ((item5 == HX_("User1",66,df,5f,3d))) {
HXLINE(  74)							this->addCategory(HX_("Server Booster",f3,13,14,94),member);
            						}
            						else {
HXLINE(  75)							if ((item5 == HX_("An Ammar",bf,8d,de,e4))) {
HXLINE(  76)								this->addCategory(HX_("Member",7a,56,4a,39),member);
            							}
            						}
            					}
            				}
            			}
            		}
            	}

Dynamic DiscordMembers_obj::__CreateEmpty() { return new DiscordMembers_obj; }

void *DiscordMembers_obj::_hx_vtable = 0;

Dynamic DiscordMembers_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiscordMembers_obj > _hx_result = new DiscordMembers_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DiscordMembers_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x16e84860) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x16e84860;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void DiscordMembers_obj::addCategory(::String pathName, ::AttachedSprite nextMember){
            	HX_GC_STACKFRAME(&_hx_pos_e5f2f76e78bcedfc_80_addCategory)
HXLINE(  81)		 ::AttachedSprite category =  ::AttachedSprite_obj::__alloc( HX_CTX ,(HX_("category/",71,73,39,11) + pathName),null(),null(),null());
HXLINE(  82)		category->setGraphicSize(::Std_obj::_hx_int((category->get_width() * ((Float)0.75))),null());
HXLINE(  83)		category->updateHitbox();
HXLINE(  84)		category->yAdd = (nextMember->yAdd - ( (Float)(18) ));
HXLINE(  85)		category->xAdd = this->categoryOffX;
HXLINE(  86)		category->sprTracker = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  87)		this->categories->push(category);
HXLINE(  89)		{
HXLINE(  89)			::String library = null();
HXDLIN(  89)			 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(((HX_("category/",71,73,39,11) + pathName) + HX_(" L",2c,1c,00,00)),library);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DiscordMembers_obj,addCategory,(void))

int DiscordMembers_obj::sortAlphabet(::String a,::String b){
            	HX_STACKFRAME(&_hx_pos_e5f2f76e78bcedfc_93_sortAlphabet)
HXLINE(  94)		a = a.toUpperCase();
HXLINE(  95)		b = b.toUpperCase();
HXLINE(  97)		if ((a < b)) {
HXLINE(  98)			return -1;
            		}
            		else {
HXLINE( 100)			if ((a > b)) {
HXLINE( 101)				return 1;
            			}
            			else {
HXLINE( 103)				return 0;
            			}
            		}
HXLINE(  97)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DiscordMembers_obj,sortAlphabet,return )

void DiscordMembers_obj::stepHit(int step){
            	HX_STACKFRAME(&_hx_pos_e5f2f76e78bcedfc_111_stepHit)
HXDLIN( 111)		 ::stagesprite::DiscordMembers _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 112)		if ((::hx::Mod(step,8) == 2)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::stagesprite::DiscordMembers,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tw){
            				HX_STACKFRAME(&_hx_pos_e5f2f76e78bcedfc_115_stepHit)
HXLINE( 115)				_gthis->beatTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 113)			if (::hx::IsNotNull( this->beatTween )) {
HXLINE( 114)				this->beatTween->cancel();
            			}
HXLINE( 115)			this->beatTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),(this->defaultX + this->intensity))),((::Conductor_obj::crochet / ( (Float)(1000) )) / ( (Float)(2) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circIn_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            		}
HXLINE( 117)		if ((::hx::Mod(step,8) == 4)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::stagesprite::DiscordMembers,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tw){
            				HX_STACKFRAME(&_hx_pos_e5f2f76e78bcedfc_120_stepHit)
HXLINE( 120)				_gthis->beatTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 118)			if (::hx::IsNotNull( this->beatTween )) {
HXLINE( 119)				this->beatTween->cancel();
            			}
HXLINE( 120)			this->beatTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("x",78,00,00,00),this->defaultX)),(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            		}
HXLINE( 124)		if ((::hx::Mod(step,64) == 0)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::stagesprite::DiscordMembers,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tw){
            				HX_STACKFRAME(&_hx_pos_e5f2f76e78bcedfc_128_stepHit)
HXLINE( 128)				_gthis->scrollTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 125)			if (::hx::IsNotNull( this->scrollTween )) {
HXLINE( 126)				this->scrollTween->cancel();
            			}
HXLINE( 127)			Float targetY;
HXDLIN( 127)			if ((::hx::Mod(step,128) == 64)) {
HXLINE( 127)				targetY = ( (Float)(50) );
            			}
            			else {
HXLINE( 127)				targetY = (( (Float)(50) ) - this->distanceScroll);
            			}
HXLINE( 128)			this->scrollTween = ::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),targetY)),((::Conductor_obj::crochet / ( (Float)(1000) )) * ( (Float)(12) )), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::sineInOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(_gthis)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordMembers_obj,stepHit,(void))

int DiscordMembers_obj::set_beatPhase(int value){
            	HX_STACKFRAME(&_hx_pos_e5f2f76e78bcedfc_132_set_beatPhase)
HXLINE( 133)		bool _hx_tmp;
HXDLIN( 133)		if ((value != this->beatPhase)) {
HXLINE( 133)			_hx_tmp = (value == 2);
            		}
            		else {
HXLINE( 133)			_hx_tmp = false;
            		}
HXDLIN( 133)		if (_hx_tmp) {
HXLINE( 134)			if (::hx::IsNotNull( this->scrollTween )) {
HXLINE( 135)				this->scrollTween->cancel();
            			}
            		}
HXLINE( 137)		this->beatPhase = value;
HXLINE( 138)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DiscordMembers_obj,set_beatPhase,return )


::hx::ObjectPtr< DiscordMembers_obj > DiscordMembers_obj::__new(Float x,Float y) {
	::hx::ObjectPtr< DiscordMembers_obj > __this = new DiscordMembers_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< DiscordMembers_obj > DiscordMembers_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y) {
	DiscordMembers_obj *__this = (DiscordMembers_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiscordMembers_obj), true, "stagesprite.DiscordMembers"));
	*(void **)__this = DiscordMembers_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

DiscordMembers_obj::DiscordMembers_obj()
{
}

void DiscordMembers_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DiscordMembers);
	HX_MARK_MEMBER_NAME(daMembers,"daMembers");
	HX_MARK_MEMBER_NAME(members,"members");
	HX_MARK_MEMBER_NAME(categories,"categories");
	HX_MARK_MEMBER_NAME(ownerList,"ownerList");
	HX_MARK_MEMBER_NAME(modList,"modList");
	HX_MARK_MEMBER_NAME(boosterList,"boosterList");
	HX_MARK_MEMBER_NAME(organizeMembers,"organizeMembers");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(space,"space");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(categoryOffX,"categoryOffX");
	HX_MARK_MEMBER_NAME(defaultX,"defaultX");
	HX_MARK_MEMBER_NAME(distanceScroll,"distanceScroll");
	HX_MARK_MEMBER_NAME(beatTween,"beatTween");
	HX_MARK_MEMBER_NAME(scrollTween,"scrollTween");
	HX_MARK_MEMBER_NAME(beatPhase,"beatPhase");
	HX_MARK_MEMBER_NAME(intensity,"intensity");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DiscordMembers_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(daMembers,"daMembers");
	HX_VISIT_MEMBER_NAME(members,"members");
	HX_VISIT_MEMBER_NAME(categories,"categories");
	HX_VISIT_MEMBER_NAME(ownerList,"ownerList");
	HX_VISIT_MEMBER_NAME(modList,"modList");
	HX_VISIT_MEMBER_NAME(boosterList,"boosterList");
	HX_VISIT_MEMBER_NAME(organizeMembers,"organizeMembers");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(space,"space");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(categoryOffX,"categoryOffX");
	HX_VISIT_MEMBER_NAME(defaultX,"defaultX");
	HX_VISIT_MEMBER_NAME(distanceScroll,"distanceScroll");
	HX_VISIT_MEMBER_NAME(beatTween,"beatTween");
	HX_VISIT_MEMBER_NAME(scrollTween,"scrollTween");
	HX_VISIT_MEMBER_NAME(beatPhase,"beatPhase");
	HX_VISIT_MEMBER_NAME(intensity,"intensity");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DiscordMembers_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return ::hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"space") ) { return ::hx::Val( space ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { return ::hx::Val( members ); }
		if (HX_FIELD_EQ(inName,"modList") ) { return ::hx::Val( modList ); }
		if (HX_FIELD_EQ(inName,"offsetX") ) { return ::hx::Val( offsetX ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaultX") ) { return ::hx::Val( defaultX ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"daMembers") ) { return ::hx::Val( daMembers ); }
		if (HX_FIELD_EQ(inName,"ownerList") ) { return ::hx::Val( ownerList ); }
		if (HX_FIELD_EQ(inName,"beatTween") ) { return ::hx::Val( beatTween ); }
		if (HX_FIELD_EQ(inName,"beatPhase") ) { return ::hx::Val( beatPhase ); }
		if (HX_FIELD_EQ(inName,"intensity") ) { return ::hx::Val( intensity ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"categories") ) { return ::hx::Val( categories ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"boosterList") ) { return ::hx::Val( boosterList ); }
		if (HX_FIELD_EQ(inName,"addCategory") ) { return ::hx::Val( addCategory_dyn() ); }
		if (HX_FIELD_EQ(inName,"scrollTween") ) { return ::hx::Val( scrollTween ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"categoryOffX") ) { return ::hx::Val( categoryOffX ); }
		if (HX_FIELD_EQ(inName,"sortAlphabet") ) { return ::hx::Val( sortAlphabet_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"set_beatPhase") ) { return ::hx::Val( set_beatPhase_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"distanceScroll") ) { return ::hx::Val( distanceScroll ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"organizeMembers") ) { return ::hx::Val( organizeMembers ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DiscordMembers_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"space") ) { space=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { members=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modList") ) { modList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"defaultX") ) { defaultX=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"daMembers") ) { daMembers=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ownerList") ) { ownerList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatTween") ) { beatTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatPhase") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_beatPhase(inValue.Cast< int >()) );beatPhase=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"intensity") ) { intensity=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"categories") ) { categories=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"boosterList") ) { boosterList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollTween") ) { scrollTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"categoryOffX") ) { categoryOffX=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"distanceScroll") ) { distanceScroll=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"organizeMembers") ) { organizeMembers=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DiscordMembers_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("daMembers",dc,96,2b,fa));
	outFields->push(HX_("members",d9,2c,70,1a));
	outFields->push(HX_("categories",dc,9a,ff,00));
	outFields->push(HX_("ownerList",31,76,9e,23));
	outFields->push(HX_("modList",40,e8,de,dc));
	outFields->push(HX_("boosterList",ce,7e,c4,ed));
	outFields->push(HX_("organizeMembers",f6,12,16,82));
	outFields->push(HX_("index",12,9b,14,be));
	outFields->push(HX_("space",c6,8c,66,81));
	outFields->push(HX_("offsetX",65,09,65,d7));
	outFields->push(HX_("categoryOffX",27,1c,16,1c));
	outFields->push(HX_("defaultX",77,d0,99,af));
	outFields->push(HX_("distanceScroll",22,b5,d4,17));
	outFields->push(HX_("beatTween",15,2d,f7,20));
	outFields->push(HX_("scrollTween",1e,f3,4d,63));
	outFields->push(HX_("beatPhase",e5,aa,6f,c9));
	outFields->push(HX_("intensity",b3,c6,dd,f4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DiscordMembers_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DiscordMembers_obj,daMembers),HX_("daMembers",dc,96,2b,fa)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(DiscordMembers_obj,members),HX_("members",d9,2c,70,1a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(DiscordMembers_obj,categories),HX_("categories",dc,9a,ff,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DiscordMembers_obj,ownerList),HX_("ownerList",31,76,9e,23)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DiscordMembers_obj,modList),HX_("modList",40,e8,de,dc)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DiscordMembers_obj,boosterList),HX_("boosterList",ce,7e,c4,ed)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DiscordMembers_obj,organizeMembers),HX_("organizeMembers",f6,12,16,82)},
	{::hx::fsInt,(int)offsetof(DiscordMembers_obj,index),HX_("index",12,9b,14,be)},
	{::hx::fsFloat,(int)offsetof(DiscordMembers_obj,space),HX_("space",c6,8c,66,81)},
	{::hx::fsFloat,(int)offsetof(DiscordMembers_obj,offsetX),HX_("offsetX",65,09,65,d7)},
	{::hx::fsFloat,(int)offsetof(DiscordMembers_obj,categoryOffX),HX_("categoryOffX",27,1c,16,1c)},
	{::hx::fsFloat,(int)offsetof(DiscordMembers_obj,defaultX),HX_("defaultX",77,d0,99,af)},
	{::hx::fsFloat,(int)offsetof(DiscordMembers_obj,distanceScroll),HX_("distanceScroll",22,b5,d4,17)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(DiscordMembers_obj,beatTween),HX_("beatTween",15,2d,f7,20)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(DiscordMembers_obj,scrollTween),HX_("scrollTween",1e,f3,4d,63)},
	{::hx::fsInt,(int)offsetof(DiscordMembers_obj,beatPhase),HX_("beatPhase",e5,aa,6f,c9)},
	{::hx::fsFloat,(int)offsetof(DiscordMembers_obj,intensity),HX_("intensity",b3,c6,dd,f4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DiscordMembers_obj_sStaticStorageInfo = 0;
#endif

static ::String DiscordMembers_obj_sMemberFields[] = {
	HX_("daMembers",dc,96,2b,fa),
	HX_("members",d9,2c,70,1a),
	HX_("categories",dc,9a,ff,00),
	HX_("ownerList",31,76,9e,23),
	HX_("modList",40,e8,de,dc),
	HX_("boosterList",ce,7e,c4,ed),
	HX_("organizeMembers",f6,12,16,82),
	HX_("index",12,9b,14,be),
	HX_("space",c6,8c,66,81),
	HX_("offsetX",65,09,65,d7),
	HX_("categoryOffX",27,1c,16,1c),
	HX_("defaultX",77,d0,99,af),
	HX_("distanceScroll",22,b5,d4,17),
	HX_("addCategory",3f,62,c8,de),
	HX_("sortAlphabet",31,ee,e5,9a),
	HX_("beatTween",15,2d,f7,20),
	HX_("scrollTween",1e,f3,4d,63),
	HX_("beatPhase",e5,aa,6f,c9),
	HX_("intensity",b3,c6,dd,f4),
	HX_("stepHit",67,ae,41,81),
	HX_("set_beatPhase",c8,60,d9,cf),
	::String(null()) };

::hx::Class DiscordMembers_obj::__mClass;

void DiscordMembers_obj::__register()
{
	DiscordMembers_obj _hx_dummy;
	DiscordMembers_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stagesprite.DiscordMembers",78,ab,c4,23);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DiscordMembers_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DiscordMembers_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiscordMembers_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiscordMembers_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stagesprite
