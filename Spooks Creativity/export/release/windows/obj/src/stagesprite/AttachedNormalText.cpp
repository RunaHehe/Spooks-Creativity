// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_stagesprite_AttachedNormalText
#include <stagesprite/AttachedNormalText.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4376c007a072bf30_6_new,"stagesprite.AttachedNormalText","new",0x434065d5,"stagesprite.AttachedNormalText.new","stagesprite/AttachedNormalText.hx",6,0x64c0359a)
HX_LOCAL_STACK_FRAME(_hx_pos_4376c007a072bf30_20_update,"stagesprite.AttachedNormalText","update",0xa9ba07b4,"stagesprite.AttachedNormalText.update","stagesprite/AttachedNormalText.hx",20,0x64c0359a)
namespace stagesprite{

void AttachedNormalText_obj::__construct(::String __o_text,::hx::Null< Float >  __o_fieldWidth, ::Dynamic __o_size){
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            		Float fieldWidth = __o_fieldWidth.Default(0);
            		 ::Dynamic size = __o_size;
            		if (::hx::IsNull(__o_size)) size = 8;
            	HX_STACKFRAME(&_hx_pos_4376c007a072bf30_6_new)
HXLINE(  12)		this->copyAlpha = false;
HXLINE(  11)		this->copyVisible = true;
HXLINE(   9)		this->offsetY = ((Float)0);
HXLINE(   8)		this->offsetX = ((Float)0);
HXLINE(  14)		super::__construct(0,0,fieldWidth,text,size,null());
HXLINE(  16)		this->set_borderQuality(( (Float)(0) ));
HXLINE(  17)		this->set_alignment(HX_("left",07,08,b0,47));
            	}

Dynamic AttachedNormalText_obj::__CreateEmpty() { return new AttachedNormalText_obj; }

void *AttachedNormalText_obj::_hx_vtable = 0;

Dynamic AttachedNormalText_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AttachedNormalText_obj > _hx_result = new AttachedNormalText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool AttachedNormalText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x752f90b6) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x0c3332f7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0c3332f7;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x752f90b6;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void AttachedNormalText_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4376c007a072bf30_20_update)
HXLINE(  21)		if (::hx::IsNotNull( this->sprTracker )) {
HXLINE(  22)			this->setPosition((this->sprTracker->x + this->offsetX),(this->sprTracker->y + this->offsetY));
HXLINE(  23)			if (this->copyVisible) {
HXLINE(  24)				this->set_visible(this->sprTracker->visible);
            			}
HXLINE(  25)			if (this->copyAlpha) {
HXLINE(  26)				this->set_alpha(this->sprTracker->alpha);
            			}
            		}
HXLINE(  29)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< AttachedNormalText_obj > AttachedNormalText_obj::__new(::String __o_text,::hx::Null< Float >  __o_fieldWidth, ::Dynamic __o_size) {
	::hx::ObjectPtr< AttachedNormalText_obj > __this = new AttachedNormalText_obj();
	__this->__construct(__o_text,__o_fieldWidth,__o_size);
	return __this;
}

::hx::ObjectPtr< AttachedNormalText_obj > AttachedNormalText_obj::__alloc(::hx::Ctx *_hx_ctx,::String __o_text,::hx::Null< Float >  __o_fieldWidth, ::Dynamic __o_size) {
	AttachedNormalText_obj *__this = (AttachedNormalText_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AttachedNormalText_obj), true, "stagesprite.AttachedNormalText"));
	*(void **)__this = AttachedNormalText_obj::_hx_vtable;
	__this->__construct(__o_text,__o_fieldWidth,__o_size);
	return __this;
}

AttachedNormalText_obj::AttachedNormalText_obj()
{
}

void AttachedNormalText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AttachedNormalText);
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(sprTracker,"sprTracker");
	HX_MARK_MEMBER_NAME(copyVisible,"copyVisible");
	HX_MARK_MEMBER_NAME(copyAlpha,"copyAlpha");
	 ::flixel::text::FlxText_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void AttachedNormalText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(sprTracker,"sprTracker");
	HX_VISIT_MEMBER_NAME(copyVisible,"copyVisible");
	HX_VISIT_MEMBER_NAME(copyAlpha,"copyAlpha");
	 ::flixel::text::FlxText_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val AttachedNormalText_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { return ::hx::Val( offsetX ); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return ::hx::Val( offsetY ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyAlpha") ) { return ::hx::Val( copyAlpha ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sprTracker") ) { return ::hx::Val( sprTracker ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyVisible") ) { return ::hx::Val( copyVisible ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AttachedNormalText_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyAlpha") ) { copyAlpha=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sprTracker") ) { sprTracker=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyVisible") ) { copyVisible=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AttachedNormalText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("offsetX",65,09,65,d7));
	outFields->push(HX_("offsetY",66,09,65,d7));
	outFields->push(HX_("sprTracker",03,a3,e2,78));
	outFields->push(HX_("copyVisible",3d,f5,38,f9));
	outFields->push(HX_("copyAlpha",69,cb,91,a7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AttachedNormalText_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(AttachedNormalText_obj,offsetX),HX_("offsetX",65,09,65,d7)},
	{::hx::fsFloat,(int)offsetof(AttachedNormalText_obj,offsetY),HX_("offsetY",66,09,65,d7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(AttachedNormalText_obj,sprTracker),HX_("sprTracker",03,a3,e2,78)},
	{::hx::fsBool,(int)offsetof(AttachedNormalText_obj,copyVisible),HX_("copyVisible",3d,f5,38,f9)},
	{::hx::fsBool,(int)offsetof(AttachedNormalText_obj,copyAlpha),HX_("copyAlpha",69,cb,91,a7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AttachedNormalText_obj_sStaticStorageInfo = 0;
#endif

static ::String AttachedNormalText_obj_sMemberFields[] = {
	HX_("offsetX",65,09,65,d7),
	HX_("offsetY",66,09,65,d7),
	HX_("sprTracker",03,a3,e2,78),
	HX_("copyVisible",3d,f5,38,f9),
	HX_("copyAlpha",69,cb,91,a7),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class AttachedNormalText_obj::__mClass;

void AttachedNormalText_obj::__register()
{
	AttachedNormalText_obj _hx_dummy;
	AttachedNormalText_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("stagesprite.AttachedNormalText",63,d7,a1,98);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AttachedNormalText_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AttachedNormalText_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AttachedNormalText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AttachedNormalText_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace stagesprite
