// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_AttachedText
#include <AttachedText.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_CheckboxThingie
#include <CheckboxThingie.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_options_BaseOptionsMenu
#include <options/BaseOptionsMenu.h>
#endif
#ifndef INCLUDED_options_Option
#include <options/Option.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_11861b212311743c_31_new,"options.BaseOptionsMenu","new",0x99505d4e,"options.BaseOptionsMenu.new","options/BaseOptionsMenu.hx",31,0x82de5a23)
static const bool _hx_array_data_7f305e5c_2[] = {
	0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_204_addOption,"options.BaseOptionsMenu","addOption",0xc780fbe4,"options.BaseOptionsMenu.addOption","options/BaseOptionsMenu.hx",204,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_213_update,"options.BaseOptionsMenu","update",0xdab941db,"options.BaseOptionsMenu.update","options/BaseOptionsMenu.hx",213,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_349_pressAccept,"options.BaseOptionsMenu","pressAccept",0xf1f789d9,"options.BaseOptionsMenu.pressAccept","options/BaseOptionsMenu.hx",349,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_356_updateTextFrom,"options.BaseOptionsMenu","updateTextFrom",0x9c56c9b2,"options.BaseOptionsMenu.updateTextFrom","options/BaseOptionsMenu.hx",356,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_365_clearHold,"options.BaseOptionsMenu","clearHold",0x9cb5a4da,"options.BaseOptionsMenu.clearHold","options/BaseOptionsMenu.hx",365,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_373_changeSelection,"options.BaseOptionsMenu","changeSelection",0x8948d2aa,"options.BaseOptionsMenu.changeSelection","options/BaseOptionsMenu.hx",373,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_415_reloadBoyfriend,"options.BaseOptionsMenu","reloadBoyfriend",0xd0203cbf,"options.BaseOptionsMenu.reloadBoyfriend","options/BaseOptionsMenu.hx",415,0x82de5a23)
HX_LOCAL_STACK_FRAME(_hx_pos_11861b212311743c_433_reloadCheckboxes,"options.BaseOptionsMenu","reloadCheckboxes",0x856a587c,"options.BaseOptionsMenu.reloadCheckboxes","options/BaseOptionsMenu.hx",433,0x82de5a23)
namespace options{

void BaseOptionsMenu_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_31_new)
HXLINE( 211)		this->holdValue = ((Float)0);
HXLINE( 210)		this->holdTime = ((Float)0);
HXLINE( 209)		this->nextAccept = 5;
HXLINE(  54)		this->holdPress = ::Array_obj< bool >::fromData( _hx_array_data_7f305e5c_2,2);
HXLINE(  41)		this->boyfriend = null();
HXLINE(  34)		this->curSelected = 0;
HXLINE(  33)		this->curOption = null();
HXLINE(  58)		super::__construct();
HXLINE(  60)		if (::hx::IsNull( this->title )) {
HXLINE(  60)			this->title = HX_("Options",3e,5b,4f,ad);
            		}
HXLINE(  61)		if (::hx::IsNull( this->rpcTitle )) {
HXLINE(  61)			this->rpcTitle = HX_("Options Menu",e1,25,4c,98);
            		}
HXLINE(  64)		::DiscordClient_obj::changePresence(this->rpcTitle,null(),null(),null(),null());
HXLINE(  67)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  67)		::String library = null();
HXDLIN(  67)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("menuDesat",26,91,04,72),library);
HXDLIN(  67)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(  68)		bg1->set_color(-1412611);
HXLINE(  69)		{
HXLINE(  69)			int axes = 17;
HXDLIN(  69)			bool _hx_tmp;
HXDLIN(  69)			if ((axes != 1)) {
HXLINE(  69)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  69)				_hx_tmp = true;
            			}
HXDLIN(  69)			if (_hx_tmp) {
HXLINE(  69)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  69)				bg1->set_x(((( (Float)(_hx_tmp1) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  69)			bool _hx_tmp2;
HXDLIN(  69)			if ((axes != 16)) {
HXLINE(  69)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  69)				_hx_tmp2 = true;
            			}
HXDLIN(  69)			if (_hx_tmp2) {
HXLINE(  69)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  69)				bg1->set_y(((( (Float)(_hx_tmp3) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  70)		bg1->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(  71)		this->add(bg1);
HXLINE(  74)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  75)		this->add(this->grpOptions);
HXLINE(  77)		this->grpTexts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  78)		this->add(this->grpTexts);
HXLINE(  80)		this->checkboxGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  81)		this->add(this->checkboxGroup);
HXLINE(  83)		this->descBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  84)		this->descBox->set_alpha(((Float)0.6));
HXLINE(  85)		this->add(this->descBox);
HXLINE(  87)		 ::Alphabet titleText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(75) ),( (Float)(40) ),this->title,true);
HXLINE(  88)		titleText->set_scaleX(((Float)0.6));
HXLINE(  89)		titleText->set_scaleY(((Float)0.6));
HXLINE(  90)		titleText->set_alpha(((Float)0.4));
HXLINE(  91)		this->add(titleText);
HXLINE(  93)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE(  94)		 ::flixel::text::FlxText _hx_tmp4 = this->descText;
HXDLIN(  94)		::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN(  94)		::String _hx_tmp5;
HXDLIN(  94)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  94)			_hx_tmp5 = file;
            		}
            		else {
HXLINE(  94)			_hx_tmp5 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            		}
HXDLIN(  94)		_hx_tmp4->setFormat(_hx_tmp5,32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  95)		{
HXLINE(  95)			 ::flixel::math::FlxBasePoint this1 = this->descText->scrollFactor;
HXDLIN(  95)			this1->set_x(( (Float)(0) ));
HXDLIN(  95)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  96)		this->descText->set_borderSize(((Float)2.4));
HXLINE(  97)		this->add(this->descText);
HXLINE(  99)		{
HXLINE(  99)			int _g = 0;
HXDLIN(  99)			int _g1 = this->optionsArray->length;
HXDLIN(  99)			while((_g < _g1)){
HXLINE(  99)				_g = (_g + 1);
HXDLIN(  99)				int i = (_g - 1);
HXLINE( 101)				 ::Alphabet optionText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(290) ),( (Float)(260) ),this->optionsArray->__get(i).StaticCast<  ::options::Option >()->name,false);
HXLINE( 102)				optionText->isMenuItem = true;
HXLINE( 105)				optionText->targetY = i;
HXLINE( 106)				this->grpOptions->add(optionText).StaticCast<  ::Alphabet >();
HXLINE( 108)				if ((this->optionsArray->__get(i).StaticCast<  ::options::Option >()->get_type() == HX_("bool",2a,84,1b,41))) {
HXLINE( 109)					Float checkbox = (optionText->x - ( (Float)(105) ));
HXDLIN( 109)					Float optionText1 = optionText->y;
HXDLIN( 109)					 ::CheckboxThingie checkbox1 =  ::CheckboxThingie_obj::__alloc( HX_CTX ,checkbox,optionText1,::hx::IsEq( this->optionsArray->__get(i).StaticCast<  ::options::Option >()->getValue(),true ));
HXLINE( 110)					checkbox1->sprTracker = optionText;
HXLINE( 111)					checkbox1->ID = i;
HXLINE( 112)					this->checkboxGroup->add(checkbox1).StaticCast<  ::CheckboxThingie >();
            				}
            				else {
HXLINE( 114)					optionText->set_x((optionText->x - ( (Float)(80) )));
HXLINE( 115)					optionText->startPosition->set_x((optionText->startPosition->x - ( (Float)(80) )));
HXLINE( 117)					::String valueText = (HX_("",00,00,00,00) + ::Std_obj::string(this->optionsArray->__get(i).StaticCast<  ::options::Option >()->getValue()));
HXDLIN( 117)					 ::AttachedText valueText1 =  ::AttachedText_obj::__alloc( HX_CTX ,valueText,(optionText->get_width() + 80),null(),null(),null());
HXLINE( 118)					valueText1->sprTracker = optionText;
HXLINE( 119)					valueText1->copyAlpha = true;
HXLINE( 120)					valueText1->ID = i;
HXLINE( 121)					this->grpTexts->add(valueText1).StaticCast<  ::AttachedText >();
HXLINE( 122)					this->optionsArray->__get(i).StaticCast<  ::options::Option >()->setChild(valueText1);
            				}
HXLINE( 126)				bool _hx_tmp6;
HXDLIN( 126)				if (this->optionsArray->__get(i).StaticCast<  ::options::Option >()->showBoyfriend) {
HXLINE( 126)					_hx_tmp6 = ::hx::IsNull( this->boyfriend );
            				}
            				else {
HXLINE( 126)					_hx_tmp6 = false;
            				}
HXDLIN( 126)				if (_hx_tmp6) {
HXLINE( 128)					this->reloadBoyfriend();
            				}
HXLINE( 130)				this->updateTextFrom(this->optionsArray->__get(i).StaticCast<  ::options::Option >());
            			}
            		}
HXLINE( 134)		 ::flixel::FlxSprite _hx_tmp7 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 134)		::String library1 = null();
HXDLIN( 134)		 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(HX_("mobile/right",2f,23,e2,3d),library1);
HXDLIN( 134)		this->downButton = _hx_tmp7->loadGraphic(returnAsset1,null(),null(),null(),null(),null());
HXLINE( 135)		 ::flixel::FlxSprite _hx_tmp8 = this->downButton;
HXDLIN( 135)		_hx_tmp8->setGraphicSize(::Std_obj::_hx_int((this->downButton->get_width() * ((Float)0.5))),null());
HXDLIN( 135)		this->downButton->updateHitbox();
HXLINE( 136)		this->downButton->set_x(( (Float)(0) ));
HXDLIN( 136)		 ::flixel::FlxSprite _hx_tmp9 = this->downButton;
HXDLIN( 136)		_hx_tmp9->set_y((( (Float)(720) ) - this->downButton->get_height()));
HXLINE( 137)		this->downButton->set_alpha(((Float)0.4));
HXLINE( 138)		this->downButton->set_angle(( (Float)(90) ));
HXLINE( 140)		 ::flixel::FlxSprite _hx_tmp10 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 140)		::String library2 = null();
HXDLIN( 140)		 ::flixel::graphics::FlxGraphic returnAsset2 = ::Paths_obj::returnGraphic(HX_("mobile/right",2f,23,e2,3d),library2);
HXDLIN( 140)		this->upButton = _hx_tmp10->loadGraphic(returnAsset2,null(),null(),null(),null(),null());
HXLINE( 141)		 ::flixel::FlxSprite _hx_tmp11 = this->upButton;
HXDLIN( 141)		_hx_tmp11->setGraphicSize(::Std_obj::_hx_int((this->upButton->get_width() * ((Float)0.5))),null());
HXDLIN( 141)		this->upButton->updateHitbox();
HXLINE( 142)		this->upButton->set_x(( (Float)(0) ));
HXDLIN( 142)		this->upButton->set_y(( (Float)(0) ));
HXLINE( 143)		this->upButton->set_alpha(((Float)0.4));
HXLINE( 144)		this->upButton->set_angle(( (Float)(-90) ));
HXLINE( 146)		 ::flixel::FlxSprite _hx_tmp12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 146)		::String library3 = null();
HXDLIN( 146)		 ::flixel::graphics::FlxGraphic returnAsset3 = ::Paths_obj::returnGraphic(HX_("mobile/left",14,7c,b7,b9),library3);
HXDLIN( 146)		this->leftButton = _hx_tmp12->loadGraphic(returnAsset3,null(),null(),null(),null(),null());
HXLINE( 147)		 ::flixel::FlxSprite _hx_tmp13 = this->leftButton;
HXDLIN( 147)		_hx_tmp13->setGraphicSize(::Std_obj::_hx_int((this->leftButton->get_width() * ((Float)0.5))),null());
HXDLIN( 147)		this->leftButton->updateHitbox();
HXLINE( 148)		 ::flixel::FlxSprite _hx_tmp14 = this->leftButton;
HXDLIN( 148)		_hx_tmp14->set_x((( (Float)(1280) ) - (this->leftButton->get_width() * ( (Float)(2) ))));
HXDLIN( 148)		 ::flixel::FlxSprite _hx_tmp15 = this->leftButton;
HXDLIN( 148)		_hx_tmp15->set_y((( (Float)(720) ) - this->leftButton->get_height()));
HXLINE( 149)		this->leftButton->set_alpha(((Float)0.4));
HXLINE( 151)		 ::flixel::FlxSprite _hx_tmp16 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 151)		::String library4 = null();
HXDLIN( 151)		 ::flixel::graphics::FlxGraphic returnAsset4 = ::Paths_obj::returnGraphic(HX_("mobile/right",2f,23,e2,3d),library4);
HXDLIN( 151)		this->rightButton = _hx_tmp16->loadGraphic(returnAsset4,null(),null(),null(),null(),null());
HXLINE( 152)		 ::flixel::FlxSprite _hx_tmp17 = this->rightButton;
HXDLIN( 152)		_hx_tmp17->setGraphicSize(::Std_obj::_hx_int((this->rightButton->get_width() * ((Float)0.5))),null());
HXDLIN( 152)		this->rightButton->updateHitbox();
HXLINE( 153)		 ::flixel::FlxSprite _hx_tmp18 = this->rightButton;
HXDLIN( 153)		_hx_tmp18->set_x((( (Float)(1280) ) - this->rightButton->get_width()));
HXDLIN( 153)		 ::flixel::FlxSprite _hx_tmp19 = this->rightButton;
HXDLIN( 153)		_hx_tmp19->set_y((( (Float)(720) ) - this->leftButton->get_height()));
HXLINE( 154)		this->rightButton->set_alpha(((Float)0.4));
HXLINE( 156)		 ::flixel::FlxSprite _hx_tmp20 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 156)		::String library5 = null();
HXDLIN( 156)		 ::flixel::graphics::FlxGraphic returnAsset5 = ::Paths_obj::returnGraphic(HX_("mobile/accept",55,e4,dc,a4),library5);
HXDLIN( 156)		this->acceptButton = _hx_tmp20->loadGraphic(returnAsset5,null(),null(),null(),null(),null());
HXLINE( 157)		 ::flixel::FlxSprite _hx_tmp21 = this->acceptButton;
HXDLIN( 157)		_hx_tmp21->setGraphicSize(::Std_obj::_hx_int((this->acceptButton->get_width() * ((Float)0.5))),null());
HXDLIN( 157)		this->acceptButton->updateHitbox();
HXLINE( 158)		this->acceptButton->set_x(( (Float)(0) ));
HXDLIN( 158)		{
HXLINE( 158)			 ::flixel::FlxSprite _this = this->acceptButton;
HXDLIN( 158)			int axes1 = 16;
HXDLIN( 158)			bool _hx_tmp22;
HXDLIN( 158)			if ((axes1 != 1)) {
HXLINE( 158)				_hx_tmp22 = (axes1 == 17);
            			}
            			else {
HXLINE( 158)				_hx_tmp22 = true;
            			}
HXDLIN( 158)			if (_hx_tmp22) {
HXLINE( 158)				int _hx_tmp23 = ::flixel::FlxG_obj::width;
HXDLIN( 158)				_this->set_x(((( (Float)(_hx_tmp23) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 158)			bool _hx_tmp24;
HXDLIN( 158)			if ((axes1 != 16)) {
HXLINE( 158)				_hx_tmp24 = (axes1 == 17);
            			}
            			else {
HXLINE( 158)				_hx_tmp24 = true;
            			}
HXDLIN( 158)			if (_hx_tmp24) {
HXLINE( 158)				int _hx_tmp25 = ::flixel::FlxG_obj::height;
HXDLIN( 158)				_this->set_y(((( (Float)(_hx_tmp25) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 159)		this->acceptButton->set_alpha(((Float)0.4));
HXLINE( 200)		this->changeSelection(null());
HXLINE( 201)		this->reloadCheckboxes();
            	}

Dynamic BaseOptionsMenu_obj::__CreateEmpty() { return new BaseOptionsMenu_obj; }

void *BaseOptionsMenu_obj::_hx_vtable = 0;

Dynamic BaseOptionsMenu_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BaseOptionsMenu_obj > _hx_result = new BaseOptionsMenu_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BaseOptionsMenu_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x0cc50116) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0cc50116;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void BaseOptionsMenu_obj::addOption( ::options::Option option){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_204_addOption)
HXLINE( 205)		bool _hx_tmp;
HXDLIN( 205)		if (::hx::IsNotNull( this->optionsArray )) {
HXLINE( 205)			_hx_tmp = (this->optionsArray->length < 1);
            		}
            		else {
HXLINE( 205)			_hx_tmp = true;
            		}
HXDLIN( 205)		if (_hx_tmp) {
HXLINE( 205)			this->optionsArray = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE( 206)		this->optionsArray->push(option);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOptionsMenu_obj,addOption,(void))

void BaseOptionsMenu_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_213_update)
HXLINE( 214)		if (::PlayerSettings_obj::player1->controls->_ui_upP->check()) {
HXLINE( 216)			this->changeSelection(-1);
            		}
HXLINE( 218)		if (::PlayerSettings_obj::player1->controls->_ui_downP->check()) {
HXLINE( 220)			this->changeSelection(1);
            		}
HXLINE( 223)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 224)			this->close();
HXLINE( 225)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 225)			_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
            		}
HXLINE( 228)		if ((this->nextAccept <= 0)) {
HXLINE( 230)			bool usesCheckbox = true;
HXLINE( 231)			if ((this->curOption->get_type() != HX_("bool",2a,84,1b,41))) {
HXLINE( 233)				usesCheckbox = false;
            			}
HXLINE( 236)			if (usesCheckbox) {
HXLINE( 238)				if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 240)					this->pressAccept();
            				}
            			}
            			else {
HXLINE( 243)				bool left;
HXDLIN( 243)				if (!(::PlayerSettings_obj::player1->controls->_ui_left->check())) {
HXLINE( 243)					left = this->holdPress->__get(0);
            				}
            				else {
HXLINE( 243)					left = true;
            				}
HXLINE( 244)				bool right;
HXDLIN( 244)				if (!(::PlayerSettings_obj::player1->controls->_ui_right->check())) {
HXLINE( 244)					right = this->holdPress->__get(1);
            				}
            				else {
HXLINE( 244)					right = true;
            				}
HXLINE( 245)				bool leftP;
HXDLIN( 245)				if (!(::PlayerSettings_obj::player1->controls->_ui_leftP->check())) {
HXLINE( 245)					leftP = this->holdPress->__get(0);
            				}
            				else {
HXLINE( 245)					leftP = true;
            				}
HXLINE( 246)				bool rightP;
HXDLIN( 246)				if (!(::PlayerSettings_obj::player1->controls->_ui_rightP->check())) {
HXLINE( 246)					rightP = this->holdPress->__get(1);
            				}
            				else {
HXLINE( 246)					rightP = true;
            				}
HXLINE( 247)				bool _hx_tmp1;
HXDLIN( 247)				if (!(left)) {
HXLINE( 247)					_hx_tmp1 = right;
            				}
            				else {
HXLINE( 247)					_hx_tmp1 = true;
            				}
HXDLIN( 247)				if (_hx_tmp1) {
HXLINE( 248)					bool pressed;
HXDLIN( 248)					if (!(leftP)) {
HXLINE( 248)						pressed = rightP;
            					}
            					else {
HXLINE( 248)						pressed = true;
            					}
HXLINE( 249)					bool _hx_tmp2;
HXDLIN( 249)					if (!((this->holdTime > ((Float)0.5)))) {
HXLINE( 249)						_hx_tmp2 = pressed;
            					}
            					else {
HXLINE( 249)						_hx_tmp2 = true;
            					}
HXDLIN( 249)					if (_hx_tmp2) {
HXLINE( 250)						if (pressed) {
HXLINE( 251)							 ::Dynamic add = null();
HXLINE( 252)							if ((this->curOption->get_type() != HX_("string",d1,28,30,11))) {
HXLINE( 253)								if (left) {
HXLINE( 253)									add = -(this->curOption->changeValue);
            								}
            								else {
HXLINE( 253)									add = this->curOption->changeValue;
            								}
            							}
HXLINE( 256)							::String _hx_switch_0 = this->curOption->get_type();
            							if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ||  (_hx_switch_0==HX_("int",ef,0c,50,00)) ||  (_hx_switch_0==HX_("percent",c5,aa,da,78)) ){
HXLINE( 259)								this->holdValue = ( (Float)((this->curOption->getValue() + add)) );
HXLINE( 260)								if (::hx::IsLess( this->holdValue,this->curOption->minValue )) {
HXLINE( 260)									this->holdValue = ( (Float)(this->curOption->minValue) );
            								}
            								else {
HXLINE( 261)									if (::hx::IsGreater( this->holdValue,this->curOption->maxValue )) {
HXLINE( 261)										this->holdValue = ( (Float)(this->curOption->maxValue) );
            									}
            								}
HXLINE( 263)								::String _hx_switch_1 = this->curOption->get_type();
            								if (  (_hx_switch_1==HX_("int",ef,0c,50,00)) ){
HXLINE( 266)									this->holdValue = ( (Float)(::Math_obj::round(this->holdValue)) );
HXLINE( 267)									this->curOption->setValue(this->holdValue);
HXLINE( 265)									goto _hx_goto_5;
            								}
            								if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ||  (_hx_switch_1==HX_("percent",c5,aa,da,78)) ){
HXLINE( 270)									this->holdValue = ::flixel::math::FlxMath_obj::roundDecimal(this->holdValue,this->curOption->decimals);
HXLINE( 271)									this->curOption->setValue(this->holdValue);
HXLINE( 269)									goto _hx_goto_5;
            								}
            								_hx_goto_5:;
HXLINE( 258)								goto _hx_goto_4;
            							}
            							if (  (_hx_switch_0==HX_("string",d1,28,30,11)) ){
HXLINE( 275)								int num = this->curOption->curOption;
HXLINE( 276)								if (leftP) {
HXLINE( 276)									num = (num - 1);
            								}
            								else {
HXLINE( 277)									num = (num + 1);
            								}
HXLINE( 279)								if ((num < 0)) {
HXLINE( 280)									num = (this->curOption->options->length - 1);
            								}
            								else {
HXLINE( 281)									if ((num >= this->curOption->options->length)) {
HXLINE( 282)										num = 0;
            									}
            								}
HXLINE( 285)								this->curOption->curOption = num;
HXLINE( 286)								this->curOption->setValue(this->curOption->options->__get(num));
HXLINE( 274)								goto _hx_goto_4;
            							}
            							_hx_goto_4:;
HXLINE( 289)							this->updateTextFrom(this->curOption);
HXLINE( 290)							this->curOption->change();
HXLINE( 291)							 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp3 = ::flixel::FlxG_obj::sound;
HXDLIN( 291)							_hx_tmp3->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            						}
            						else {
HXLINE( 292)							if ((this->curOption->get_type() != HX_("string",d1,28,30,11))) {
HXLINE( 293)								 ::options::BaseOptionsMenu _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 293)								int _hx_tmp5;
HXDLIN( 293)								if (left) {
HXLINE( 293)									_hx_tmp5 = -1;
            								}
            								else {
HXLINE( 293)									_hx_tmp5 = 1;
            								}
HXDLIN( 293)								_hx_tmp4->holdValue = (_hx_tmp4->holdValue + ((this->curOption->scrollSpeed * elapsed) * ( (Float)(_hx_tmp5) )));
HXLINE( 294)								if (::hx::IsLess( this->holdValue,this->curOption->minValue )) {
HXLINE( 294)									this->holdValue = ( (Float)(this->curOption->minValue) );
            								}
            								else {
HXLINE( 295)									if (::hx::IsGreater( this->holdValue,this->curOption->maxValue )) {
HXLINE( 295)										this->holdValue = ( (Float)(this->curOption->maxValue) );
            									}
            								}
HXLINE( 297)								::String _hx_switch_2 = this->curOption->get_type();
            								if (  (_hx_switch_2==HX_("int",ef,0c,50,00)) ){
HXLINE( 300)									this->curOption->setValue(::Math_obj::round(this->holdValue));
HXDLIN( 300)									goto _hx_goto_6;
            								}
            								if (  (_hx_switch_2==HX_("float",9c,c5,96,02)) ||  (_hx_switch_2==HX_("percent",c5,aa,da,78)) ){
HXLINE( 303)									 ::options::Option _hx_tmp6 = this->curOption;
HXDLIN( 303)									_hx_tmp6->setValue(::flixel::math::FlxMath_obj::roundDecimal(this->holdValue,this->curOption->decimals));
HXDLIN( 303)									goto _hx_goto_6;
            								}
            								_hx_goto_6:;
HXLINE( 305)								this->updateTextFrom(this->curOption);
HXLINE( 306)								this->curOption->change();
            							}
            						}
            					}
HXLINE( 310)					if ((this->curOption->get_type() != HX_("string",d1,28,30,11))) {
HXLINE( 311)						 ::options::BaseOptionsMenu _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 311)						_hx_tmp7->holdTime = (_hx_tmp7->holdTime + elapsed);
            					}
            				}
            				else {
HXLINE( 313)					bool _hx_tmp8;
HXDLIN( 313)					if (!(::PlayerSettings_obj::player1->controls->_ui_leftR->check())) {
HXLINE( 313)						_hx_tmp8 = ::PlayerSettings_obj::player1->controls->_ui_rightR->check();
            					}
            					else {
HXLINE( 313)						_hx_tmp8 = true;
            					}
HXDLIN( 313)					if (_hx_tmp8) {
HXLINE( 314)						this->clearHold();
            					}
            				}
            			}
HXLINE( 318)			if (::PlayerSettings_obj::player1->controls->_reset->check()) {
HXLINE( 320)				{
HXLINE( 320)					int _g = 0;
HXDLIN( 320)					int _g1 = this->optionsArray->length;
HXDLIN( 320)					while((_g < _g1)){
HXLINE( 320)						_g = (_g + 1);
HXDLIN( 320)						int i = (_g - 1);
HXLINE( 322)						 ::options::Option leOption = this->optionsArray->__get(i).StaticCast<  ::options::Option >();
HXLINE( 323)						leOption->setValue(leOption->defaultValue);
HXLINE( 324)						if ((leOption->get_type() != HX_("bool",2a,84,1b,41))) {
HXLINE( 326)							if ((leOption->get_type() == HX_("string",d1,28,30,11))) {
HXLINE( 328)								::Array< ::String > leOption1 = leOption->options;
HXDLIN( 328)								leOption->curOption = leOption1->indexOf(leOption->getValue(),null());
            							}
HXLINE( 330)							this->updateTextFrom(leOption);
            						}
HXLINE( 332)						leOption->change();
            					}
            				}
HXLINE( 334)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp9 = ::flixel::FlxG_obj::sound;
HXDLIN( 334)				_hx_tmp9->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 335)				this->reloadCheckboxes();
            			}
            		}
HXLINE( 339)		bool _hx_tmp10;
HXDLIN( 339)		if (::hx::IsNotNull( this->boyfriend )) {
HXLINE( 339)			_hx_tmp10 = this->boyfriend->animation->_curAnim->finished;
            		}
            		else {
HXLINE( 339)			_hx_tmp10 = false;
            		}
HXDLIN( 339)		if (_hx_tmp10) {
HXLINE( 340)			this->boyfriend->dance();
            		}
HXLINE( 343)		if ((this->nextAccept > 0)) {
HXLINE( 344)			 ::options::BaseOptionsMenu _hx_tmp11 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 344)			_hx_tmp11->nextAccept = (_hx_tmp11->nextAccept - 1);
            		}
HXLINE( 346)		this->super::update(elapsed);
            	}


void BaseOptionsMenu_obj::pressAccept(){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_349_pressAccept)
HXLINE( 350)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 350)		_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 351)		 ::options::Option _hx_tmp1 = this->curOption;
HXDLIN( 351)		 ::Dynamic _hx_tmp2;
HXDLIN( 351)		if (::hx::IsEq( this->curOption->getValue(),true )) {
HXLINE( 351)			_hx_tmp2 = false;
            		}
            		else {
HXLINE( 351)			_hx_tmp2 = true;
            		}
HXDLIN( 351)		_hx_tmp1->setValue(_hx_tmp2);
HXLINE( 352)		this->curOption->change();
HXLINE( 353)		this->reloadCheckboxes();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOptionsMenu_obj,pressAccept,(void))

void BaseOptionsMenu_obj::updateTextFrom( ::options::Option option){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_356_updateTextFrom)
HXLINE( 357)		::String text = option->displayFormat;
HXLINE( 358)		 ::Dynamic val = option->getValue();
HXLINE( 359)		if ((option->get_type() == HX_("percent",c5,aa,da,78))) {
HXLINE( 359)			val = (val * 100);
            		}
HXLINE( 360)		 ::Dynamic def = option->defaultValue;
HXLINE( 361)		option->set_text(::StringTools_obj::replace(::StringTools_obj::replace(text,HX_("%v",b1,20,00,00),( (::String)(val) )),HX_("%d",9f,20,00,00),( (::String)(def) )));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOptionsMenu_obj,updateTextFrom,(void))

void BaseOptionsMenu_obj::clearHold(){
            	HX_STACKFRAME(&_hx_pos_11861b212311743c_365_clearHold)
HXLINE( 366)		if ((this->holdTime > ((Float)0.5))) {
HXLINE( 367)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 367)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            		}
HXLINE( 369)		this->holdTime = ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOptionsMenu_obj,clearHold,(void))

void BaseOptionsMenu_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_373_changeSelection)
HXLINE( 374)		 ::options::BaseOptionsMenu _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 374)		_hx_tmp->curSelected = (_hx_tmp->curSelected + change);
HXLINE( 375)		if ((this->curSelected < 0)) {
HXLINE( 376)			this->curSelected = (this->optionsArray->length - 1);
            		}
HXLINE( 377)		if ((this->curSelected >= this->optionsArray->length)) {
HXLINE( 378)			this->curSelected = 0;
            		}
HXLINE( 380)		this->descText->set_text(this->optionsArray->__get(this->curSelected).StaticCast<  ::options::Option >()->description);
HXLINE( 381)		{
HXLINE( 381)			 ::flixel::text::FlxText _this = this->descText;
HXDLIN( 381)			int axes = 16;
HXDLIN( 381)			bool _hx_tmp1;
HXDLIN( 381)			if ((axes != 1)) {
HXLINE( 381)				_hx_tmp1 = (axes == 17);
            			}
            			else {
HXLINE( 381)				_hx_tmp1 = true;
            			}
HXDLIN( 381)			if (_hx_tmp1) {
HXLINE( 381)				int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 381)				_this->set_x(((( (Float)(_hx_tmp2) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 381)			bool _hx_tmp3;
HXDLIN( 381)			if ((axes != 16)) {
HXLINE( 381)				_hx_tmp3 = (axes == 17);
            			}
            			else {
HXLINE( 381)				_hx_tmp3 = true;
            			}
HXDLIN( 381)			if (_hx_tmp3) {
HXLINE( 381)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 381)				_this->set_y(((( (Float)(_hx_tmp4) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 382)		 ::flixel::text::FlxText fh = this->descText;
HXDLIN( 382)		fh->set_y((fh->y + 270));
HXLINE( 384)		int bullShit = 0;
HXLINE( 386)		{
HXLINE( 386)			int _g = 0;
HXDLIN( 386)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 386)			while((_g < _g1->length)){
HXLINE( 386)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 386)				_g = (_g + 1);
HXLINE( 387)				item->targetY = (bullShit - this->curSelected);
HXLINE( 388)				bullShit = (bullShit + 1);
HXLINE( 390)				item->set_alpha(((Float)0.6));
HXLINE( 391)				if ((item->targetY == 0)) {
HXLINE( 392)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 395)		{
HXLINE( 395)			 ::Dynamic filter = null();
HXDLIN( 395)			 ::flixel::group::FlxTypedGroupIterator text =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->grpTexts->members,filter);
HXDLIN( 395)			while(text->hasNext()){
HXLINE( 395)				 ::AttachedText text1 = text->next().StaticCast<  ::AttachedText >();
HXLINE( 396)				text1->set_alpha(((Float)0.6));
HXLINE( 397)				if ((text1->ID == this->curSelected)) {
HXLINE( 398)					text1->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
HXLINE( 402)		this->descBox->setPosition((this->descText->x - ( (Float)(10) )),(this->descText->y - ( (Float)(10) )));
HXLINE( 403)		 ::flixel::FlxSprite _hx_tmp5 = this->descBox;
HXDLIN( 403)		int _hx_tmp6 = ::Std_obj::_hx_int((this->descText->get_width() + 20));
HXDLIN( 403)		_hx_tmp5->setGraphicSize(_hx_tmp6,::Std_obj::_hx_int((this->descText->get_height() + 25)));
HXLINE( 404)		this->descBox->updateHitbox();
HXLINE( 406)		if (::hx::IsNotNull( this->boyfriend )) {
HXLINE( 408)			this->boyfriend->set_visible(this->optionsArray->__get(this->curSelected).StaticCast<  ::options::Option >()->showBoyfriend);
            		}
HXLINE( 410)		this->curOption = this->optionsArray->__get(this->curSelected).StaticCast<  ::options::Option >();
HXLINE( 411)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp7 = ::flixel::FlxG_obj::sound;
HXDLIN( 411)		_hx_tmp7->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BaseOptionsMenu_obj,changeSelection,(void))

void BaseOptionsMenu_obj::reloadBoyfriend(){
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_415_reloadBoyfriend)
HXLINE( 416)		bool wasVisible = false;
HXLINE( 417)		if (::hx::IsNotNull( this->boyfriend )) {
HXLINE( 418)			wasVisible = this->boyfriend->visible;
HXLINE( 419)			this->boyfriend->kill();
HXLINE( 420)			this->remove(this->boyfriend,null());
HXLINE( 421)			this->boyfriend->destroy();
            		}
HXLINE( 424)		this->boyfriend =  ::Character_obj::__alloc( HX_CTX ,( (Float)(840) ),( (Float)(170) ),HX_("bf",c4,55,00,00),true);
HXLINE( 425)		 ::Character _hx_tmp = this->boyfriend;
HXDLIN( 425)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->boyfriend->get_width() * ((Float)0.75))),null());
HXLINE( 426)		this->boyfriend->updateHitbox();
HXLINE( 427)		this->boyfriend->dance();
HXLINE( 428)		this->insert(1,this->boyfriend);
HXLINE( 429)		this->boyfriend->set_visible(wasVisible);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOptionsMenu_obj,reloadBoyfriend,(void))

void BaseOptionsMenu_obj::reloadCheckboxes(){
            	HX_GC_STACKFRAME(&_hx_pos_11861b212311743c_433_reloadCheckboxes)
HXDLIN( 433)		 ::Dynamic filter = null();
HXDLIN( 433)		 ::flixel::group::FlxTypedGroupIterator checkbox =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->checkboxGroup->members,filter);
HXDLIN( 433)		while(checkbox->hasNext()){
HXDLIN( 433)			 ::CheckboxThingie checkbox1 = checkbox->next().StaticCast<  ::CheckboxThingie >();
HXLINE( 434)			checkbox1->set_daValue(::hx::IsEq( this->optionsArray->__get(checkbox1->ID).StaticCast<  ::options::Option >()->getValue(),true ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BaseOptionsMenu_obj,reloadCheckboxes,(void))


::hx::ObjectPtr< BaseOptionsMenu_obj > BaseOptionsMenu_obj::__new() {
	::hx::ObjectPtr< BaseOptionsMenu_obj > __this = new BaseOptionsMenu_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BaseOptionsMenu_obj > BaseOptionsMenu_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BaseOptionsMenu_obj *__this = (BaseOptionsMenu_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BaseOptionsMenu_obj), true, "options.BaseOptionsMenu"));
	*(void **)__this = BaseOptionsMenu_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BaseOptionsMenu_obj::BaseOptionsMenu_obj()
{
}

void BaseOptionsMenu_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BaseOptionsMenu);
	HX_MARK_MEMBER_NAME(curOption,"curOption");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(optionsArray,"optionsArray");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(checkboxGroup,"checkboxGroup");
	HX_MARK_MEMBER_NAME(grpTexts,"grpTexts");
	HX_MARK_MEMBER_NAME(boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(descBox,"descBox");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(rpcTitle,"rpcTitle");
	HX_MARK_MEMBER_NAME(downButton,"downButton");
	HX_MARK_MEMBER_NAME(upButton,"upButton");
	HX_MARK_MEMBER_NAME(leftButton,"leftButton");
	HX_MARK_MEMBER_NAME(rightButton,"rightButton");
	HX_MARK_MEMBER_NAME(acceptButton,"acceptButton");
	HX_MARK_MEMBER_NAME(holdPress,"holdPress");
	HX_MARK_MEMBER_NAME(nextAccept,"nextAccept");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	HX_MARK_MEMBER_NAME(holdValue,"holdValue");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BaseOptionsMenu_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curOption,"curOption");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(optionsArray,"optionsArray");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(checkboxGroup,"checkboxGroup");
	HX_VISIT_MEMBER_NAME(grpTexts,"grpTexts");
	HX_VISIT_MEMBER_NAME(boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(descBox,"descBox");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(rpcTitle,"rpcTitle");
	HX_VISIT_MEMBER_NAME(downButton,"downButton");
	HX_VISIT_MEMBER_NAME(upButton,"upButton");
	HX_VISIT_MEMBER_NAME(leftButton,"leftButton");
	HX_VISIT_MEMBER_NAME(rightButton,"rightButton");
	HX_VISIT_MEMBER_NAME(acceptButton,"acceptButton");
	HX_VISIT_MEMBER_NAME(holdPress,"holdPress");
	HX_VISIT_MEMBER_NAME(nextAccept,"nextAccept");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	HX_VISIT_MEMBER_NAME(holdValue,"holdValue");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val BaseOptionsMenu_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return ::hx::Val( title ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { return ::hx::Val( descBox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpTexts") ) { return ::hx::Val( grpTexts ); }
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		if (HX_FIELD_EQ(inName,"rpcTitle") ) { return ::hx::Val( rpcTitle ); }
		if (HX_FIELD_EQ(inName,"upButton") ) { return ::hx::Val( upButton ); }
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curOption") ) { return ::hx::Val( curOption ); }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { return ::hx::Val( boyfriend ); }
		if (HX_FIELD_EQ(inName,"holdPress") ) { return ::hx::Val( holdPress ); }
		if (HX_FIELD_EQ(inName,"addOption") ) { return ::hx::Val( addOption_dyn() ); }
		if (HX_FIELD_EQ(inName,"holdValue") ) { return ::hx::Val( holdValue ); }
		if (HX_FIELD_EQ(inName,"clearHold") ) { return ::hx::Val( clearHold_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		if (HX_FIELD_EQ(inName,"downButton") ) { return ::hx::Val( downButton ); }
		if (HX_FIELD_EQ(inName,"leftButton") ) { return ::hx::Val( leftButton ); }
		if (HX_FIELD_EQ(inName,"nextAccept") ) { return ::hx::Val( nextAccept ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"rightButton") ) { return ::hx::Val( rightButton ); }
		if (HX_FIELD_EQ(inName,"pressAccept") ) { return ::hx::Val( pressAccept_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"optionsArray") ) { return ::hx::Val( optionsArray ); }
		if (HX_FIELD_EQ(inName,"acceptButton") ) { return ::hx::Val( acceptButton ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"checkboxGroup") ) { return ::hx::Val( checkboxGroup ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateTextFrom") ) { return ::hx::Val( updateTextFrom_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"reloadBoyfriend") ) { return ::hx::Val( reloadBoyfriend_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"reloadCheckboxes") ) { return ::hx::Val( reloadCheckboxes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BaseOptionsMenu_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { descBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grpTexts") ) { grpTexts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rpcTitle") ) { rpcTitle=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upButton") ) { upButton=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"curOption") ) { curOption=inValue.Cast<  ::options::Option >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdPress") ) { holdPress=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"holdValue") ) { holdValue=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downButton") ) { downButton=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftButton") ) { leftButton=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextAccept") ) { nextAccept=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightButton") ) { rightButton=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"optionsArray") ) { optionsArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acceptButton") ) { acceptButton=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"checkboxGroup") ) { checkboxGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BaseOptionsMenu_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curOption",15,ed,07,9c));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("optionsArray",5b,b5,f1,e8));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("checkboxGroup",fc,3d,bc,23));
	outFields->push(HX_("grpTexts",01,f1,99,f0));
	outFields->push(HX_("boyfriend",6a,29,b8,e6));
	outFields->push(HX_("descBox",3a,20,25,19));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("rpcTitle",73,04,98,e2));
	outFields->push(HX_("downButton",f4,43,e4,16));
	outFields->push(HX_("upButton",ad,f2,e6,63));
	outFields->push(HX_("leftButton",59,1d,f1,08));
	outFields->push(HX_("rightButton",ee,2e,65,43));
	outFields->push(HX_("acceptButton",1a,5f,d7,41));
	outFields->push(HX_("holdPress",c4,15,66,61));
	outFields->push(HX_("nextAccept",5b,44,38,c0));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	outFields->push(HX_("holdValue",b2,41,96,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BaseOptionsMenu_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::options::Option */ ,(int)offsetof(BaseOptionsMenu_obj,curOption),HX_("curOption",15,ed,07,9c)},
	{::hx::fsInt,(int)offsetof(BaseOptionsMenu_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BaseOptionsMenu_obj,optionsArray),HX_("optionsArray",5b,b5,f1,e8)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(BaseOptionsMenu_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(BaseOptionsMenu_obj,checkboxGroup),HX_("checkboxGroup",fc,3d,bc,23)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(BaseOptionsMenu_obj,grpTexts),HX_("grpTexts",01,f1,99,f0)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(BaseOptionsMenu_obj,boyfriend),HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,descBox),HX_("descBox",3a,20,25,19)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(BaseOptionsMenu_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsString,(int)offsetof(BaseOptionsMenu_obj,title),HX_("title",98,15,3b,10)},
	{::hx::fsString,(int)offsetof(BaseOptionsMenu_obj,rpcTitle),HX_("rpcTitle",73,04,98,e2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,downButton),HX_("downButton",f4,43,e4,16)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,upButton),HX_("upButton",ad,f2,e6,63)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,leftButton),HX_("leftButton",59,1d,f1,08)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,rightButton),HX_("rightButton",ee,2e,65,43)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(BaseOptionsMenu_obj,acceptButton),HX_("acceptButton",1a,5f,d7,41)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(BaseOptionsMenu_obj,holdPress),HX_("holdPress",c4,15,66,61)},
	{::hx::fsInt,(int)offsetof(BaseOptionsMenu_obj,nextAccept),HX_("nextAccept",5b,44,38,c0)},
	{::hx::fsFloat,(int)offsetof(BaseOptionsMenu_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{::hx::fsFloat,(int)offsetof(BaseOptionsMenu_obj,holdValue),HX_("holdValue",b2,41,96,ca)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BaseOptionsMenu_obj_sStaticStorageInfo = 0;
#endif

static ::String BaseOptionsMenu_obj_sMemberFields[] = {
	HX_("curOption",15,ed,07,9c),
	HX_("curSelected",fb,eb,ab,32),
	HX_("optionsArray",5b,b5,f1,e8),
	HX_("grpOptions",f9,45,d8,00),
	HX_("checkboxGroup",fc,3d,bc,23),
	HX_("grpTexts",01,f1,99,f0),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("descBox",3a,20,25,19),
	HX_("descText",9e,53,35,f3),
	HX_("title",98,15,3b,10),
	HX_("rpcTitle",73,04,98,e2),
	HX_("downButton",f4,43,e4,16),
	HX_("upButton",ad,f2,e6,63),
	HX_("leftButton",59,1d,f1,08),
	HX_("rightButton",ee,2e,65,43),
	HX_("acceptButton",1a,5f,d7,41),
	HX_("holdPress",c4,15,66,61),
	HX_("addOption",76,08,9f,e3),
	HX_("nextAccept",5b,44,38,c0),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("holdValue",b2,41,96,ca),
	HX_("update",09,86,05,87),
	HX_("pressAccept",eb,5e,1f,db),
	HX_("updateTextFrom",e0,eb,e7,7b),
	HX_("clearHold",6c,b1,d3,b8),
	HX_("changeSelection",bc,98,b5,48),
	HX_("reloadBoyfriend",d1,02,8d,8f),
	HX_("reloadCheckboxes",2a,e2,2a,45),
	::String(null()) };

::hx::Class BaseOptionsMenu_obj::__mClass;

void BaseOptionsMenu_obj::__register()
{
	BaseOptionsMenu_obj _hx_dummy;
	BaseOptionsMenu_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("options.BaseOptionsMenu",5c,5e,30,7f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BaseOptionsMenu_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BaseOptionsMenu_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BaseOptionsMenu_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BaseOptionsMenu_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace options
