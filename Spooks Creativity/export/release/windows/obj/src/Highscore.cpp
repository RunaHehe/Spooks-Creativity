// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MainMenuStateAmmar
#include <MainMenuStateAmmar.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_31_resetSong,"Highscore","resetSong",0x458023e6,"Highscore.resetSong","Highscore.hx",31,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_44_resetWeek,"Highscore","resetWeek",0x481d6005,"Highscore.resetWeek","Highscore.hx",44,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_50_floorDecimal,"Highscore","floorDecimal",0x5ce376c3,"Highscore.floorDecimal","Highscore.hx",50,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_66_saveScore,"Highscore","saveScore",0xbac27177,"Highscore.saveScore","Highscore.hx",66,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_99_saveWeekScore,"Highscore","saveWeekScore",0x4660a363,"Highscore.saveWeekScore","Highscore.hx",99,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_115_createNewSongData,"Highscore","createNewSongData",0x059fe425,"Highscore.createNewSongData","Highscore.hx",115,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_120_setScore,"Highscore","setScore",0x2adf0fee,"Highscore.setScore","Highscore.hx",120,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_126_setWeekScore,"Highscore","setWeekScore",0xc8d3495a,"Highscore.setWeekScore","Highscore.hx",126,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_132_setRating,"Highscore","setRating",0xce6da001,"Highscore.setRating","Highscore.hx",132,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_138_setMiss,"Highscore","setMiss",0x61443de0,"Highscore.setMiss","Highscore.hx",138,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_146_formatSong,"Highscore","formatSong",0x2cf91dca,"Highscore.formatSong","Highscore.hx",146,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_150_getScore,"Highscore","getScore",0x7c81b67a,"Highscore.getScore","Highscore.hx",150,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_159_getRating,"Highscore","getRating",0xeb1cb3f5,"Highscore.getRating","Highscore.hx",159,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_168_getWeekScore,"Highscore","getWeekScore",0xb3da25e6,"Highscore.getWeekScore","Highscore.hx",168,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_177_getMiss,"Highscore","getMiss",0x6e42acd4,"Highscore.getMiss","Highscore.hx",177,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_186_load,"Highscore","load",0x978326c4,"Highscore.load","Highscore.hx",186,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_213_getBadge,"Highscore","getBadge",0xb1570a4b,"Highscore.getBadge","Highscore.hx",213,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_223_calculateProgress,"Highscore","calculateProgress",0xcb7a87d5,"Highscore.calculateProgress","Highscore.hx",223,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_10_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",10,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_11_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",11,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_12_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",12,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_13_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",13,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_22_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",22,0x77c0e42e)
HX_LOCAL_STACK_FRAME(_hx_pos_59d01746e3baf250_23_boot,"Highscore","boot",0x90e710d0,"Highscore.boot","Highscore.hx",23,0x77c0e42e)

void Highscore_obj::__construct() { }

Dynamic Highscore_obj::__CreateEmpty() { return new Highscore_obj; }

void *Highscore_obj::_hx_vtable = 0;

Dynamic Highscore_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Highscore_obj > _hx_result = new Highscore_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Highscore_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55f38dd0;
}

 ::haxe::ds::StringMap Highscore_obj::weekScores;

 ::haxe::ds::StringMap Highscore_obj::songScores;

 ::haxe::ds::StringMap Highscore_obj::songRating;

 ::haxe::ds::StringMap Highscore_obj::songMisses;

 ::haxe::ds::StringMap Highscore_obj::songHighscore;

 ::haxe::ds::StringMap Highscore_obj::weekHighscore;

void Highscore_obj::resetSong(::String song,::hx::Null< int >  __o_diff){
            		int diff = __o_diff.Default(0);
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_31_resetSong)
HXLINE(  32)		::String daSong = ::Highscore_obj::formatSong(song,diff);
HXLINE(  33)		if (!(::Highscore_obj::songHighscore->exists(daSong))) {
HXLINE(  35)			::Highscore_obj::createNewSongData(song,diff);
            		}
HXLINE(  38)		::Highscore_obj::setScore(daSong,0,null());
HXLINE(  39)		::Highscore_obj::setRating(daSong,( (Float)(0) ),null());
HXLINE(  40)		::Highscore_obj::setMiss(daSong,0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,resetSong,(void))

void Highscore_obj::resetWeek(::String week,::hx::Null< int >  __o_diff){
            		int diff = __o_diff.Default(0);
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_44_resetWeek)
HXLINE(  45)		::String daWeek = ::Highscore_obj::formatSong(week,diff);
HXLINE(  46)		::Highscore_obj::setWeekScore(daWeek,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,resetWeek,(void))

Float Highscore_obj::floorDecimal(Float value,int decimals){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_50_floorDecimal)
HXLINE(  51)		if ((decimals < 1)) {
HXLINE(  53)			return ( (Float)(::Math_obj::floor(value)) );
            		}
HXLINE(  56)		Float tempMult = ( (Float)(1) );
HXLINE(  57)		{
HXLINE(  57)			int _g = 0;
HXDLIN(  57)			int _g1 = decimals;
HXDLIN(  57)			while((_g < _g1)){
HXLINE(  57)				_g = (_g + 1);
HXDLIN(  57)				int i = (_g - 1);
HXLINE(  59)				tempMult = (tempMult * ( (Float)(10) ));
            			}
            		}
HXLINE(  61)		Float newValue = ( (Float)(::Math_obj::floor((value * tempMult))) );
HXLINE(  62)		return (newValue / tempMult);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,floorDecimal,return )

void Highscore_obj::saveScore(::String song,::hx::Null< int >  __o_diff,::hx::Null< int >  __o_score, ::Dynamic __o_rating, ::Dynamic __o_misses){
            		int diff = __o_diff.Default(0);
            		int score = __o_score.Default(0);
            		 ::Dynamic rating = __o_rating;
            		if (::hx::IsNull(__o_rating)) rating = -1;
            		 ::Dynamic misses = __o_misses;
            		if (::hx::IsNull(__o_misses)) misses = 0;
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_66_saveScore)
HXLINE(  67)		::String daSong = ::Highscore_obj::formatSong(song,diff);
HXLINE(  69)		if (::Highscore_obj::songHighscore->exists(daSong)) {
HXLINE(  71)			 ::haxe::ds::StringMap songData = ( ( ::haxe::ds::StringMap)(::Highscore_obj::songHighscore->get(daSong)) );
HXLINE(  72)			if (::hx::IsLess( songData->get(HX_("score",52,73,d9,78)),score )) {
HXLINE(  73)				::Highscore_obj::setScore(daSong,score,null());
HXLINE(  74)				if (::hx::IsGreaterEq( rating,0 )) {
HXLINE(  74)					::Highscore_obj::setRating(daSong,( (Float)(rating) ),null());
            				}
HXLINE(  75)				::Highscore_obj::setMiss(daSong,( (int)(misses) ),null());
            			}
            		}
            		else {
HXLINE(  78)			::Highscore_obj::createNewSongData(song,diff);
HXLINE(  79)			::Highscore_obj::setScore(daSong,score,null());
HXLINE(  80)			::Highscore_obj::setRating(daSong,( (Float)(rating) ),null());
HXLINE(  81)			::Highscore_obj::setMiss(daSong,( (int)(misses) ),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Highscore_obj,saveScore,(void))

void Highscore_obj::saveWeekScore(::String week,::hx::Null< int >  __o_score, ::Dynamic __o_diff){
            		int score = __o_score.Default(0);
            		 ::Dynamic diff = __o_diff;
            		if (::hx::IsNull(__o_diff)) diff = 0;
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_99_saveWeekScore)
HXLINE( 100)		::String daWeek = ::Highscore_obj::formatSong(week,( (int)(diff) ));
HXLINE( 102)		if (::Highscore_obj::weekHighscore->exists(daWeek)) {
HXLINE( 104)			if (::hx::IsLess( ( ( ::haxe::ds::StringMap)(::Highscore_obj::weekHighscore->get(daWeek)) )->get(HX_("score",52,73,d9,78)),score )) {
HXLINE( 105)				::Highscore_obj::setWeekScore(daWeek,score);
            			}
            		}
            		else {
HXLINE( 108)			{
HXLINE( 108)				::Dynamic this1 = ::Highscore_obj::weekHighscore;
HXDLIN( 108)				 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 108)				_g->set(HX_("score",52,73,d9,78),( (Float)(0) ));
HXDLIN( 108)				( ( ::haxe::ds::StringMap)(this1) )->set(daWeek,_g);
            			}
HXLINE( 109)			::haxe::Log_obj::trace(daWeek,::hx::SourceInfo(HX_("source/Highscore.hx",22,91,de,7c),109,HX_("Highscore",90,18,b0,92),HX_("saveWeekScore",c1,b3,07,00)));
HXLINE( 110)			::Highscore_obj::setWeekScore(daWeek,score);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Highscore_obj,saveWeekScore,(void))

void Highscore_obj::createNewSongData(::String songName,::hx::Null< int >  __o_diff){
            		int diff = __o_diff.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_115_createNewSongData)
HXDLIN( 115)		::Dynamic this1 = ::Highscore_obj::songHighscore;
HXDLIN( 115)		::String key = ::Highscore_obj::formatSong(songName,diff);
HXDLIN( 115)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN( 115)		_g->set(HX_("score",52,73,d9,78),( (Float)(0) ));
HXDLIN( 115)		_g->set(HX_("miss",fc,52,5c,48),( (Float)(0) ));
HXDLIN( 115)		_g->set(HX_("rating",1d,34,8a,bb),( (Float)(0) ));
HXDLIN( 115)		( ( ::haxe::ds::StringMap)(this1) )->set(key,_g);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,createNewSongData,(void))

void Highscore_obj::setScore(::String song,int score,::hx::Null< int >  __o_diff){
            		int diff = __o_diff.Default(1);
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_120_setScore)
HXLINE( 121)		( ( ::haxe::ds::StringMap)(::Highscore_obj::songHighscore->get(song)) )->set(HX_("score",52,73,d9,78),( (Float)(score) ));
HXLINE( 122)		::flixel::FlxG_obj::save->data->__SetField(HX_("songHighscore",1b,52,b1,27),::Highscore_obj::songHighscore,::hx::paccDynamic);
HXLINE( 123)		::flixel::FlxG_obj::save->flush(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Highscore_obj,setScore,(void))

void Highscore_obj::setWeekScore(::String week,int score){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_126_setWeekScore)
HXLINE( 127)		( ( ::haxe::ds::StringMap)(::Highscore_obj::weekHighscore->get(week)) )->set(HX_("score",52,73,d9,78),( (Float)(score) ));
HXLINE( 128)		::flixel::FlxG_obj::save->data->__SetField(HX_("weekHighscore",1c,1a,91,26),::Highscore_obj::weekHighscore,::hx::paccDynamic);
HXLINE( 129)		::flixel::FlxG_obj::save->flush(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,setWeekScore,(void))

void Highscore_obj::setRating(::String song,Float rating,::hx::Null< int >  __o_diff){
            		int diff = __o_diff.Default(1);
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_132_setRating)
HXLINE( 133)		( ( ::haxe::ds::StringMap)(::Highscore_obj::songHighscore->get(song)) )->set(HX_("rating",1d,34,8a,bb),rating);
HXLINE( 134)		::flixel::FlxG_obj::save->data->__SetField(HX_("songHighscore",1b,52,b1,27),::Highscore_obj::songHighscore,::hx::paccDynamic);
HXLINE( 135)		::flixel::FlxG_obj::save->flush(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Highscore_obj,setRating,(void))

void Highscore_obj::setMiss(::String song,int miss,::hx::Null< int >  __o_diff){
            		int diff = __o_diff.Default(1);
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_138_setMiss)
HXLINE( 139)		( ( ::haxe::ds::StringMap)(::Highscore_obj::songHighscore->get(song)) )->set(HX_("miss",fc,52,5c,48),( (Float)(miss) ));
HXLINE( 140)		::flixel::FlxG_obj::save->data->__SetField(HX_("songHighscore",1b,52,b1,27),::Highscore_obj::songHighscore,::hx::paccDynamic);
HXLINE( 141)		::flixel::FlxG_obj::save->flush(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Highscore_obj,setMiss,(void))

::String Highscore_obj::formatSong(::String song,int diff){
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_146_formatSong)
HXDLIN( 146)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 146)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 146)		::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 146)		::String _hx_tmp = hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase();
HXDLIN( 146)		return (_hx_tmp + ::CoolUtil_obj::getDifficultyFilePath(diff));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,formatSong,return )

int Highscore_obj::getScore(::String song,int diff){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_150_getScore)
HXLINE( 151)		::String daSong = ::Highscore_obj::formatSong(song,diff);
HXLINE( 152)		if (!(::Highscore_obj::songHighscore->exists(daSong))) {
HXLINE( 153)			::Highscore_obj::createNewSongData(song,diff);
            		}
HXLINE( 155)		return ::Std_obj::_hx_int(( ( ::haxe::ds::StringMap)(::Highscore_obj::songHighscore->get(daSong)) )->get_float(HX_("score",52,73,d9,78)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,getScore,return )

Float Highscore_obj::getRating(::String song,int diff){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_159_getRating)
HXLINE( 160)		::String daSong = ::Highscore_obj::formatSong(song,diff);
HXLINE( 161)		if (!(::Highscore_obj::songHighscore->exists(daSong))) {
HXLINE( 162)			::Highscore_obj::createNewSongData(song,diff);
            		}
HXLINE( 164)		return ( ( ::haxe::ds::StringMap)(::Highscore_obj::songHighscore->get(daSong)) )->get_float(HX_("rating",1d,34,8a,bb));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,getRating,return )

int Highscore_obj::getWeekScore(::String week,int diff){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_168_getWeekScore)
HXLINE( 169)		::String daWeek = ::Highscore_obj::formatSong(week,diff);
HXLINE( 170)		if (!(::Highscore_obj::weekScores->exists(daWeek))) {
HXLINE( 171)			::Highscore_obj::setWeekScore(daWeek,0);
            		}
HXLINE( 173)		return ::Highscore_obj::weekScores->get_int(daWeek);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,getWeekScore,return )

int Highscore_obj::getMiss(::String song,int diff){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_177_getMiss)
HXLINE( 178)		::String daSong = ::Highscore_obj::formatSong(song,diff);
HXLINE( 179)		if (!(::Highscore_obj::songHighscore->exists(daSong))) {
HXLINE( 180)			::Highscore_obj::createNewSongData(song,diff);
            		}
HXLINE( 182)		return ::Std_obj::_hx_int(( ( ::haxe::ds::StringMap)(::Highscore_obj::songHighscore->get(daSong)) )->get_float(HX_("miss",fc,52,5c,48)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Highscore_obj,getMiss,return )

void Highscore_obj::load(){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_186_load)
HXLINE( 187)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("songHighscore",1b,52,b1,27),::hx::paccDynamic) )) {
HXLINE( 188)			::Highscore_obj::songHighscore = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("songHighscore",1b,52,b1,27),::hx::paccDynamic)) );
            		}
HXLINE( 190)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("weekHighscore",1c,1a,91,26),::hx::paccDynamic) )) {
HXLINE( 191)			::Highscore_obj::weekHighscore = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("weekHighscore",1c,1a,91,26),::hx::paccDynamic)) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Highscore_obj,load,(void))

void Highscore_obj::getBadge(::String name){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_213_getBadge)
HXLINE( 214)		::Array< ::String > badges = ::ClientPrefs_obj::badges;
HXLINE( 215)		badges->push(name);
HXLINE( 216)		::ClientPrefs_obj::badges = badges;
HXLINE( 218)		::flixel::FlxG_obj::save->flush(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Highscore_obj,getBadge,(void))

void Highscore_obj::calculateProgress(){
            	HX_STACKFRAME(&_hx_pos_59d01746e3baf250_223_calculateProgress)
HXLINE( 224)		::Array< ::String > songs = ::Array_obj< ::String >::__new(0);
HXLINE( 225)		{
HXLINE( 225)			int _g = 0;
HXDLIN( 225)			::Array< ::Dynamic> _g1 = ::MainMenuStateAmmar_obj::songsList;
HXDLIN( 225)			while((_g < _g1->length)){
HXLINE( 225)				 ::haxe::ds::StringMap songArray = _g1->__get(_g).StaticCast<  ::haxe::ds::StringMap >();
HXDLIN( 225)				_g = (_g + 1);
HXLINE( 226)				bool _hx_tmp;
HXDLIN( 226)				bool _hx_tmp1;
HXDLIN( 226)				if (::hx::IsNotEq( songArray->get(HX_("song",d5,23,58,4c)),HX_("Furry Appeared",8a,fe,20,ef) )) {
HXLINE( 226)					_hx_tmp1 = ::hx::IsNotEq( songArray->get(HX_("song",d5,23,58,4c)),HX_("Protogen",c8,12,18,da) );
            				}
            				else {
HXLINE( 226)					_hx_tmp1 = false;
            				}
HXDLIN( 226)				if (_hx_tmp1) {
HXLINE( 226)					_hx_tmp = ::hx::IsNotEq( songArray->get(HX_("song",d5,23,58,4c)),HX_("Furry Femboy",54,c3,fa,18) );
            				}
            				else {
HXLINE( 226)					_hx_tmp = false;
            				}
HXDLIN( 226)				if (_hx_tmp) {
HXLINE( 227)					songs->push(songArray->get(HX_("song",d5,23,58,4c)));
            				}
            			}
            		}
HXLINE( 229)		Float progress = ( (Float)(0) );
HXLINE( 230)		int totalSongs = songs->length;
HXLINE( 231)		int songsFinished = 0;
HXLINE( 233)		{
HXLINE( 233)			int _g2 = 0;
HXDLIN( 233)			while((_g2 < songs->length)){
HXLINE( 233)				::String song = songs->__get(_g2);
HXDLIN( 233)				_g2 = (_g2 + 1);
HXLINE( 234)				::Dynamic this1 = ::Highscore_obj::songHighscore;
HXDLIN( 234)				if (( ( ::haxe::ds::StringMap)(this1) )->exists(::Highscore_obj::formatSong(song,1))) {
HXLINE( 235)					::Dynamic this2 = ::Highscore_obj::songHighscore;
HXDLIN( 235)					if (::hx::IsGreaterEq( ( ( ::haxe::ds::StringMap)(( ( ::haxe::ds::StringMap)(this2) )->get(::Highscore_obj::formatSong(song,1))) )->get(HX_("score",52,73,d9,78)),1000 )) {
HXLINE( 236)						songsFinished = (songsFinished + 1);
            					}
            				}
            			}
            		}
HXLINE( 241)		progress = (( (Float)(songsFinished) ) / ( (Float)(totalSongs) ));
HXLINE( 242)		::flixel::FlxG_obj::save->data->__SetField(HX_("progress",ad,f7,2a,86),progress,::hx::paccDynamic);
HXLINE( 243)		::flixel::FlxG_obj::save->flush(null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Highscore_obj,calculateProgress,(void))


Highscore_obj::Highscore_obj()
{
}

bool Highscore_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setMiss") ) { outValue = setMiss_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMiss") ) { outValue = getMiss_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setScore") ) { outValue = setScore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getScore") ) { outValue = getScore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBadge") ) { outValue = getBadge_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"resetSong") ) { outValue = resetSong_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"resetWeek") ) { outValue = resetWeek_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"saveScore") ) { outValue = saveScore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setRating") ) { outValue = setRating_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getRating") ) { outValue = getRating_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"weekScores") ) { outValue = ( weekScores ); return true; }
		if (HX_FIELD_EQ(inName,"songScores") ) { outValue = ( songScores ); return true; }
		if (HX_FIELD_EQ(inName,"songRating") ) { outValue = ( songRating ); return true; }
		if (HX_FIELD_EQ(inName,"songMisses") ) { outValue = ( songMisses ); return true; }
		if (HX_FIELD_EQ(inName,"formatSong") ) { outValue = formatSong_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"floorDecimal") ) { outValue = floorDecimal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setWeekScore") ) { outValue = setWeekScore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getWeekScore") ) { outValue = getWeekScore_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"songHighscore") ) { outValue = ( songHighscore ); return true; }
		if (HX_FIELD_EQ(inName,"weekHighscore") ) { outValue = ( weekHighscore ); return true; }
		if (HX_FIELD_EQ(inName,"saveWeekScore") ) { outValue = saveWeekScore_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createNewSongData") ) { outValue = createNewSongData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"calculateProgress") ) { outValue = calculateProgress_dyn(); return true; }
	}
	return false;
}

bool Highscore_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"weekScores") ) { weekScores=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"songScores") ) { songScores=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"songRating") ) { songRating=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"songMisses") ) { songMisses=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"songHighscore") ) { songHighscore=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"weekHighscore") ) { weekHighscore=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Highscore_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Highscore_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::weekScores,HX_("weekScores",f5,b7,3b,08)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::songScores,HX_("songScores",96,1a,f0,a0)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::songRating,HX_("songRating",d2,d9,0e,17)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::songMisses,HX_("songMisses",1f,08,d9,b1)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::songHighscore,HX_("songHighscore",1b,52,b1,27)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Highscore_obj::weekHighscore,HX_("weekHighscore",1c,1a,91,26)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Highscore_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Highscore_obj::weekScores,"weekScores");
	HX_MARK_MEMBER_NAME(Highscore_obj::songScores,"songScores");
	HX_MARK_MEMBER_NAME(Highscore_obj::songRating,"songRating");
	HX_MARK_MEMBER_NAME(Highscore_obj::songMisses,"songMisses");
	HX_MARK_MEMBER_NAME(Highscore_obj::songHighscore,"songHighscore");
	HX_MARK_MEMBER_NAME(Highscore_obj::weekHighscore,"weekHighscore");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Highscore_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Highscore_obj::weekScores,"weekScores");
	HX_VISIT_MEMBER_NAME(Highscore_obj::songScores,"songScores");
	HX_VISIT_MEMBER_NAME(Highscore_obj::songRating,"songRating");
	HX_VISIT_MEMBER_NAME(Highscore_obj::songMisses,"songMisses");
	HX_VISIT_MEMBER_NAME(Highscore_obj::songHighscore,"songHighscore");
	HX_VISIT_MEMBER_NAME(Highscore_obj::weekHighscore,"weekHighscore");
};

#endif

::hx::Class Highscore_obj::__mClass;

static ::String Highscore_obj_sStaticFields[] = {
	HX_("weekScores",f5,b7,3b,08),
	HX_("songScores",96,1a,f0,a0),
	HX_("songRating",d2,d9,0e,17),
	HX_("songMisses",1f,08,d9,b1),
	HX_("songHighscore",1b,52,b1,27),
	HX_("weekHighscore",1c,1a,91,26),
	HX_("resetSong",44,2d,44,92),
	HX_("resetWeek",63,69,e1,94),
	HX_("floorDecimal",25,1c,ad,93),
	HX_("saveScore",d5,7a,86,07),
	HX_("saveWeekScore",c1,b3,07,00),
	HX_("createNewSongData",83,7b,b9,a7),
	HX_("setScore",50,dc,0d,87),
	HX_("setWeekScore",bc,ee,9c,ff),
	HX_("setRating",5f,a9,31,1b),
	HX_("setMiss",be,93,e0,0d),
	HX_("formatSong",ac,46,bd,0b),
	HX_("getScore",dc,82,b0,d8),
	HX_("getRating",53,bd,e0,37),
	HX_("getWeekScore",48,cb,a3,ea),
	HX_("getMiss",b2,02,df,1a),
	HX_("load",26,9a,b7,47),
	HX_("getBadge",ad,d6,85,0d),
	HX_("calculateProgress",33,1f,94,6d),
	::String(null())
};

void Highscore_obj::__register()
{
	Highscore_obj _hx_dummy;
	Highscore_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Highscore",90,18,b0,92);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Highscore_obj::__GetStatic;
	__mClass->mSetStaticField = &Highscore_obj::__SetStatic;
	__mClass->mMarkFunc = Highscore_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Highscore_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Highscore_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Highscore_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Highscore_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Highscore_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Highscore_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_10_boot)
HXDLIN(  10)		weekScores =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_11_boot)
HXDLIN(  11)		songScores =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_12_boot)
HXDLIN(  12)		songRating =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_13_boot)
HXDLIN(  13)		songMisses =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_22_boot)
HXDLIN(  22)		songHighscore =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_59d01746e3baf250_23_boot)
HXDLIN(  23)		weekHighscore =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

