// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_shaders_Glitching
#include <shaders/Glitching.h>
#endif
#ifndef INCLUDED_shaders_GlitchingShader
#include <shaders/GlitchingShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2f5db4c647feb99a_6_new,"shaders.Glitching","new",0xa039ec9f,"shaders.Glitching.new","shaders/Glitching.hx",6,0x02bd4932)
static const Float _hx_array_data_d349b12d_1[] = {
	(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_2f5db4c647feb99a_9_update,"shaders.Glitching","update",0x067d5b2a,"shaders.Glitching.update","shaders/Glitching.hx",9,0x02bd4932)
namespace shaders{

void Glitching_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_2f5db4c647feb99a_6_new)
HXLINE(   7)		this->shader =  ::shaders::GlitchingShader_obj::__alloc( HX_CTX );
HXLINE(  15)		this->shader->iTime->value = ::Array_obj< Float >::fromData( _hx_array_data_d349b12d_1,1);
            	}

Dynamic Glitching_obj::__CreateEmpty() { return new Glitching_obj; }

void *Glitching_obj::_hx_vtable = 0;

Dynamic Glitching_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Glitching_obj > _hx_result = new Glitching_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Glitching_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x62388363;
}

void Glitching_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_2f5db4c647feb99a_9_update)
HXLINE(  10)		::Array< Float > base = this->shader->iTime->value;
HXDLIN(  10)		int _hx_tmp = 0;
HXDLIN(  10)		base[_hx_tmp] = (base->__get(_hx_tmp) + elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Glitching_obj,update,(void))


::hx::ObjectPtr< Glitching_obj > Glitching_obj::__new() {
	::hx::ObjectPtr< Glitching_obj > __this = new Glitching_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Glitching_obj > Glitching_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Glitching_obj *__this = (Glitching_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Glitching_obj), true, "shaders.Glitching"));
	*(void **)__this = Glitching_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Glitching_obj::Glitching_obj()
{
}

void Glitching_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Glitching);
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_END_CLASS();
}

void Glitching_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shader,"shader");
}

::hx::Val Glitching_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return ::hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Glitching_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::shaders::GlitchingShader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Glitching_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shader",25,bf,20,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Glitching_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::shaders::GlitchingShader */ ,(int)offsetof(Glitching_obj,shader),HX_("shader",25,bf,20,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Glitching_obj_sStaticStorageInfo = 0;
#endif

static ::String Glitching_obj_sMemberFields[] = {
	HX_("shader",25,bf,20,1d),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Glitching_obj::__mClass;

void Glitching_obj::__register()
{
	Glitching_obj _hx_dummy;
	Glitching_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shaders.Glitching",2d,b1,49,d3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Glitching_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Glitching_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Glitching_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Glitching_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shaders
