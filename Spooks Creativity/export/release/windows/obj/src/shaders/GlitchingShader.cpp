// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_shaders_GlitchingShader
#include <shaders/GlitchingShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5bacd6f02842119d_104_new,"shaders.GlitchingShader","new",0xb0f62624,"shaders.GlitchingShader.new","shaders/Glitching.hx",104,0x02bd4932)
namespace shaders{

void GlitchingShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5bacd6f02842119d_104_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\n    varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n    // Automatically converted with https://github.com/TheLeerName/ShadertoyToFlixel\n\n#define iResolution openfl_TextureSize\nuniform float iTime;\n#define iChannel0 bitmap\nuniform sampler2D iChannel1;\nuniform sampler2D iChannel2;\nuniform sampler2D iChannel3;\n\nfloat rand(vec2 p)\n{\n    float t = floor(iTime * 20.) / 10.;\n    return fract(sin(dot(p, vec2(t * 12.9898, t * 78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 uv, float blockiness)\n{   \n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    float n1 = rand(id);\n    float n2 = rand(id+vec2(1,0));\n    float n3 = rand(id+vec2(0,1));\n    float n4 = rand(id+vec2(1,1));\n    \n    vec2 u = smoothstep(0.0, 1.0 + blockiness, lv);\n\n    return mix(mix(n1, n2, u.x), mix(n3, n4, u.x), u.y);\n}\n\nfloat fbm(vec2 uv, int count, float blockiness, float complexity)\n{\n    float val = 0.0;\n    float amp = 0.5;\n    \n    while(count != 0)\n    {\n    \tval += amp * noise(uv, blockiness);\n        amp *= 0.5;\n        uv *= complexity;    \n        count--;\n    }\n    \n    return val;\n}\n\nconst float glitchAmplitude = 0.2; // increase this\nconst float glitchNarrowness = 4.0;\nconst float glitchBlockiness = 2.0;\nconst float glitchMinimizer = 5.0; // decrease this\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 a = vec2(uv.x * (iResolution.x / iResolution.y), uv.y);\n    vec2 uv2 = vec2(a.x / iResolution.x, exp(a.y));\n\tvec2 id = floor(uv * 8.0);\n    //id.x /= floor(flixel_texture2D(iChannel0, vec2(id / 8.0)).r * 8.0);\n\n    // Generate shift amplitude\n    float shift = glitchAmplitude * pow(fbm(uv2, int(rand(id) * 6.), glitchBlockiness, glitchNarrowness), glitchMinimizer);\n    \n    // Create a scanline effect\n    float scanline = abs(cos(uv.y * 400.));\n    scanline = smoothstep(0.0, 2.0, scanline);\n    shift = smoothstep(0.00001, 0.2, shift);\n    \n    // Apply glitch and RGB shift\n    float colR = flixel_texture2D(iChannel0, vec2(uv.x + shift, uv.y)).r * (1. - shift) ;\n    float colG = flixel_texture2D(iChannel0, vec2(uv.x - shift, uv.y)).g * (1. - shift) + rand(id) * shift;\n    float colB = flixel_texture2D(iChannel0, vec2(uv.x - shift, uv.y)).b * (1. - shift);\n    float colA = flixel_texture2D(iChannel0, vec2(uv.x - shift, uv.y)).a * (1. - shift);\n    // Mix with the scanline effect\n    fragColor = vec4(colR, colG, colB, colA) - (0.1 * scanline);\n}\n\nvoid main() {\n\tmainImage(gl_FragColor, openfl_TextureCoordv*openfl_TextureSize);\n}",b8,f5,be,57);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}",f3,1e,fa,79);
            		}
HXLINE( 105)		super::__construct();
HXLINE(  18)		this->_hx___isGenerated = true;
HXDLIN(  18)		this->_hx___initGL();
            	}

Dynamic GlitchingShader_obj::__CreateEmpty() { return new GlitchingShader_obj; }

void *GlitchingShader_obj::_hx_vtable = 0;

Dynamic GlitchingShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GlitchingShader_obj > _hx_result = new GlitchingShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GlitchingShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1472bdb0) {
		if (inClassId<=(int)0x04f93fcd) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x04f93fcd;
		} else {
			return inClassId==(int)0x1472bdb0;
		}
	} else {
		return inClassId==(int)0x1efca5b6 || inClassId==(int)0x78d8d737;
	}
}


::hx::ObjectPtr< GlitchingShader_obj > GlitchingShader_obj::__new() {
	::hx::ObjectPtr< GlitchingShader_obj > __this = new GlitchingShader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< GlitchingShader_obj > GlitchingShader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	GlitchingShader_obj *__this = (GlitchingShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GlitchingShader_obj), true, "shaders.GlitchingShader"));
	*(void **)__this = GlitchingShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GlitchingShader_obj::GlitchingShader_obj()
{
}

void GlitchingShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GlitchingShader);
	HX_MARK_MEMBER_NAME(iTime,"iTime");
	HX_MARK_MEMBER_NAME(iChannel1,"iChannel1");
	HX_MARK_MEMBER_NAME(iChannel2,"iChannel2");
	HX_MARK_MEMBER_NAME(iChannel3,"iChannel3");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GlitchingShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(iTime,"iTime");
	HX_VISIT_MEMBER_NAME(iChannel1,"iChannel1");
	HX_VISIT_MEMBER_NAME(iChannel2,"iChannel2");
	HX_VISIT_MEMBER_NAME(iChannel3,"iChannel3");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GlitchingShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"iTime") ) { return ::hx::Val( iTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iChannel1") ) { return ::hx::Val( iChannel1 ); }
		if (HX_FIELD_EQ(inName,"iChannel2") ) { return ::hx::Val( iChannel2 ); }
		if (HX_FIELD_EQ(inName,"iChannel3") ) { return ::hx::Val( iChannel3 ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GlitchingShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"iTime") ) { iTime=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iChannel1") ) { iChannel1=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iChannel2") ) { iChannel2=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iChannel3") ) { iChannel3=inValue.Cast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GlitchingShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("iTime",16,e1,e8,ac));
	outFields->push(HX_("iChannel1",97,77,a4,c9));
	outFields->push(HX_("iChannel2",98,77,a4,c9));
	outFields->push(HX_("iChannel3",99,77,a4,c9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GlitchingShader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(GlitchingShader_obj,iTime),HX_("iTime",16,e1,e8,ac)},
	{::hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(GlitchingShader_obj,iChannel1),HX_("iChannel1",97,77,a4,c9)},
	{::hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(GlitchingShader_obj,iChannel2),HX_("iChannel2",98,77,a4,c9)},
	{::hx::fsObject /*  ::openfl::display::ShaderInput_openfl_display_BitmapData */ ,(int)offsetof(GlitchingShader_obj,iChannel3),HX_("iChannel3",99,77,a4,c9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GlitchingShader_obj_sStaticStorageInfo = 0;
#endif

static ::String GlitchingShader_obj_sMemberFields[] = {
	HX_("iTime",16,e1,e8,ac),
	HX_("iChannel1",97,77,a4,c9),
	HX_("iChannel2",98,77,a4,c9),
	HX_("iChannel3",99,77,a4,c9),
	::String(null()) };

::hx::Class GlitchingShader_obj::__mClass;

void GlitchingShader_obj::__register()
{
	GlitchingShader_obj _hx_dummy;
	GlitchingShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shaders.GlitchingShader",32,84,1f,e8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GlitchingShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GlitchingShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GlitchingShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GlitchingShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shaders
