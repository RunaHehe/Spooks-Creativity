// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_MenuSprite
#include <MenuSprite.h>
#endif
#ifndef INCLUDED_MenuText
#include <MenuText.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6da75727032b0de2_2144_new,"MenuSprite","new",0x091d1e16,"MenuSprite.new","MainMenuStateAmmar.hx",2144,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_6da75727032b0de2_2162_update,"MenuSprite","update",0xbf972e13,"MenuSprite.update","MainMenuStateAmmar.hx",2162,0x38c8c245)

void MenuSprite_obj::__construct(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic){
            		Float X = __o_X.Default(0);
            		Float Y = __o_Y.Default(0);
            	HX_STACKFRAME(&_hx_pos_6da75727032b0de2_2144_new)
HXLINE(2154)		this->noMove = false;
HXLINE(2153)		this->partOf = HX_("",00,00,00,00);
HXLINE(2151)		this->addY = ((Float)0);
HXLINE(2150)		this->addX = ((Float)0);
HXLINE(2149)		this->followPartner = false;
HXLINE(2146)		this->objectID = 0;
HXLINE(2157)		super::__construct(X,Y,SimpleGraphic);
HXLINE(2158)		this->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
            	}

Dynamic MenuSprite_obj::__CreateEmpty() { return new MenuSprite_obj; }

void *MenuSprite_obj::_hx_vtable = 0;

Dynamic MenuSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuSprite_obj > _hx_result = new MenuSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool MenuSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x32f04aac) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x32f04aac;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void MenuSprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_6da75727032b0de2_2162_update)
HXLINE(2163)		this->super::update(elapsed);
HXLINE(2164)		bool _hx_tmp;
HXDLIN(2164)		if (::hx::IsNotNull( this->partner )) {
HXLINE(2164)			_hx_tmp = this->followPartner;
            		}
            		else {
HXLINE(2164)			_hx_tmp = false;
            		}
HXDLIN(2164)		if (_hx_tmp) {
HXLINE(2165)			this->set_x((this->partner->x + this->addX));
HXLINE(2166)			this->set_y((this->partner->y + this->addY));
            		}
            	}



::hx::ObjectPtr< MenuSprite_obj > MenuSprite_obj::__new(::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic) {
	::hx::ObjectPtr< MenuSprite_obj > __this = new MenuSprite_obj();
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

::hx::ObjectPtr< MenuSprite_obj > MenuSprite_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_X,::hx::Null< Float >  __o_Y, ::Dynamic SimpleGraphic) {
	MenuSprite_obj *__this = (MenuSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuSprite_obj), true, "MenuSprite"));
	*(void **)__this = MenuSprite_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,SimpleGraphic);
	return __this;
}

MenuSprite_obj::MenuSprite_obj()
{
}

void MenuSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuSprite);
	HX_MARK_MEMBER_NAME(objectID,"objectID");
	HX_MARK_MEMBER_NAME(partner,"partner");
	HX_MARK_MEMBER_NAME(followPartner,"followPartner");
	HX_MARK_MEMBER_NAME(addX,"addX");
	HX_MARK_MEMBER_NAME(addY,"addY");
	HX_MARK_MEMBER_NAME(partOf,"partOf");
	HX_MARK_MEMBER_NAME(noMove,"noMove");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(objectID,"objectID");
	HX_VISIT_MEMBER_NAME(partner,"partner");
	HX_VISIT_MEMBER_NAME(followPartner,"followPartner");
	HX_VISIT_MEMBER_NAME(addX,"addX");
	HX_VISIT_MEMBER_NAME(addY,"addY");
	HX_VISIT_MEMBER_NAME(partOf,"partOf");
	HX_VISIT_MEMBER_NAME(noMove,"noMove");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"addX") ) { return ::hx::Val( addX ); }
		if (HX_FIELD_EQ(inName,"addY") ) { return ::hx::Val( addY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"partOf") ) { return ::hx::Val( partOf ); }
		if (HX_FIELD_EQ(inName,"noMove") ) { return ::hx::Val( noMove ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"partner") ) { return ::hx::Val( partner ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"objectID") ) { return ::hx::Val( objectID ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"followPartner") ) { return ::hx::Val( followPartner ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MenuSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"addX") ) { addX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"addY") ) { addY=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"partOf") ) { partOf=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noMove") ) { noMove=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"partner") ) { partner=inValue.Cast<  ::MenuText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"objectID") ) { objectID=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"followPartner") ) { followPartner=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("objectID",5a,2c,2c,83));
	outFields->push(HX_("partner",48,a6,b0,ea));
	outFields->push(HX_("followPartner",d7,bc,13,8f));
	outFields->push(HX_("addX",17,eb,69,40));
	outFields->push(HX_("addY",18,eb,69,40));
	outFields->push(HX_("partOf",ea,4b,89,ed));
	outFields->push(HX_("noMove",f2,23,f6,17));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MenuSprite_obj,objectID),HX_("objectID",5a,2c,2c,83)},
	{::hx::fsObject /*  ::MenuText */ ,(int)offsetof(MenuSprite_obj,partner),HX_("partner",48,a6,b0,ea)},
	{::hx::fsBool,(int)offsetof(MenuSprite_obj,followPartner),HX_("followPartner",d7,bc,13,8f)},
	{::hx::fsFloat,(int)offsetof(MenuSprite_obj,addX),HX_("addX",17,eb,69,40)},
	{::hx::fsFloat,(int)offsetof(MenuSprite_obj,addY),HX_("addY",18,eb,69,40)},
	{::hx::fsString,(int)offsetof(MenuSprite_obj,partOf),HX_("partOf",ea,4b,89,ed)},
	{::hx::fsBool,(int)offsetof(MenuSprite_obj,noMove),HX_("noMove",f2,23,f6,17)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MenuSprite_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuSprite_obj_sMemberFields[] = {
	HX_("objectID",5a,2c,2c,83),
	HX_("partner",48,a6,b0,ea),
	HX_("followPartner",d7,bc,13,8f),
	HX_("addX",17,eb,69,40),
	HX_("addY",18,eb,69,40),
	HX_("partOf",ea,4b,89,ed),
	HX_("noMove",f2,23,f6,17),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class MenuSprite_obj::__mClass;

void MenuSprite_obj::__register()
{
	MenuSprite_obj _hx_dummy;
	MenuSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuSprite",24,1b,cb,9c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuSprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

