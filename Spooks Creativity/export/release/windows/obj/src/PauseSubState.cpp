// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MainMenuStateAmmar
#include <MainMenuStateAmmar.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_WeekData
#include <WeekData.h>
#endif
#ifndef INCLUDED_antidebug_DebugSave
#include <antidebug/DebugSave.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_17d383cbce329512_24_new,"PauseSubState","new",0x00d575d9,"PauseSubState.new","PauseSubState.hx",24,0x953dc7b7)
static const ::String _hx_array_data_08e59567_2[] = {
	HX_("Resume",cd,dd,18,3d),HX_("Restart Song",06,b6,fe,13),HX_("Practice Mode",e8,58,72,66),HX_("Exit to menu",82,87,9a,a9),
};
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_217_update,"PauseSubState","update",0x6d53d230,"PauseSubState.update","PauseSubState.hx",217,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_366_deleteSkipTimeText,"PauseSubState","deleteSkipTimeText",0x6a6ec46b,"PauseSubState.deleteSkipTimeText","PauseSubState.hx",366,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_398_destroy,"PauseSubState","destroy",0xc2ba82f3,"PauseSubState.destroy","PauseSubState.hx",398,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_405_changeSelection,"PauseSubState","changeSelection",0x8f960fb5,"PauseSubState.changeSelection","PauseSubState.hx",405,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_440_regenMenu,"PauseSubState","regenMenu",0xfb4cc935,"PauseSubState.regenMenu","PauseSubState.hx",440,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_475_regenMenu,"PauseSubState","regenMenu",0xfb4cc935,"PauseSubState.regenMenu","PauseSubState.hx",475,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_481_updateSkipTextStuff,"PauseSubState","updateSkipTextStuff",0xfcc58838,"PauseSubState.updateSkipTextStuff","PauseSubState.hx",481,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_491_updateSkipTimeText,"PauseSubState","updateSkipTimeText",0xb61bdf49,"PauseSubState.updateSkipTimeText","PauseSubState.hx",491,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_378_restartSong,"PauseSubState","restartSong",0x7c01f1bd,"PauseSubState.restartSong","PauseSubState.hx",378,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_389_restartSong,"PauseSubState","restartSong",0x7c01f1bd,"PauseSubState.restartSong","PauseSubState.hx",389,0x953dc7b7)
HX_LOCAL_STACK_FRAME(_hx_pos_17d383cbce329512_75_boot,"PauseSubState","boot",0xb20aa899,"PauseSubState.boot","PauseSubState.hx",75,0x953dc7b7)

void PauseSubState_obj::__construct(Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_17d383cbce329512_24_new)
HXLINE( 439)		this->spawn = false;
HXLINE( 215)		this->totalElapsed = ((Float)0);
HXLINE( 214)		this->cantUnpause = ((Float)0.1);
HXLINE( 213)		this->holdTime = ((Float)0);
HXLINE(  41)		 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  41)		_g->set(HX_("discord-annoyer",97,ac,58,20),HX_("COVER SONG of Nusky",f3,fd,45,fa));
HXDLIN(  41)		_g->set(HX_("shut-up",14,0a,f3,ed),HX_("CUSTOM SONG by An Ammar",ac,c5,3a,4f));
HXDLIN(  41)		_g->set(HX_("depression",a6,ce,69,c6),HX_("COVER SONG of Unknown Suffering",36,a1,cb,96));
HXDLIN(  41)		_g->set(HX_("moderator",05,40,3b,22),HX_("CUSTOM SONG by An Ammar",ac,c5,3a,4f));
HXDLIN(  41)		_g->set(HX_("hate-comment",7c,74,56,74),HX_("COVER SONG of Expurgation",61,50,fa,59));
HXDLIN(  41)		_g->set(HX_("twitter-argument",d7,36,da,54),HX_("COVER SONG of Revolution",f0,0d,d9,ba));
HXDLIN(  41)		_g->set(HX_("google",b9,c3,e9,61),HX_("CUSTOM SONG by An Ammar",ac,c5,3a,4f));
HXDLIN(  41)		_g->set(HX_("big-problem",92,37,56,11),HX_("CUSTOM SONG by An Ammar",ac,c5,3a,4f));
HXDLIN(  41)		_g->set(HX_("chaos",40,9a,b3,45),HX_("",00,00,00,00));
HXDLIN(  41)		_g->set(HX_("owen-was-her",75,a2,99,6a),HX_("",00,00,00,00));
HXDLIN(  41)		_g->set(HX_("death-by-notes",84,49,76,3c),HX_("",00,00,00,00));
HXDLIN(  41)		_g->set(HX_("no-debug",07,16,aa,70),HX_("COVER SONG of Defeat",da,ea,60,c4));
HXDLIN(  41)		_g->set(HX_("myself",f8,10,b3,8c),HX_("COVER SONG of Boykisser",30,80,da,20));
HXDLIN(  41)		_g->set(HX_("furry-appeared",57,03,5c,21),HX_("CUSTOM SONG by An Ammar",ac,c5,3a,4f));
HXDLIN(  41)		_g->set(HX_("protogen",a8,56,66,00),HX_("COVER SONG of Devil Robot",db,a0,b2,d3));
HXDLIN(  41)		_g->set(HX_("banned",de,e9,e0,51),HX_("COVER SONG of Banned",c5,6c,60,af));
HXDLIN(  41)		_g->set(HX_("voice-faceoff",17,16,cb,c5),HX_("COVER SONG of Hecker",79,49,d7,5b));
HXDLIN(  41)		_g->set(HX_("furry-femboy",e1,0a,eb,38),HX_("COVER SONG of This is how you look saying that",1b,6b,50,63));
HXDLIN(  41)		_g->set(HX_("programming-an-ammar",86,b1,f3,e6),HX_("COVER SONG of PaperCraft",db,cb,3b,92));
HXDLIN(  41)		_g->set(HX_("identity-crisis",f2,be,b2,9b),HX_("COVER SONG of Hatred",bd,e7,7e,19));
HXDLIN(  41)		_g->set(HX_("note-nova",27,0f,72,dc),HX_("CUSTOM SONG by Ammar, Spook",55,f3,e8,23));
HXDLIN(  41)		this->songsCredit = _g;
HXLINE(  39)		this->curTime = ::Math_obj::max(( (Float)(0) ),::Conductor_obj::songPosition);
HXLINE(  31)		this->curSelected = 0;
HXLINE(  30)		this->difficultyChoices = ::Array_obj< ::String >::__new(0);
HXLINE(  29)		this->menuItemsOG = ::Array_obj< ::String >::fromData( _hx_array_data_08e59567_2,4);
HXLINE(  28)		this->menuItems = ::Array_obj< ::String >::__new(0);
HXLINE(  79)		super::__construct();
HXLINE(  80)		if ((::CoolUtil_obj::difficulties->length < 2)) {
HXLINE(  80)			this->menuItemsOG->remove(HX_("Change Difficulty",eb,7e,37,a6));
            		}
HXLINE(  82)		if (::PlayState_obj::chartingMode) {
HXLINE(  84)			this->menuItemsOG->insert(2,HX_("Leave Charting Mode",36,c5,86,71));
HXLINE(  86)			int num = 0;
HXLINE(  87)			if (!(::PlayState_obj::instance->startingSong)) {
HXLINE(  89)				num = 1;
HXLINE(  90)				this->menuItemsOG->insert(3,HX_("Skip Time",4e,65,49,c7));
            			}
HXLINE(  92)			this->menuItemsOG->insert((3 + num),HX_("End Song",7a,be,85,e8));
HXLINE(  94)			this->menuItemsOG->insert((5 + num),HX_("Toggle Botplay",ef,6e,ca,1a));
            		}
HXLINE(  96)		this->menuItems = this->menuItemsOG;
HXLINE(  98)		{
HXLINE(  98)			int _g1 = 0;
HXDLIN(  98)			int _g11 = ::CoolUtil_obj::difficulties->length;
HXDLIN(  98)			while((_g1 < _g11)){
HXLINE(  98)				_g1 = (_g1 + 1);
HXDLIN(  98)				int i = (_g1 - 1);
HXLINE(  99)				::String diff = (HX_("",00,00,00,00) + ::CoolUtil_obj::difficulties->__get(i));
HXLINE( 100)				this->difficultyChoices->push(diff);
            			}
            		}
HXLINE( 102)		this->difficultyChoices->push(HX_("BACK",27,a2,d1,2b));
HXLINE( 105)		this->pauseMusic =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX );
HXLINE( 106)		if (::hx::IsNotNull( ::PauseSubState_obj::songName )) {
HXLINE( 107)			 ::flixel::sound::FlxSound _hx_tmp = this->pauseMusic;
HXDLIN( 107)			::String library = null();
HXDLIN( 107)			 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),::PauseSubState_obj::songName,library);
HXDLIN( 107)			_hx_tmp->loadEmbedded(file,true,true,null());
            		}
            		else {
HXLINE( 108)			if ((::PauseSubState_obj::songName != HX_("None",d8,3e,e3,33))) {
HXLINE( 109)				 ::flixel::sound::FlxSound _hx_tmp1 = this->pauseMusic;
HXDLIN( 109)				::String path = ::ClientPrefs_obj::pauseMusic;
HXDLIN( 109)				 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 109)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 109)				::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 109)				::String library1 = null();
HXDLIN( 109)				 ::openfl::media::Sound file1 = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase(),library1);
HXDLIN( 109)				_hx_tmp1->loadEmbedded(file1,true,true,null());
            			}
            		}
HXLINE( 111)		this->pauseMusic->set_volume(( (Float)(0) ));
HXLINE( 112)		 ::flixel::sound::FlxSound _hx_tmp2 = this->pauseMusic;
HXDLIN( 112)		 ::flixel::math::FlxRandom _hx_tmp3 = ::flixel::FlxG_obj::random;
HXDLIN( 112)		_hx_tmp2->play(false,_hx_tmp3->_hx_int(0,::Std_obj::_hx_int((this->pauseMusic->_length / ( (Float)(2) ))),null()),null());
HXLINE( 114)		::flixel::FlxG_obj::sound->list->add(this->pauseMusic).StaticCast<  ::flixel::sound::FlxSound >();
HXLINE( 116)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 117)		bg->set_alpha(( (Float)(0) ));
HXLINE( 118)		{
HXLINE( 118)			 ::flixel::math::FlxBasePoint this1 = bg->scrollFactor;
HXDLIN( 118)			this1->set_x(( (Float)(0) ));
HXDLIN( 118)			this1->set_y(( (Float)(0) ));
            		}
HXLINE( 119)		this->add(bg);
HXLINE( 121)		::String library2 = null();
HXDLIN( 121)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("ammar/Checker",f8,e1,95,77),library2);
HXDLIN( 121)		this->checker =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,returnAsset,1,null(),null());
HXLINE( 122)		this->checker->velocity->set_x(( (Float)(-300) ));
HXLINE( 123)		{
HXLINE( 123)			 ::flixel::addons::display::FlxBackdrop _this = this->checker;
HXDLIN( 123)			int axes = 17;
HXDLIN( 123)			bool _hx_tmp4;
HXDLIN( 123)			if ((axes != 1)) {
HXLINE( 123)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE( 123)				_hx_tmp4 = true;
            			}
HXDLIN( 123)			if (_hx_tmp4) {
HXLINE( 123)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN( 123)				_this->set_x(((( (Float)(_hx_tmp5) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 123)			bool _hx_tmp6;
HXDLIN( 123)			if ((axes != 16)) {
HXLINE( 123)				_hx_tmp6 = (axes == 17);
            			}
            			else {
HXLINE( 123)				_hx_tmp6 = true;
            			}
HXDLIN( 123)			if (_hx_tmp6) {
HXLINE( 123)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN( 123)				_this->set_y(((( (Float)(_hx_tmp7) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 124)		this->checker->set_alpha(( (Float)(0) ));
HXLINE( 125)		{
HXLINE( 125)			 ::flixel::math::FlxBasePoint this2 = this->checker->scrollFactor;
HXDLIN( 125)			this2->set_x(( (Float)(0) ));
HXDLIN( 125)			this2->set_y(( (Float)(0) ));
            		}
HXLINE( 126)		this->add(this->checker);
HXLINE( 129)		::String fonter = HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99);
HXLINE( 132)		 ::flixel::text::FlxText levelInfo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,15,0,HX_("",00,00,00,00),32,null());
HXLINE( 133)		levelInfo->set_text(( (::String)((levelInfo->text + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic))) ));
HXLINE( 134)		{
HXLINE( 134)			 ::flixel::math::FlxBasePoint this3 = levelInfo->scrollFactor;
HXDLIN( 134)			this3->set_x(( (Float)(0) ));
HXDLIN( 134)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 135)		::String file2 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + fonter));
HXDLIN( 135)		::String _hx_tmp8;
HXDLIN( 135)		if (::sys::FileSystem_obj::exists(file2)) {
HXLINE( 135)			_hx_tmp8 = file2;
            		}
            		else {
HXLINE( 135)			_hx_tmp8 = (HX_("assets/fonts/",37,ff,a5,9c) + fonter);
            		}
HXDLIN( 135)		levelInfo->setFormat(_hx_tmp8,32,null(),null(),null(),null(),null());
HXLINE( 136)		levelInfo->updateHitbox();
HXLINE( 137)		this->add(levelInfo);
HXLINE( 139)		 ::flixel::text::FlxText levelDifficulty =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,47,0,HX_("",00,00,00,00),32,null());
HXLINE( 140)		levelDifficulty->set_text(((HX_("[",5b,00,00,00) + ::CoolUtil_obj::difficultyString()) + HX_("]",5d,00,00,00)));
HXLINE( 141)		{
HXLINE( 141)			 ::flixel::math::FlxBasePoint this4 = levelDifficulty->scrollFactor;
HXDLIN( 141)			this4->set_x(( (Float)(0) ));
HXDLIN( 141)			this4->set_y(( (Float)(0) ));
            		}
HXLINE( 142)		::String file3 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + fonter));
HXDLIN( 142)		::String _hx_tmp9;
HXDLIN( 142)		if (::sys::FileSystem_obj::exists(file3)) {
HXLINE( 142)			_hx_tmp9 = file3;
            		}
            		else {
HXLINE( 142)			_hx_tmp9 = (HX_("assets/fonts/",37,ff,a5,9c) + fonter);
            		}
HXDLIN( 142)		levelDifficulty->setFormat(_hx_tmp9,32,null(),null(),null(),null(),null());
HXLINE( 143)		levelDifficulty->updateHitbox();
HXLINE( 144)		this->add(levelDifficulty);
HXLINE( 146)		 ::flixel::text::FlxText blueballedTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,79,0,HX_("",00,00,00,00),32,null());
HXLINE( 147)		blueballedTxt->set_text((HX_("Game Over: ",68,f3,d9,f8) + ::PlayState_obj::deathCounter));
HXLINE( 148)		{
HXLINE( 148)			 ::flixel::math::FlxBasePoint this5 = blueballedTxt->scrollFactor;
HXDLIN( 148)			this5->set_x(( (Float)(0) ));
HXDLIN( 148)			this5->set_y(( (Float)(0) ));
            		}
HXLINE( 149)		::String file4 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + fonter));
HXDLIN( 149)		::String _hx_tmp10;
HXDLIN( 149)		if (::sys::FileSystem_obj::exists(file4)) {
HXLINE( 149)			_hx_tmp10 = file4;
            		}
            		else {
HXLINE( 149)			_hx_tmp10 = (HX_("assets/fonts/",37,ff,a5,9c) + fonter);
            		}
HXDLIN( 149)		blueballedTxt->setFormat(_hx_tmp10,32,null(),null(),null(),null(),null());
HXLINE( 150)		blueballedTxt->updateHitbox();
HXLINE( 151)		this->add(blueballedTxt);
HXLINE( 153)		 ::flixel::text::FlxText levelCredit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,15,0,HX_("",00,00,00,00),32,null());
HXLINE( 154)		::Dynamic this6 = this->songsCredit;
HXDLIN( 154)		::String path2 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 154)		 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 154)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 154)		::String path3 = invalidChars1->split(::StringTools_obj::replace(path2,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 154)		levelCredit->set_text(( ( ::haxe::ds::StringMap)(this6) )->get_string(hideChars1->split(path3)->join(HX_("",00,00,00,00)).toLowerCase()));
HXLINE( 155)		bool _hx_tmp11;
HXDLIN( 155)		::String path4 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 155)		 ::EReg invalidChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 155)		 ::EReg hideChars2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 155)		::String path5 = invalidChars2->split(::StringTools_obj::replace(path4,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 155)		if ((hideChars2->split(path5)->join(HX_("",00,00,00,00)).toLowerCase() == HX_("google",b9,c3,e9,61))) {
HXLINE( 155)			_hx_tmp11 = (::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("hard",eb,2e,08,45));
            		}
            		else {
HXLINE( 155)			_hx_tmp11 = false;
            		}
HXDLIN( 155)		if (_hx_tmp11) {
HXLINE( 155)			levelCredit->set_text(HX_("CUSTOM SONG by An Ammar, SomeGuy",b7,10,52,c4));
            		}
HXLINE( 156)		{
HXLINE( 156)			 ::flixel::math::FlxBasePoint this7 = levelCredit->scrollFactor;
HXDLIN( 156)			this7->set_x(( (Float)(0) ));
HXDLIN( 156)			this7->set_y(( (Float)(0) ));
            		}
HXLINE( 157)		::String file5 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + fonter));
HXDLIN( 157)		::String _hx_tmp12;
HXDLIN( 157)		if (::sys::FileSystem_obj::exists(file5)) {
HXLINE( 157)			_hx_tmp12 = file5;
            		}
            		else {
HXLINE( 157)			_hx_tmp12 = (HX_("assets/fonts/",37,ff,a5,9c) + fonter);
            		}
HXDLIN( 157)		levelCredit->setFormat(_hx_tmp12,32,null(),null(),null(),null(),null());
HXLINE( 158)		levelCredit->updateHitbox();
HXLINE( 159)		levelCredit->set_alignment(HX_("right",dc,0b,64,e9));
HXLINE( 160)		levelCredit->set_y(( (Float)(15) ));
HXLINE( 161)		int _hx_tmp13 = ::flixel::FlxG_obj::width;
HXDLIN( 161)		levelCredit->set_x((( (Float)(_hx_tmp13) ) - (levelCredit->get_width() + 20)));
HXLINE( 162)		this->add(levelCredit);
HXLINE( 165)		this->chartingText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,116,0,HX_("CHARTING MODE",3f,46,f9,44),32,null());
HXLINE( 166)		{
HXLINE( 166)			 ::flixel::math::FlxBasePoint this8 = this->chartingText->scrollFactor;
HXDLIN( 166)			this8->set_x(( (Float)(0) ));
HXDLIN( 166)			this8->set_y(( (Float)(0) ));
            		}
HXLINE( 167)		 ::flixel::text::FlxText _hx_tmp14 = this->chartingText;
HXDLIN( 167)		::String file6 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + fonter));
HXDLIN( 167)		::String _hx_tmp15;
HXDLIN( 167)		if (::sys::FileSystem_obj::exists(file6)) {
HXLINE( 167)			_hx_tmp15 = file6;
            		}
            		else {
HXLINE( 167)			_hx_tmp15 = (HX_("assets/fonts/",37,ff,a5,9c) + fonter);
            		}
HXDLIN( 167)		_hx_tmp14->setFormat(_hx_tmp15,32,null(),null(),null(),null(),null());
HXLINE( 168)		this->chartingText->set_alignment(HX_("right",dc,0b,64,e9));
HXLINE( 169)		 ::flixel::text::FlxText _hx_tmp16 = this->chartingText;
HXDLIN( 169)		int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN( 169)		_hx_tmp16->set_x((( (Float)(_hx_tmp17) ) - (this->chartingText->get_width() + 20)));
HXLINE( 170)		 ::flixel::text::FlxText _hx_tmp18 = this->chartingText;
HXDLIN( 170)		int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN( 170)		_hx_tmp18->set_y((( (Float)(_hx_tmp19) ) - (this->chartingText->get_height() + 20)));
HXLINE( 171)		this->chartingText->updateHitbox();
HXLINE( 172)		this->chartingText->set_visible(::PlayState_obj::chartingMode);
HXLINE( 173)		this->add(this->chartingText);
HXLINE( 175)		this->practiceText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,20,116,0,HX_("PRACTICE MODE",e8,14,ba,86),32,null());
HXLINE( 176)		{
HXLINE( 176)			 ::flixel::math::FlxBasePoint this9 = this->practiceText->scrollFactor;
HXDLIN( 176)			this9->set_x(( (Float)(0) ));
HXDLIN( 176)			this9->set_y(( (Float)(0) ));
            		}
HXLINE( 177)		 ::flixel::text::FlxText _hx_tmp20 = this->practiceText;
HXDLIN( 177)		::String file7 = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + fonter));
HXDLIN( 177)		::String _hx_tmp21;
HXDLIN( 177)		if (::sys::FileSystem_obj::exists(file7)) {
HXLINE( 177)			_hx_tmp21 = file7;
            		}
            		else {
HXLINE( 177)			_hx_tmp21 = (HX_("assets/fonts/",37,ff,a5,9c) + fonter);
            		}
HXDLIN( 177)		_hx_tmp20->setFormat(_hx_tmp21,32,null(),null(),null(),null(),null());
HXLINE( 178)		this->practiceText->set_alignment(HX_("right",dc,0b,64,e9));
HXLINE( 179)		 ::flixel::text::FlxText _hx_tmp22 = this->practiceText;
HXDLIN( 179)		int _hx_tmp23 = ::flixel::FlxG_obj::width;
HXDLIN( 179)		_hx_tmp22->set_x((( (Float)(_hx_tmp23) ) - (this->practiceText->get_width() + 20)));
HXLINE( 180)		this->practiceText->set_y((this->chartingText->y - ( (Float)(32) )));
HXLINE( 181)		this->practiceText->updateHitbox();
HXLINE( 182)		this->practiceText->set_visible(::PlayState_obj::instance->practiceMode);
HXLINE( 183)		this->add(this->practiceText);
HXLINE( 185)		blueballedTxt->set_alpha(( (Float)(0) ));
HXLINE( 186)		levelDifficulty->set_alpha(( (Float)(0) ));
HXLINE( 187)		levelInfo->set_alpha(( (Float)(0) ));
HXLINE( 188)		levelCredit->set_alpha(( (Float)(0) ));
HXLINE( 190)		levelInfo->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 191)		levelDifficulty->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 192)		blueballedTxt->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 194)		levelInfo->set_x(( (Float)(20) ));
HXLINE( 195)		levelDifficulty->set_x(( (Float)(20) ));
HXLINE( 196)		blueballedTxt->set_x(( (Float)(20) ));
HXLINE( 197)		levelCredit->set_y((levelCredit->y - ( (Float)(20) )));
HXLINE( 199)		::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.6))),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 200)		::flixel::tweens::FlxTween_obj::tween(levelInfo, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),20)
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 201)		::flixel::tweens::FlxTween_obj::tween(levelCredit, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),20)
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 202)		::flixel::tweens::FlxTween_obj::tween(levelDifficulty, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(levelDifficulty->y + 10))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.5))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 203)		::flixel::tweens::FlxTween_obj::tween(blueballedTxt, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),(blueballedTxt->y + 10))
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.7))
            			->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 204)		::flixel::tweens::FlxTween_obj::tween(this->checker, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.3))
            			->setFixed(1,HX_("velocity.x",e7,ab,18,5c),-50)),1, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE( 206)		this->grpMenuShit =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 207)		this->add(this->grpMenuShit);
HXLINE( 209)		this->regenMenu();
HXLINE( 210)		this->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::cameras->list->__get((::flixel::FlxG_obj::cameras->list->length - 1)).StaticCast<  ::flixel::FlxCamera >()));
            	}

Dynamic PauseSubState_obj::__CreateEmpty() { return new PauseSubState_obj; }

void *PauseSubState_obj::_hx_vtable = 0;

Dynamic PauseSubState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PauseSubState_obj > _hx_result = new PauseSubState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PauseSubState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x519cdafb) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x519cdafb;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void PauseSubState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_17d383cbce329512_217_update)
HXLINE( 218)		 ::PauseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 218)		_hx_tmp->cantUnpause = (_hx_tmp->cantUnpause - elapsed);
HXLINE( 219)		if ((this->pauseMusic->_volume < ((Float)0.5))) {
HXLINE( 220)			 ::flixel::sound::FlxSound fh = this->pauseMusic;
HXDLIN( 220)			fh->set_volume((fh->_volume + (((Float)0.01) * elapsed)));
            		}
HXLINE( 222)		this->super::update(elapsed);
HXLINE( 223)		this->updateSkipTextStuff();
HXLINE( 225)		 ::PauseSubState _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 225)		_hx_tmp1->totalElapsed = (_hx_tmp1->totalElapsed + ::flixel::FlxG_obj::elapsed);
HXLINE( 226)		{
HXLINE( 226)			 ::Dynamic filter = null();
HXDLIN( 226)			 ::flixel::group::FlxTypedGroupIterator item =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->grpMenuShit->members,filter);
HXDLIN( 226)			while(item->hasNext()){
HXLINE( 226)				 ::Alphabet item1 = item->next().StaticCast<  ::Alphabet >();
HXLINE( 227)				Float a = item1->x;
HXDLIN( 227)				Float b = (((Float)640.) - (item1->get_width() / ( (Float)(2) )));
HXDLIN( 227)				Float targetX = (a + ((::flixel::FlxG_obj::elapsed * ( (Float)(10) )) * (b - a)));
HXLINE( 228)				item1->set_x(targetX);
HXLINE( 229)				if ((item1->targetY == 0)) {
HXLINE( 231)					Float a1 = item1->scale->x;
HXDLIN( 231)					Float n = (this->totalElapsed * ( (Float)(4) ));
HXDLIN( 231)					n = (n * ((Float)0.3183098862));
HXDLIN( 231)					if ((n > 1)) {
HXLINE( 231)						n = (n - ( (Float)(((::Math_obj::ceil(n) >> 1) << 1)) ));
            					}
            					else {
HXLINE( 231)						if ((n < -1)) {
HXLINE( 231)							n = (n + ((::Math_obj::ceil(-(n)) >> 1) << 1));
            						}
            					}
HXDLIN( 231)					Float b1;
HXDLIN( 231)					if ((n > 0)) {
HXLINE( 231)						b1 = (n * (((Float)3.1) + (n * (((Float)0.5) + (n * (((Float)-7.2) + (n * ((Float)3.6))))))));
            					}
            					else {
HXLINE( 231)						b1 = (n * (((Float)3.1) - (n * (((Float)0.5) + (n * (((Float)7.2) + (n * ((Float)3.6))))))));
            					}
HXDLIN( 231)					Float targetSize = (a1 + ((::flixel::FlxG_obj::elapsed * ( (Float)(6) )) * ((((Float)1.25) + (b1 * ((Float)0.1))) - a1)));
HXLINE( 232)					Float a2 = item1->alpha;
HXDLIN( 232)					Float targetAlpha = (a2 + ((::flixel::FlxG_obj::elapsed * ( (Float)(15) )) * (( (Float)(1) ) - a2)));
HXLINE( 233)					{
HXLINE( 233)						 ::flixel::math::FlxBasePoint this1 = item1->scale;
HXDLIN( 233)						this1->set_x(targetSize);
HXDLIN( 233)						this1->set_y(targetSize);
            					}
HXLINE( 234)					item1->set_alpha(targetAlpha);
            				}
            				else {
HXLINE( 238)					Float a3 = item1->scale->x;
HXDLIN( 238)					Float targetSize1 = (a3 + ((::flixel::FlxG_obj::elapsed * ( (Float)(6) )) * (( (Float)(1) ) - a3)));
HXLINE( 239)					Float a4 = item1->alpha;
HXDLIN( 239)					Float targetAlpha1 = (a4 + ((::flixel::FlxG_obj::elapsed * ( (Float)(9) )) * (((Float)0.5) - a4)));
HXLINE( 240)					{
HXLINE( 240)						 ::flixel::math::FlxBasePoint this2 = item1->scale;
HXDLIN( 240)						this2->set_x(targetSize1);
HXDLIN( 240)						this2->set_y(targetSize1);
            					}
HXLINE( 241)					item1->set_alpha(targetAlpha1);
            				}
            			}
            		}
HXLINE( 246)		bool upP = ::PlayerSettings_obj::player1->controls->_ui_upP->check();
HXLINE( 247)		bool downP = ::PlayerSettings_obj::player1->controls->_ui_downP->check();
HXLINE( 248)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 250)		if (upP) {
HXLINE( 252)			this->changeSelection(-1);
            		}
HXLINE( 254)		if (downP) {
HXLINE( 256)			this->changeSelection(1);
            		}
HXLINE( 259)		::String daSelected = this->menuItems->__get(this->curSelected);
HXLINE( 260)		if ((daSelected == HX_("Skip Time",4e,65,49,c7))) {
HXLINE( 263)			if (::PlayerSettings_obj::player1->controls->_ui_leftP->check()) {
HXLINE( 265)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 265)				_hx_tmp2->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 266)				 ::PauseSubState _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 266)				_hx_tmp3->curTime = (_hx_tmp3->curTime - ( (Float)(1000) ));
HXLINE( 267)				this->holdTime = ( (Float)(0) );
            			}
HXLINE( 269)			if (::PlayerSettings_obj::player1->controls->_ui_rightP->check()) {
HXLINE( 271)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp4 = ::flixel::FlxG_obj::sound;
HXDLIN( 271)				_hx_tmp4->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 272)				 ::PauseSubState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 272)				_hx_tmp5->curTime = (_hx_tmp5->curTime + 1000);
HXLINE( 273)				this->holdTime = ( (Float)(0) );
            			}
HXLINE( 276)			bool _hx_tmp6;
HXDLIN( 276)			if (!(::PlayerSettings_obj::player1->controls->_ui_left->check())) {
HXLINE( 276)				_hx_tmp6 = ::PlayerSettings_obj::player1->controls->_ui_right->check();
            			}
            			else {
HXLINE( 276)				_hx_tmp6 = true;
            			}
HXDLIN( 276)			if (_hx_tmp6) {
HXLINE( 278)				 ::PauseSubState _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 278)				_hx_tmp7->holdTime = (_hx_tmp7->holdTime + elapsed);
HXLINE( 279)				if ((this->holdTime > ((Float)0.5))) {
HXLINE( 281)					 ::PauseSubState _hx_tmp8 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 281)					Float _hx_tmp9 = _hx_tmp8->curTime;
HXDLIN( 281)					int _hx_tmp10;
HXDLIN( 281)					if (::PlayerSettings_obj::player1->controls->_ui_left->check()) {
HXLINE( 281)						_hx_tmp10 = -1;
            					}
            					else {
HXLINE( 281)						_hx_tmp10 = 1;
            					}
HXDLIN( 281)					_hx_tmp8->curTime = (_hx_tmp9 + ((( (Float)(45000) ) * elapsed) * ( (Float)(_hx_tmp10) )));
            				}
HXLINE( 284)				if ((this->curTime >= ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 284)					 ::PauseSubState _hx_tmp11 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 284)					_hx_tmp11->curTime = (_hx_tmp11->curTime - ::flixel::FlxG_obj::sound->music->_length);
            				}
            				else {
HXLINE( 285)					if ((this->curTime < 0)) {
HXLINE( 285)						 ::PauseSubState _hx_tmp12 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 285)						_hx_tmp12->curTime = (_hx_tmp12->curTime + ::flixel::FlxG_obj::sound->music->_length);
            					}
            				}
HXLINE( 286)				this->updateSkipTimeText();
            			}
            		}
HXLINE( 290)		bool _hx_tmp13;
HXDLIN( 290)		if (accepted) {
HXLINE( 290)			if (!((this->cantUnpause <= 0))) {
HXLINE( 290)				_hx_tmp13 = !(::ClientPrefs_obj::controllerMode);
            			}
            			else {
HXLINE( 290)				_hx_tmp13 = true;
            			}
            		}
            		else {
HXLINE( 290)			_hx_tmp13 = false;
            		}
HXDLIN( 290)		if (_hx_tmp13) {
HXLINE( 292)			if (::hx::IsPointerEq( this->menuItems,this->difficultyChoices )) {
HXLINE( 294)				bool _hx_tmp14;
HXDLIN( 294)				if (((this->menuItems->length - 1) != this->curSelected)) {
HXLINE( 294)					_hx_tmp14 = this->difficultyChoices->contains(daSelected);
            				}
            				else {
HXLINE( 294)					_hx_tmp14 = false;
            				}
HXDLIN( 294)				if (_hx_tmp14) {
HXLINE( 295)					::String name = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE( 296)					::String poop = ::Highscore_obj::formatSong(name,this->curSelected);
HXLINE( 297)					::PlayState_obj::SONG = ::Song_obj::loadFromJson(poop,name);
HXLINE( 298)					::PlayState_obj::storyDifficulty = this->curSelected;
HXLINE( 299)					::MusicBeatState_obj::resetState();
HXLINE( 300)					::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 301)					::PlayState_obj::changedDifficulty = true;
HXLINE( 302)					::PlayState_obj::chartingMode = false;
HXLINE( 303)					return;
            				}
HXLINE( 306)				this->menuItems = this->menuItemsOG;
HXLINE( 307)				this->regenMenu();
            			}
HXLINE( 310)			::String _hx_switch_0 = daSelected;
            			if (  (_hx_switch_0==HX_("Change Difficulty",eb,7e,37,a6)) ){
HXLINE( 315)				this->menuItems = this->difficultyChoices;
HXLINE( 316)				this->deleteSkipTimeText();
HXLINE( 317)				this->regenMenu();
HXLINE( 314)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("End Song",7a,be,85,e8)) ){
HXLINE( 343)				this->close();
HXLINE( 344)				::PlayState_obj::instance->finishSong(true);
HXLINE( 342)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("Exit to menu",82,87,9a,a9)) ){
HXLINE( 352)				::PlayState_obj::deathCounter = 0;
HXLINE( 353)				::PlayState_obj::seenCutscene = false;
HXLINE( 355)				::WeekData_obj::loadTheFirstEnabledMod();
HXLINE( 356)				::MusicBeatState_obj::switchState( ::MainMenuStateAmmar_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 357)				::PlayState_obj::cancelMusicFadeTween();
HXLINE( 358)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp15 = ::flixel::FlxG_obj::sound;
HXDLIN( 358)				::String library = null();
HXDLIN( 358)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN( 358)				_hx_tmp15->playMusic(file,null(),null(),null());
HXLINE( 359)				::PlayState_obj::changedDifficulty = false;
HXLINE( 360)				::PlayState_obj::chartingMode = false;
HXLINE( 351)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("Leave Charting Mode",36,c5,86,71)) ){
HXLINE( 325)				::PauseSubState_obj::restartSong(null());
HXLINE( 326)				::PlayState_obj::chartingMode = false;
HXLINE( 324)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("Practice Mode",e8,58,72,66)) ){
HXLINE( 319)				::PlayState_obj::instance->practiceMode = !(::PlayState_obj::instance->practiceMode);
HXLINE( 320)				::PlayState_obj::changedDifficulty = true;
HXLINE( 321)				this->practiceText->set_visible(::PlayState_obj::instance->practiceMode);
HXLINE( 318)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("Restart Song",06,b6,fe,13)) ){
HXLINE( 323)				::PauseSubState_obj::restartSong(null());
HXDLIN( 323)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("Resume",cd,dd,18,3d)) ){
HXLINE( 313)				this->close();
HXDLIN( 313)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("Skip Time",4e,65,49,c7)) ){
HXLINE( 328)				if ((this->curTime < ::Conductor_obj::songPosition)) {
HXLINE( 330)					::PlayState_obj::startOnTime = this->curTime;
HXLINE( 331)					::PauseSubState_obj::restartSong(true);
            				}
            				else {
HXLINE( 335)					if ((this->curTime != ::Conductor_obj::songPosition)) {
HXLINE( 337)						::PlayState_obj::instance->clearNotesBefore(this->curTime);
HXLINE( 338)						::PlayState_obj::instance->setSongTime(this->curTime);
            					}
HXLINE( 340)					this->close();
            				}
HXLINE( 328)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("Toggle Botplay",ef,6e,ca,1a)) ){
HXLINE( 346)				::PlayState_obj::instance->cpuControlled = !(::PlayState_obj::instance->cpuControlled);
HXLINE( 347)				::PlayState_obj::changedDifficulty = true;
HXLINE( 348)				::PlayState_obj::instance->botplayTxt->set_visible(::PlayState_obj::instance->cpuControlled);
HXLINE( 349)				::PlayState_obj::instance->botplayTxt->set_alpha(( (Float)(1) ));
HXLINE( 350)				::PlayState_obj::instance->botplaySine = ( (Float)(0) );
HXLINE( 345)				goto _hx_goto_4;
            			}
            			_hx_goto_4:;
            		}
            	}


void PauseSubState_obj::deleteSkipTimeText(){
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_366_deleteSkipTimeText)
HXLINE( 367)		if (::hx::IsNotNull( this->skipTimeText )) {
HXLINE( 369)			this->skipTimeText->kill();
HXLINE( 370)			this->remove(this->skipTimeText,null());
HXLINE( 371)			this->skipTimeText->destroy();
            		}
HXLINE( 373)		this->skipTimeText = null();
HXLINE( 374)		this->skipTimeTracker = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PauseSubState_obj,deleteSkipTimeText,(void))

void PauseSubState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_398_destroy)
HXLINE( 399)		this->pauseMusic->destroy();
HXLINE( 401)		this->super::destroy();
            	}


void PauseSubState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_405_changeSelection)
HXLINE( 406)		 ::PauseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 406)		_hx_tmp->curSelected = (_hx_tmp->curSelected + change);
HXLINE( 408)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 408)		_hx_tmp1->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 410)		if ((this->curSelected < 0)) {
HXLINE( 411)			this->curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 412)		if ((this->curSelected >= this->menuItems->length)) {
HXLINE( 413)			this->curSelected = 0;
            		}
HXLINE( 415)		int bullShit = 0;
HXLINE( 417)		{
HXLINE( 417)			int _g = 0;
HXDLIN( 417)			::Array< ::Dynamic> _g1 = this->grpMenuShit->members;
HXDLIN( 417)			while((_g < _g1->length)){
HXLINE( 417)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 417)				_g = (_g + 1);
HXLINE( 419)				item->targetY = (bullShit - this->curSelected);
HXLINE( 420)				bullShit = (bullShit + 1);
HXLINE( 422)				item->set_alpha(((Float)0.6));
HXLINE( 425)				if ((item->targetY == 0)) {
HXLINE( 427)					item->set_alpha(( (Float)(1) ));
HXLINE( 430)					if (::hx::IsInstanceEq( item,this->skipTimeTracker )) {
HXLINE( 432)						this->curTime = ::Math_obj::max(( (Float)(0) ),::Conductor_obj::songPosition);
HXLINE( 433)						this->updateSkipTimeText();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PauseSubState_obj,changeSelection,(void))

void PauseSubState_obj::regenMenu(){
            	HX_GC_STACKFRAME(&_hx_pos_17d383cbce329512_440_regenMenu)
HXLINE( 441)		{
HXLINE( 441)			int _g = 0;
HXDLIN( 441)			int _g1 = this->grpMenuShit->members->get_length();
HXDLIN( 441)			while((_g < _g1)){
HXLINE( 441)				_g = (_g + 1);
HXDLIN( 441)				int i = (_g - 1);
HXLINE( 442)				 ::Alphabet obj = Dynamic( this->grpMenuShit->members->__get(0)).StaticCast<  ::Alphabet >();
HXLINE( 443)				obj->kill();
HXLINE( 444)				this->grpMenuShit->remove(obj,true).StaticCast<  ::Alphabet >();
HXLINE( 445)				obj->destroy();
            			}
            		}
HXLINE( 448)		{
HXLINE( 448)			int _g2 = 0;
HXDLIN( 448)			int _g3 = this->menuItems->length;
HXDLIN( 448)			while((_g2 < _g3)){
HXLINE( 448)				_g2 = (_g2 + 1);
HXDLIN( 448)				int i1 = (_g2 - 1);
HXLINE( 449)				 ::Alphabet item =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(90) ),( (Float)(320) ),this->menuItems->__get(i1),true);
HXLINE( 450)				item->isMenuItem = true;
HXLINE( 451)				item->targetY = i1;
HXLINE( 452)				item->changeX = false;
HXLINE( 453)				item->lerpSpeed = ((Float)1.25);
HXLINE( 454)				this->grpMenuShit->add(item).StaticCast<  ::Alphabet >();
HXLINE( 456)				if ((this->menuItems->__get(i1) == HX_("Skip Time",4e,65,49,c7))) {
HXLINE( 458)					this->skipTimeText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("",00,00,00,00),64,null());
HXLINE( 459)					 ::flixel::text::FlxText _hx_tmp = this->skipTimeText;
HXDLIN( 459)					::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("vcr.ttf",9d,d2,a7,82)));
HXDLIN( 459)					::String _hx_tmp1;
HXDLIN( 459)					if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 459)						_hx_tmp1 = file;
            					}
            					else {
HXLINE( 459)						_hx_tmp1 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82));
            					}
HXDLIN( 459)					_hx_tmp->setFormat(_hx_tmp1,64,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 460)					{
HXLINE( 460)						 ::flixel::math::FlxBasePoint this1 = this->skipTimeText->scrollFactor;
HXDLIN( 460)						this1->set_x(( (Float)(0) ));
HXDLIN( 460)						this1->set_y(( (Float)(0) ));
            					}
HXLINE( 461)					this->skipTimeText->set_borderSize(( (Float)(2) ));
HXLINE( 462)					this->skipTimeTracker = item;
HXLINE( 463)					this->add(this->skipTimeText);
HXLINE( 465)					this->updateSkipTextStuff();
HXLINE( 466)					this->updateSkipTimeText();
            				}
            			}
            		}
HXLINE( 469)		this->curSelected = 0;
HXLINE( 470)		this->changeSelection(null());
HXLINE( 472)		if (!(this->spawn)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::Alphabet button){
            				HX_GC_STACKFRAME(&_hx_pos_17d383cbce329512_475_regenMenu)
HXLINE( 475)				button->set_x((button->x - ( (Float)((800 + (button->targetY * 800))) )));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 473)			this->spawn = true;
HXLINE( 474)			this->grpMenuShit->forEachAlive( ::Dynamic(new _hx_Closure_0()),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PauseSubState_obj,regenMenu,(void))

void PauseSubState_obj::updateSkipTextStuff(){
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_481_updateSkipTextStuff)
HXLINE( 482)		bool _hx_tmp;
HXDLIN( 482)		if (::hx::IsNotNull( this->skipTimeText )) {
HXLINE( 482)			_hx_tmp = ::hx::IsNull( this->skipTimeTracker );
            		}
            		else {
HXLINE( 482)			_hx_tmp = true;
            		}
HXDLIN( 482)		if (_hx_tmp) {
HXLINE( 482)			return;
            		}
HXLINE( 484)		 ::flixel::text::FlxText _hx_tmp1 = this->skipTimeText;
HXDLIN( 484)		Float _hx_tmp2 = this->skipTimeTracker->x;
HXDLIN( 484)		Float _hx_tmp3 = (_hx_tmp2 + (this->skipTimeTracker->get_width() / ( (Float)(2) )));
HXDLIN( 484)		_hx_tmp1->set_x((_hx_tmp3 - (this->skipTimeText->get_width() / ( (Float)(2) ))));
HXLINE( 485)		this->skipTimeText->set_y((this->skipTimeTracker->y + 110));
HXLINE( 486)		this->skipTimeText->set_visible((this->skipTimeTracker->alpha >= 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PauseSubState_obj,updateSkipTextStuff,(void))

void PauseSubState_obj::updateSkipTimeText(){
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_491_updateSkipTimeText)
HXDLIN( 491)		 ::flixel::text::FlxText _hx_tmp = this->skipTimeText;
HXDLIN( 491)		::String _hx_tmp1 = (::flixel::util::FlxStringUtil_obj::formatTime(::Math_obj::max(( (Float)(0) ),( (Float)(::Math_obj::floor((this->curTime / ( (Float)(1000) )))) )),false) + HX_(" / ",31,71,18,00));
HXDLIN( 491)		_hx_tmp->set_text((_hx_tmp1 + ::flixel::util::FlxStringUtil_obj::formatTime(::Math_obj::max(( (Float)(0) ),( (Float)(::Math_obj::floor((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )))) )),false)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PauseSubState_obj,updateSkipTimeText,(void))

::String PauseSubState_obj::songName;

void PauseSubState_obj::restartSong(::hx::Null< bool >  __o_noTrans){
            		bool noTrans = __o_noTrans.Default(false);
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_378_restartSong)
HXLINE( 379)		::PlayState_obj::instance->paused = true;
HXLINE( 380)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE( 381)		::PlayState_obj::instance->vocals->set_volume(( (Float)(0) ));
HXLINE( 383)		if (!(::ClientPrefs_obj::developer)) {
HXLINE( 384)			::antidebug::DebugSave_obj::updateFolder(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
            		}
HXLINE( 386)		if (noTrans) {
HXLINE( 388)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE( 389)			{
HXLINE( 389)				 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 389)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 389)				 ::Dynamic _hx_tmp = ::Reflect_obj::field(::flixel::FlxG_obj::game->_state,HX_("switchTo",8f,f8,d6,0d));
HXDLIN( 389)				if (( (bool)(_hx_tmp(nextState)) )) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxState,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_STACKFRAME(&_hx_pos_17d383cbce329512_389_restartSong)
HXLINE( 389)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 389)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            						else {
HXLINE( 389)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 389)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            				}
            			}
            		}
            		else {
HXLINE( 393)			::MusicBeatState_obj::resetState();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PauseSubState_obj,restartSong,(void))


::hx::ObjectPtr< PauseSubState_obj > PauseSubState_obj::__new(Float x,Float y) {
	::hx::ObjectPtr< PauseSubState_obj > __this = new PauseSubState_obj();
	__this->__construct(x,y);
	return __this;
}

::hx::ObjectPtr< PauseSubState_obj > PauseSubState_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y) {
	PauseSubState_obj *__this = (PauseSubState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PauseSubState_obj), true, "PauseSubState"));
	*(void **)__this = PauseSubState_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

PauseSubState_obj::PauseSubState_obj()
{
}

void PauseSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PauseSubState);
	HX_MARK_MEMBER_NAME(grpMenuShit,"grpMenuShit");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(menuItemsOG,"menuItemsOG");
	HX_MARK_MEMBER_NAME(difficultyChoices,"difficultyChoices");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(checker,"checker");
	HX_MARK_MEMBER_NAME(pauseMusic,"pauseMusic");
	HX_MARK_MEMBER_NAME(practiceText,"practiceText");
	HX_MARK_MEMBER_NAME(chartingText,"chartingText");
	HX_MARK_MEMBER_NAME(skipTimeText,"skipTimeText");
	HX_MARK_MEMBER_NAME(skipTimeTracker,"skipTimeTracker");
	HX_MARK_MEMBER_NAME(curTime,"curTime");
	HX_MARK_MEMBER_NAME(songsCredit,"songsCredit");
	HX_MARK_MEMBER_NAME(holdTime,"holdTime");
	HX_MARK_MEMBER_NAME(cantUnpause,"cantUnpause");
	HX_MARK_MEMBER_NAME(totalElapsed,"totalElapsed");
	HX_MARK_MEMBER_NAME(spawn,"spawn");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PauseSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grpMenuShit,"grpMenuShit");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(menuItemsOG,"menuItemsOG");
	HX_VISIT_MEMBER_NAME(difficultyChoices,"difficultyChoices");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(checker,"checker");
	HX_VISIT_MEMBER_NAME(pauseMusic,"pauseMusic");
	HX_VISIT_MEMBER_NAME(practiceText,"practiceText");
	HX_VISIT_MEMBER_NAME(chartingText,"chartingText");
	HX_VISIT_MEMBER_NAME(skipTimeText,"skipTimeText");
	HX_VISIT_MEMBER_NAME(skipTimeTracker,"skipTimeTracker");
	HX_VISIT_MEMBER_NAME(curTime,"curTime");
	HX_VISIT_MEMBER_NAME(songsCredit,"songsCredit");
	HX_VISIT_MEMBER_NAME(holdTime,"holdTime");
	HX_VISIT_MEMBER_NAME(cantUnpause,"cantUnpause");
	HX_VISIT_MEMBER_NAME(totalElapsed,"totalElapsed");
	HX_VISIT_MEMBER_NAME(spawn,"spawn");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PauseSubState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"spawn") ) { return ::hx::Val( spawn ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { return ::hx::Val( checker ); }
		if (HX_FIELD_EQ(inName,"curTime") ) { return ::hx::Val( curTime ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"holdTime") ) { return ::hx::Val( holdTime ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"regenMenu") ) { return ::hx::Val( regenMenu_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { return ::hx::Val( pauseMusic ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpMenuShit") ) { return ::hx::Val( grpMenuShit ); }
		if (HX_FIELD_EQ(inName,"menuItemsOG") ) { return ::hx::Val( menuItemsOG ); }
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"songsCredit") ) { return ::hx::Val( songsCredit ); }
		if (HX_FIELD_EQ(inName,"cantUnpause") ) { return ::hx::Val( cantUnpause ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"practiceText") ) { return ::hx::Val( practiceText ); }
		if (HX_FIELD_EQ(inName,"chartingText") ) { return ::hx::Val( chartingText ); }
		if (HX_FIELD_EQ(inName,"skipTimeText") ) { return ::hx::Val( skipTimeText ); }
		if (HX_FIELD_EQ(inName,"totalElapsed") ) { return ::hx::Val( totalElapsed ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"skipTimeTracker") ) { return ::hx::Val( skipTimeTracker ); }
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"difficultyChoices") ) { return ::hx::Val( difficultyChoices ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"deleteSkipTimeText") ) { return ::hx::Val( deleteSkipTimeText_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSkipTimeText") ) { return ::hx::Val( updateSkipTimeText_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateSkipTextStuff") ) { return ::hx::Val( updateSkipTextStuff_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PauseSubState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { outValue = ( songName ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"restartSong") ) { outValue = restartSong_dyn(); return true; }
	}
	return false;
}

::hx::Val PauseSubState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"spawn") ) { spawn=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"checker") ) { checker=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curTime") ) { curTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"holdTime") ) { holdTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { pauseMusic=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"grpMenuShit") ) { grpMenuShit=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuItemsOG") ) { menuItemsOG=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songsCredit") ) { songsCredit=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cantUnpause") ) { cantUnpause=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"practiceText") ) { practiceText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartingText") ) { chartingText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipTimeText") ) { skipTimeText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalElapsed") ) { totalElapsed=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"skipTimeTracker") ) { skipTimeTracker=inValue.Cast<  ::Alphabet >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"difficultyChoices") ) { difficultyChoices=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PauseSubState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"songName") ) { songName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PauseSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("grpMenuShit",04,32,b8,f0));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("menuItemsOG",39,55,bf,30));
	outFields->push(HX_("difficultyChoices",f7,9c,00,1a));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("checker",35,b3,24,13));
	outFields->push(HX_("pauseMusic",cf,6d,d3,e5));
	outFields->push(HX_("practiceText",08,73,28,84));
	outFields->push(HX_("chartingText",91,f9,9e,0d));
	outFields->push(HX_("skipTimeText",f9,38,2b,55));
	outFields->push(HX_("skipTimeTracker",ec,2a,bf,89));
	outFields->push(HX_("curTime",ad,3d,12,b8));
	outFields->push(HX_("songsCredit",d7,a1,05,4a));
	outFields->push(HX_("holdTime",ec,cc,bf,3e));
	outFields->push(HX_("cantUnpause",f9,af,0b,c8));
	outFields->push(HX_("totalElapsed",d8,2c,bf,63));
	outFields->push(HX_("spawn",3b,9e,66,81));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PauseSubState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PauseSubState_obj,grpMenuShit),HX_("grpMenuShit",04,32,b8,f0)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PauseSubState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PauseSubState_obj,menuItemsOG),HX_("menuItemsOG",39,55,bf,30)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PauseSubState_obj,difficultyChoices),HX_("difficultyChoices",f7,9c,00,1a)},
	{::hx::fsInt,(int)offsetof(PauseSubState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(PauseSubState_obj,checker),HX_("checker",35,b3,24,13)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(PauseSubState_obj,pauseMusic),HX_("pauseMusic",cf,6d,d3,e5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PauseSubState_obj,practiceText),HX_("practiceText",08,73,28,84)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PauseSubState_obj,chartingText),HX_("chartingText",91,f9,9e,0d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PauseSubState_obj,skipTimeText),HX_("skipTimeText",f9,38,2b,55)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(PauseSubState_obj,skipTimeTracker),HX_("skipTimeTracker",ec,2a,bf,89)},
	{::hx::fsFloat,(int)offsetof(PauseSubState_obj,curTime),HX_("curTime",ad,3d,12,b8)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(PauseSubState_obj,songsCredit),HX_("songsCredit",d7,a1,05,4a)},
	{::hx::fsFloat,(int)offsetof(PauseSubState_obj,holdTime),HX_("holdTime",ec,cc,bf,3e)},
	{::hx::fsFloat,(int)offsetof(PauseSubState_obj,cantUnpause),HX_("cantUnpause",f9,af,0b,c8)},
	{::hx::fsFloat,(int)offsetof(PauseSubState_obj,totalElapsed),HX_("totalElapsed",d8,2c,bf,63)},
	{::hx::fsBool,(int)offsetof(PauseSubState_obj,spawn),HX_("spawn",3b,9e,66,81)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PauseSubState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &PauseSubState_obj::songName,HX_("songName",c0,d0,d7,36)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PauseSubState_obj_sMemberFields[] = {
	HX_("grpMenuShit",04,32,b8,f0),
	HX_("menuItems",e1,15,e5,5c),
	HX_("menuItemsOG",39,55,bf,30),
	HX_("difficultyChoices",f7,9c,00,1a),
	HX_("curSelected",fb,eb,ab,32),
	HX_("checker",35,b3,24,13),
	HX_("pauseMusic",cf,6d,d3,e5),
	HX_("practiceText",08,73,28,84),
	HX_("chartingText",91,f9,9e,0d),
	HX_("skipTimeText",f9,38,2b,55),
	HX_("skipTimeTracker",ec,2a,bf,89),
	HX_("curTime",ad,3d,12,b8),
	HX_("songsCredit",d7,a1,05,4a),
	HX_("holdTime",ec,cc,bf,3e),
	HX_("cantUnpause",f9,af,0b,c8),
	HX_("totalElapsed",d8,2c,bf,63),
	HX_("update",09,86,05,87),
	HX_("deleteSkipTimeText",c4,59,8b,81),
	HX_("destroy",fa,2c,86,24),
	HX_("changeSelection",bc,98,b5,48),
	HX_("spawn",3b,9e,66,81),
	HX_("regenMenu",fc,42,dc,26),
	HX_("updateSkipTextStuff",bf,a0,ab,1e),
	HX_("updateSkipTimeText",a2,74,38,cd),
	::String(null()) };

static void PauseSubState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PauseSubState_obj::songName,"songName");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PauseSubState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PauseSubState_obj::songName,"songName");
};

#endif

::hx::Class PauseSubState_obj::__mClass;

static ::String PauseSubState_obj_sStaticFields[] = {
	HX_("songName",c0,d0,d7,36),
	HX_("restartSong",44,ab,b8,45),
	::String(null())
};

void PauseSubState_obj::__register()
{
	PauseSubState_obj _hx_dummy;
	PauseSubState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PauseSubState",67,95,e5,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PauseSubState_obj::__GetStatic;
	__mClass->mSetStaticField = &PauseSubState_obj::__SetStatic;
	__mClass->mMarkFunc = PauseSubState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PauseSubState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PauseSubState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PauseSubState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PauseSubState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PauseSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PauseSubState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PauseSubState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_17d383cbce329512_75_boot)
HXDLIN(  75)		songName = HX_("",00,00,00,00);
            	}
}

