// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StorySprite
#include <StorySprite.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3b7213395c1228ff_2343_new,"StorySprite","new",0xc315e7ac,"StorySprite.new","MainMenuStateAmmar.hx",2343,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_3b7213395c1228ff_2368_update,"StorySprite","update",0xcfa8063d,"StorySprite.update","MainMenuStateAmmar.hx",2368,0x38c8c245)

void StorySprite_obj::__construct(Float x,Float y,::String path, ::Dynamic scaleMultiply,::hx::Null< int >  __o_orda){
            		int orda = __o_orda.Default(0);
            	HX_STACKFRAME(&_hx_pos_3b7213395c1228ff_2343_new)
HXLINE(2352)		this->daOrder = 0;
HXLINE(2351)		this->zoomSin = false;
HXLINE(2350)		this->sinOff = ((Float)0);
HXLINE(2349)		this->sinY = false;
HXLINE(2348)		this->centery = ((Float)0);
HXLINE(2347)		this->centerx = ((Float)0);
HXLINE(2356)		super::__construct(x,y,null());
HXLINE(2357)		::String library = null();
HXDLIN(2357)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(path,library);
HXDLIN(2357)		this->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(2358)		if (::hx::IsNotNull( scaleMultiply )) {
HXLINE(2359)			this->setGraphicSize(::Std_obj::_hx_int((this->get_width() * ( (Float)(scaleMultiply) ))),null());
HXLINE(2360)			this->updateHitbox();
            		}
HXLINE(2362)		{
HXLINE(2362)			int axes = 17;
HXDLIN(2362)			bool _hx_tmp;
HXDLIN(2362)			if ((axes != 1)) {
HXLINE(2362)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(2362)				_hx_tmp = true;
            			}
HXDLIN(2362)			if (_hx_tmp) {
HXLINE(2362)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(2362)				this->set_x(((( (Float)(_hx_tmp1) ) - this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2362)			bool _hx_tmp2;
HXDLIN(2362)			if ((axes != 16)) {
HXLINE(2362)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(2362)				_hx_tmp2 = true;
            			}
HXDLIN(2362)			if (_hx_tmp2) {
HXLINE(2362)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(2362)				this->set_y(((( (Float)(_hx_tmp3) ) - this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2363)		this->centerx = x;
HXLINE(2364)		this->centery = y;
HXLINE(2365)		this->daOrder = orda;
            	}

Dynamic StorySprite_obj::__CreateEmpty() { return new StorySprite_obj; }

void *StorySprite_obj::_hx_vtable = 0;

Dynamic StorySprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StorySprite_obj > _hx_result = new StorySprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool StorySprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x2bc926fa) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2bc926fa;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void StorySprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_3b7213395c1228ff_2368_update)
HXLINE(2369)		if (this->sinY) {
HXLINE(2370)			this->set_y((this->centery + (::Math_obj::sin(((( (Float)(::flixel::FlxG_obj::game->ticks) ) / ( (Float)(800) )) + this->sinOff)) * ( (Float)(5) ))));
            		}
HXLINE(2371)		if (this->zoomSin) {
HXLINE(2372)			Float scal = (((Float)1.11) + (::Math_obj::sin((this->sinOff + (( (Float)(::flixel::FlxG_obj::game->ticks) ) / ( (Float)(780) )))) * ((Float)0.1)));
HXLINE(2373)			{
HXLINE(2373)				 ::flixel::math::FlxBasePoint this1 = this->scale;
HXDLIN(2373)				this1->set_x(scal);
HXDLIN(2373)				this1->set_y(scal);
            			}
            		}
            	}



::hx::ObjectPtr< StorySprite_obj > StorySprite_obj::__new(Float x,Float y,::String path, ::Dynamic scaleMultiply,::hx::Null< int >  __o_orda) {
	::hx::ObjectPtr< StorySprite_obj > __this = new StorySprite_obj();
	__this->__construct(x,y,path,scaleMultiply,__o_orda);
	return __this;
}

::hx::ObjectPtr< StorySprite_obj > StorySprite_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y,::String path, ::Dynamic scaleMultiply,::hx::Null< int >  __o_orda) {
	StorySprite_obj *__this = (StorySprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StorySprite_obj), true, "StorySprite"));
	*(void **)__this = StorySprite_obj::_hx_vtable;
	__this->__construct(x,y,path,scaleMultiply,__o_orda);
	return __this;
}

StorySprite_obj::StorySprite_obj()
{
}

void StorySprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StorySprite);
	HX_MARK_MEMBER_NAME(tween,"tween");
	HX_MARK_MEMBER_NAME(alphatween,"alphatween");
	HX_MARK_MEMBER_NAME(centerx,"centerx");
	HX_MARK_MEMBER_NAME(centery,"centery");
	HX_MARK_MEMBER_NAME(sinY,"sinY");
	HX_MARK_MEMBER_NAME(sinOff,"sinOff");
	HX_MARK_MEMBER_NAME(zoomSin,"zoomSin");
	HX_MARK_MEMBER_NAME(daOrder,"daOrder");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StorySprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tween,"tween");
	HX_VISIT_MEMBER_NAME(alphatween,"alphatween");
	HX_VISIT_MEMBER_NAME(centerx,"centerx");
	HX_VISIT_MEMBER_NAME(centery,"centery");
	HX_VISIT_MEMBER_NAME(sinY,"sinY");
	HX_VISIT_MEMBER_NAME(sinOff,"sinOff");
	HX_VISIT_MEMBER_NAME(zoomSin,"zoomSin");
	HX_VISIT_MEMBER_NAME(daOrder,"daOrder");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StorySprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sinY") ) { return ::hx::Val( sinY ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tween") ) { return ::hx::Val( tween ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sinOff") ) { return ::hx::Val( sinOff ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"centerx") ) { return ::hx::Val( centerx ); }
		if (HX_FIELD_EQ(inName,"centery") ) { return ::hx::Val( centery ); }
		if (HX_FIELD_EQ(inName,"zoomSin") ) { return ::hx::Val( zoomSin ); }
		if (HX_FIELD_EQ(inName,"daOrder") ) { return ::hx::Val( daOrder ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphatween") ) { return ::hx::Val( alphatween ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StorySprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sinY") ) { sinY=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"tween") ) { tween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sinOff") ) { sinOff=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"centerx") ) { centerx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"centery") ) { centery=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomSin") ) { zoomSin=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daOrder") ) { daOrder=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphatween") ) { alphatween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StorySprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("tween",6b,aa,70,19));
	outFields->push(HX_("alphatween",4d,8e,e8,a6));
	outFields->push(HX_("centerx",03,f5,e5,19));
	outFields->push(HX_("centery",04,f5,e5,19));
	outFields->push(HX_("sinY",41,96,53,4c));
	outFields->push(HX_("sinOff",37,2b,0f,b9));
	outFields->push(HX_("zoomSin",c5,a1,9d,64));
	outFields->push(HX_("daOrder",d1,c3,4e,cf));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StorySprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(StorySprite_obj,tween),HX_("tween",6b,aa,70,19)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(StorySprite_obj,alphatween),HX_("alphatween",4d,8e,e8,a6)},
	{::hx::fsFloat,(int)offsetof(StorySprite_obj,centerx),HX_("centerx",03,f5,e5,19)},
	{::hx::fsFloat,(int)offsetof(StorySprite_obj,centery),HX_("centery",04,f5,e5,19)},
	{::hx::fsBool,(int)offsetof(StorySprite_obj,sinY),HX_("sinY",41,96,53,4c)},
	{::hx::fsFloat,(int)offsetof(StorySprite_obj,sinOff),HX_("sinOff",37,2b,0f,b9)},
	{::hx::fsBool,(int)offsetof(StorySprite_obj,zoomSin),HX_("zoomSin",c5,a1,9d,64)},
	{::hx::fsInt,(int)offsetof(StorySprite_obj,daOrder),HX_("daOrder",d1,c3,4e,cf)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StorySprite_obj_sStaticStorageInfo = 0;
#endif

static ::String StorySprite_obj_sMemberFields[] = {
	HX_("tween",6b,aa,70,19),
	HX_("alphatween",4d,8e,e8,a6),
	HX_("centerx",03,f5,e5,19),
	HX_("centery",04,f5,e5,19),
	HX_("sinY",41,96,53,4c),
	HX_("sinOff",37,2b,0f,b9),
	HX_("zoomSin",c5,a1,9d,64),
	HX_("daOrder",d1,c3,4e,cf),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class StorySprite_obj::__mClass;

void StorySprite_obj::__register()
{
	StorySprite_obj _hx_dummy;
	StorySprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StorySprite",ba,e1,cd,78);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StorySprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StorySprite_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StorySprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StorySprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

