// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_2710e462964f946c
#define INCLUDED_2710e462964f946c
#include "stdlib.h"
#endif
#ifndef INCLUDED_f6e4a6bd16e728f7
#define INCLUDED_f6e4a6bd16e728f7
#include "vlc/vlc.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_MainLoop
#include <haxe/MainLoop.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_hxvlc_openfl_Stats
#include <hxvlc/openfl/Stats.h>
#endif
#ifndef INCLUDED_hxvlc_openfl_Video
#include <hxvlc/openfl/Video.h>
#endif
#ifndef INCLUDED_hxvlc_util_Handle
#include <hxvlc/util/Handle.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Single_Void
#include <lime/app/_Event_Single_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_haxe_Int64_Void
#include <lime/app/_Event_haxe_Int64_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_efae38d9298f0b03_268_new,"hxvlc.openfl.Video","new",0x6c7dbca0,"hxvlc.openfl.Video.new","hxvlc/openfl/Video.hx",268,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_565_load,"hxvlc.openfl.Video","load",0x803c65e6,"hxvlc.openfl.Video.load","hxvlc/openfl/Video.hx",565,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_768_loadFromSubItem,"hxvlc.openfl.Video","loadFromSubItem",0x59b68e23,"hxvlc.openfl.Video.loadFromSubItem","hxvlc/openfl/Video.hx",768,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_820_parseWithOptions,"hxvlc.openfl.Video","parseWithOptions",0x9b519c45,"hxvlc.openfl.Video.parseWithOptions","hxvlc/openfl/Video.hx",820,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_852_parseStop,"hxvlc.openfl.Video","parseStop",0x73c2de15,"hxvlc.openfl.Video.parseStop","hxvlc/openfl/Video.hx",852,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_868_play,"hxvlc.openfl.Video","play",0x82def9b4,"hxvlc.openfl.Video.play","hxvlc/openfl/Video.hx",868,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_876_stop,"hxvlc.openfl.Video","stop",0x84e0bbc2,"hxvlc.openfl.Video.stop","hxvlc/openfl/Video.hx",876,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_885_pause,"hxvlc.openfl.Video","pause",0xf9055336,"hxvlc.openfl.Video.pause","hxvlc/openfl/Video.hx",885,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_894_resume,"hxvlc.openfl.Video","resume",0x04a3a56d,"hxvlc.openfl.Video.resume","hxvlc/openfl/Video.hx",894,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_903_togglePaused,"hxvlc.openfl.Video","togglePaused",0x9574e722,"hxvlc.openfl.Video.togglePaused","hxvlc/openfl/Video.hx",903,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_912_previousChapter,"hxvlc.openfl.Video","previousChapter",0x0ceab856,"hxvlc.openfl.Video.previousChapter","hxvlc/openfl/Video.hx",912,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_921_nextChapter,"hxvlc.openfl.Video","nextChapter",0x2ac29f1a,"hxvlc.openfl.Video.nextChapter","hxvlc/openfl/Video.hx",921,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_932_getMeta,"hxvlc.openfl.Video","getMeta",0xba1106bb,"hxvlc.openfl.Video.getMeta","hxvlc/openfl/Video.hx",932,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_963_setMeta,"hxvlc.openfl.Video","setMeta",0xad1297c7,"hxvlc.openfl.Video.setMeta","hxvlc/openfl/Video.hx",963,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_978_saveMeta,"hxvlc.openfl.Video","saveMeta",0xab489062,"hxvlc.openfl.Video.saveMeta","hxvlc/openfl/Video.hx",978,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_994_dispose,"hxvlc.openfl.Video","dispose",0x5a818cdf,"hxvlc.openfl.Video.dispose","hxvlc/openfl/Video.hx",994,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1085_update,"hxvlc.openfl.Video","update",0x8324c1c9,"hxvlc.openfl.Video.update","hxvlc/openfl/Video.hx",1085,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1215_get_mrl,"hxvlc.openfl.Video","get_mrl",0xc5fcee3e,"hxvlc.openfl.Video.get_mrl","hxvlc/openfl/Video.hx",1215,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1240_get_stats,"hxvlc.openfl.Video","get_stats",0x67756eb6,"hxvlc.openfl.Video.get_stats","hxvlc/openfl/Video.hx",1240,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1259_get_duration,"hxvlc.openfl.Video","get_duration",0xc97e4f1d,"hxvlc.openfl.Video.get_duration","hxvlc/openfl/Video.hx",1259,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1274_get_isPlaying,"hxvlc.openfl.Video","get_isPlaying",0x2b5e1cbb,"hxvlc.openfl.Video.get_isPlaying","hxvlc/openfl/Video.hx",1274,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1280_get_length,"hxvlc.openfl.Video","get_length",0xb857206f,"hxvlc.openfl.Video.get_length","hxvlc/openfl/Video.hx",1280,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1286_get_time,"hxvlc.openfl.Video","get_time",0x7bed3356,"hxvlc.openfl.Video.get_time","hxvlc/openfl/Video.hx",1286,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1291_set_time,"hxvlc.openfl.Video","set_time",0x2a4a8cca,"hxvlc.openfl.Video.set_time","hxvlc/openfl/Video.hx",1291,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1301_get_position,"hxvlc.openfl.Video","get_position",0x7feae072,"hxvlc.openfl.Video.get_position","hxvlc/openfl/Video.hx",1301,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1306_set_position,"hxvlc.openfl.Video","set_position",0x94e403e6,"hxvlc.openfl.Video.set_position","hxvlc/openfl/Video.hx",1306,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1316_get_chapter,"hxvlc.openfl.Video","get_chapter",0xda7387e4,"hxvlc.openfl.Video.get_chapter","hxvlc/openfl/Video.hx",1316,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1321_set_chapter,"hxvlc.openfl.Video","set_chapter",0xe4e08ef0,"hxvlc.openfl.Video.set_chapter","hxvlc/openfl/Video.hx",1321,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1331_get_chapterCount,"hxvlc.openfl.Video","get_chapterCount",0x9952124b,"hxvlc.openfl.Video.get_chapterCount","hxvlc/openfl/Video.hx",1331,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1337_get_willPlay,"hxvlc.openfl.Video","get_willPlay",0xecb5f9ef,"hxvlc.openfl.Video.get_willPlay","hxvlc/openfl/Video.hx",1337,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1343_get_rate,"hxvlc.openfl.Video","get_rate",0x7a94ba29,"hxvlc.openfl.Video.get_rate","hxvlc/openfl/Video.hx",1343,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1348_set_rate,"hxvlc.openfl.Video","set_rate",0x28f2139d,"hxvlc.openfl.Video.set_rate","hxvlc/openfl/Video.hx",1348,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1358_get_isSeekable,"hxvlc.openfl.Video","get_isSeekable",0xd3faa525,"hxvlc.openfl.Video.get_isSeekable","hxvlc/openfl/Video.hx",1358,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1364_get_canPause,"hxvlc.openfl.Video","get_canPause",0xe0db588f,"hxvlc.openfl.Video.get_canPause","hxvlc/openfl/Video.hx",1364,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1369_get_outputModules,"hxvlc.openfl.Video","get_outputModules",0x275434dd,"hxvlc.openfl.Video.get_outputModules","hxvlc/openfl/Video.hx",1369,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1398_set_output,"hxvlc.openfl.Video","set_output",0x294e38fe,"hxvlc.openfl.Video.set_output","hxvlc/openfl/Video.hx",1398,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1408_get_mute,"hxvlc.openfl.Video","get_mute",0x7755d622,"hxvlc.openfl.Video.get_mute","hxvlc/openfl/Video.hx",1408,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1413_set_mute,"hxvlc.openfl.Video","set_mute",0x25b32f96,"hxvlc.openfl.Video.set_mute","hxvlc/openfl/Video.hx",1413,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1423_get_volume,"hxvlc.openfl.Video","get_volume",0x78a2b563,"hxvlc.openfl.Video.get_volume","hxvlc/openfl/Video.hx",1423,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1428_set_volume,"hxvlc.openfl.Video","set_volume",0x7c2053d7,"hxvlc.openfl.Video.set_volume","hxvlc/openfl/Video.hx",1428,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1438_get_trackCount,"hxvlc.openfl.Video","get_trackCount",0x7940124d,"hxvlc.openfl.Video.get_trackCount","hxvlc/openfl/Video.hx",1438,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1444_get_track,"hxvlc.openfl.Video","get_track",0xf9898722,"hxvlc.openfl.Video.get_track","hxvlc/openfl/Video.hx",1444,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1449_set_track,"hxvlc.openfl.Video","set_track",0xdcda732e,"hxvlc.openfl.Video.set_track","hxvlc/openfl/Video.hx",1449,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1459_get_channel,"hxvlc.openfl.Video","get_channel",0xd91c8d1a,"hxvlc.openfl.Video.get_channel","hxvlc/openfl/Video.hx",1459,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1464_set_channel,"hxvlc.openfl.Video","set_channel",0xe3899426,"hxvlc.openfl.Video.set_channel","hxvlc/openfl/Video.hx",1464,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1474_get_delay,"hxvlc.openfl.Video","get_delay",0xba90d01a,"hxvlc.openfl.Video.get_delay","hxvlc/openfl/Video.hx",1474,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1479_set_delay,"hxvlc.openfl.Video","set_delay",0x9de1bc26,"hxvlc.openfl.Video.set_delay","hxvlc/openfl/Video.hx",1479,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1489_get_role,"hxvlc.openfl.Video","get_role",0x7a9f52bf,"hxvlc.openfl.Video.get_role","hxvlc/openfl/Video.hx",1489,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1494_set_role,"hxvlc.openfl.Video","set_role",0x28fcac33,"hxvlc.openfl.Video.set_role","hxvlc/openfl/Video.hx",1494,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1502___enterFrame,"hxvlc.openfl.Video","__enterFrame",0x3aba0ad5,"hxvlc.openfl.Video.__enterFrame","hxvlc/openfl/Video.hx",1502,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1506_set_bitmapData,"hxvlc.openfl.Video","set_bitmapData",0x55372236,"hxvlc.openfl.Video.set_bitmapData","hxvlc/openfl/Video.hx",1506,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1529_videoLock,"hxvlc.openfl.Video","videoLock",0x0d30d246,"hxvlc.openfl.Video.videoLock","hxvlc/openfl/Video.hx",1529,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1543_videoUnlock,"hxvlc.openfl.Video","videoUnlock",0x648465df,"hxvlc.openfl.Video.videoUnlock","hxvlc/openfl/Video.hx",1543,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1550_videoDisplay,"hxvlc.openfl.Video","videoDisplay",0xd51d1ec7,"hxvlc.openfl.Video.videoDisplay","hxvlc/openfl/Video.hx",1550,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1556_videoDisplay,"hxvlc.openfl.Video","videoDisplay",0xd51d1ec7,"hxvlc.openfl.Video.videoDisplay","hxvlc/openfl/Video.hx",1556,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1584_videoFormatSetup,"hxvlc.openfl.Video","videoFormatSetup",0xf7f122cb,"hxvlc.openfl.Video.videoFormatSetup","hxvlc/openfl/Video.hx",1584,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1624_videoFormatSetup,"hxvlc.openfl.Video","videoFormatSetup",0xf7f122cb,"hxvlc.openfl.Video.videoFormatSetup","hxvlc/openfl/Video.hx",1624,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1665_audioPlay,"hxvlc.openfl.Video","audioPlay",0x09d0922a,"hxvlc.openfl.Video.audioPlay","hxvlc/openfl/Video.hx",1665,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1709_audioPause,"hxvlc.openfl.Video","audioPause",0x85792200,"hxvlc.openfl.Video.audioPause","hxvlc/openfl/Video.hx",1709,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1727_audioResume,"hxvlc.openfl.Video","audioResume",0x5d84c763,"hxvlc.openfl.Video.audioResume","hxvlc/openfl/Video.hx",1727,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1763_audioSetup,"hxvlc.openfl.Video","audioSetup",0x4250f987,"hxvlc.openfl.Video.audioSetup","hxvlc/openfl/Video.hx",1763,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_1770_audioSetVolume,"hxvlc.openfl.Video","audioSetVolume",0x7b1f3726,"hxvlc.openfl.Video.audioSetVolume","hxvlc/openfl/Video.hx",1770,0xe78848f0)
HX_LOCAL_STACK_FRAME(_hx_pos_efae38d9298f0b03_275_boot,"hxvlc.openfl.Video","boot",0x79a04ff2,"hxvlc.openfl.Video.boot","hxvlc/openfl/Video.hx",275,0xe78848f0)
namespace hxvlc{
namespace openfl{

static int media_open(void *opaque, void **datap, uint64_t *sizep)
{
	hx::SetTopOfStack((int *)99, true);

	Video_obj *self = reinterpret_cast<Video_obj *>(opaque);

	self->mediaMutex->acquire();

	(*datap) = opaque;
	(*sizep) = self->mediaSize;

	self->mediaMutex->release();

	hx::SetTopOfStack((int *)0, true);

	return 0;
}

static ssize_t media_read(void *opaque, unsigned char *buf, size_t len)
{
	hx::SetTopOfStack((int *)99, true);

	Video_obj *self = reinterpret_cast<Video_obj *>(opaque);

	self->mediaMutex->acquire();

	if (self->mediaOffset >= self->mediaSize)
	{
		self->mediaMutex->release();

		hx::SetTopOfStack((int *)0, true);

		return 0;
	}

	uint64_t toRead = len < (self->mediaSize - self->mediaOffset) ? len : (self->mediaSize - self->mediaOffset);

	if (self->mediaData == NULL || (self->mediaOffset > self->mediaSize - toRead))
	{
		self->mediaMutex->release();

		hx::SetTopOfStack((int *)0, true);

		return -1;
	}

	memcpy(buf, &self->mediaData[self->mediaOffset], (size_t)toRead);

	self->mediaOffset += toRead;

	self->mediaMutex->release();

	hx::SetTopOfStack((int *)0, true);

	return (ssize_t)toRead;
}

static int media_seek(void *opaque, uint64_t offset)
{
	hx::SetTopOfStack((int *)99, true);

	Video_obj *self = reinterpret_cast<Video_obj *>(opaque);

	self->mediaMutex->acquire();

	if (offset > self->mediaSize)
	{
		self->mediaMutex->release();

		hx::SetTopOfStack((int *)0, true);

		return -1;
	}

	self->mediaOffset = offset;

	self->mediaMutex->release();

	hx::SetTopOfStack((int *)0, true);

	return 0;
}

static void *video_lock(void *opaque, void **planes)
{
	hx::SetTopOfStack((int *)99, true);

	void *picture = reinterpret_cast<Video_obj *>(opaque)->videoLock(planes);

	hx::SetTopOfStack((int *)0, true);

	return picture;
}

static void video_unlock(void *opaque, void *picture, void *const *planes)
{
	hx::SetTopOfStack((int *)99, true);

	reinterpret_cast<Video_obj *>(opaque)->videoUnlock(planes);

	hx::SetTopOfStack((int *)0, true);
}

static void video_display(void *opaque, void *picture)
{
	hx::SetTopOfStack((int *)99, true);

	reinterpret_cast<Video_obj *>(opaque)->videoDisplay(picture);

	hx::SetTopOfStack((int *)0, true);
}

static unsigned video_format_setup(void **opaque, char *chroma, unsigned *width, unsigned *height, unsigned *pitches, unsigned *lines)
{
	hx::SetTopOfStack((int *)99, true);

	int pictureBuffers = reinterpret_cast<Video_obj *>(*opaque)->videoFormatSetup(chroma, width, height, pitches, lines);

	hx::SetTopOfStack((int *)0, true);

	return pictureBuffers;
}

static void audio_play(void *data, const void *samples, unsigned count, int64_t pts)
{
	hx::SetTopOfStack((int *)99, true);

	reinterpret_cast<Video_obj *>(data)->audioPlay((unsigned char *)samples, count, pts);

	hx::SetTopOfStack((int *)0, true);
}

static void audio_pause(void *data, int64_t pts)
{
	hx::SetTopOfStack((int *)99, true);

	reinterpret_cast<Video_obj *>(data)->audioPause(pts);

	hx::SetTopOfStack((int *)0, true);
}

static void audio_resume(void *data, int64_t pts)
{
	hx::SetTopOfStack((int *)99, true);

	reinterpret_cast<Video_obj *>(data)->audioResume(pts);

	hx::SetTopOfStack((int *)0, true);
}

static int audio_setup(void **data, char *format, unsigned *rate, unsigned *channels)
{
	hx::SetTopOfStack((int *)99, true);

	int success = reinterpret_cast<Video_obj *>(*data)->audioSetup(format, rate, channels);

	hx::SetTopOfStack((int *)0, true);

	return success;
}

static void audio_set_volume(void *data, float volume, bool mute)
{
	hx::SetTopOfStack((int *)99, true);

	reinterpret_cast<Video_obj *>(data)->audioSetVolume(volume, mute);

	hx::SetTopOfStack((int *)0, true);
}

static void event_manager_callbacks(const libvlc_event_t *p_event, void *p_data)
{
	hx::SetTopOfStack((int *)99, true);

	Video_obj *self = reinterpret_cast<Video_obj *>(p_data);

	self->eventsMutex->acquire();

	switch (p_event->type)
	{
	case libvlc_MediaPlayerOpening:
		self->events[0] = true;
		break;
	case libvlc_MediaPlayerPlaying:
		self->events[1] = true;
		break;
	case libvlc_MediaPlayerStopped:
		self->events[2] = true;
		break;
	case libvlc_MediaPlayerPaused:
		self->events[3] = true;
		break;
	case libvlc_MediaPlayerEndReached:
		self->events[4] = true;
		break;
	case libvlc_MediaPlayerEncounteredError:
		self->events[5] = true;
		break;
	case libvlc_MediaPlayerMediaChanged:
		self->events[6] = true;
		break;
	case libvlc_MediaPlayerCorked:
		self->events[7] = true;
		break;
	case libvlc_MediaPlayerUncorked:
		self->events[8] = true;
		break;
	case libvlc_MediaPlayerTimeChanged:
		self->events[9] = true;
		break;
	case libvlc_MediaPlayerPositionChanged:
		self->events[10] = true;
		break;
	case libvlc_MediaPlayerLengthChanged:
		self->events[11] = true;
		break;
	case libvlc_MediaPlayerChapterChanged:
		self->events[12] = true;
		break;
	case libvlc_MediaMetaChanged:
		self->events[13] = true;
		break;
	case libvlc_MediaParsedChanged:
		self->events[14] = true;
		break;
	}

	self->eventsMutex->release();

	hx::SetTopOfStack((int *)0, true);
}
void Video_obj::__construct(::hx::Null< bool >  __o_smoothing){
            		bool smoothing = __o_smoothing.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_efae38d9298f0b03_268_new)
HXLINE( 514)		this->textureHeight = ( (unsigned int)(0) );
HXLINE( 511)		this->textureWidth = ( (unsigned int)(0) );
HXLINE( 502)		this->mediaOffset = ( (::cpp::UInt64)(0) );
HXLINE( 499)		this->mediaSize = ( (::cpp::UInt64)(0) );
HXLINE( 493)		::Array< bool > _g = ::Array_obj< bool >::__new(0);
HXDLIN( 493)		{
HXLINE( 493)			int _g1 = 0;
HXDLIN( 493)			while((_g1 < 15)){
HXLINE( 493)				_g1 = (_g1 + 1);
HXDLIN( 493)				int i = (_g1 - 1);
HXDLIN( 493)				_g->push(false);
            			}
            		}
HXDLIN( 493)		this->events = _g;
HXLINE( 490)		this->textureMutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
HXLINE( 487)		this->eventsMutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
HXLINE( 479)		this->mediaMutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
HXLINE( 476)		this->onFormatSetup =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 471)		this->onMediaParsedChanged =  ::lime::app::_Event_Int_Void_obj::__alloc( HX_CTX );
HXLINE( 466)		this->onMediaMetaChanged =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 461)		this->onChapterChanged =  ::lime::app::_Event_Int_Void_obj::__alloc( HX_CTX );
HXLINE( 456)		this->onLengthChanged =  ::lime::app::_Event_haxe_Int64_Void_obj::__alloc( HX_CTX );
HXLINE( 451)		this->onPositionChanged =  ::lime::app::_Event_Single_Void_obj::__alloc( HX_CTX );
HXLINE( 446)		this->onTimeChanged =  ::lime::app::_Event_haxe_Int64_Void_obj::__alloc( HX_CTX );
HXLINE( 441)		this->onUncorked =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 436)		this->onCorked =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 431)		this->onMediaChanged =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 426)		this->onEncounteredError =  ::lime::app::_Event_String_Void_obj::__alloc( HX_CTX );
HXLINE( 421)		this->onEndReached =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 416)		this->onPaused =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 411)		this->onStopped =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 406)		this->onPlaying =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 401)		this->onOpening =  ::lime::app::_Event_Void_Void_obj::__alloc( HX_CTX );
HXLINE( 280)		this->forceRendering = false;
HXLINE( 549)		super::__construct(null(),1,smoothing);
HXLINE( 551)		while(::hxvlc::util::Handle_obj::loading){
HXLINE( 552)			::Sys_obj::sleep(((Float)0.05));
            		}
HXLINE( 554)		{
HXLINE( 554)			::Array< ::String > options = null();
HXDLIN( 554)			::hxvlc::util::Handle_obj::initWithRetry(options,false);
            		}
            	}

Dynamic Video_obj::__CreateEmpty() { return new Video_obj; }

void *Video_obj::_hx_vtable = 0;

Dynamic Video_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Video_obj > _hx_result = new Video_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Video_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4cc42801) {
		if (inClassId<=(int)0x0c89e854) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
		} else {
			return inClassId==(int)0x4cc42801;
		}
	} else {
		return inClassId==(int)0x5c91a94e || inClassId==(int)0x6b353933;
	}
}

bool Video_obj::load( ::Dynamic location,::Array< ::String > options){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_565_load)
HXLINE( 566)		if (::hx::IsNull( ::hxvlc::util::Handle_obj::instance )) {
HXLINE( 567)			return false;
            		}
HXLINE( 569)		 libvlc_media_t* mediaItem;
HXLINE( 571)		if (::hx::IsNotNull( location )) {
HXLINE( 573)			if (::Std_obj::isOfType(location,::hx::ClassOf< ::String >())) {
HXLINE( 575)				::String location1 = ::hx::TCast< ::String >::cast(location);
HXLINE( 577)				if ((location1.indexOf(HX_("://",da,2b,2c,00),null()) != -1)) {
HXLINE( 578)					mediaItem = libvlc_media_new_location(::hxvlc::util::Handle_obj::instance,location1.utf8_str());
            				}
            				else {
HXLINE( 579)					if ((location1.length > 0)) {
HXLINE( 581)						 libvlc_instance_t* mediaItem1 = ::hxvlc::util::Handle_obj::instance;
HXDLIN( 581)						mediaItem = libvlc_media_new_path(mediaItem1,::haxe::io::Path_obj::normalize(location1).split(HX_("/",2f,00,00,00))->join(HX_("\\",5c,00,00,00)).utf8_str());
            					}
            					else {
HXLINE( 585)						return false;
            					}
            				}
            			}
            			else {
HXLINE( 587)				if (::Std_obj::isOfType(location,::hx::ClassOf< int >())) {
HXLINE( 589)					mediaItem = libvlc_media_new_fd(::hxvlc::util::Handle_obj::instance,::hx::TCast< int >::cast(location));
            				}
            				else {
HXLINE( 591)					if (::Std_obj::isOfType(location,::hx::ClassOf< ::haxe::io::Bytes >())) {
HXLINE( 593)						::Array< unsigned char > data = ::hx::TCast<  ::haxe::io::Bytes >::cast(location)->b;
HXLINE( 595)						if ((data->length > 0)) {
HXLINE( 597)							this->mediaMutex->acquire();
HXLINE( 599)							this->mediaData = new unsigned char[data->length];
HXLINE( 601)							void* _hx_tmp = ( (void*)(this->mediaData) );
HXDLIN( 601)							memcpy(_hx_tmp,( (const void*)(( (::cpp::Pointer< unsigned char >)(::cpp::Pointer_obj::ofArray(data)) )->get_constRaw()) ),data->length);
HXLINE( 603)							this->mediaSize = ( (::cpp::UInt64)(data->length) );
HXLINE( 604)							this->mediaOffset = ( (::cpp::UInt64)(0) );
HXLINE( 606)							this->mediaMutex->release();
HXLINE( 608)							data->removeRange(0,data->length);
HXLINE( 610)							 libvlc_instance_t* mediaItem2 = ::hxvlc::util::Handle_obj::instance;
HXDLIN( 610)							::cpp::Function< int  (void*,void**,::cpp::UInt64*) > mediaItem3 = media_open;
HXDLIN( 610)							::cpp::Function< ssize_t  (void*,unsigned char*,size_t) > mediaItem4 = media_read;
HXLINE( 611)							::cpp::Function< int  (void*,::cpp::UInt64) > mediaItem5 = media_seek;
HXLINE( 610)							mediaItem = libvlc_media_new_callbacks(mediaItem2,mediaItem3,mediaItem4,mediaItem5,NULL,this);
            						}
            						else {
HXLINE( 614)							return false;
            						}
            					}
            					else {
HXLINE( 617)						return false;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 620)			return false;
            		}
HXLINE( 622)		if (::hx::IsNotNull( ::openfl::Lib_obj::get_application() )) {
HXLINE( 624)			if (!(::openfl::Lib_obj::get_application()->onUpdate->has(this->update_dyn()))) {
HXLINE( 625)				::openfl::Lib_obj::get_application()->onUpdate->add(this->update_dyn(),null(),null());
            			}
            		}
HXLINE( 637)		if (::hx::IsNull( this->mediaPlayer )) {
HXLINE( 639)			this->mediaPlayer = libvlc_media_player_new(::hxvlc::util::Handle_obj::instance);
HXLINE( 641)			if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 643)				 libvlc_event_manager_t* eventManager = libvlc_media_player_event_manager(this->mediaPlayer);
HXLINE( 645)				if (::hx::IsNotNull( eventManager )) {
HXLINE( 647)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp1 = event_manager_callbacks;
HXDLIN( 647)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerOpening,_hx_tmp1,this) != 0)) {
HXLINE( 648)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerOpening)",8d,d2,a9,42),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),648,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 650)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp2 = event_manager_callbacks;
HXDLIN( 650)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerPlaying,_hx_tmp2,this) != 0)) {
HXLINE( 651)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerPlaying)",b7,59,81,91),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),651,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 653)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp3 = event_manager_callbacks;
HXDLIN( 653)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerStopped,_hx_tmp3,this) != 0)) {
HXLINE( 654)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerStopped)",38,e2,c1,f8),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),654,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 656)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp4 = event_manager_callbacks;
HXDLIN( 656)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerPaused,_hx_tmp4,this) != 0)) {
HXLINE( 657)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerPaused)",7f,da,5a,1f),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),657,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 659)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp5 = event_manager_callbacks;
HXDLIN( 659)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerEndReached,_hx_tmp5,this) != 0)) {
HXLINE( 661)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerEndReached)",16,0d,9b,9e),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),661,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 663)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp6 = event_manager_callbacks;
HXDLIN( 663)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerEncounteredError,_hx_tmp6,this) != 0)) {
HXLINE( 665)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerEncounteredError)",97,11,ec,b2),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),665,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 667)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp7 = event_manager_callbacks;
HXDLIN( 667)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerMediaChanged,_hx_tmp7,this) != 0)) {
HXLINE( 669)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerMediaChanged)",7d,57,c4,1e),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),669,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 671)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp8 = event_manager_callbacks;
HXDLIN( 671)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerCorked,_hx_tmp8,this) != 0)) {
HXLINE( 672)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerCorked)",69,6d,45,dc),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),672,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 674)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp9 = event_manager_callbacks;
HXDLIN( 674)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerUncorked,_hx_tmp9,this) != 0)) {
HXLINE( 676)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerUncorked)",30,ad,00,d1),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),676,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 678)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp10 = event_manager_callbacks;
HXDLIN( 678)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerTimeChanged,_hx_tmp10,this) != 0)) {
HXLINE( 680)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerTimeChanged)",9e,f8,df,1c),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),680,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 682)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp11 = event_manager_callbacks;
HXDLIN( 682)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerPositionChanged,_hx_tmp11,this) != 0)) {
HXLINE( 684)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerPositionChanged)",3a,d7,f5,b1),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),684,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 686)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp12 = event_manager_callbacks;
HXDLIN( 686)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerLengthChanged,_hx_tmp12,this) != 0)) {
HXLINE( 688)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerLengthChanged)",77,e9,cc,11),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),688,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
HXLINE( 690)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp13 = event_manager_callbacks;
HXDLIN( 690)					if ((libvlc_event_attach(eventManager,libvlc_MediaPlayerChapterChanged,_hx_tmp13,this) != 0)) {
HXLINE( 692)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaPlayerChapterChanged)",26,98,5f,80),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),692,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            					}
            				}
            				else {
HXLINE( 695)					::lime::utils::Log_obj::warn(HX_("Unable to initialize the LibVLC media player event manager.",99,0b,ac,8a),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),695,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            				}
HXLINE( 697)				 libvlc_media_player_t* _hx_tmp14 = this->mediaPlayer;
HXDLIN( 697)				::cpp::Function< void*  (void*,void**) > _hx_tmp15 = video_lock;
HXDLIN( 697)				::cpp::Function< void  (void*,void*, void *const *) > _hx_tmp16 = video_unlock;
HXDLIN( 697)				::cpp::Function< void  (void*,void*) > _hx_tmp17 = video_display;
HXDLIN( 697)				libvlc_video_set_callbacks(_hx_tmp14,_hx_tmp15,_hx_tmp16,_hx_tmp17,this);
HXLINE( 699)				 libvlc_media_player_t* _hx_tmp18 = this->mediaPlayer;
HXDLIN( 699)				libvlc_video_set_format_callbacks(_hx_tmp18,video_format_setup,NULL);
            			}
            			else {
HXLINE( 734)				::lime::utils::Log_obj::warn(HX_("Unable to initialize the LibVLC media player.",40,46,9a,4f),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),734,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            			}
            		}
HXLINE( 737)		if (::hx::IsNotNull( mediaItem )) {
HXLINE( 739)			if (::hx::IsNotNull( options )) {
HXLINE( 741)				int _g = 0;
HXDLIN( 741)				while((_g < options->length)){
HXLINE( 741)					::String option = options->__get(_g);
HXDLIN( 741)					_g = (_g + 1);
HXLINE( 743)					bool _hx_tmp19;
HXDLIN( 743)					if (::hx::IsNotNull( option )) {
HXLINE( 743)						_hx_tmp19 = (option.length > 0);
            					}
            					else {
HXLINE( 743)						_hx_tmp19 = false;
            					}
HXDLIN( 743)					if (_hx_tmp19) {
HXLINE( 744)						libvlc_media_add_option(mediaItem,option.utf8_str());
            					}
            				}
            			}
HXLINE( 748)			libvlc_media_player_set_media(this->mediaPlayer,mediaItem);
HXLINE( 750)			libvlc_media_release(mediaItem);
HXLINE( 752)			return true;
            		}
            		else {
HXLINE( 755)			::lime::utils::Log_obj::warn(HX_("Unable to initialize the LibVLC media item.",8e,8d,b7,1d),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),755,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("load",26,9a,b7,47)));
            		}
HXLINE( 757)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Video_obj,load,return )

bool Video_obj::loadFromSubItem(int index,::Array< ::String > options){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_768_loadFromSubItem)
HXLINE( 769)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 771)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE( 773)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE( 775)				 libvlc_media_list_t* currentMediaSubItems = libvlc_media_subitems(currentMediaItem);
HXLINE( 777)				if (::hx::IsNotNull( currentMediaSubItems )) {
HXLINE( 779)					int count = libvlc_media_list_count(currentMediaSubItems);
HXLINE( 781)					bool _hx_tmp;
HXDLIN( 781)					if ((index >= 0)) {
HXLINE( 781)						_hx_tmp = (index < count);
            					}
            					else {
HXLINE( 781)						_hx_tmp = false;
            					}
HXDLIN( 781)					if (_hx_tmp) {
HXLINE( 783)						 libvlc_media_t* mediaSubItem = libvlc_media_list_item_at_index(currentMediaSubItems,index);
HXLINE( 785)						if (::hx::IsNotNull( mediaSubItem )) {
HXLINE( 787)							if (::hx::IsNotNull( options )) {
HXLINE( 789)								int _g = 0;
HXDLIN( 789)								while((_g < options->length)){
HXLINE( 789)									::String option = options->__get(_g);
HXDLIN( 789)									_g = (_g + 1);
HXLINE( 791)									bool _hx_tmp1;
HXDLIN( 791)									if (::hx::IsNotNull( option )) {
HXLINE( 791)										_hx_tmp1 = (option.length > 0);
            									}
            									else {
HXLINE( 791)										_hx_tmp1 = false;
            									}
HXDLIN( 791)									if (_hx_tmp1) {
HXLINE( 792)										libvlc_media_add_option(mediaSubItem,option.utf8_str());
            									}
            								}
            							}
HXLINE( 796)							libvlc_media_player_set_media(this->mediaPlayer,mediaSubItem);
HXLINE( 798)							libvlc_media_release(mediaSubItem);
HXLINE( 800)							return true;
            						}
            					}
HXLINE( 804)					libvlc_media_list_release(currentMediaSubItems);
            				}
            			}
            		}
HXLINE( 809)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Video_obj,loadFromSubItem,return )

bool Video_obj::parseWithOptions(int parse_flag,int timeout){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_820_parseWithOptions)
HXLINE( 821)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 823)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE( 825)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE( 827)				 libvlc_event_manager_t* eventManager = libvlc_media_event_manager(currentMediaItem);
HXLINE( 829)				if (::hx::IsNotNull( eventManager )) {
HXLINE( 831)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp = event_manager_callbacks;
HXDLIN( 831)					if ((libvlc_event_attach(eventManager,libvlc_MediaParsedChanged,_hx_tmp,this) != 0)) {
HXLINE( 832)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaParsedChanged)",e1,ae,e0,7c),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),832,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("parseWithOptions",85,30,ea,b8)));
            					}
HXLINE( 834)					::cpp::Function< void  (const  libvlc_event_t*,void*) > _hx_tmp1 = event_manager_callbacks;
HXDLIN( 834)					if ((libvlc_event_attach(eventManager,libvlc_MediaMetaChanged,_hx_tmp1,this) != 0)) {
HXLINE( 835)						::lime::utils::Log_obj::warn(HX_("Failed to attach event (MediaMetaChanged)",15,5c,02,1a),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),835,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("parseWithOptions",85,30,ea,b8)));
            					}
            				}
            				else {
HXLINE( 838)					::lime::utils::Log_obj::warn(HX_("Unable to initialize the LibVLC media event manager.",b4,dd,8f,ca),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),838,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("parseWithOptions",85,30,ea,b8)));
            				}
HXLINE( 840)				return (libvlc_media_parse_with_options(currentMediaItem,( ( libvlc_media_parse_flag_t)(parse_flag) ),timeout) == 0);
            			}
            		}
HXLINE( 844)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Video_obj,parseWithOptions,return )

void Video_obj::parseStop(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_852_parseStop)
HXDLIN( 852)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 854)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE( 856)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE( 857)				libvlc_media_parse_stop(currentMediaItem);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,parseStop,(void))

bool Video_obj::play(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_868_play)
HXDLIN( 868)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN( 868)			return (libvlc_media_player_play(this->mediaPlayer) == 0);
            		}
            		else {
HXDLIN( 868)			return false;
            		}
HXDLIN( 868)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,play,return )

void Video_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_876_stop)
HXDLIN( 876)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 877)			libvlc_media_player_stop(this->mediaPlayer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,stop,(void))

void Video_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_885_pause)
HXDLIN( 885)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 886)			libvlc_media_player_set_pause(this->mediaPlayer,1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,pause,(void))

void Video_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_894_resume)
HXDLIN( 894)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 895)			libvlc_media_player_set_pause(this->mediaPlayer,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,resume,(void))

void Video_obj::togglePaused(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_903_togglePaused)
HXDLIN( 903)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 904)			libvlc_media_player_pause(this->mediaPlayer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,togglePaused,(void))

void Video_obj::previousChapter(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_912_previousChapter)
HXDLIN( 912)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 913)			libvlc_media_player_previous_chapter(this->mediaPlayer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,previousChapter,(void))

void Video_obj::nextChapter(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_921_nextChapter)
HXDLIN( 921)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 922)			libvlc_media_player_next_chapter(this->mediaPlayer);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,nextChapter,(void))

::String Video_obj::getMeta(int e_meta){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_932_getMeta)
HXLINE( 933)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 935)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE( 937)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE( 939)				char* rawMeta = libvlc_media_get_meta(currentMediaItem,( ( libvlc_meta_t)(e_meta) ));
HXLINE( 941)				if (::hx::IsNotNull( rawMeta )) {
HXLINE( 943)					::String metaString = ::String(rawMeta);
HXLINE( 945)					free(rawMeta);
HXLINE( 947)					return metaString;
            				}
            			}
            		}
HXLINE( 952)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,getMeta,return )

void Video_obj::setMeta(int e_meta,::String value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_963_setMeta)
HXDLIN( 963)		bool _hx_tmp;
HXDLIN( 963)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN( 963)			_hx_tmp = ::hx::IsNotNull( value );
            		}
            		else {
HXDLIN( 963)			_hx_tmp = false;
            		}
HXDLIN( 963)		if (_hx_tmp) {
HXLINE( 965)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE( 967)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE( 968)				libvlc_media_set_meta(currentMediaItem,( ( libvlc_meta_t)(e_meta) ),value.utf8_str());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Video_obj,setMeta,(void))

bool Video_obj::saveMeta(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_978_saveMeta)
HXLINE( 979)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 981)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE( 983)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE( 984)				return (libvlc_media_save_meta(currentMediaItem) != 0);
            			}
            		}
HXLINE( 987)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,saveMeta,return )

void Video_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_994_dispose)
HXLINE( 995)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE( 997)			libvlc_media_player_stop(this->mediaPlayer);
HXLINE( 998)			libvlc_media_player_release(this->mediaPlayer);
HXLINE( 999)			this->mediaPlayer = null();
            		}
HXLINE(1002)		if (::hx::IsNotNull( ::openfl::Lib_obj::get_application() )) {
HXLINE(1004)			if (::openfl::Lib_obj::get_application()->onUpdate->has(this->update_dyn())) {
HXLINE(1005)				::openfl::Lib_obj::get_application()->onUpdate->remove(this->update_dyn());
            			}
            		}
HXLINE(1017)		this->mediaMutex->acquire();
HXLINE(1019)		if (::hx::IsNotNull( this->mediaData )) {
HXLINE(1021)			delete[] this->mediaData;
HXLINE(1022)			this->mediaData = null();
            		}
HXLINE(1025)		this->mediaSize = (this->mediaOffset = ( (::cpp::UInt64)(0) ));
HXLINE(1027)		this->mediaMutex->release();
HXLINE(1029)		this->textureMutex->acquire();
HXLINE(1032)		if (::hx::IsNotNull( this->get_bitmapData() )) {
HXLINE(1034)			this->get_bitmapData()->dispose();
HXLINE(1035)			this->set_bitmapData(null());
            		}
HXLINE(1038)		if (::hx::IsNotNull( this->texture )) {
HXLINE(1040)			this->texture->dispose();
HXLINE(1041)			this->texture = null();
            		}
HXLINE(1044)		this->textureWidth = (this->textureHeight = ( (unsigned int)(0) ));
HXLINE(1046)		if (::hx::IsNotNull( this->texturePlanes )) {
HXLINE(1048)			delete[] this->texturePlanes;
HXLINE(1049)			this->texturePlanes = null();
            		}
HXLINE(1052)		this->texturePlanesBuffer = ::Array_obj< unsigned char >::__new(0);
HXLINE(1054)		this->textureMutex->release();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,dispose,(void))

void Video_obj::update(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1085_update)
HXLINE(1086)		this->eventsMutex->acquire();
HXLINE(1088)		if (!(this->events->contains(true))) {
HXLINE(1090)			this->eventsMutex->release();
HXLINE(1091)			return;
            		}
HXLINE(1094)		if (this->events->__get(0)) {
HXLINE(1096)			this->events[0] = false;
HXLINE(1098)			this->onOpening->dispatch();
            		}
HXLINE(1101)		if (this->events->__get(1)) {
HXLINE(1103)			this->events[1] = false;
HXLINE(1105)			this->onPlaying->dispatch();
            		}
HXLINE(1108)		if (this->events->__get(2)) {
HXLINE(1110)			this->events[2] = false;
HXLINE(1112)			this->onStopped->dispatch();
            		}
HXLINE(1115)		if (this->events->__get(3)) {
HXLINE(1117)			this->events[3] = false;
HXLINE(1119)			this->onPaused->dispatch();
            		}
HXLINE(1122)		if (this->events->__get(4)) {
HXLINE(1124)			this->events[4] = false;
HXLINE(1126)			this->onEndReached->dispatch();
            		}
HXLINE(1129)		if (this->events->__get(5)) {
HXLINE(1131)			this->events[5] = false;
HXLINE(1133)			::String errmsg = ::String(libvlc_errmsg());
HXLINE(1135)			bool _hx_tmp;
HXDLIN(1135)			if (::hx::IsNotNull( errmsg )) {
HXLINE(1135)				_hx_tmp = (errmsg.length > 0);
            			}
            			else {
HXLINE(1135)				_hx_tmp = false;
            			}
HXDLIN(1135)			if (_hx_tmp) {
HXLINE(1136)				this->onEncounteredError->dispatch(errmsg);
            			}
            			else {
HXLINE(1138)				this->onEncounteredError->dispatch(HX_("Unknown error",92,0e,0f,10));
            			}
            		}
HXLINE(1141)		if (this->events->__get(6)) {
HXLINE(1143)			this->events[6] = false;
HXLINE(1145)			this->onMediaChanged->dispatch();
            		}
HXLINE(1148)		if (this->events->__get(7)) {
HXLINE(1150)			this->events[7] = false;
HXLINE(1152)			this->onCorked->dispatch();
            		}
HXLINE(1155)		if (this->events->__get(8)) {
HXLINE(1157)			this->events[8] = false;
HXLINE(1159)			this->onUncorked->dispatch();
            		}
HXLINE(1162)		if (this->events->__get(9)) {
HXLINE(1164)			this->events[9] = false;
HXLINE(1166)			 ::lime::app::_Event_haxe_Int64_Void _hx_tmp1 = this->onTimeChanged;
HXDLIN(1166)			_hx_tmp1->dispatch(this->get_time());
            		}
HXLINE(1169)		if (this->events->__get(10)) {
HXLINE(1171)			this->events[10] = false;
HXLINE(1173)			 ::lime::app::_Event_Single_Void _hx_tmp2 = this->onPositionChanged;
HXDLIN(1173)			_hx_tmp2->dispatch(this->get_position());
            		}
HXLINE(1176)		if (this->events->__get(11)) {
HXLINE(1178)			this->events[11] = false;
HXLINE(1180)			 ::lime::app::_Event_haxe_Int64_Void _hx_tmp3 = this->onLengthChanged;
HXDLIN(1180)			_hx_tmp3->dispatch(this->get_length());
            		}
HXLINE(1183)		if (this->events->__get(12)) {
HXLINE(1185)			this->events[12] = false;
HXLINE(1187)			 ::lime::app::_Event_Int_Void _hx_tmp4 = this->onChapterChanged;
HXDLIN(1187)			_hx_tmp4->dispatch(this->get_chapter());
            		}
HXLINE(1190)		if (this->events->__get(13)) {
HXLINE(1192)			this->events[13] = false;
HXLINE(1194)			this->onMediaMetaChanged->dispatch();
            		}
HXLINE(1197)		if (this->events->__get(14)) {
HXLINE(1199)			this->events[14] = false;
HXLINE(1201)			if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1203)				 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE(1205)				if (::hx::IsNotNull( currentMediaItem )) {
HXLINE(1206)					 ::lime::app::_Event_Int_Void _hx_tmp5 = this->onMediaParsedChanged;
HXDLIN(1206)					_hx_tmp5->dispatch(libvlc_media_get_parsed_status(currentMediaItem));
            				}
            			}
            		}
HXLINE(1210)		this->eventsMutex->release();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,update,(void))

::String Video_obj::get_mrl(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1215_get_mrl)
HXLINE(1216)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1218)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE(1220)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE(1222)				char* rawMrl = libvlc_media_get_mrl(currentMediaItem);
HXLINE(1224)				if (::hx::IsNotNull( rawMrl )) {
HXLINE(1226)					::String mrlString = ::String(rawMrl);
HXLINE(1228)					free(rawMrl);
HXLINE(1230)					return mrlString;
            				}
            			}
            		}
HXLINE(1235)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_mrl,return )

 ::hxvlc::openfl::Stats Video_obj::get_stats(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1240_get_stats)
HXLINE(1241)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1243)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE(1245)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE(1247)				 libvlc_media_stats_t currentMediaStats = libvlc_media_stats_t();
HXLINE(1249)				if ((libvlc_media_get_stats(currentMediaItem,&(currentMediaStats)) != 0)) {
HXLINE(1250)					return ::hxvlc::openfl::Stats_obj::fromMediaStats(currentMediaStats);
            				}
            			}
            		}
HXLINE(1254)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_stats,return )

::cpp::Int64 Video_obj::get_duration(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1259_get_duration)
HXLINE(1260)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1262)			 libvlc_media_t* currentMediaItem = libvlc_media_player_get_media(this->mediaPlayer);
HXLINE(1264)			if (::hx::IsNotNull( currentMediaItem )) {
HXLINE(1265)				return ( (::cpp::Int64)(libvlc_media_get_duration(currentMediaItem)) );
            			}
            		}
HXLINE(1268)		return ( (::cpp::Int64)(-1) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_duration,return )

bool Video_obj::get_isPlaying(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1274_get_isPlaying)
HXDLIN(1274)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1274)			return (libvlc_media_player_is_playing(this->mediaPlayer) != 0);
            		}
            		else {
HXDLIN(1274)			return false;
            		}
HXDLIN(1274)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_isPlaying,return )

::cpp::Int64 Video_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1280_get_length)
HXDLIN(1280)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1280)			return ( (::cpp::Int64)(libvlc_media_player_get_length(this->mediaPlayer)) );
            		}
            		else {
HXDLIN(1280)			return ( (::cpp::Int64)(-1) );
            		}
HXDLIN(1280)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_length,return )

::cpp::Int64 Video_obj::get_time(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1286_get_time)
HXDLIN(1286)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1286)			return ( (::cpp::Int64)(libvlc_media_player_get_time(this->mediaPlayer)) );
            		}
            		else {
HXDLIN(1286)			return ( (::cpp::Int64)(-1) );
            		}
HXDLIN(1286)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_time,return )

::cpp::Int64 Video_obj::set_time(::cpp::Int64 value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1291_set_time)
HXLINE(1292)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1293)			libvlc_media_player_set_time(this->mediaPlayer,( (libvlc_time_t)(value) ));
            		}
HXLINE(1295)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_time,return )

float Video_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1301_get_position)
HXDLIN(1301)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1301)			return libvlc_media_player_get_position(this->mediaPlayer);
            		}
            		else {
HXDLIN(1301)			return ( (float)(((Float)-1.0)) );
            		}
HXDLIN(1301)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_position,return )

float Video_obj::set_position(float value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1306_set_position)
HXLINE(1307)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1308)			libvlc_media_player_set_position(this->mediaPlayer,value);
            		}
HXLINE(1310)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_position,return )

int Video_obj::get_chapter(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1316_get_chapter)
HXDLIN(1316)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1316)			return libvlc_media_player_get_chapter(this->mediaPlayer);
            		}
            		else {
HXDLIN(1316)			return -1;
            		}
HXDLIN(1316)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_chapter,return )

int Video_obj::set_chapter(int value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1321_set_chapter)
HXLINE(1322)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1323)			libvlc_media_player_set_chapter(this->mediaPlayer,value);
            		}
HXLINE(1325)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_chapter,return )

int Video_obj::get_chapterCount(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1331_get_chapterCount)
HXDLIN(1331)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1331)			return libvlc_media_player_get_chapter_count(this->mediaPlayer);
            		}
            		else {
HXDLIN(1331)			return -1;
            		}
HXDLIN(1331)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_chapterCount,return )

bool Video_obj::get_willPlay(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1337_get_willPlay)
HXDLIN(1337)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1337)			return (libvlc_media_player_will_play(this->mediaPlayer) != 0);
            		}
            		else {
HXDLIN(1337)			return false;
            		}
HXDLIN(1337)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_willPlay,return )

float Video_obj::get_rate(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1343_get_rate)
HXDLIN(1343)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1343)			return libvlc_media_player_get_rate(this->mediaPlayer);
            		}
            		else {
HXDLIN(1343)			return ( (float)(1) );
            		}
HXDLIN(1343)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_rate,return )

float Video_obj::set_rate(float value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1348_set_rate)
HXLINE(1349)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1350)			libvlc_media_player_set_rate(this->mediaPlayer,value);
            		}
HXLINE(1352)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_rate,return )

bool Video_obj::get_isSeekable(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1358_get_isSeekable)
HXDLIN(1358)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1358)			return (libvlc_media_player_is_seekable(this->mediaPlayer) != 0);
            		}
            		else {
HXDLIN(1358)			return false;
            		}
HXDLIN(1358)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_isSeekable,return )

bool Video_obj::get_canPause(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1364_get_canPause)
HXDLIN(1364)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1364)			return (libvlc_media_player_can_pause(this->mediaPlayer) != 0);
            		}
            		else {
HXDLIN(1364)			return false;
            		}
HXDLIN(1364)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_canPause,return )

::Array< ::Dynamic> Video_obj::get_outputModules(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1369_get_outputModules)
HXLINE(1370)		if (::hx::IsNotNull( ::hxvlc::util::Handle_obj::instance )) {
HXLINE(1372)			 libvlc_audio_output_t* audioOutput = libvlc_audio_output_list_get(::hxvlc::util::Handle_obj::instance);
HXLINE(1374)			if (::hx::IsNotNull( audioOutput )) {
HXLINE(1376)				::Array< ::Dynamic> outputs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1378)				 libvlc_audio_output_t* temp = audioOutput;
HXLINE(1380)				while(::hx::IsNotNull( temp )){
HXLINE(1382)					::String _hx_tmp = ::String(temp[0].psz_name);
HXDLIN(1382)					outputs->push( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("name",4b,72,ff,48),_hx_tmp)
            						->setFixed(1,HX_("description",fc,08,1d,5f),::String(temp[0].psz_description))));
HXLINE(1384)					temp = temp[0].p_next;
            				}
HXLINE(1387)				libvlc_audio_output_list_release(audioOutput);
HXLINE(1389)				return outputs;
            			}
            		}
HXLINE(1393)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_outputModules,return )

::String Video_obj::set_output(::String value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1398_set_output)
HXLINE(1399)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1400)			libvlc_audio_output_set(this->mediaPlayer,value.utf8_str());
            		}
HXLINE(1402)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_output,return )

bool Video_obj::get_mute(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1408_get_mute)
HXDLIN(1408)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1408)			return (libvlc_audio_get_mute(this->mediaPlayer) > 0);
            		}
            		else {
HXDLIN(1408)			return false;
            		}
HXDLIN(1408)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_mute,return )

bool Video_obj::set_mute(bool value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1413_set_mute)
HXLINE(1414)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1415)			int _hx_tmp;
HXDLIN(1415)			if (value) {
HXLINE(1415)				_hx_tmp = 1;
            			}
            			else {
HXLINE(1415)				_hx_tmp = 0;
            			}
HXDLIN(1415)			libvlc_audio_set_mute(this->mediaPlayer,_hx_tmp);
            		}
HXLINE(1417)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_mute,return )

int Video_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1423_get_volume)
HXDLIN(1423)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1423)			return libvlc_audio_get_volume(this->mediaPlayer);
            		}
            		else {
HXDLIN(1423)			return -1;
            		}
HXDLIN(1423)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_volume,return )

int Video_obj::set_volume(int value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1428_set_volume)
HXLINE(1429)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1430)			libvlc_audio_set_volume(this->mediaPlayer,value);
            		}
HXLINE(1432)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_volume,return )

int Video_obj::get_trackCount(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1438_get_trackCount)
HXDLIN(1438)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1438)			return libvlc_audio_get_track_count(this->mediaPlayer);
            		}
            		else {
HXDLIN(1438)			return -1;
            		}
HXDLIN(1438)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_trackCount,return )

int Video_obj::get_track(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1444_get_track)
HXDLIN(1444)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1444)			return libvlc_audio_get_track(this->mediaPlayer);
            		}
            		else {
HXDLIN(1444)			return -1;
            		}
HXDLIN(1444)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_track,return )

int Video_obj::set_track(int value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1449_set_track)
HXLINE(1450)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1451)			libvlc_audio_set_track(this->mediaPlayer,value);
            		}
HXLINE(1453)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_track,return )

int Video_obj::get_channel(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1459_get_channel)
HXDLIN(1459)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1459)			return libvlc_audio_get_channel(this->mediaPlayer);
            		}
            		else {
HXDLIN(1459)			return 0;
            		}
HXDLIN(1459)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_channel,return )

int Video_obj::set_channel(int value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1464_set_channel)
HXLINE(1465)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1466)			libvlc_audio_set_channel(this->mediaPlayer,value);
            		}
HXLINE(1468)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_channel,return )

::cpp::Int64 Video_obj::get_delay(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1474_get_delay)
HXDLIN(1474)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1474)			return libvlc_audio_get_delay(this->mediaPlayer);
            		}
            		else {
HXDLIN(1474)			return ( (::cpp::Int64)(0) );
            		}
HXDLIN(1474)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_delay,return )

::cpp::Int64 Video_obj::set_delay(::cpp::Int64 value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1479_set_delay)
HXLINE(1480)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1481)			libvlc_audio_set_delay(this->mediaPlayer,value);
            		}
HXLINE(1483)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_delay,return )

int Video_obj::get_role(){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1489_get_role)
HXDLIN(1489)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXDLIN(1489)			return libvlc_media_player_get_role(this->mediaPlayer);
            		}
            		else {
HXDLIN(1489)			return 0;
            		}
HXDLIN(1489)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Video_obj,get_role,return )

int Video_obj::set_role(int value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1494_set_role)
HXLINE(1495)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1496)			libvlc_media_player_set_role(this->mediaPlayer,( (unsigned int)(value) ));
            		}
HXLINE(1498)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Video_obj,set_role,return )

void Video_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1502___enterFrame)
            	}


 ::openfl::display::BitmapData Video_obj::set_bitmapData( ::openfl::display::BitmapData value){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1506_set_bitmapData)
HXLINE(1507)		this->_hx___bitmapData = value;
HXLINE(1509)		if (!(this->_hx___renderDirty)) {
HXLINE(1509)			this->_hx___renderDirty = true;
HXDLIN(1509)			this->_hx___setParentRenderDirty();
            		}
HXLINE(1511)		return this->_hx___bitmapData;
            	}


void* Video_obj::videoLock(void** planes){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1529_videoLock)
HXLINE(1530)		this->textureMutex->acquire();
HXLINE(1532)		if (::hx::IsNotNull( this->texturePlanes )) {
HXLINE(1533)			planes[0] = this->texturePlanes;
            		}
HXLINE(1535)		return nullptr;
            	}


void Video_obj::videoUnlock( void *const * planes){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1543_videoUnlock)
HXDLIN(1543)		this->textureMutex->release();
            	}


void Video_obj::videoDisplay(void* picture){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1550_videoDisplay)
HXDLIN(1550)		 ::hxvlc::openfl::Video _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1551)		bool _hx_tmp;
HXDLIN(1551)		bool _hx_tmp1;
HXDLIN(1551)		if (!(this->_hx___renderable)) {
HXLINE(1551)			_hx_tmp1 = this->forceRendering;
            		}
            		else {
HXLINE(1551)			_hx_tmp1 = true;
            		}
HXDLIN(1551)		if (_hx_tmp1) {
HXLINE(1551)			_hx_tmp = ::hx::IsNotNull( this->texturePlanes );
            		}
            		else {
HXLINE(1551)			_hx_tmp = false;
            		}
HXDLIN(1551)		if (_hx_tmp) {
HXLINE(1553)			bool _hx_tmp2;
HXDLIN(1553)			if (::hx::IsNull( this->texture )) {
HXLINE(1553)				if (::hx::IsNotNull( this->get_bitmapData() )) {
HXLINE(1553)					_hx_tmp2 = ::hx::IsNotNull( this->get_bitmapData()->image );
            				}
            				else {
HXLINE(1553)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE(1553)				_hx_tmp2 = true;
            			}
HXDLIN(1553)			if (_hx_tmp2) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hxvlc::openfl::Video,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_efae38d9298f0b03_1556_videoDisplay)
HXLINE(1557)					_gthis->textureMutex->acquire();
HXLINE(1559)					if (::hx::IsNull( _gthis->texturePlanesBuffer )) {
HXLINE(1560)						_gthis->texturePlanesBuffer = ::Array_obj< unsigned char >::__new();
            					}
HXLINE(1562)					::cpp::Pointer< unsigned char > tmp = ( (::cpp::Pointer< unsigned char >)(_gthis->texturePlanes) );
HXDLIN(1562)					_gthis->texturePlanesBuffer->setUnmanagedData(tmp,( (int)(((_gthis->textureWidth * _gthis->textureHeight) * ( (unsigned int)(4) ))) ));
HXLINE(1564)					if (::hx::IsNotNull( _gthis->texture )) {
HXLINE(1565)						 ::openfl::display3D::textures::RectangleTexture _gthis1 = _gthis->texture;
HXDLIN(1565)						 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::ofData(_gthis->texturePlanesBuffer);
HXDLIN(1565)						 ::Dynamic len = null();
HXDLIN(1565)						 ::Dynamic elements = null();
HXDLIN(1565)						::cpp::VirtualArray array = null();
HXDLIN(1565)						 ::openfl::_Vector::IntVector vector = null();
HXDLIN(1565)						 ::lime::utils::ArrayBufferView view = null();
HXDLIN(1565)						 ::Dynamic byteoffset = 0;
HXDLIN(1565)						if (::hx::IsNull( byteoffset )) {
HXLINE(1565)							byteoffset = 0;
            						}
HXDLIN(1565)						 ::lime::utils::ArrayBufferView this1;
HXDLIN(1565)						if (::hx::IsNotNull( elements )) {
HXLINE(1565)							this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,4);
            						}
            						else {
HXLINE(1565)							if (::hx::IsNotNull( array )) {
HXLINE(1565)								 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1565)								_this->byteOffset = 0;
HXDLIN(1565)								_this->length = array->get_length();
HXDLIN(1565)								_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(1565)								_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(1565)								_this->copyFromArray(array,null());
HXDLIN(1565)								this1 = _this;
            							}
            							else {
HXLINE(1565)								if (::hx::IsNotNull( vector )) {
HXLINE(1565)									 ::lime::utils::ArrayBufferView _this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1565)									::cpp::VirtualArray array1 = ( (::cpp::VirtualArray)(vector->__Field(HX_("__array",79,c6,ed,8f),::hx::paccDynamic)) );
HXDLIN(1565)									_this1->byteOffset = 0;
HXDLIN(1565)									_this1->length = array1->get_length();
HXDLIN(1565)									_this1->byteLength = (_this1->length * _this1->bytesPerElement);
HXDLIN(1565)									_this1->buffer = ::haxe::io::Bytes_obj::alloc(_this1->byteLength);
HXDLIN(1565)									_this1->copyFromArray(array1,null());
HXDLIN(1565)									this1 = _this1;
            								}
            								else {
HXLINE(1565)									if (::hx::IsNotNull( view )) {
HXLINE(1565)										 ::lime::utils::ArrayBufferView _this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1565)										 ::haxe::io::Bytes srcData = view->buffer;
HXDLIN(1565)										int srcLength = view->length;
HXDLIN(1565)										int srcByteOffset = view->byteOffset;
HXDLIN(1565)										int srcElementSize = view->bytesPerElement;
HXDLIN(1565)										int elementSize = _this2->bytesPerElement;
HXDLIN(1565)										if ((view->type == _this2->type)) {
HXLINE(1565)											int srcLength1 = srcData->length;
HXDLIN(1565)											int cloneLength = (srcLength1 - srcByteOffset);
HXDLIN(1565)											_this2->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(1565)											_this2->buffer->blit(0,srcData,srcByteOffset,cloneLength);
            										}
            										else {
HXLINE(1565)											HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            										}
HXDLIN(1565)										_this2->byteLength = (_this2->bytesPerElement * srcLength);
HXDLIN(1565)										_this2->byteOffset = 0;
HXDLIN(1565)										_this2->length = srcLength;
HXDLIN(1565)										this1 = _this2;
            									}
            									else {
HXLINE(1565)										if (::hx::IsNotNull( bytes )) {
HXLINE(1565)											 ::lime::utils::ArrayBufferView _this3 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,0,4);
HXDLIN(1565)											int in_byteOffset = ( (int)(byteoffset) );
HXDLIN(1565)											if ((in_byteOffset < 0)) {
HXLINE(1565)												HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            											}
HXDLIN(1565)											if ((::hx::Mod(in_byteOffset,_this3->bytesPerElement) != 0)) {
HXLINE(1565)												HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            											}
HXDLIN(1565)											int bufferByteLength = bytes->length;
HXDLIN(1565)											int elementSize1 = _this3->bytesPerElement;
HXDLIN(1565)											int newByteLength = bufferByteLength;
HXDLIN(1565)											if (::hx::IsNull( len )) {
HXLINE(1565)												newByteLength = (bufferByteLength - in_byteOffset);
HXDLIN(1565)												if ((::hx::Mod(bufferByteLength,_this3->bytesPerElement) != 0)) {
HXLINE(1565)													HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            												}
HXDLIN(1565)												if ((newByteLength < 0)) {
HXLINE(1565)													HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            												}
            											}
            											else {
HXLINE(1565)												newByteLength = (( (int)(len) ) * _this3->bytesPerElement);
HXDLIN(1565)												int newRange = (in_byteOffset + newByteLength);
HXDLIN(1565)												if ((newRange > bufferByteLength)) {
HXLINE(1565)													HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            												}
            											}
HXDLIN(1565)											_this3->buffer = bytes;
HXDLIN(1565)											_this3->byteOffset = in_byteOffset;
HXDLIN(1565)											_this3->byteLength = newByteLength;
HXDLIN(1565)											_this3->length = ::Std_obj::_hx_int((( (Float)(newByteLength) ) / ( (Float)(_this3->bytesPerElement) )));
HXDLIN(1565)											this1 = _this3;
            										}
            										else {
HXLINE(1565)											HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            										}
            									}
            								}
            							}
            						}
HXDLIN(1565)						_gthis1->uploadFromTypedArray(this1);
            					}
            					else {
HXLINE(1566)						bool _hx_tmp;
HXDLIN(1566)						if (::hx::IsNotNull( _gthis->get_bitmapData() )) {
HXLINE(1566)							_hx_tmp = ::hx::IsNotNull( _gthis->get_bitmapData()->image );
            						}
            						else {
HXLINE(1566)							_hx_tmp = false;
            						}
HXDLIN(1566)						if (_hx_tmp) {
HXLINE(1567)							 ::openfl::display::BitmapData _hx_tmp1 = _gthis->get_bitmapData();
HXDLIN(1567)							 ::openfl::geom::Rectangle _hx_tmp2 = _gthis->get_bitmapData()->rect;
HXDLIN(1567)							_hx_tmp1->setPixels(_hx_tmp2,::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(::haxe::io::Bytes_obj::ofData(_gthis->texturePlanesBuffer)));
            						}
            					}
HXLINE(1569)					if (_gthis->_hx___renderable) {
HXLINE(1570)						if (!(_gthis->_hx___renderDirty)) {
HXLINE(1570)							_gthis->_hx___renderDirty = true;
HXDLIN(1570)							_gthis->_hx___setParentRenderDirty();
            						}
            					}
HXLINE(1572)					_gthis->textureMutex->release();
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(1555)				::haxe::MainLoop_obj::runInMainThread( ::Dynamic(new _hx_Closure_0(_gthis)));
            			}
            		}
            	}


int Video_obj::videoFormatSetup(char* chroma,unsigned int* width,unsigned int* height,unsigned int* pitches,unsigned int* lines){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1584_videoFormatSetup)
HXDLIN(1584)		 ::hxvlc::openfl::Video _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1585)		memcpy(( (void*)(chroma) ),( (const void*)(( (char*)(HX_("RV32",63,ed,74,36).utf8_str()) )) ),4);
HXLINE(1587)		unsigned int originalWidth = width[0];
HXLINE(1588)		unsigned int originalHeight = height[0];
HXLINE(1590)		this->textureMutex->acquire();
HXLINE(1592)		bool _hx_tmp;
HXDLIN(1592)		if (::hx::IsNotNull( this->mediaPlayer )) {
HXLINE(1593)			 libvlc_media_player_t* _hx_tmp1 = this->mediaPlayer;
HXDLIN(1593)			unsigned int* _hx_tmp2 = &(this->textureWidth);
HXLINE(1592)			_hx_tmp = (libvlc_video_get_size(_hx_tmp1,( (unsigned int)(0) ),_hx_tmp2,&(this->textureHeight)) == 0);
            		}
            		else {
HXLINE(1592)			_hx_tmp = false;
            		}
HXDLIN(1592)		if (_hx_tmp) {
HXLINE(1595)			width[0] = this->textureWidth;
HXLINE(1596)			height[0] = this->textureHeight;
HXLINE(1598)			bool _hx_tmp3;
HXDLIN(1598)			if (::hx::IsNotNull( this->texturePlanes )) {
HXLINE(1598)				if ((originalWidth == this->textureWidth)) {
HXLINE(1598)					_hx_tmp3 = (originalHeight != this->textureHeight);
            				}
            				else {
HXLINE(1598)					_hx_tmp3 = true;
            				}
            			}
            			else {
HXLINE(1598)				_hx_tmp3 = true;
            			}
HXDLIN(1598)			if (_hx_tmp3) {
HXLINE(1600)				if (::hx::IsNotNull( this->texturePlanes )) {
HXLINE(1601)					delete[] this->texturePlanes;
            				}
HXLINE(1603)				this->texturePlanes = new unsigned char[((this->textureWidth * this->textureHeight) * ( (unsigned int)(4) ))];
            			}
            		}
            		else {
HXLINE(1608)			this->textureWidth = originalWidth;
HXLINE(1609)			this->textureHeight = originalHeight;
HXLINE(1611)			if (::hx::IsNotNull( this->texturePlanes )) {
HXLINE(1612)				delete[] this->texturePlanes;
            			}
HXLINE(1614)			this->texturePlanes = new unsigned char[((this->textureWidth * this->textureHeight) * ( (unsigned int)(4) ))];
            		}
HXLINE(1617)		this->textureMutex->release();
HXLINE(1619)		bool _hx_tmp4;
HXDLIN(1619)		bool _hx_tmp5;
HXDLIN(1619)		if (::hx::IsNotNull( this->get_bitmapData() )) {
HXLINE(1620)			if ((this->get_bitmapData()->width == this->textureWidth)) {
HXLINE(1619)				_hx_tmp5 = (this->get_bitmapData()->height != this->textureHeight);
            			}
            			else {
HXLINE(1619)				_hx_tmp5 = true;
            			}
            		}
            		else {
HXLINE(1619)			_hx_tmp5 = true;
            		}
HXDLIN(1619)		if (!(_hx_tmp5)) {
HXLINE(1621)			bool _hx_tmp6;
HXDLIN(1621)			if (!(::hxvlc::openfl::Video_obj::useTexture)) {
HXLINE(1621)				_hx_tmp6 = ::hx::IsNotNull( this->get_bitmapData()->_hx___texture );
            			}
            			else {
HXLINE(1621)				_hx_tmp6 = false;
            			}
HXDLIN(1621)			if (!(_hx_tmp6)) {
HXLINE(1621)				if (::hxvlc::openfl::Video_obj::useTexture) {
HXLINE(1619)					_hx_tmp4 = ::hx::IsNotNull( this->get_bitmapData()->image );
            				}
            				else {
HXLINE(1619)					_hx_tmp4 = false;
            				}
            			}
            			else {
HXLINE(1619)				_hx_tmp4 = true;
            			}
            		}
            		else {
HXLINE(1619)			_hx_tmp4 = true;
            		}
HXDLIN(1619)		if (_hx_tmp4) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hxvlc::openfl::Video,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_efae38d9298f0b03_1624_videoFormatSetup)
HXLINE(1625)				_gthis->textureMutex->acquire();
HXLINE(1627)				if (::hx::IsNotNull( _gthis->get_bitmapData() )) {
HXLINE(1628)					_gthis->get_bitmapData()->dispose();
            				}
HXLINE(1630)				if (::hx::IsNotNull( _gthis->texture )) {
HXLINE(1632)					_gthis->texture->dispose();
HXLINE(1633)					_gthis->texture = null();
            				}
HXLINE(1636)				bool _hx_tmp;
HXDLIN(1636)				bool _hx_tmp1;
HXDLIN(1636)				if (::hxvlc::openfl::Video_obj::useTexture) {
HXLINE(1636)					_hx_tmp1 = ::hx::IsNotNull( ::openfl::Lib_obj::get_current()->stage );
            				}
            				else {
HXLINE(1636)					_hx_tmp1 = false;
            				}
HXDLIN(1636)				if (_hx_tmp1) {
HXLINE(1636)					_hx_tmp = ::hx::IsNotNull( ::openfl::Lib_obj::get_current()->stage->context3D );
            				}
            				else {
HXLINE(1636)					_hx_tmp = false;
            				}
HXDLIN(1636)				if (_hx_tmp) {
HXLINE(1638)					_gthis->texture = ::openfl::Lib_obj::get_current()->stage->context3D->createRectangleTexture(( (int)(_gthis->textureWidth) ),( (int)(_gthis->textureHeight) ),1,true);
HXLINE(1639)					 ::hxvlc::openfl::Video _gthis1 = _gthis;
HXDLIN(1639)					_gthis1->set_bitmapData(::openfl::display::BitmapData_obj::fromTexture(_gthis->texture));
            				}
            				else {
HXLINE(1643)					if (::hxvlc::openfl::Video_obj::useTexture) {
HXLINE(1644)						::lime::utils::Log_obj::warn(HX_("Unable to utilize GPU texture, resorting to CPU-based image rendering.",7a,93,87,95),::hx::SourceInfo(HX_("hxvlc/openfl/Video.hx",f0,48,88,e7),1644,HX_("hxvlc.openfl.Video",ae,2c,03,3f),HX_("videoFormatSetup",0b,b7,89,15)));
            					}
HXLINE(1646)					 ::hxvlc::openfl::Video _gthis2 = _gthis;
HXDLIN(1646)					_gthis2->set_bitmapData( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,( (int)(_gthis->textureWidth) ),( (int)(_gthis->textureHeight) ),true,0));
            				}
HXLINE(1649)				_gthis->onFormatSetup->dispatch();
HXLINE(1651)				_gthis->textureMutex->release();
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE(1623)			::haxe::MainLoop_obj::runInMainThread( ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
HXLINE(1655)		pitches[0] = (this->textureWidth * ( (unsigned int)(4) ));
HXLINE(1656)		lines[0] = this->textureHeight;
HXLINE(1658)		return 1;
            	}


void Video_obj::audioPlay(unsigned char* samples,unsigned int count,::cpp::Int64 pts){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1665_audioPlay)
            	}


void Video_obj::audioPause(::cpp::Int64 pts){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1709_audioPause)
            	}


void Video_obj::audioResume(::cpp::Int64 pts){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1727_audioResume)
            	}


int Video_obj::audioSetup(char* format,unsigned int* rate,unsigned int* channels){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1763_audioSetup)
HXDLIN(1763)		return 0;
            	}


void Video_obj::audioSetVolume(float volume,bool mute){
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_1770_audioSetVolume)
            	}


bool Video_obj::useTexture;


::hx::ObjectPtr< Video_obj > Video_obj::__new(::hx::Null< bool >  __o_smoothing) {
	::hx::ObjectPtr< Video_obj > __this = new Video_obj();
	__this->__construct(__o_smoothing);
	return __this;
}

::hx::ObjectPtr< Video_obj > Video_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_smoothing) {
	Video_obj *__this = (Video_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Video_obj), true, "hxvlc.openfl.Video"));
	*(void **)__this = Video_obj::_hx_vtable;
	__this->__construct(__o_smoothing);
	return __this;
}

Video_obj::Video_obj()
{
}

void Video_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Video);
	HX_MARK_MEMBER_NAME(forceRendering,"forceRendering");
	HX_MARK_MEMBER_NAME(onOpening,"onOpening");
	HX_MARK_MEMBER_NAME(onPlaying,"onPlaying");
	HX_MARK_MEMBER_NAME(onStopped,"onStopped");
	HX_MARK_MEMBER_NAME(onPaused,"onPaused");
	HX_MARK_MEMBER_NAME(onEndReached,"onEndReached");
	HX_MARK_MEMBER_NAME(onEncounteredError,"onEncounteredError");
	HX_MARK_MEMBER_NAME(onMediaChanged,"onMediaChanged");
	HX_MARK_MEMBER_NAME(onCorked,"onCorked");
	HX_MARK_MEMBER_NAME(onUncorked,"onUncorked");
	HX_MARK_MEMBER_NAME(onTimeChanged,"onTimeChanged");
	HX_MARK_MEMBER_NAME(onPositionChanged,"onPositionChanged");
	HX_MARK_MEMBER_NAME(onLengthChanged,"onLengthChanged");
	HX_MARK_MEMBER_NAME(onChapterChanged,"onChapterChanged");
	HX_MARK_MEMBER_NAME(onMediaMetaChanged,"onMediaMetaChanged");
	HX_MARK_MEMBER_NAME(onMediaParsedChanged,"onMediaParsedChanged");
	HX_MARK_MEMBER_NAME(onFormatSetup,"onFormatSetup");
	HX_MARK_MEMBER_NAME(mediaMutex,"mediaMutex");
	HX_MARK_MEMBER_NAME(eventsMutex,"eventsMutex");
	HX_MARK_MEMBER_NAME(textureMutex,"textureMutex");
	HX_MARK_MEMBER_NAME(events,"events");
	HX_MARK_MEMBER_NAME(mediaData,"mediaData");
	HX_MARK_MEMBER_NAME(mediaSize,"mediaSize");
	HX_MARK_MEMBER_NAME(mediaOffset,"mediaOffset");
	HX_MARK_MEMBER_NAME(mediaPlayer,"mediaPlayer");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(textureWidth,"textureWidth");
	HX_MARK_MEMBER_NAME(textureHeight,"textureHeight");
	HX_MARK_MEMBER_NAME(texturePlanes,"texturePlanes");
	HX_MARK_MEMBER_NAME(texturePlanesBuffer,"texturePlanesBuffer");
	 ::openfl::display::Bitmap_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Video_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(forceRendering,"forceRendering");
	HX_VISIT_MEMBER_NAME(onOpening,"onOpening");
	HX_VISIT_MEMBER_NAME(onPlaying,"onPlaying");
	HX_VISIT_MEMBER_NAME(onStopped,"onStopped");
	HX_VISIT_MEMBER_NAME(onPaused,"onPaused");
	HX_VISIT_MEMBER_NAME(onEndReached,"onEndReached");
	HX_VISIT_MEMBER_NAME(onEncounteredError,"onEncounteredError");
	HX_VISIT_MEMBER_NAME(onMediaChanged,"onMediaChanged");
	HX_VISIT_MEMBER_NAME(onCorked,"onCorked");
	HX_VISIT_MEMBER_NAME(onUncorked,"onUncorked");
	HX_VISIT_MEMBER_NAME(onTimeChanged,"onTimeChanged");
	HX_VISIT_MEMBER_NAME(onPositionChanged,"onPositionChanged");
	HX_VISIT_MEMBER_NAME(onLengthChanged,"onLengthChanged");
	HX_VISIT_MEMBER_NAME(onChapterChanged,"onChapterChanged");
	HX_VISIT_MEMBER_NAME(onMediaMetaChanged,"onMediaMetaChanged");
	HX_VISIT_MEMBER_NAME(onMediaParsedChanged,"onMediaParsedChanged");
	HX_VISIT_MEMBER_NAME(onFormatSetup,"onFormatSetup");
	HX_VISIT_MEMBER_NAME(mediaMutex,"mediaMutex");
	HX_VISIT_MEMBER_NAME(eventsMutex,"eventsMutex");
	HX_VISIT_MEMBER_NAME(textureMutex,"textureMutex");
	HX_VISIT_MEMBER_NAME(events,"events");
	HX_VISIT_MEMBER_NAME(mediaData,"mediaData");
	HX_VISIT_MEMBER_NAME(mediaSize,"mediaSize");
	HX_VISIT_MEMBER_NAME(mediaOffset,"mediaOffset");
	HX_VISIT_MEMBER_NAME(mediaPlayer,"mediaPlayer");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(textureWidth,"textureWidth");
	HX_VISIT_MEMBER_NAME(textureHeight,"textureHeight");
	HX_VISIT_MEMBER_NAME(texturePlanes,"texturePlanes");
	HX_VISIT_MEMBER_NAME(texturePlanesBuffer,"texturePlanesBuffer");
	 ::openfl::display::Bitmap_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Video_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mrl") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_mrl() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_time() ); }
		if (HX_FIELD_EQ(inName,"rate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_rate() ); }
		if (HX_FIELD_EQ(inName,"mute") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_mute() ); }
		if (HX_FIELD_EQ(inName,"role") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_role() ); }
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stats") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_stats() ); }
		if (HX_FIELD_EQ(inName,"track") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_track() ); }
		if (HX_FIELD_EQ(inName,"delay") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_delay() ); }
		if (HX_FIELD_EQ(inName,"pause") ) { return ::hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_volume() ); }
		if (HX_FIELD_EQ(inName,"events") ) { return ::hx::Val( events ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return ::hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"chapter") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_chapter() ); }
		if (HX_FIELD_EQ(inName,"channel") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_channel() ); }
		if (HX_FIELD_EQ(inName,"texture") ) { return ::hx::Val( texture ); }
		if (HX_FIELD_EQ(inName,"getMeta") ) { return ::hx::Val( getMeta_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMeta") ) { return ::hx::Val( setMeta_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mrl") ) { return ::hx::Val( get_mrl_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_duration() ); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_position() ); }
		if (HX_FIELD_EQ(inName,"willPlay") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_willPlay() ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_canPause() ); }
		if (HX_FIELD_EQ(inName,"onPaused") ) { return ::hx::Val( onPaused ); }
		if (HX_FIELD_EQ(inName,"onCorked") ) { return ::hx::Val( onCorked ); }
		if (HX_FIELD_EQ(inName,"saveMeta") ) { return ::hx::Val( saveMeta_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_time") ) { return ::hx::Val( get_time_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_time") ) { return ::hx::Val( set_time_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_rate") ) { return ::hx::Val( get_rate_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_rate") ) { return ::hx::Val( set_rate_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_mute") ) { return ::hx::Val( get_mute_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mute") ) { return ::hx::Val( set_mute_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_role") ) { return ::hx::Val( get_role_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_role") ) { return ::hx::Val( set_role_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isPlaying") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isPlaying() ); }
		if (HX_FIELD_EQ(inName,"onOpening") ) { return ::hx::Val( onOpening ); }
		if (HX_FIELD_EQ(inName,"onPlaying") ) { return ::hx::Val( onPlaying ); }
		if (HX_FIELD_EQ(inName,"onStopped") ) { return ::hx::Val( onStopped ); }
		if (HX_FIELD_EQ(inName,"mediaSize") ) { return ::hx::Val( mediaSize ); }
		if (HX_FIELD_EQ(inName,"parseStop") ) { return ::hx::Val( parseStop_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_stats") ) { return ::hx::Val( get_stats_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_track") ) { return ::hx::Val( get_track_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_track") ) { return ::hx::Val( set_track_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_delay") ) { return ::hx::Val( get_delay_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_delay") ) { return ::hx::Val( set_delay_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isSeekable") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_isSeekable() ); }
		if (HX_FIELD_EQ(inName,"trackCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_trackCount() ); }
		if (HX_FIELD_EQ(inName,"onUncorked") ) { return ::hx::Val( onUncorked ); }
		if (HX_FIELD_EQ(inName,"mediaMutex") ) { return ::hx::Val( mediaMutex ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_output") ) { return ::hx::Val( set_output_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return ::hx::Val( get_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return ::hx::Val( set_volume_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventsMutex") ) { return ::hx::Val( eventsMutex ); }
		if (HX_FIELD_EQ(inName,"mediaOffset") ) { return ::hx::Val( mediaOffset ); }
		if (HX_FIELD_EQ(inName,"nextChapter") ) { return ::hx::Val( nextChapter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_chapter") ) { return ::hx::Val( get_chapter_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_chapter") ) { return ::hx::Val( set_chapter_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_channel") ) { return ::hx::Val( get_channel_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_channel") ) { return ::hx::Val( set_channel_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"chapterCount") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_chapterCount() ); }
		if (HX_FIELD_EQ(inName,"onEndReached") ) { return ::hx::Val( onEndReached ); }
		if (HX_FIELD_EQ(inName,"textureMutex") ) { return ::hx::Val( textureMutex ); }
		if (HX_FIELD_EQ(inName,"textureWidth") ) { return ::hx::Val( textureWidth ); }
		if (HX_FIELD_EQ(inName,"togglePaused") ) { return ::hx::Val( togglePaused_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_duration") ) { return ::hx::Val( get_duration_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return ::hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return ::hx::Val( set_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_willPlay") ) { return ::hx::Val( get_willPlay_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_canPause") ) { return ::hx::Val( get_canPause_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"outputModules") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_outputModules() ); }
		if (HX_FIELD_EQ(inName,"onTimeChanged") ) { return ::hx::Val( onTimeChanged ); }
		if (HX_FIELD_EQ(inName,"onFormatSetup") ) { return ::hx::Val( onFormatSetup ); }
		if (HX_FIELD_EQ(inName,"textureHeight") ) { return ::hx::Val( textureHeight ); }
		if (HX_FIELD_EQ(inName,"get_isPlaying") ) { return ::hx::Val( get_isPlaying_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"forceRendering") ) { return ::hx::Val( forceRendering ); }
		if (HX_FIELD_EQ(inName,"onMediaChanged") ) { return ::hx::Val( onMediaChanged ); }
		if (HX_FIELD_EQ(inName,"get_isSeekable") ) { return ::hx::Val( get_isSeekable_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_trackCount") ) { return ::hx::Val( get_trackCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bitmapData") ) { return ::hx::Val( set_bitmapData_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onLengthChanged") ) { return ::hx::Val( onLengthChanged ); }
		if (HX_FIELD_EQ(inName,"loadFromSubItem") ) { return ::hx::Val( loadFromSubItem_dyn() ); }
		if (HX_FIELD_EQ(inName,"previousChapter") ) { return ::hx::Val( previousChapter_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onChapterChanged") ) { return ::hx::Val( onChapterChanged ); }
		if (HX_FIELD_EQ(inName,"parseWithOptions") ) { return ::hx::Val( parseWithOptions_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_chapterCount") ) { return ::hx::Val( get_chapterCount_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onPositionChanged") ) { return ::hx::Val( onPositionChanged ); }
		if (HX_FIELD_EQ(inName,"get_outputModules") ) { return ::hx::Val( get_outputModules_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onEncounteredError") ) { return ::hx::Val( onEncounteredError ); }
		if (HX_FIELD_EQ(inName,"onMediaMetaChanged") ) { return ::hx::Val( onMediaMetaChanged ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"texturePlanesBuffer") ) { return ::hx::Val( texturePlanesBuffer ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onMediaParsedChanged") ) { return ::hx::Val( onMediaParsedChanged ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Video_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"useTexture") ) { outValue = ( useTexture ); return true; }
	}
	return false;
}

::hx::Val Video_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_time(inValue.Cast< ::cpp::Int64 >()) ); }
		if (HX_FIELD_EQ(inName,"rate") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_rate(inValue.Cast< float >()) ); }
		if (HX_FIELD_EQ(inName,"mute") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_mute(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"role") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_role(inValue.Cast< int >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"track") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_track(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"delay") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_delay(inValue.Cast< ::cpp::Int64 >()) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_output(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_volume(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"events") ) { events=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"chapter") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_chapter(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"channel") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_channel(inValue.Cast< int >()) ); }
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::openfl::display3D::textures::RectangleTexture >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_position(inValue.Cast< float >()) ); }
		if (HX_FIELD_EQ(inName,"onPaused") ) { onPaused=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onCorked") ) { onCorked=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onOpening") ) { onOpening=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onPlaying") ) { onPlaying=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onStopped") ) { onStopped=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mediaSize") ) { mediaSize=inValue.Cast< ::cpp::UInt64 >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onUncorked") ) { onUncorked=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mediaMutex") ) { mediaMutex=inValue.Cast<  ::sys::thread::Mutex >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventsMutex") ) { eventsMutex=inValue.Cast<  ::sys::thread::Mutex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mediaOffset") ) { mediaOffset=inValue.Cast< ::cpp::UInt64 >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"onEndReached") ) { onEndReached=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureMutex") ) { textureMutex=inValue.Cast<  ::sys::thread::Mutex >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureWidth") ) { textureWidth=inValue.Cast< unsigned int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onTimeChanged") ) { onTimeChanged=inValue.Cast<  ::lime::app::_Event_haxe_Int64_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onFormatSetup") ) { onFormatSetup=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureHeight") ) { textureHeight=inValue.Cast< unsigned int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"forceRendering") ) { forceRendering=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onMediaChanged") ) { onMediaChanged=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onLengthChanged") ) { onLengthChanged=inValue.Cast<  ::lime::app::_Event_haxe_Int64_Void >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"onChapterChanged") ) { onChapterChanged=inValue.Cast<  ::lime::app::_Event_Int_Void >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"onPositionChanged") ) { onPositionChanged=inValue.Cast<  ::lime::app::_Event_Single_Void >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"onEncounteredError") ) { onEncounteredError=inValue.Cast<  ::lime::app::_Event_String_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onMediaMetaChanged") ) { onMediaMetaChanged=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"texturePlanesBuffer") ) { texturePlanesBuffer=inValue.Cast< ::Array< unsigned char > >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"onMediaParsedChanged") ) { onMediaParsedChanged=inValue.Cast<  ::lime::app::_Event_Int_Void >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Video_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"useTexture") ) { useTexture=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Video_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("forceRendering",e1,f3,6f,39));
	outFields->push(HX_("mrl",67,19,53,00));
	outFields->push(HX_("stats",1f,76,0b,84));
	outFields->push(HX_("duration",54,0f,8e,14));
	outFields->push(HX_("isPlaying",a4,8c,16,8e));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("time",0d,cc,fc,4c));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("chapter",8d,fb,28,ce));
	outFields->push(HX_("chapterCount",02,ba,4b,b2));
	outFields->push(HX_("willPlay",26,ba,c5,37));
	outFields->push(HX_("rate",e0,52,a4,4b));
	outFields->push(HX_("isSeekable",1c,21,a4,d2));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("outputModules",46,4d,cd,e8));
	outFields->push(HX_("output",01,0f,81,0c));
	outFields->push(HX_("mute",d9,6e,65,48));
	outFields->push(HX_("volume",da,29,53,5f));
	outFields->push(HX_("trackCount",44,8e,e9,77));
	outFields->push(HX_("track",8b,8e,1f,16));
	outFields->push(HX_("channel",c3,00,d2,cc));
	outFields->push(HX_("delay",83,d7,26,d7));
	outFields->push(HX_("role",76,eb,ae,4b));
	outFields->push(HX_("onOpening",f9,bb,ef,17));
	outFields->push(HX_("onPlaying",0f,c8,c2,61));
	outFields->push(HX_("onStopped",ae,8a,0c,1b));
	outFields->push(HX_("onPaused",2d,37,31,cf));
	outFields->push(HX_("onEndReached",f6,c1,9d,80));
	outFields->push(HX_("onEncounteredError",d5,1c,32,23));
	outFields->push(HX_("onMediaChanged",2f,58,87,e8));
	outFields->push(HX_("onCorked",83,ef,27,aa));
	outFields->push(HX_("onUncorked",5c,fc,78,aa));
	outFields->push(HX_("onTimeChanged",88,75,0c,a2));
	outFields->push(HX_("onPositionChanged",ec,50,fa,8a));
	outFields->push(HX_("onLengthChanged",0f,b4,c7,0e));
	outFields->push(HX_("onChapterChanged",66,26,f9,63));
	outFields->push(HX_("onMediaMetaChanged",6a,01,f2,fb));
	outFields->push(HX_("onMediaParsedChanged",9e,2d,74,16));
	outFields->push(HX_("onFormatSetup",e7,24,33,96));
	outFields->push(HX_("mediaMutex",fb,bf,1c,eb));
	outFields->push(HX_("eventsMutex",a6,55,4c,bd));
	outFields->push(HX_("textureMutex",a4,3c,fb,08));
	outFields->push(HX_("events",19,4f,6a,96));
	outFields->push(HX_("mediaData",2e,c9,a6,a2));
	outFields->push(HX_("mediaSize",c5,13,97,ac));
	outFields->push(HX_("mediaOffset",97,d3,88,ee));
	outFields->push(HX_("mediaPlayer",65,27,02,c6));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("textureWidth",2b,63,02,c3));
	outFields->push(HX_("textureHeight",22,db,63,95));
	outFields->push(HX_("texturePlanes",d2,65,c8,ca));
	outFields->push(HX_("texturePlanesBuffer",72,c0,66,2a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Video_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Video_obj,forceRendering),HX_("forceRendering",e1,f3,6f,39)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onOpening),HX_("onOpening",f9,bb,ef,17)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onPlaying),HX_("onPlaying",0f,c8,c2,61)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onStopped),HX_("onStopped",ae,8a,0c,1b)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onPaused),HX_("onPaused",2d,37,31,cf)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onEndReached),HX_("onEndReached",f6,c1,9d,80)},
	{::hx::fsObject /*  ::lime::app::_Event_String_Void */ ,(int)offsetof(Video_obj,onEncounteredError),HX_("onEncounteredError",d5,1c,32,23)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onMediaChanged),HX_("onMediaChanged",2f,58,87,e8)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onCorked),HX_("onCorked",83,ef,27,aa)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onUncorked),HX_("onUncorked",5c,fc,78,aa)},
	{::hx::fsObject /*  ::lime::app::_Event_haxe_Int64_Void */ ,(int)offsetof(Video_obj,onTimeChanged),HX_("onTimeChanged",88,75,0c,a2)},
	{::hx::fsObject /*  ::lime::app::_Event_Single_Void */ ,(int)offsetof(Video_obj,onPositionChanged),HX_("onPositionChanged",ec,50,fa,8a)},
	{::hx::fsObject /*  ::lime::app::_Event_haxe_Int64_Void */ ,(int)offsetof(Video_obj,onLengthChanged),HX_("onLengthChanged",0f,b4,c7,0e)},
	{::hx::fsObject /*  ::lime::app::_Event_Int_Void */ ,(int)offsetof(Video_obj,onChapterChanged),HX_("onChapterChanged",66,26,f9,63)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onMediaMetaChanged),HX_("onMediaMetaChanged",6a,01,f2,fb)},
	{::hx::fsObject /*  ::lime::app::_Event_Int_Void */ ,(int)offsetof(Video_obj,onMediaParsedChanged),HX_("onMediaParsedChanged",9e,2d,74,16)},
	{::hx::fsObject /*  ::lime::app::_Event_Void_Void */ ,(int)offsetof(Video_obj,onFormatSetup),HX_("onFormatSetup",e7,24,33,96)},
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(int)offsetof(Video_obj,mediaMutex),HX_("mediaMutex",fb,bf,1c,eb)},
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(int)offsetof(Video_obj,eventsMutex),HX_("eventsMutex",a6,55,4c,bd)},
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(int)offsetof(Video_obj,textureMutex),HX_("textureMutex",a4,3c,fb,08)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(Video_obj,events),HX_("events",19,4f,6a,96)},
	{::hx::fsUnknown /* unsigned char* */ ,(int)offsetof(Video_obj,mediaData),HX_("mediaData",2e,c9,a6,a2)},
	{::hx::fsUnknown /* ::cpp::UInt64 */ ,(int)offsetof(Video_obj,mediaSize),HX_("mediaSize",c5,13,97,ac)},
	{::hx::fsUnknown /* ::cpp::UInt64 */ ,(int)offsetof(Video_obj,mediaOffset),HX_("mediaOffset",97,d3,88,ee)},
	{::hx::fsUnknown /*  libvlc_media_player_t* */ ,(int)offsetof(Video_obj,mediaPlayer),HX_("mediaPlayer",65,27,02,c6)},
	{::hx::fsObject /*  ::openfl::display3D::textures::RectangleTexture */ ,(int)offsetof(Video_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsUnknown /* unsigned int */ ,(int)offsetof(Video_obj,textureWidth),HX_("textureWidth",2b,63,02,c3)},
	{::hx::fsUnknown /* unsigned int */ ,(int)offsetof(Video_obj,textureHeight),HX_("textureHeight",22,db,63,95)},
	{::hx::fsUnknown /* unsigned char* */ ,(int)offsetof(Video_obj,texturePlanes),HX_("texturePlanes",d2,65,c8,ca)},
	{::hx::fsObject /* ::Array< unsigned char > */ ,(int)offsetof(Video_obj,texturePlanesBuffer),HX_("texturePlanesBuffer",72,c0,66,2a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Video_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Video_obj::useTexture,HX_("useTexture",54,eb,93,a1)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Video_obj_sMemberFields[] = {
	HX_("forceRendering",e1,f3,6f,39),
	HX_("onOpening",f9,bb,ef,17),
	HX_("onPlaying",0f,c8,c2,61),
	HX_("onStopped",ae,8a,0c,1b),
	HX_("onPaused",2d,37,31,cf),
	HX_("onEndReached",f6,c1,9d,80),
	HX_("onEncounteredError",d5,1c,32,23),
	HX_("onMediaChanged",2f,58,87,e8),
	HX_("onCorked",83,ef,27,aa),
	HX_("onUncorked",5c,fc,78,aa),
	HX_("onTimeChanged",88,75,0c,a2),
	HX_("onPositionChanged",ec,50,fa,8a),
	HX_("onLengthChanged",0f,b4,c7,0e),
	HX_("onChapterChanged",66,26,f9,63),
	HX_("onMediaMetaChanged",6a,01,f2,fb),
	HX_("onMediaParsedChanged",9e,2d,74,16),
	HX_("onFormatSetup",e7,24,33,96),
	HX_("mediaMutex",fb,bf,1c,eb),
	HX_("eventsMutex",a6,55,4c,bd),
	HX_("textureMutex",a4,3c,fb,08),
	HX_("events",19,4f,6a,96),
	HX_("mediaSize",c5,13,97,ac),
	HX_("mediaOffset",97,d3,88,ee),
	HX_("texture",db,c8,e0,9e),
	HX_("textureWidth",2b,63,02,c3),
	HX_("textureHeight",22,db,63,95),
	HX_("texturePlanesBuffer",72,c0,66,2a),
	HX_("load",26,9a,b7,47),
	HX_("loadFromSubItem",e3,41,3b,f0),
	HX_("parseWithOptions",85,30,ea,b8),
	HX_("parseStop",d5,41,02,d4),
	HX_("play",f4,2d,5a,4a),
	HX_("stop",02,f0,5b,4c),
	HX_("pause",f6,d6,57,bd),
	HX_("resume",ad,69,84,08),
	HX_("togglePaused",62,5b,9e,95),
	HX_("previousChapter",16,6c,6f,a3),
	HX_("nextChapter",da,72,72,a4),
	HX_("getMeta",7b,fa,db,1a),
	HX_("setMeta",87,8b,dd,0d),
	HX_("saveMeta",a2,e4,12,fc),
	HX_("dispose",9f,80,4c,bb),
	HX_("update",09,86,05,87),
	HX_("get_mrl",fe,e1,c7,26),
	HX_("get_stats",76,d2,b4,c7),
	HX_("get_duration",5d,c3,a7,c9),
	HX_("get_isPlaying",7b,60,7a,4f),
	HX_("get_length",af,04,8f,8f),
	HX_("get_time",96,87,b7,cc),
	HX_("set_time",0a,e1,14,7b),
	HX_("get_position",b2,54,14,80),
	HX_("set_position",26,78,0d,95),
	HX_("get_chapter",a4,5b,23,54),
	HX_("set_chapter",b0,62,90,5e),
	HX_("get_chapterCount",8b,a6,ea,b6),
	HX_("get_willPlay",2f,6e,df,ec),
	HX_("get_rate",69,0e,5f,cb),
	HX_("set_rate",dd,67,bc,79),
	HX_("get_isSeekable",65,a9,99,48),
	HX_("get_canPause",cf,cc,04,e1),
	HX_("get_outputModules",9d,58,3d,ef),
	HX_("set_output",3e,1d,86,00),
	HX_("get_mute",62,2a,20,c8),
	HX_("set_mute",d6,83,7d,76),
	HX_("get_volume",a3,99,da,4f),
	HX_("set_volume",17,38,58,53),
	HX_("get_trackCount",8d,16,df,ed),
	HX_("get_track",e2,ea,c8,59),
	HX_("set_track",ee,d6,19,3d),
	HX_("get_channel",da,60,cc,52),
	HX_("set_channel",e6,67,39,5d),
	HX_("get_delay",da,33,d0,1a),
	HX_("set_delay",e6,1f,21,fe),
	HX_("get_role",ff,a6,69,cb),
	HX_("set_role",73,00,c7,79),
	HX_("__enterFrame",15,7f,e3,3a),
	HX_("set_bitmapData",76,26,d6,c9),
	::String(null()) };

static void Video_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Video_obj::useTexture,"useTexture");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Video_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Video_obj::useTexture,"useTexture");
};

#endif

::hx::Class Video_obj::__mClass;

static ::String Video_obj_sStaticFields[] = {
	HX_("useTexture",54,eb,93,a1),
	::String(null())
};

void Video_obj::__register()
{
	Video_obj _hx_dummy;
	Video_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxvlc.openfl.Video",ae,2c,03,3f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Video_obj::__GetStatic;
	__mClass->mSetStaticField = &Video_obj::__SetStatic;
	__mClass->mMarkFunc = Video_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Video_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Video_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Video_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Video_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Video_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Video_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Video_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_efae38d9298f0b03_275_boot)
HXDLIN( 275)		useTexture = true;
            	}
}

} // end namespace hxvlc
} // end namespace openfl
