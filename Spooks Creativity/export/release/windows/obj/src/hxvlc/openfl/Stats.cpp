// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_f6e4a6bd16e728f7
#define INCLUDED_f6e4a6bd16e728f7
#include "vlc/vlc.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_hxvlc_openfl_Stats
#include <hxvlc/openfl/Stats.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eb1201e6121fe7c8_89_new,"hxvlc.openfl.Stats","new",0x3908c044,"hxvlc.openfl.Stats.new","hxvlc/openfl/Stats.hx",89,0x77f285cc)
HX_LOCAL_STACK_FRAME(_hx_pos_eb1201e6121fe7c8_113_toString,"hxvlc.openfl.Stats","toString",0x67d5c648,"hxvlc.openfl.Stats.toString","hxvlc/openfl/Stats.hx",113,0x77f285cc)
HX_LOCAL_STACK_FRAME(_hx_pos_eb1201e6121fe7c8_147_fromMediaStats,"hxvlc.openfl.Stats","fromMediaStats",0x789a0b41,"hxvlc.openfl.Stats.fromMediaStats","hxvlc/openfl/Stats.hx",147,0x77f285cc)
namespace hxvlc{
namespace openfl{

void Stats_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_eb1201e6121fe7c8_89_new)
HXLINE(  90)		this->i_read_bytes = 0;
HXLINE(  91)		this->f_input_bitrate = ( (float)(((Float)0.0)) );
HXLINE(  92)		this->i_demux_read_bytes = 0;
HXLINE(  93)		this->f_demux_bitrate = ( (float)(((Float)0.0)) );
HXLINE(  94)		this->i_demux_corrupted = 0;
HXLINE(  95)		this->i_demux_discontinuity = 0;
HXLINE(  96)		this->i_decoded_video = 0;
HXLINE(  97)		this->i_decoded_audio = 0;
HXLINE(  98)		this->i_displayed_pictures = 0;
HXLINE(  99)		this->i_lost_pictures = 0;
HXLINE( 100)		this->i_played_abuffers = 0;
HXLINE( 101)		this->i_lost_abuffers = 0;
HXLINE( 102)		this->i_sent_packets = 0;
HXLINE( 103)		this->i_sent_bytes = 0;
HXLINE( 104)		this->f_send_bitrate = ( (float)(((Float)0.0)) );
            	}

Dynamic Stats_obj::__CreateEmpty() { return new Stats_obj; }

void *Stats_obj::_hx_vtable = 0;

Dynamic Stats_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Stats_obj > _hx_result = new Stats_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Stats_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0cd123e6;
}

::String Stats_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_eb1201e6121fe7c8_113_toString)
HXLINE( 114)		::Array< ::String > parts = ::Array_obj< ::String >::__new(0);
HXLINE( 116)		parts->push((HX_("Bytes read: ",b1,4e,61,18) + this->i_read_bytes));
HXLINE( 117)		parts->push(((HX_("Input bitrate: ",5d,c6,61,ea) + ::Std_obj::string(this->f_input_bitrate)) + HX_(" bps",c5,92,71,15)));
HXLINE( 119)		parts->push((HX_("Demuxer bytes read: ",f5,87,47,be) + this->i_demux_read_bytes));
HXLINE( 120)		parts->push(((HX_("Demuxer bitrate: ",2f,c2,95,9f) + ::Std_obj::string(this->f_demux_bitrate)) + HX_(" bps",c5,92,71,15)));
HXLINE( 121)		parts->push((HX_("Demuxer corrupted packets: ",b9,ea,68,b5) + this->i_demux_corrupted));
HXLINE( 122)		parts->push((HX_("Demuxer discontinuities: ",1e,63,79,23) + this->i_demux_discontinuity));
HXLINE( 124)		parts->push((HX_("Decoded video frames: ",9b,91,65,88) + this->i_decoded_video));
HXLINE( 125)		parts->push((HX_("Decoded audio frames: ",e0,49,ad,d8) + this->i_decoded_audio));
HXLINE( 127)		parts->push((HX_("Displayed pictures: ",9a,0e,22,ec) + this->i_displayed_pictures));
HXLINE( 128)		parts->push((HX_("Lost pictures: ",77,d8,3b,2a) + this->i_lost_pictures));
HXLINE( 130)		parts->push((HX_("Played audio buffers: ",62,ce,61,09) + this->i_played_abuffers));
HXLINE( 131)		parts->push((HX_("Lost audio buffers: ",f3,36,8b,54) + this->i_lost_abuffers));
HXLINE( 133)		parts->push((HX_("Sent packets: ",a9,be,b0,98) + this->i_sent_packets));
HXLINE( 134)		parts->push((HX_("Sent bytes: ",29,a1,7d,de) + this->i_sent_bytes));
HXLINE( 135)		parts->push(((HX_("Send bitrate: ",5b,55,f1,0c) + ::Std_obj::string(this->f_send_bitrate)) + HX_(" bps",c5,92,71,15)));
HXLINE( 137)		return parts->join(HX_("\n",0a,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Stats_obj,toString,return )

 ::hxvlc::openfl::Stats Stats_obj::fromMediaStats(cpp::Struct<  libvlc_media_stats_t > media_stats){
            	HX_GC_STACKFRAME(&_hx_pos_eb1201e6121fe7c8_147_fromMediaStats)
HXLINE( 148)		 ::hxvlc::openfl::Stats stats =  ::hxvlc::openfl::Stats_obj::__alloc( HX_CTX );
HXLINE( 150)		if (::hx::IsNotNull( media_stats )) {
HXLINE( 152)			stats->i_read_bytes = media_stats->i_read_bytes;
HXLINE( 153)			stats->f_input_bitrate = media_stats->f_input_bitrate;
HXLINE( 155)			stats->i_demux_read_bytes = media_stats->i_demux_read_bytes;
HXLINE( 156)			stats->f_demux_bitrate = media_stats->f_demux_bitrate;
HXLINE( 157)			stats->i_demux_corrupted = media_stats->i_demux_corrupted;
HXLINE( 158)			stats->i_demux_discontinuity = media_stats->i_demux_discontinuity;
HXLINE( 160)			stats->i_decoded_video = media_stats->i_decoded_video;
HXLINE( 161)			stats->i_decoded_audio = media_stats->i_decoded_audio;
HXLINE( 163)			stats->i_displayed_pictures = media_stats->i_displayed_pictures;
HXLINE( 164)			stats->i_lost_pictures = media_stats->i_lost_pictures;
HXLINE( 166)			stats->i_played_abuffers = media_stats->i_played_abuffers;
HXLINE( 167)			stats->i_lost_abuffers = media_stats->i_lost_abuffers;
HXLINE( 169)			stats->i_sent_packets = media_stats->i_sent_packets;
HXLINE( 170)			stats->i_sent_bytes = media_stats->i_sent_bytes;
HXLINE( 171)			stats->f_send_bitrate = media_stats->f_send_bitrate;
            		}
HXLINE( 174)		return stats;
            	}



::hx::ObjectPtr< Stats_obj > Stats_obj::__new() {
	::hx::ObjectPtr< Stats_obj > __this = new Stats_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Stats_obj > Stats_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Stats_obj *__this = (Stats_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Stats_obj), false, "hxvlc.openfl.Stats"));
	*(void **)__this = Stats_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Stats_obj::Stats_obj()
{
}

::hx::Val Stats_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"i_read_bytes") ) { return ::hx::Val( i_read_bytes ); }
		if (HX_FIELD_EQ(inName,"i_sent_bytes") ) { return ::hx::Val( i_sent_bytes ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"i_sent_packets") ) { return ::hx::Val( i_sent_packets ); }
		if (HX_FIELD_EQ(inName,"f_send_bitrate") ) { return ::hx::Val( f_send_bitrate ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"f_input_bitrate") ) { return ::hx::Val( f_input_bitrate ); }
		if (HX_FIELD_EQ(inName,"f_demux_bitrate") ) { return ::hx::Val( f_demux_bitrate ); }
		if (HX_FIELD_EQ(inName,"i_decoded_video") ) { return ::hx::Val( i_decoded_video ); }
		if (HX_FIELD_EQ(inName,"i_decoded_audio") ) { return ::hx::Val( i_decoded_audio ); }
		if (HX_FIELD_EQ(inName,"i_lost_pictures") ) { return ::hx::Val( i_lost_pictures ); }
		if (HX_FIELD_EQ(inName,"i_lost_abuffers") ) { return ::hx::Val( i_lost_abuffers ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"i_demux_corrupted") ) { return ::hx::Val( i_demux_corrupted ); }
		if (HX_FIELD_EQ(inName,"i_played_abuffers") ) { return ::hx::Val( i_played_abuffers ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"i_demux_read_bytes") ) { return ::hx::Val( i_demux_read_bytes ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"i_displayed_pictures") ) { return ::hx::Val( i_displayed_pictures ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"i_demux_discontinuity") ) { return ::hx::Val( i_demux_discontinuity ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Stats_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"i_read_bytes") ) { i_read_bytes=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i_sent_bytes") ) { i_sent_bytes=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"i_sent_packets") ) { i_sent_packets=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f_send_bitrate") ) { f_send_bitrate=inValue.Cast< float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"f_input_bitrate") ) { f_input_bitrate=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f_demux_bitrate") ) { f_demux_bitrate=inValue.Cast< float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i_decoded_video") ) { i_decoded_video=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i_decoded_audio") ) { i_decoded_audio=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i_lost_pictures") ) { i_lost_pictures=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i_lost_abuffers") ) { i_lost_abuffers=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"i_demux_corrupted") ) { i_demux_corrupted=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i_played_abuffers") ) { i_played_abuffers=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"i_demux_read_bytes") ) { i_demux_read_bytes=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"i_displayed_pictures") ) { i_displayed_pictures=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"i_demux_discontinuity") ) { i_demux_discontinuity=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Stats_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("i_read_bytes",d8,82,74,48));
	outFields->push(HX_("f_input_bitrate",df,c4,0b,86));
	outFields->push(HX_("i_demux_read_bytes",a8,c9,ff,a0));
	outFields->push(HX_("f_demux_bitrate",04,d9,b8,a2));
	outFields->push(HX_("i_demux_corrupted",06,3a,9f,46));
	outFields->push(HX_("i_demux_discontinuity",18,f3,f8,70));
	outFields->push(HX_("i_decoded_video",1c,fa,04,28));
	outFields->push(HX_("i_decoded_audio",77,5e,89,18));
	outFields->push(HX_("i_displayed_pictures",69,f3,b7,0d));
	outFields->push(HX_("i_lost_pictures",5a,dd,d6,57));
	outFields->push(HX_("i_played_abuffers",c8,cf,9a,0b));
	outFields->push(HX_("i_lost_abuffers",97,48,a8,f3));
	outFields->push(HX_("i_sent_packets",9a,03,14,cd));
	outFields->push(HX_("i_sent_bytes",5a,32,a6,89));
	outFields->push(HX_("f_send_bitrate",af,2f,11,11));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Stats_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Stats_obj,i_read_bytes),HX_("i_read_bytes",d8,82,74,48)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Stats_obj,f_input_bitrate),HX_("f_input_bitrate",df,c4,0b,86)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_demux_read_bytes),HX_("i_demux_read_bytes",a8,c9,ff,a0)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Stats_obj,f_demux_bitrate),HX_("f_demux_bitrate",04,d9,b8,a2)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_demux_corrupted),HX_("i_demux_corrupted",06,3a,9f,46)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_demux_discontinuity),HX_("i_demux_discontinuity",18,f3,f8,70)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_decoded_video),HX_("i_decoded_video",1c,fa,04,28)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_decoded_audio),HX_("i_decoded_audio",77,5e,89,18)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_displayed_pictures),HX_("i_displayed_pictures",69,f3,b7,0d)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_lost_pictures),HX_("i_lost_pictures",5a,dd,d6,57)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_played_abuffers),HX_("i_played_abuffers",c8,cf,9a,0b)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_lost_abuffers),HX_("i_lost_abuffers",97,48,a8,f3)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_sent_packets),HX_("i_sent_packets",9a,03,14,cd)},
	{::hx::fsInt,(int)offsetof(Stats_obj,i_sent_bytes),HX_("i_sent_bytes",5a,32,a6,89)},
	{::hx::fsUnknown /* float */ ,(int)offsetof(Stats_obj,f_send_bitrate),HX_("f_send_bitrate",af,2f,11,11)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Stats_obj_sStaticStorageInfo = 0;
#endif

static ::String Stats_obj_sMemberFields[] = {
	HX_("i_read_bytes",d8,82,74,48),
	HX_("f_input_bitrate",df,c4,0b,86),
	HX_("i_demux_read_bytes",a8,c9,ff,a0),
	HX_("f_demux_bitrate",04,d9,b8,a2),
	HX_("i_demux_corrupted",06,3a,9f,46),
	HX_("i_demux_discontinuity",18,f3,f8,70),
	HX_("i_decoded_video",1c,fa,04,28),
	HX_("i_decoded_audio",77,5e,89,18),
	HX_("i_displayed_pictures",69,f3,b7,0d),
	HX_("i_lost_pictures",5a,dd,d6,57),
	HX_("i_played_abuffers",c8,cf,9a,0b),
	HX_("i_lost_abuffers",97,48,a8,f3),
	HX_("i_sent_packets",9a,03,14,cd),
	HX_("i_sent_bytes",5a,32,a6,89),
	HX_("f_send_bitrate",af,2f,11,11),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Stats_obj::__mClass;

void Stats_obj::__register()
{
	Stats_obj _hx_dummy;
	Stats_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxvlc.openfl.Stats",52,8e,12,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Stats_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Stats_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Stats_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Stats_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxvlc
} // end namespace openfl
