// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_d6563ee84dfb2373
#define INCLUDED_d6563ee84dfb2373
#include "stdio.h"
#endif
#ifndef INCLUDED_6ba8844da718b4a6
#define INCLUDED_6ba8844da718b4a6
#include "vector"
#endif
#ifndef INCLUDED_f6e4a6bd16e728f7
#define INCLUDED_f6e4a6bd16e728f7
#include "vlc/vlc.h"
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_MainLoop
#include <haxe/MainLoop.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_hxvlc_util_Handle
#include <hxvlc/util/Handle.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_118_init,"hxvlc.util.Handle","init",0x67b58f3b,"hxvlc.util.Handle.init","hxvlc/util/Handle.hx",118,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_138_initAsync,"hxvlc.util.Handle","initAsync",0xe13dca01,"hxvlc.util.Handle.initAsync","hxvlc/util/Handle.hx",138,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_133_initAsync,"hxvlc.util.Handle","initAsync",0xe13dca01,"hxvlc.util.Handle.initAsync","hxvlc/util/Handle.hx",133,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_128_initAsync,"hxvlc.util.Handle","initAsync",0xe13dca01,"hxvlc.util.Handle.initAsync","hxvlc/util/Handle.hx",128,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_148_dispose,"hxvlc.util.Handle","dispose",0x33ead954,"hxvlc.util.Handle.dispose","hxvlc/util/Handle.hx",148,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_170_initWithRetry,"hxvlc.util.Handle","initWithRetry",0x70538cc7,"hxvlc.util.Handle.initWithRetry","hxvlc/util/Handle.hx",170,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_396_get_version,"hxvlc.util.Handle","get_version",0x9d1d9e64,"hxvlc.util.Handle.get_version","hxvlc/util/Handle.hx",396,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_402_get_compiler,"hxvlc.util.Handle","get_compiler",0x83e64ad3,"hxvlc.util.Handle.get_compiler","hxvlc/util/Handle.hx",402,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_408_get_changeset,"hxvlc.util.Handle","get_changeset",0x6a1eb27e,"hxvlc.util.Handle.get_changeset","hxvlc/util/Handle.hx",408,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_414_get_clock,"hxvlc.util.Handle","get_clock",0x2b7a161a,"hxvlc.util.Handle.get_clock","hxvlc/util/Handle.hx",414,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_67_boot,"hxvlc.util.Handle","boot",0x6315d85d,"hxvlc.util.Handle.boot","hxvlc/util/Handle.hx",67,0x9550d61b)
HX_LOCAL_STACK_FRAME(_hx_pos_989d3d43f5b59b8c_104_boot,"hxvlc.util.Handle","boot",0x6315d85d,"hxvlc.util.Handle.boot","hxvlc/util/Handle.hx",104,0x9550d61b)
namespace hxvlc{
namespace util{

static void instance_logging(void *data, int level, const libvlc_log_t *ctx, const char *fmt, va_list args)
{
	hx::SetTopOfStack((int *)99, true);

#ifdef __ANDROID__
	switch (level)
	{
	case LIBVLC_NOTICE:
		__android_log_vprint(ANDROID_LOG_INFO, "HXVLC", fmt, args);
		break;
	case LIBVLC_ERROR:
		__android_log_vprint(ANDROID_LOG_ERROR, "HXVLC", fmt, args);
		break;
	case LIBVLC_WARNING:
		__android_log_vprint(ANDROID_LOG_WARN, "HXVLC", fmt, args);
		break;
	case LIBVLC_DEBUG:
		__android_log_vprint(ANDROID_LOG_DEBUG, "HXVLC", fmt, args);
		break;
	default:
		__android_log_vprint(ANDROID_LOG_UNKNOWN, "HXVLC", fmt, args);
		break;
	}
#else
	vprintf(fmt, args);
	printf("\n");
#endif

	hx::SetTopOfStack((int *)0, true);
}
void Handle_obj::__construct() { }

Dynamic Handle_obj::__CreateEmpty() { return new Handle_obj; }

void *Handle_obj::_hx_vtable = 0;

Dynamic Handle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Handle_obj > _hx_result = new Handle_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Handle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54c9e9c3;
}

 libvlc_instance_t* Handle_obj::instance;

bool Handle_obj::loading;

 ::sys::thread::Mutex Handle_obj::instanceMutex;

 cpp::Pointer<FILE> Handle_obj::logFile;

bool Handle_obj::init(::Array< ::String > options){
            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_118_init)
HXDLIN( 118)		return ::hxvlc::util::Handle_obj::initWithRetry(options,false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Handle_obj,init,return )

void Handle_obj::initAsync(::Array< ::String > options, ::Dynamic finishCallback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1,::Array< ::String >,options, ::Dynamic,finishCallback) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,bool,success, ::Dynamic,finishCallback) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_138_initAsync)
HXLINE( 138)				if (::hx::IsNotNull( finishCallback )) {
HXLINE( 139)					finishCallback(success);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_133_initAsync)
HXLINE( 134)			bool success = ::hxvlc::util::Handle_obj::initWithRetry(options,false);
HXLINE( 136)			::haxe::MainLoop_obj::runInMainThread( ::Dynamic(new _hx_Closure_0(success,finishCallback)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_128_initAsync)
HXLINE( 129)		if (::hxvlc::util::Handle_obj::loading) {
HXLINE( 130)			return;
            		}
HXLINE( 132)		::haxe::MainLoop_obj::addThread( ::Dynamic(new _hx_Closure_1(options,finishCallback)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Handle_obj,initAsync,(void))

void Handle_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_148_dispose)
HXLINE( 149)		::hxvlc::util::Handle_obj::instanceMutex->acquire();
HXLINE( 151)		if (::hx::IsNotNull( ::hxvlc::util::Handle_obj::instance )) {
HXLINE( 153)			libvlc_release(::hxvlc::util::Handle_obj::instance);
HXLINE( 154)			::hxvlc::util::Handle_obj::instance = null();
            		}
HXLINE( 165)		::hxvlc::util::Handle_obj::instanceMutex->release();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Handle_obj,dispose,(void))

bool Handle_obj::initWithRetry(::Array< ::String > options, ::Dynamic __o_resetCache){
            		 ::Dynamic resetCache = __o_resetCache;
            		if (::hx::IsNull(__o_resetCache)) resetCache = false;
            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_170_initWithRetry)
HXLINE( 171)		::hxvlc::util::Handle_obj::instanceMutex->acquire();
HXLINE( 173)		if (::hxvlc::util::Handle_obj::loading) {
HXLINE( 175)			::hxvlc::util::Handle_obj::instanceMutex->release();
HXLINE( 177)			return false;
            		}
HXLINE( 180)		::hxvlc::util::Handle_obj::loading = true;
HXLINE( 182)		if (::hx::IsNull( ::hxvlc::util::Handle_obj::instance )) {
HXLINE( 227)			::String pluginPath = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,::haxe::io::Path_obj::directory(::Sys_obj::programPath()))->init(1,HX_("plugins",60,d2,35,02)));
HXLINE( 229)			if (::sys::FileSystem_obj::exists(pluginPath)) {
HXLINE( 230)				::Sys_obj::putEnv(HX_("VLC_PLUGIN_PATH",bf,5b,c2,b5),pluginPath);
            			}
HXLINE( 233)			 std::vector< const char* > args =  std::vector< const char* >();
HXLINE( 236)			args.push_back(HX_("--aout=directsound",96,05,a8,3e).utf8_str());
HXLINE( 243)			args.push_back(HX_("--drop-late-frames",2f,44,71,3f).utf8_str());
HXLINE( 244)			args.push_back(HX_("--ignore-config",7d,60,07,d0).utf8_str());
HXLINE( 245)			args.push_back(HX_("--intf=none",1e,1a,7d,95).utf8_str());
HXLINE( 246)			args.push_back(HX_("--http-reconnect",b2,bb,60,74).utf8_str());
HXLINE( 247)			args.push_back(HX_("--no-interact",22,65,34,ce).utf8_str());
HXLINE( 248)			args.push_back(HX_("--no-keyboard-events",53,d1,7b,b5).utf8_str());
HXLINE( 249)			args.push_back(HX_("--no-mouse-events",ed,56,73,b2).utf8_str());
HXLINE( 255)			args.push_back(HX_("--no-snapshot-preview",2b,11,06,ce).utf8_str());
HXLINE( 256)			args.push_back(HX_("--no-spu",4c,43,f6,5f).utf8_str());
HXLINE( 257)			args.push_back(HX_("--no-sub-autodetect-file",de,6e,ed,0a).utf8_str());
HXLINE( 258)			args.push_back(HX_("--no-video-title-show",50,aa,da,3d).utf8_str());
HXLINE( 259)			args.push_back(HX_("--no-volume-save",e4,57,03,dc).utf8_str());
HXLINE( 260)			args.push_back(HX_("--no-xlib",39,9d,cf,9a).utf8_str());
HXLINE( 263)			bool _hx_tmp;
HXDLIN( 263)			if (::hx::IsEq( resetCache,false )) {
HXLINE( 263)				_hx_tmp = ::sys::FileSystem_obj::exists(::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,pluginPath)->init(1,HX_("plugins.dat",49,89,b2,4b))));
            			}
            			else {
HXLINE( 263)				_hx_tmp = false;
            			}
HXDLIN( 263)			if (_hx_tmp) {
HXLINE( 264)				args.push_back(HX_("--no-plugins-scan",36,a9,79,1f).utf8_str());
            			}
            			else {
HXLINE( 266)				args.push_back(HX_("--reset-plugins-cache",b7,83,a5,ea).utf8_str());
            			}
HXLINE( 269)			args.push_back(HX_("--text-renderer=none",d2,a5,45,8f).utf8_str());
HXLINE( 274)			args.push_back(HX_("--quiet",54,a5,42,ab).utf8_str());
HXLINE( 277)			if (::hx::IsNotNull( options )) {
HXLINE( 279)				int _g = 0;
HXDLIN( 279)				while((_g < options->length)){
HXLINE( 279)					::String option = options->__get(_g);
HXDLIN( 279)					_g = (_g + 1);
HXLINE( 281)					bool _hx_tmp1;
HXDLIN( 281)					if (::hx::IsNotNull( option )) {
HXLINE( 281)						_hx_tmp1 = (option.length > 0);
            					}
            					else {
HXLINE( 281)						_hx_tmp1 = false;
            					}
HXDLIN( 281)					if (_hx_tmp1) {
HXLINE( 282)						args.push_back(option.utf8_str());
            					}
            				}
            			}
HXLINE( 286)			int _hx_tmp2 = args.size();
HXDLIN( 286)			::hxvlc::util::Handle_obj::instance = libvlc_new(_hx_tmp2,args.data());
HXLINE( 288)			if (::hx::IsNull( ::hxvlc::util::Handle_obj::instance )) {
HXLINE( 290)				::hxvlc::util::Handle_obj::loading = false;
HXLINE( 292)				::hxvlc::util::Handle_obj::instanceMutex->release();
HXLINE( 295)				if (::hx::IsEq( resetCache,false )) {
HXLINE( 297)					::lime::utils::Log_obj::warn(HX_("Failed to initialize the LibVLC instance, resetting plugins's cache",27,d3,4c,24),::hx::SourceInfo(HX_("hxvlc/util/Handle.hx",1b,d6,50,95),297,HX_("hxvlc.util.Handle",23,7c,b0,3b),HX_("initWithRetry",52,3e,b6,e5)));
HXLINE( 299)					return ::hxvlc::util::Handle_obj::initWithRetry(options,true);
            				}
HXLINE( 303)				::String errmsg = ::String(libvlc_errmsg());
HXLINE( 305)				bool _hx_tmp3;
HXDLIN( 305)				if (::hx::IsNotNull( errmsg )) {
HXLINE( 305)					_hx_tmp3 = (errmsg.length > 0);
            				}
            				else {
HXLINE( 305)					_hx_tmp3 = false;
            				}
HXDLIN( 305)				if (_hx_tmp3) {
HXLINE( 306)					::lime::utils::Log_obj::error((HX_("Failed to initialize the LibVLC instance, Error: ",6a,58,39,88) + errmsg),::hx::SourceInfo(HX_("hxvlc/util/Handle.hx",1b,d6,50,95),306,HX_("hxvlc.util.Handle",23,7c,b0,3b),HX_("initWithRetry",52,3e,b6,e5)));
            				}
            				else {
HXLINE( 308)					::lime::utils::Log_obj::error(HX_("Failed to initialize the LibVLC instance",f0,e1,da,e4),::hx::SourceInfo(HX_("hxvlc/util/Handle.hx",1b,d6,50,95),308,HX_("hxvlc.util.Handle",23,7c,b0,3b),HX_("initWithRetry",52,3e,b6,e5)));
            				}
HXLINE( 310)				return false;
            			}
            		}
HXLINE( 334)		::hxvlc::util::Handle_obj::loading = false;
HXLINE( 336)		::hxvlc::util::Handle_obj::instanceMutex->release();
HXLINE( 338)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Handle_obj,initWithRetry,return )

::String Handle_obj::get_version(){
            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_396_get_version)
HXDLIN( 396)		return ::String(libvlc_get_version());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Handle_obj,get_version,return )

::String Handle_obj::get_compiler(){
            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_402_get_compiler)
HXDLIN( 402)		return ::String(libvlc_get_compiler());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Handle_obj,get_compiler,return )

::String Handle_obj::get_changeset(){
            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_408_get_changeset)
HXDLIN( 408)		return ::String(libvlc_get_changeset());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Handle_obj,get_changeset,return )

::cpp::Int64 Handle_obj::get_clock(){
            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_414_get_clock)
HXDLIN( 414)		return libvlc_clock();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Handle_obj,get_clock,return )


Handle_obj::Handle_obj()
{
}

bool Handle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clock") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_clock() ); return true; } }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loading") ) { outValue = ( loading ); return true; }
		if (HX_FIELD_EQ(inName,"version") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_version() ); return true; } }
		if (HX_FIELD_EQ(inName,"logFile") ) { outValue = ( logFile ); return true; }
		if (HX_FIELD_EQ(inName,"dispose") ) { outValue = dispose_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"compiler") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_compiler() ); return true; } }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"changeset") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_changeset() ); return true; } }
		if (HX_FIELD_EQ(inName,"initAsync") ) { outValue = initAsync_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_clock") ) { outValue = get_clock_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_version") ) { outValue = get_version_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_compiler") ) { outValue = get_compiler_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"instanceMutex") ) { outValue = ( instanceMutex ); return true; }
		if (HX_FIELD_EQ(inName,"initWithRetry") ) { outValue = initWithRetry_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_changeset") ) { outValue = get_changeset_dyn(); return true; }
	}
	return false;
}

bool Handle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"loading") ) { loading=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"logFile") ) { logFile=ioValue.Cast<  cpp::Pointer<FILE> >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"instanceMutex") ) { instanceMutex=ioValue.Cast<  ::sys::thread::Mutex >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Handle_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Handle_obj_sStaticStorageInfo[] = {
	{::hx::fsUnknown /*  libvlc_instance_t* */ ,(void *) &Handle_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsBool,(void *) &Handle_obj::loading,HX_("loading",7c,ce,f2,08)},
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(void *) &Handle_obj::instanceMutex,HX_("instanceMutex",aa,43,64,7d)},
	{::hx::fsUnknown /*  cpp::Pointer<FILE> */ ,(void *) &Handle_obj::logFile,HX_("logFile",20,e1,85,69)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Handle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Handle_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(Handle_obj::loading,"loading");
	HX_MARK_MEMBER_NAME(Handle_obj::instanceMutex,"instanceMutex");
	HX_MARK_MEMBER_NAME(Handle_obj::logFile,"logFile");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Handle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Handle_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(Handle_obj::loading,"loading");
	HX_VISIT_MEMBER_NAME(Handle_obj::instanceMutex,"instanceMutex");
	HX_VISIT_MEMBER_NAME(Handle_obj::logFile,"logFile");
};

#endif

::hx::Class Handle_obj::__mClass;

static ::String Handle_obj_sStaticFields[] = {
	HX_("loading",7c,ce,f2,08),
	HX_("instanceMutex",aa,43,64,7d),
	HX_("logFile",20,e1,85,69),
	HX_("init",10,3b,bb,45),
	HX_("initAsync",0c,1a,d0,41),
	HX_("dispose",9f,80,4c,bb),
	HX_("initWithRetry",52,3e,b6,e5),
	HX_("get_version",2f,47,ec,02),
	HX_("get_compiler",a8,53,eb,32),
	HX_("get_changeset",09,64,81,df),
	HX_("get_clock",25,66,0c,8c),
	::String(null())
};

void Handle_obj::__register()
{
	Handle_obj _hx_dummy;
	Handle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxvlc.util.Handle",23,7c,b0,3b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Handle_obj::__GetStatic;
	__mClass->mSetStaticField = &Handle_obj::__SetStatic;
	__mClass->mMarkFunc = Handle_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Handle_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Handle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Handle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Handle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Handle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Handle_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_67_boot)
HXDLIN(  67)		loading = false;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_989d3d43f5b59b8c_104_boot)
HXDLIN( 104)		instanceMutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
            	}
}

} // end namespace hxvlc
} // end namespace util
