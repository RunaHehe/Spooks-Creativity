// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_f6e4a6bd16e728f7
#define INCLUDED_f6e4a6bd16e728f7
#include "vlc/vlc.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_hxvlc_flixel_FlxVideo
#include <hxvlc/flixel/FlxVideo.h>
#endif
#ifndef INCLUDED_hxvlc_openfl_Video
#include <hxvlc/openfl/Video.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_82af19a9b5fbd17f_73_new,"hxvlc.flixel.FlxVideo","new",0xacb981fc,"hxvlc.flixel.FlxVideo.new","hxvlc/flixel/FlxVideo.hx",73,0x5fae52d4)
HX_DEFINE_STACK_FRAME(_hx_pos_82af19a9b5fbd17f_36_new,"hxvlc.flixel.FlxVideo","new",0xacb981fc,"hxvlc.flixel.FlxVideo.new","hxvlc/flixel/FlxVideo.hx",36,0x5fae52d4)
HX_LOCAL_STACK_FRAME(_hx_pos_82af19a9b5fbd17f_93___default_getCalculatedVolume,"hxvlc.flixel.FlxVideo","__default_getCalculatedVolume",0x17af692c,"hxvlc.flixel.FlxVideo.__default_getCalculatedVolume","hxvlc/flixel/FlxVideo.hx",93,0x5fae52d4)
HX_LOCAL_STACK_FRAME(_hx_pos_82af19a9b5fbd17f_105_load,"hxvlc.flixel.FlxVideo","load",0x744d510a,"hxvlc.flixel.FlxVideo.load","hxvlc/flixel/FlxVideo.hx",105,0x5fae52d4)
HX_LOCAL_STACK_FRAME(_hx_pos_82af19a9b5fbd17f_166_dispose,"hxvlc.flixel.FlxVideo","dispose",0xbd61303b,"hxvlc.flixel.FlxVideo.dispose","hxvlc/flixel/FlxVideo.hx",166,0x5fae52d4)
HX_LOCAL_STACK_FRAME(_hx_pos_82af19a9b5fbd17f_183_update,"hxvlc.flixel.FlxVideo","update",0x4da1bded,"hxvlc.flixel.FlxVideo.update","hxvlc/flixel/FlxVideo.hx",183,0x5fae52d4)
namespace hxvlc{
namespace flixel{

void FlxVideo_obj::__construct(::hx::Null< bool >  __o_smoothing){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::hxvlc::flixel::FlxVideo,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_82af19a9b5fbd17f_73_new)
HXLINE(  74)			_gthis->set_role(libvlc_role_Game);
HXLINE(  77)			if (_gthis->autoVolumeHandle) {
HXLINE(  78)				 ::hxvlc::flixel::FlxVideo _gthis1 = _gthis;
HXDLIN(  78)				Float Value = ( (Float)(_gthis->getCalculatedVolume()) );
HXDLIN(  78)				Float lowerBound;
HXDLIN(  78)				if ((Value < 0)) {
HXLINE(  78)					lowerBound = ( (Float)(0) );
            				}
            				else {
HXLINE(  78)					lowerBound = Value;
            				}
HXDLIN(  78)				Float _hx_tmp;
HXDLIN(  78)				if ((lowerBound > 1)) {
HXLINE(  78)					_hx_tmp = ( (Float)(1) );
            				}
            				else {
HXLINE(  78)					_hx_tmp = lowerBound;
            				}
HXDLIN(  78)				_gthis1->set_volume(::Math_obj::floor((_hx_tmp * ( (Float)(100) ))));
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		bool smoothing = __o_smoothing.Default(true);
            	HX_STACKFRAME(&_hx_pos_82af19a9b5fbd17f_36_new)
HXLINE(  56)		this->autoVolumeHandle = true;
HXLINE(  50)		this->autoResizeMode = 17;
HXLINE(  43)		this->autoPause = ::flixel::FlxG_obj::autoPause;
HXLINE(  65)		 ::hxvlc::flixel::FlxVideo _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  66)		super::__construct(smoothing);
HXLINE(  72)		this->onOpening->add( ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
            	}

Dynamic FlxVideo_obj::__CreateEmpty() { return new FlxVideo_obj; }

void *FlxVideo_obj::_hx_vtable = 0;

Dynamic FlxVideo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxVideo_obj > _hx_result = new FlxVideo_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxVideo_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5c91a94e) {
		if (inClassId<=(int)0x4cc42801) {
			if (inClassId<=(int)0x0c89e854) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
			} else {
				return inClassId==(int)0x4cc42801;
			}
		} else {
			return inClassId==(int)0x5c91a94e;
		}
	} else {
		return inClassId==(int)0x6b353933 || inClassId==(int)0x6c962982;
	}
}

HX_BEGIN_DEFAULT_FUNC(__default_getCalculatedVolume,FlxVideo_obj)
Float _hx_run(){
            	HX_STACKFRAME(&_hx_pos_82af19a9b5fbd17f_93___default_getCalculatedVolume)
HXDLIN(  93)		int _hx_tmp;
HXDLIN(  93)		if (::flixel::FlxG_obj::sound->muted) {
HXDLIN(  93)			_hx_tmp = 0;
            		}
            		else {
HXDLIN(  93)			_hx_tmp = 1;
            		}
HXDLIN(  93)		return (( (Float)(_hx_tmp) ) * ::flixel::FlxG_obj::sound->volume);
            	}
HX_END_LOCAL_FUNC0(return )
HX_END_DEFAULT_FUNC

bool FlxVideo_obj::load( ::Dynamic location,::Array< ::String > options){
            	HX_STACKFRAME(&_hx_pos_82af19a9b5fbd17f_105_load)
HXLINE( 106)		if (this->autoPause) {
HXLINE( 108)			if (!(::flixel::FlxG_obj::signals->focusGained->has(this->resume_dyn()))) {
HXLINE( 109)				::flixel::FlxG_obj::signals->focusGained->add(this->resume_dyn());
            			}
HXLINE( 111)			if (!(::flixel::FlxG_obj::signals->focusLost->has(this->pause_dyn()))) {
HXLINE( 112)				::flixel::FlxG_obj::signals->focusLost->add(this->pause_dyn());
            			}
            		}
HXLINE( 115)		bool _hx_tmp;
HXDLIN( 115)		bool _hx_tmp1;
HXDLIN( 115)		bool _hx_tmp2;
HXDLIN( 115)		if (::hx::IsNotNull( location )) {
HXLINE( 115)			_hx_tmp2 = !(::Std_obj::isOfType(location,::hx::ClassOf< int >()));
            		}
            		else {
HXLINE( 115)			_hx_tmp2 = false;
            		}
HXDLIN( 115)		if (_hx_tmp2) {
HXLINE( 115)			_hx_tmp1 = !(::Std_obj::isOfType(location,::hx::ClassOf< ::haxe::io::Bytes >()));
            		}
            		else {
HXLINE( 115)			_hx_tmp1 = false;
            		}
HXDLIN( 115)		if (_hx_tmp1) {
HXLINE( 115)			_hx_tmp = ::Std_obj::isOfType(location,::hx::ClassOf< ::String >());
            		}
            		else {
HXLINE( 115)			_hx_tmp = false;
            		}
HXDLIN( 115)		if (_hx_tmp) {
HXLINE( 117)			::String location1 = ::hx::TCast< ::String >::cast(location);
HXLINE( 119)			if ((location1.indexOf(HX_("://",da,2b,2c,00),null()) == -1)) {
HXLINE( 121)				::String absolutePath = ::sys::FileSystem_obj::absolutePath(location1);
HXLINE( 123)				if (::sys::FileSystem_obj::exists(absolutePath)) {
HXLINE( 124)					return this->super::load(absolutePath,options);
            				}
            				else {
HXLINE( 125)					if (::openfl::utils::Assets_obj::exists(location1,null())) {
HXLINE( 127)						::String assetPath = ::openfl::utils::Assets_obj::getPath(location1);
HXLINE( 129)						if (::hx::IsNotNull( assetPath )) {
HXLINE( 131)							bool _hx_tmp3;
HXDLIN( 131)							if (::sys::FileSystem_obj::exists(assetPath)) {
HXLINE( 131)								_hx_tmp3 = ::haxe::io::Path_obj::isAbsolute(assetPath);
            							}
            							else {
HXLINE( 131)								_hx_tmp3 = false;
            							}
HXDLIN( 131)							if (_hx_tmp3) {
HXLINE( 132)								return this->super::load(assetPath,options);
            							}
            							else {
HXLINE( 133)								if (!(::haxe::io::Path_obj::isAbsolute(assetPath))) {
HXLINE( 135)									try {
            										HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 137)										 ::haxe::io::Bytes assetBytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytes(::openfl::utils::Assets_obj::getBytes(location1));
HXLINE( 139)										if (::hx::IsNotNull( assetBytes )) {
HXLINE( 140)											return this->super::load(assetBytes,options);
            										}
            									} catch( ::Dynamic _hx_e) {
            										if (_hx_e.IsClass<  ::Dynamic >() ){
            											HX_STACK_BEGIN_CATCH
            											 ::Dynamic _g = _hx_e;
HXLINE( 142)											{
HXLINE( 142)												null();
            											}
HXDLIN( 142)											 ::Dynamic e = _g;
HXLINE( 144)											{
HXLINE( 144)												 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN( 144)												 ::Dynamic data = (((HX_("Error loading asset bytes from location \"",6c,0c,1e,2a) + location1) + HX_("\": ",48,ff,19,00)) + ::Std_obj::string(e));
HXDLIN( 144)												_this->advanced(data,::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            											}
HXLINE( 146)											return false;
            										}
            										else {
            											HX_STACK_DO_THROW(_hx_e);
            										}
            									}
            								}
            							}
            						}
HXLINE( 151)						return false;
            					}
            					else {
HXLINE( 155)						::flixel::FlxG_obj::log->advanced(((HX_("Unable to find the video file at location \"",03,9a,de,e8) + location1) + HX_("\".",cc,1d,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
HXLINE( 157)						return false;
            					}
            				}
            			}
            		}
HXLINE( 162)		return this->super::load(location,options);
            	}


void FlxVideo_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_82af19a9b5fbd17f_166_dispose)
HXLINE( 167)		if (::flixel::FlxG_obj::signals->focusGained->has(this->resume_dyn())) {
HXLINE( 168)			::flixel::FlxG_obj::signals->focusGained->remove(this->resume_dyn());
            		}
HXLINE( 170)		if (::flixel::FlxG_obj::signals->focusLost->has(this->pause_dyn())) {
HXLINE( 171)			::flixel::FlxG_obj::signals->focusLost->remove(this->pause_dyn());
            		}
HXLINE( 178)		this->super::dispose();
            	}


void FlxVideo_obj::update(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_82af19a9b5fbd17f_183_update)
HXLINE( 184)		bool _hx_tmp;
HXDLIN( 184)		bool _hx_tmp1;
HXDLIN( 184)		int this1 = this->autoResizeMode;
HXDLIN( 184)		bool _hx_tmp2;
HXDLIN( 184)		if ((this1 != 1)) {
HXLINE( 184)			_hx_tmp2 = (this1 == 17);
            		}
            		else {
HXLINE( 184)			_hx_tmp2 = true;
            		}
HXDLIN( 184)		if (!(_hx_tmp2)) {
HXLINE( 184)			int this2 = this->autoResizeMode;
HXDLIN( 184)			if ((this2 != 16)) {
HXLINE( 184)				_hx_tmp1 = (this2 == 17);
            			}
            			else {
HXLINE( 184)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 184)			_hx_tmp1 = true;
            		}
HXDLIN( 184)		if (_hx_tmp1) {
HXLINE( 184)			_hx_tmp = ::hx::IsNotNull( this->get_bitmapData() );
            		}
            		else {
HXLINE( 184)			_hx_tmp = false;
            		}
HXDLIN( 184)		if (_hx_tmp) {
HXLINE( 186)			Float _hx_tmp3;
HXDLIN( 186)			int this3 = this->autoResizeMode;
HXDLIN( 186)			bool _hx_tmp4;
HXDLIN( 186)			if ((this3 != 1)) {
HXLINE( 186)				_hx_tmp4 = (this3 == 17);
            			}
            			else {
HXLINE( 186)				_hx_tmp4 = true;
            			}
HXDLIN( 186)			if (_hx_tmp4) {
HXLINE( 186)				_hx_tmp3 = ::flixel::FlxG_obj::scaleMode->gameSize->x;
            			}
            			else {
HXLINE( 186)				_hx_tmp3 = ( (Float)(this->get_bitmapData()->width) );
            			}
HXDLIN( 186)			this->set_width(_hx_tmp3);
HXLINE( 187)			Float _hx_tmp5;
HXDLIN( 187)			int this4 = this->autoResizeMode;
HXDLIN( 187)			bool _hx_tmp6;
HXDLIN( 187)			if ((this4 != 16)) {
HXLINE( 187)				_hx_tmp6 = (this4 == 17);
            			}
            			else {
HXLINE( 187)				_hx_tmp6 = true;
            			}
HXDLIN( 187)			if (_hx_tmp6) {
HXLINE( 187)				_hx_tmp5 = ::flixel::FlxG_obj::scaleMode->gameSize->y;
            			}
            			else {
HXLINE( 187)				_hx_tmp5 = ( (Float)(this->get_bitmapData()->height) );
            			}
HXDLIN( 187)			this->set_height(_hx_tmp5);
            		}
HXLINE( 191)		if (this->autoVolumeHandle) {
HXLINE( 192)			Float Value = ( (Float)(this->getCalculatedVolume()) );
HXDLIN( 192)			Float lowerBound;
HXDLIN( 192)			if ((Value < 0)) {
HXLINE( 192)				lowerBound = ( (Float)(0) );
            			}
            			else {
HXLINE( 192)				lowerBound = Value;
            			}
HXDLIN( 192)			Float _hx_tmp7;
HXDLIN( 192)			if ((lowerBound > 1)) {
HXLINE( 192)				_hx_tmp7 = ( (Float)(1) );
            			}
            			else {
HXLINE( 192)				_hx_tmp7 = lowerBound;
            			}
HXDLIN( 192)			this->set_volume(::Math_obj::floor((_hx_tmp7 * ( (Float)(100) ))));
            		}
HXLINE( 195)		this->super::update(deltaTime);
            	}



void FlxVideo_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,FlxVideo_obj *_hx_obj) {
	if (!_hx_obj->getCalculatedVolume.mPtr) _hx_obj->getCalculatedVolume = new __default_getCalculatedVolume(_hx_obj);
}
::hx::ObjectPtr< FlxVideo_obj > FlxVideo_obj::__new(::hx::Null< bool >  __o_smoothing) {
	::hx::ObjectPtr< FlxVideo_obj > __this = new FlxVideo_obj();
	__this->__construct(__o_smoothing);
	return __this;
}

::hx::ObjectPtr< FlxVideo_obj > FlxVideo_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_smoothing) {
	FlxVideo_obj *__this = (FlxVideo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxVideo_obj), true, "hxvlc.flixel.FlxVideo"));
	*(void **)__this = FlxVideo_obj::_hx_vtable;
	hxvlc::flixel::FlxVideo_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(__o_smoothing);
	return __this;
}

FlxVideo_obj::FlxVideo_obj()
{
	getCalculatedVolume = new __default_getCalculatedVolume(this);
}

void FlxVideo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxVideo);
	HX_MARK_MEMBER_NAME(autoPause,"autoPause");
	HX_MARK_MEMBER_NAME(autoResizeMode,"autoResizeMode");
	HX_MARK_MEMBER_NAME(autoVolumeHandle,"autoVolumeHandle");
	HX_MARK_MEMBER_NAME(getCalculatedVolume,"getCalculatedVolume");
	 ::hxvlc::openfl::Video_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxVideo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(autoPause,"autoPause");
	HX_VISIT_MEMBER_NAME(autoResizeMode,"autoResizeMode");
	HX_VISIT_MEMBER_NAME(autoVolumeHandle,"autoVolumeHandle");
	HX_VISIT_MEMBER_NAME(getCalculatedVolume,"getCalculatedVolume");
	 ::hxvlc::openfl::Video_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxVideo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return ::hx::Val( dispose_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoPause") ) { return ::hx::Val( autoPause ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"autoResizeMode") ) { return ::hx::Val( autoResizeMode ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"autoVolumeHandle") ) { return ::hx::Val( autoVolumeHandle ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getCalculatedVolume") ) { return ::hx::Val( getCalculatedVolume ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlxVideo_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"autoPause") ) { autoPause=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"autoResizeMode") ) { autoResizeMode=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"autoVolumeHandle") ) { autoVolumeHandle=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getCalculatedVolume") ) { getCalculatedVolume=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxVideo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("autoPause",07,15,63,9b));
	outFields->push(HX_("autoResizeMode",c6,87,20,03));
	outFields->push(HX_("autoVolumeHandle",31,17,c3,32));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxVideo_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxVideo_obj,autoPause),HX_("autoPause",07,15,63,9b)},
	{::hx::fsInt,(int)offsetof(FlxVideo_obj,autoResizeMode),HX_("autoResizeMode",c6,87,20,03)},
	{::hx::fsBool,(int)offsetof(FlxVideo_obj,autoVolumeHandle),HX_("autoVolumeHandle",31,17,c3,32)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxVideo_obj,getCalculatedVolume),HX_("getCalculatedVolume",6e,ed,cb,8e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlxVideo_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxVideo_obj_sMemberFields[] = {
	HX_("autoPause",07,15,63,9b),
	HX_("autoResizeMode",c6,87,20,03),
	HX_("autoVolumeHandle",31,17,c3,32),
	HX_("getCalculatedVolume",6e,ed,cb,8e),
	HX_("load",26,9a,b7,47),
	HX_("dispose",9f,80,4c,bb),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class FlxVideo_obj::__mClass;

void FlxVideo_obj::__register()
{
	FlxVideo_obj _hx_dummy;
	FlxVideo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("hxvlc.flixel.FlxVideo",0a,14,62,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxVideo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxVideo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxVideo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxVideo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hxvlc
} // end namespace flixel
