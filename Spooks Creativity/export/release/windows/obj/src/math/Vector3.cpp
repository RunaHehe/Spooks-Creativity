// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_64_new,"math.Vector3","new",0x5ef4fb3c,"math.Vector3.new","math/Vector3.hx",64,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_77_add,"math.Vector3","add",0x5eeb1cfd,"math.Vector3.add","math/Vector3.hx",77,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_105_clone,"math.Vector3","clone",0x71c9ad39,"math.Vector3.clone","math/Vector3.hx",105,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_117_lerp,"math.Vector3","lerp",0xb614681b,"math.Vector3.lerp","math/Vector3.hx",117,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_130_copyFrom,"math.Vector3","copyFrom",0xb5cb0363,"math.Vector3.copyFrom","math/Vector3.hx",130,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_143_crossProduct,"math.Vector3","crossProduct",0x20b24133,"math.Vector3.crossProduct","math/Vector3.hx",143,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_154_decrementBy,"math.Vector3","decrementBy",0xf7cb81a6,"math.Vector3.decrementBy","math/Vector3.hx",154,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_198_dotProduct,"math.Vector3","dotProduct",0xd382504a,"math.Vector3.dotProduct","math/Vector3.hx",198,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_210_equals,"math.Vector3","equals",0xd052f4e3,"math.Vector3.equals","math/Vector3.hx",210,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_218_incrementBy,"math.Vector3","incrementBy",0x3ec1d0c2,"math.Vector3.incrementBy","math/Vector3.hx",218,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_233_nearEquals,"math.Vector3","nearEquals",0x940399eb,"math.Vector3.nearEquals","math/Vector3.hx",233,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_243_negate,"math.Vector3","negate",0x77794866,"math.Vector3.negate","math/Vector3.hx",243,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_254_normalize,"math.Vector3","normalize",0x7aefef69,"math.Vector3.normalize","math/Vector3.hx",254,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_272_scaleBy,"math.Vector3","scaleBy",0xa8ad07dd,"math.Vector3.scaleBy","math/Vector3.hx",272,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_285_setTo,"math.Vector3","setTo",0xa3962b99,"math.Vector3.setTo","math/Vector3.hx",285,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_299_subtract,"math.Vector3","subtract",0xe57b6cb8,"math.Vector3.subtract","math/Vector3.hx",299,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_307_toString,"math.Vector3","toString",0x25d8c850,"math.Vector3.toString","math/Vector3.hx",307,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_313_get_length,"math.Vector3","get_length",0x25212d53,"math.Vector3.get_length","math/Vector3.hx",313,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_318_get_lengthSquared,"math.Vector3","get_lengthSquared",0xe2892414,"math.Vector3.get_lengthSquared","math/Vector3.hx",318,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_90_angleBetween,"math.Vector3","angleBetween",0x26bd7fd9,"math.Vector3.angleBetween","math/Vector3.hx",90,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_167_distance,"math.Vector3","distance",0x59638ad9,"math.Vector3.distance","math/Vector3.hx",167,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_183_distanceSquared,"math.Vector3","distanceSquared",0xde64234e,"math.Vector3.distanceSquared","math/Vector3.hx",183,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_323_get_X_AXIS,"math.Vector3","get_X_AXIS",0x93cc5995,"math.Vector3.get_X_AXIS","math/Vector3.hx",323,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_328_get_Y_AXIS,"math.Vector3","get_Y_AXIS",0xfa27b5f4,"math.Vector3.get_Y_AXIS","math/Vector3.hx",328,0x1c45aaf5)
HX_LOCAL_STACK_FRAME(_hx_pos_5d28f5d2a76b0cb3_333_get_Z_AXIS,"math.Vector3","get_Z_AXIS",0x60831253,"math.Vector3.get_Z_AXIS","math/Vector3.hx",333,0x1c45aaf5)
namespace math{

void Vector3_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z){
            		Float x = __o_x.Default(((Float)0.));
            		Float y = __o_y.Default(((Float)0.));
            		Float z = __o_z.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_64_new)
HXLINE(  65)		this->x = x;
HXLINE(  66)		this->y = y;
HXLINE(  67)		this->z = z;
            	}

Dynamic Vector3_obj::__CreateEmpty() { return new Vector3_obj; }

void *Vector3_obj::_hx_vtable = 0;

Dynamic Vector3_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Vector3_obj > _hx_result = new Vector3_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Vector3_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x63dc21a8;
}

 ::math::Vector3 Vector3_obj::add( ::math::Vector3 a, ::math::Vector3 result){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_77_add)
HXLINE(  78)		if (::hx::IsNull( result )) {
HXLINE(  78)			result =  ::math::Vector3_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE(  79)		{
HXLINE(  79)			result->x = (this->x + a->x);
HXDLIN(  79)			result->y = (this->y + a->y);
HXDLIN(  79)			result->z = (this->z + a->z);
            		}
HXLINE(  80)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector3_obj,add,return )

 ::math::Vector3 Vector3_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_105_clone)
HXDLIN( 105)		return  ::math::Vector3_obj::__alloc( HX_CTX ,this->x,this->y,this->z);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,clone,return )

 ::math::Vector3 Vector3_obj::lerp( ::math::Vector3 goal,Float alpha){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_117_lerp)
HXDLIN( 117)		return  ::math::Vector3_obj::__alloc( HX_CTX ,((alpha * goal->x) + (this->x * (( (Float)(1) ) - alpha))),((alpha * goal->y) + (this->y * (( (Float)(1) ) - alpha))),((alpha * goal->z) + (this->z * (( (Float)(1) ) - alpha))));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector3_obj,lerp,return )

void Vector3_obj::copyFrom( ::math::Vector3 sourceVector3){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_130_copyFrom)
HXLINE( 131)		this->x = sourceVector3->x;
HXLINE( 132)		this->y = sourceVector3->y;
HXLINE( 133)		this->z = sourceVector3->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3_obj,copyFrom,(void))

 ::math::Vector3 Vector3_obj::crossProduct( ::math::Vector3 a, ::math::Vector3 result){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_143_crossProduct)
HXLINE( 144)		if (::hx::IsNull( result )) {
HXLINE( 144)			result =  ::math::Vector3_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 145)		{
HXLINE( 145)			Float ya = ((this->z * a->x) - (this->x * a->z));
HXDLIN( 145)			Float za = ((this->x * a->y) - (this->y * a->x));
HXDLIN( 145)			result->x = ((this->y * a->z) - (this->z * a->y));
HXDLIN( 145)			result->y = ya;
HXDLIN( 145)			result->z = za;
            		}
HXLINE( 146)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector3_obj,crossProduct,return )

void Vector3_obj::decrementBy( ::math::Vector3 a){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_154_decrementBy)
HXLINE( 155)		 ::math::Vector3 _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 155)		_hx_tmp->x = (_hx_tmp->x - a->x);
HXLINE( 156)		 ::math::Vector3 _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 156)		_hx_tmp1->y = (_hx_tmp1->y - a->y);
HXLINE( 157)		 ::math::Vector3 _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 157)		_hx_tmp2->z = (_hx_tmp2->z - a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3_obj,decrementBy,(void))

Float Vector3_obj::dotProduct( ::math::Vector3 a){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_198_dotProduct)
HXDLIN( 198)		return (((this->x * a->x) + (this->y * a->y)) + (this->z * a->z));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3_obj,dotProduct,return )

bool Vector3_obj::equals( ::math::Vector3 toCompare){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_210_equals)
HXDLIN( 210)		bool _hx_tmp;
HXDLIN( 210)		if ((this->x == toCompare->x)) {
HXDLIN( 210)			_hx_tmp = (this->y == toCompare->y);
            		}
            		else {
HXDLIN( 210)			_hx_tmp = false;
            		}
HXDLIN( 210)		if (_hx_tmp) {
HXDLIN( 210)			return (this->z == toCompare->z);
            		}
            		else {
HXDLIN( 210)			return false;
            		}
HXDLIN( 210)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3_obj,equals,return )

void Vector3_obj::incrementBy( ::math::Vector3 a){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_218_incrementBy)
HXLINE( 219)		 ::math::Vector3 _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 219)		_hx_tmp->x = (_hx_tmp->x + a->x);
HXLINE( 220)		 ::math::Vector3 _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 220)		_hx_tmp1->y = (_hx_tmp1->y + a->y);
HXLINE( 221)		 ::math::Vector3 _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 221)		_hx_tmp2->z = (_hx_tmp2->z + a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3_obj,incrementBy,(void))

bool Vector3_obj::nearEquals( ::math::Vector3 toCompare,Float tolerance){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_233_nearEquals)
HXDLIN( 233)		bool _hx_tmp;
HXDLIN( 233)		if ((::Math_obj::abs((this->x - toCompare->x)) < tolerance)) {
HXDLIN( 233)			_hx_tmp = (::Math_obj::abs((this->y - toCompare->y)) < tolerance);
            		}
            		else {
HXDLIN( 233)			_hx_tmp = false;
            		}
HXDLIN( 233)		if (_hx_tmp) {
HXLINE( 235)			return (::Math_obj::abs((this->z - toCompare->z)) < tolerance);
            		}
            		else {
HXDLIN( 233)			return false;
            		}
HXDLIN( 233)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector3_obj,nearEquals,return )

void Vector3_obj::negate(){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_243_negate)
HXLINE( 244)		 ::math::Vector3 _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 244)		_hx_tmp->x = (_hx_tmp->x * ( (Float)(-1) ));
HXLINE( 245)		 ::math::Vector3 _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 245)		_hx_tmp1->y = (_hx_tmp1->y * ( (Float)(-1) ));
HXLINE( 246)		 ::math::Vector3 _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 246)		_hx_tmp2->z = (_hx_tmp2->z * ( (Float)(-1) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,negate,(void))

Float Vector3_obj::normalize(){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_254_normalize)
HXLINE( 255)		Float l = ::Math_obj::sqrt((((this->x * this->x) + (this->y * this->y)) + (this->z * this->z)));
HXLINE( 257)		if ((l != 0)) {
HXLINE( 259)			 ::math::Vector3 _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 259)			_hx_tmp->x = (_hx_tmp->x / l);
HXLINE( 260)			 ::math::Vector3 _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 260)			_hx_tmp1->y = (_hx_tmp1->y / l);
HXLINE( 261)			 ::math::Vector3 _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 261)			_hx_tmp2->z = (_hx_tmp2->z / l);
            		}
HXLINE( 264)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,normalize,return )

void Vector3_obj::scaleBy(Float s){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_272_scaleBy)
HXLINE( 273)		 ::math::Vector3 _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 273)		_hx_tmp->x = (_hx_tmp->x * s);
HXLINE( 274)		 ::math::Vector3 _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 274)		_hx_tmp1->y = (_hx_tmp1->y * s);
HXLINE( 275)		 ::math::Vector3 _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 275)		_hx_tmp2->z = (_hx_tmp2->z * s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3_obj,scaleBy,(void))

void Vector3_obj::setTo(Float xa,Float ya,Float za){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_285_setTo)
HXLINE( 286)		this->x = xa;
HXLINE( 287)		this->y = ya;
HXLINE( 288)		this->z = za;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector3_obj,setTo,(void))

 ::math::Vector3 Vector3_obj::subtract( ::math::Vector3 a, ::math::Vector3 result){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_299_subtract)
HXLINE( 300)		if (::hx::IsNull( result )) {
HXLINE( 300)			result =  ::math::Vector3_obj::__alloc( HX_CTX ,null(),null(),null());
            		}
HXLINE( 301)		{
HXLINE( 301)			result->x = (this->x - a->x);
HXDLIN( 301)			result->y = (this->y - a->y);
HXDLIN( 301)			result->z = (this->z - a->z);
            		}
HXLINE( 302)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector3_obj,subtract,return )

::String Vector3_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_307_toString)
HXDLIN( 307)		return ((((((HX_("Vector3(",38,90,6f,48) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(", ",74,26,00,00)) + this->z) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,toString,return )

Float Vector3_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_313_get_length)
HXDLIN( 313)		return ::Math_obj::sqrt((((this->x * this->x) + (this->y * this->y)) + (this->z * this->z)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,get_length,return )

Float Vector3_obj::get_lengthSquared(){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_318_get_lengthSquared)
HXDLIN( 318)		return (((this->x * this->x) + (this->y * this->y)) + (this->z * this->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,get_lengthSquared,return )

Float Vector3_obj::angleBetween( ::math::Vector3 a, ::math::Vector3 b){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_90_angleBetween)
HXLINE(  91)		 ::math::Vector3 a0 =  ::math::Vector3_obj::__alloc( HX_CTX ,a->x,a->y,a->z);
HXLINE(  92)		{
HXLINE(  92)			Float l = ::Math_obj::sqrt((((a0->x * a0->x) + (a0->y * a0->y)) + (a0->z * a0->z)));
HXDLIN(  92)			if ((l != 0)) {
HXLINE(  92)				 ::math::Vector3 a01 = a0;
HXDLIN(  92)				a01->x = (a01->x / l);
HXDLIN(  92)				 ::math::Vector3 a02 = a0;
HXDLIN(  92)				a02->y = (a02->y / l);
HXDLIN(  92)				 ::math::Vector3 a03 = a0;
HXDLIN(  92)				a03->z = (a03->z / l);
            			}
            		}
HXLINE(  93)		 ::math::Vector3 b0 =  ::math::Vector3_obj::__alloc( HX_CTX ,b->x,b->y,b->z);
HXLINE(  94)		{
HXLINE(  94)			Float l1 = ::Math_obj::sqrt((((b0->x * b0->x) + (b0->y * b0->y)) + (b0->z * b0->z)));
HXDLIN(  94)			if ((l1 != 0)) {
HXLINE(  94)				 ::math::Vector3 b01 = b0;
HXDLIN(  94)				b01->x = (b01->x / l1);
HXDLIN(  94)				 ::math::Vector3 b02 = b0;
HXDLIN(  94)				b02->y = (b02->y / l1);
HXDLIN(  94)				 ::math::Vector3 b03 = b0;
HXDLIN(  94)				b03->z = (b03->z / l1);
            			}
            		}
HXLINE(  96)		return ::Math_obj::acos((((a0->x * b0->x) + (a0->y * b0->y)) + (a0->z * b0->z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_obj,angleBetween,return )

Float Vector3_obj::distance( ::math::Vector3 pt1, ::math::Vector3 pt2){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_167_distance)
HXLINE( 168)		Float x = (pt2->x - pt1->x);
HXLINE( 169)		Float y = (pt2->y - pt1->y);
HXLINE( 170)		Float z = (pt2->z - pt1->z);
HXLINE( 172)		return ::Math_obj::sqrt((((x * x) + (y * y)) + (z * z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_obj,distance,return )

Float Vector3_obj::distanceSquared( ::math::Vector3 pt1, ::math::Vector3 pt2){
            	HX_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_183_distanceSquared)
HXLINE( 184)		Float x = (pt2->x - pt1->x);
HXLINE( 185)		Float y = (pt2->y - pt1->y);
HXLINE( 186)		Float z = (pt2->z - pt1->z);
HXLINE( 188)		return (((x * x) + (y * y)) + (z * z));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3_obj,distanceSquared,return )

 ::math::Vector3 Vector3_obj::get_X_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_323_get_X_AXIS)
HXDLIN( 323)		return  ::math::Vector3_obj::__alloc( HX_CTX ,1,0,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,get_X_AXIS,return )

 ::math::Vector3 Vector3_obj::get_Y_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_328_get_Y_AXIS)
HXDLIN( 328)		return  ::math::Vector3_obj::__alloc( HX_CTX ,0,1,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,get_Y_AXIS,return )

 ::math::Vector3 Vector3_obj::get_Z_AXIS(){
            	HX_GC_STACKFRAME(&_hx_pos_5d28f5d2a76b0cb3_333_get_Z_AXIS)
HXDLIN( 333)		return  ::math::Vector3_obj::__alloc( HX_CTX ,0,0,1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3_obj,get_Z_AXIS,return )


::hx::ObjectPtr< Vector3_obj > Vector3_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z) {
	::hx::ObjectPtr< Vector3_obj > __this = new Vector3_obj();
	__this->__construct(__o_x,__o_y,__o_z);
	return __this;
}

::hx::ObjectPtr< Vector3_obj > Vector3_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< Float >  __o_z) {
	Vector3_obj *__this = (Vector3_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Vector3_obj), false, "math.Vector3"));
	*(void **)__this = Vector3_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_z);
	return __this;
}

Vector3_obj::Vector3_obj()
{
}

::hx::Val Vector3_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return ::hx::Val( z ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { return ::hx::Val( lerp_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return ::hx::Val( setTo_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_length() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return ::hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"negate") ) { return ::hx::Val( negate_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scaleBy") ) { return ::hx::Val( scaleBy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return ::hx::Val( subtract_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return ::hx::Val( normalize_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dotProduct") ) { return ::hx::Val( dotProduct_dyn() ); }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { return ::hx::Val( nearEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decrementBy") ) { return ::hx::Val( decrementBy_dyn() ); }
		if (HX_FIELD_EQ(inName,"incrementBy") ) { return ::hx::Val( incrementBy_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"crossProduct") ) { return ::hx::Val( crossProduct_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_lengthSquared() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { return ::hx::Val( get_lengthSquared_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vector3_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"X_AXIS") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_X_AXIS() ); return true; } }
		if (HX_FIELD_EQ(inName,"Y_AXIS") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_Y_AXIS() ); return true; } }
		if (HX_FIELD_EQ(inName,"Z_AXIS") ) { if (inCallProp == ::hx::paccAlways) { outValue = ( get_Z_AXIS() ); return true; } }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_X_AXIS") ) { outValue = get_X_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Y_AXIS") ) { outValue = get_Y_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Z_AXIS") ) { outValue = get_Z_AXIS_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { outValue = angleBetween_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"distanceSquared") ) { outValue = distanceSquared_dyn(); return true; }
	}
	return false;
}

::hx::Val Vector3_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vector3_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("lengthSquared",e1,24,45,35));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Vector3_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Vector3_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Vector3_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Vector3_obj,z),HX_("z",7a,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Vector3_obj_sStaticStorageInfo = 0;
#endif

static ::String Vector3_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("add",21,f2,49,00),
	HX_("clone",5d,13,63,48),
	HX_("lerp",77,12,b0,47),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("crossProduct",8f,a7,c9,63),
	HX_("decrementBy",ca,1a,7a,ad),
	HX_("dotProduct",a6,27,f0,3d),
	HX_("equals",3f,ee,f2,bf),
	HX_("incrementBy",e6,69,70,f4),
	HX_("nearEquals",47,71,71,fe),
	HX_("negate",c2,41,19,67),
	HX_("normalize",8d,37,a1,ab),
	HX_("scaleBy",01,3f,07,65),
	HX_("setTo",bd,91,2f,7a),
	HX_("subtract",14,75,11,f8),
	HX_("toString",ac,d0,6e,38),
	HX_("get_length",af,04,8f,8f),
	HX_("get_lengthSquared",38,30,b5,3b),
	::String(null()) };

::hx::Class Vector3_obj::__mClass;

static ::String Vector3_obj_sStaticFields[] = {
	HX_("angleBetween",35,e6,d4,69),
	HX_("distance",35,93,f9,6b),
	HX_("distanceSquared",72,1e,40,0c),
	HX_("get_X_AXIS",f1,30,3a,fe),
	HX_("get_Y_AXIS",50,8d,95,64),
	HX_("get_Z_AXIS",af,e9,f0,ca),
	::String(null())
};

void Vector3_obj::__register()
{
	Vector3_obj _hx_dummy;
	Vector3_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("math.Vector3",4a,ed,97,95);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector3_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Vector3_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Vector3_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Vector3_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector3_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector3_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace math
