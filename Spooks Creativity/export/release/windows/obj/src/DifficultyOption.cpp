// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DifficultyOption
#include <DifficultyOption.h>
#endif
#ifndef INCLUDED_MainMenuStateAmmar
#include <MainMenuStateAmmar.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1b3720ee0da69f55_2261_new,"DifficultyOption","new",0xa098c922,"DifficultyOption.new","MainMenuStateAmmar.hx",2261,0x38c8c245)
static const ::String _hx_array_data_ffb95030_2[] = {
	HX_("Newbie",7e,d8,41,a6),HX_("Classic",f2,79,e2,36),HX_("Challenging",40,14,ca,6e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1b3720ee0da69f55_2306_update,"DifficultyOption","update",0xd666f287,"DifficultyOption.update","MainMenuStateAmmar.hx",2306,0x38c8c245)
HX_LOCAL_STACK_FRAME(_hx_pos_1b3720ee0da69f55_2332_changeItem,"DifficultyOption","changeItem",0x070d7e21,"DifficultyOption.changeItem","MainMenuStateAmmar.hx",2332,0x38c8c245)

void DifficultyOption_obj::__construct( ::flixel::FlxCamera camera){
            	HX_GC_STACKFRAME(&_hx_pos_1b3720ee0da69f55_2261_new)
HXLINE(2267)		this->cooldown = ((Float)0.5);
HXLINE(2266)		this->items = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2265)		this->sounds = ::MainMenuStateAmmar_obj::sounds;
HXLINE(2264)		this->select = 1;
HXLINE(2263)		this->diff = ::Array_obj< ::String >::fromData( _hx_array_data_ffb95030_2,3);
HXLINE(2270)		super::__construct();
HXLINE(2272)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1300,800,-16777216,null(),null());
HXLINE(2273)		bg->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,camera));
HXLINE(2274)		{
HXLINE(2274)			int axes = 17;
HXDLIN(2274)			bool _hx_tmp;
HXDLIN(2274)			if ((axes != 1)) {
HXLINE(2274)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(2274)				_hx_tmp = true;
            			}
HXDLIN(2274)			if (_hx_tmp) {
HXLINE(2274)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(2274)				bg->set_x(((( (Float)(_hx_tmp1) ) - bg->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2274)			bool _hx_tmp2;
HXDLIN(2274)			if ((axes != 16)) {
HXLINE(2274)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(2274)				_hx_tmp2 = true;
            			}
HXDLIN(2274)			if (_hx_tmp2) {
HXLINE(2274)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(2274)				bg->set_y(((( (Float)(_hx_tmp3) ) - bg->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2275)		this->add(bg);
HXLINE(2276)		bg->set_alpha(( (Float)(0) ));
HXLINE(2278)		 ::flixel::FlxSprite canvas =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1280,720,0,null(),null());
HXLINE(2279)		canvas->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,camera));
HXLINE(2280)		{
HXLINE(2280)			int axes1 = 17;
HXDLIN(2280)			bool _hx_tmp4;
HXDLIN(2280)			if ((axes1 != 1)) {
HXLINE(2280)				_hx_tmp4 = (axes1 == 17);
            			}
            			else {
HXLINE(2280)				_hx_tmp4 = true;
            			}
HXDLIN(2280)			if (_hx_tmp4) {
HXLINE(2280)				int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(2280)				canvas->set_x(((( (Float)(_hx_tmp5) ) - canvas->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(2280)			bool _hx_tmp6;
HXDLIN(2280)			if ((axes1 != 16)) {
HXLINE(2280)				_hx_tmp6 = (axes1 == 17);
            			}
            			else {
HXLINE(2280)				_hx_tmp6 = true;
            			}
HXDLIN(2280)			if (_hx_tmp6) {
HXLINE(2280)				int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(2280)				canvas->set_y(((( (Float)(_hx_tmp7) ) - canvas->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(2281)		this->add(canvas);
HXLINE(2282)		::flixel::util::FlxSpriteUtil_obj::drawLine(canvas,( (Float)(0) ),((Float)310.),( (Float)(1280) ),((Float)310.), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("color",63,71,5c,4a),(int)2063597567)
            			->setFixed(1,HX_("thickness",74,f1,66,5a),5)),null());
HXLINE(2283)		::flixel::util::FlxSpriteUtil_obj::drawLine(canvas,( (Float)(0) ),((Float)410.),( (Float)(1280) ),((Float)410.), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("color",63,71,5c,4a),(int)2063597567)
            			->setFixed(1,HX_("thickness",74,f1,66,5a),5)),null());
HXLINE(2285)		canvas->set_x((canvas->x + 1280));
HXLINE(2286)		::flixel::tweens::FlxTween_obj::tween(canvas, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("x",78,00,00,00),(canvas->x - ( (Float)(1280) )))),((Float)0.5), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(2287)		::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.75))),((Float)0.5),null());
HXLINE(2289)		int id = 0;
HXLINE(2290)		{
HXLINE(2290)			int _g = 0;
HXDLIN(2290)			::Array< ::String > _g1 = this->diff;
HXDLIN(2290)			while((_g < _g1->length)){
HXLINE(2290)				::String item = _g1->__get(_g);
HXDLIN(2290)				_g = (_g + 1);
HXLINE(2291)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,400,item,48,false);
HXLINE(2292)				::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99)));
HXDLIN(2292)				::String _hx_tmp8;
HXDLIN(2292)				if (::sys::FileSystem_obj::exists(file)) {
HXLINE(2292)					_hx_tmp8 = file;
            				}
            				else {
HXLINE(2292)					_hx_tmp8 = (HX_("assets/fonts/",37,ff,a5,9c) + HX_("Phantomuff/aPhantomMuff Full Letters.ttf",f9,15,90,99));
            				}
HXDLIN(2292)				text->setFormat(_hx_tmp8,48,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(2293)				int color = (int)-1879021825;
HXLINE(2294)				if ((item.toLowerCase() == HX_("newbie",5e,64,ad,71))) {
HXLINE(2294)					color = (int)-1862283264;
            				}
            				else {
HXLINE(2295)					if ((item.toLowerCase() == HX_("challenging",60,7c,97,8a))) {
HXLINE(2295)						color = (int)-1862323456;
            					}
            				}
HXLINE(2296)				{
HXLINE(2296)					text->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXDLIN(2296)					text->set_borderColor(color);
HXDLIN(2296)					text->set_borderSize(( (Float)(4) ));
HXDLIN(2296)					text->set_borderQuality(( (Float)(1) ));
            				}
HXLINE(2297)				text->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,camera));
HXLINE(2298)				{
HXLINE(2298)					int axes2 = 17;
HXDLIN(2298)					bool _hx_tmp9;
HXDLIN(2298)					if ((axes2 != 1)) {
HXLINE(2298)						_hx_tmp9 = (axes2 == 17);
            					}
            					else {
HXLINE(2298)						_hx_tmp9 = true;
            					}
HXDLIN(2298)					if (_hx_tmp9) {
HXLINE(2298)						int _hx_tmp10 = ::flixel::FlxG_obj::width;
HXDLIN(2298)						text->set_x(((( (Float)(_hx_tmp10) ) - text->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(2298)					bool _hx_tmp11;
HXDLIN(2298)					if ((axes2 != 16)) {
HXLINE(2298)						_hx_tmp11 = (axes2 == 17);
            					}
            					else {
HXLINE(2298)						_hx_tmp11 = true;
            					}
HXDLIN(2298)					if (_hx_tmp11) {
HXLINE(2298)						int _hx_tmp12 = ::flixel::FlxG_obj::height;
HXDLIN(2298)						text->set_y(((( (Float)(_hx_tmp12) ) - text->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(2299)				text->ID = id;
HXLINE(2300)				this->add(text);
HXLINE(2301)				this->items->push(text);
HXLINE(2302)				id = (id + 1);
            			}
            		}
            	}

Dynamic DifficultyOption_obj::__CreateEmpty() { return new DifficultyOption_obj; }

void *DifficultyOption_obj::_hx_vtable = 0;

Dynamic DifficultyOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DifficultyOption_obj > _hx_result = new DifficultyOption_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool DifficultyOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c05dd04) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x5661ffbf) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x5661ffbf;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x7c05dd04;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void DifficultyOption_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1b3720ee0da69f55_2306_update)
HXLINE(2307)		if ((this->cooldown > 0)) {
HXLINE(2308)			 ::DifficultyOption _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2308)			_hx_tmp->cooldown = (_hx_tmp->cooldown - elapsed);
            		}
HXLINE(2309)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(2310)			this->close();
HXLINE(2311)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(2311)			_hx_tmp1->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
            		}
HXLINE(2313)		if (::PlayerSettings_obj::player1->controls->_ui_upP->check()) {
HXLINE(2314)			this->changeItem(-1);
            		}
HXLINE(2316)		if (::PlayerSettings_obj::player1->controls->_ui_downP->check()) {
HXLINE(2317)			this->changeItem(1);
            		}
HXLINE(2319)		bool _hx_tmp2;
HXDLIN(2319)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE(2319)			_hx_tmp2 = (this->cooldown <= 0);
            		}
            		else {
HXLINE(2319)			_hx_tmp2 = false;
            		}
HXDLIN(2319)		if (_hx_tmp2) {
HXLINE(2320)			::MainMenuStateAmmar_obj::difficultyChosen = true;
HXLINE(2321)			::ClientPrefs_obj::aDifficulty = this->diff->__get(this->select).toLowerCase();
HXLINE(2322)			::ClientPrefs_obj::saveSettings();
HXLINE(2323)			this->close();
            		}
HXLINE(2326)		{
HXLINE(2326)			int _g = 0;
HXDLIN(2326)			::Array< ::Dynamic> _g1 = this->items;
HXDLIN(2326)			while((_g < _g1->length)){
HXLINE(2326)				 ::flixel::text::FlxText item = _g1->__get(_g).StaticCast<  ::flixel::text::FlxText >();
HXDLIN(2326)				_g = (_g + 1);
HXLINE(2327)				Float targetY = (((Float)360.) - (item->get_height() / ( (Float)(2) )));
HXDLIN(2327)				Float targetY1 = (targetY + ((item->ID - this->select) * 80));
HXLINE(2328)				Float a = item->y;
HXDLIN(2328)				Float Value = (elapsed * ( (Float)(10) ));
HXDLIN(2328)				Float lowerBound;
HXDLIN(2328)				if ((Value < 0)) {
HXLINE(2328)					lowerBound = ( (Float)(0) );
            				}
            				else {
HXLINE(2328)					lowerBound = Value;
            				}
HXDLIN(2328)				Float _hx_tmp3;
HXDLIN(2328)				if ((lowerBound > 1)) {
HXLINE(2328)					_hx_tmp3 = ( (Float)(1) );
            				}
            				else {
HXLINE(2328)					_hx_tmp3 = lowerBound;
            				}
HXDLIN(2328)				item->set_y((a + (_hx_tmp3 * (targetY1 - a))));
            			}
            		}
            	}


void DifficultyOption_obj::changeItem(int amount){
            	HX_STACKFRAME(&_hx_pos_1b3720ee0da69f55_2332_changeItem)
HXLINE(2333)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2333)		_hx_tmp->play(this->sounds->get(HX_("scroll",0d,d8,64,47)),null(),null(),null(),null(),null());
HXLINE(2334)		 ::DifficultyOption _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2334)		_hx_tmp1->select = (_hx_tmp1->select + amount);
HXLINE(2335)		Float Value = ( (Float)(this->select) );
HXDLIN(2335)		 ::Dynamic Max = (this->diff->length - 1);
HXDLIN(2335)		Float lowerBound;
HXDLIN(2335)		if ((Value < 0)) {
HXLINE(2335)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE(2335)			lowerBound = Value;
            		}
HXDLIN(2335)		Float _hx_tmp2;
HXDLIN(2335)		bool _hx_tmp3;
HXDLIN(2335)		if (::hx::IsNotNull( Max )) {
HXLINE(2335)			_hx_tmp3 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(2335)			_hx_tmp3 = false;
            		}
HXDLIN(2335)		if (_hx_tmp3) {
HXLINE(2335)			_hx_tmp2 = ( (Float)(Max) );
            		}
            		else {
HXLINE(2335)			_hx_tmp2 = lowerBound;
            		}
HXDLIN(2335)		this->select = ::Std_obj::_hx_int(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DifficultyOption_obj,changeItem,(void))


::hx::ObjectPtr< DifficultyOption_obj > DifficultyOption_obj::__new( ::flixel::FlxCamera camera) {
	::hx::ObjectPtr< DifficultyOption_obj > __this = new DifficultyOption_obj();
	__this->__construct(camera);
	return __this;
}

::hx::ObjectPtr< DifficultyOption_obj > DifficultyOption_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::FlxCamera camera) {
	DifficultyOption_obj *__this = (DifficultyOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DifficultyOption_obj), true, "DifficultyOption"));
	*(void **)__this = DifficultyOption_obj::_hx_vtable;
	__this->__construct(camera);
	return __this;
}

DifficultyOption_obj::DifficultyOption_obj()
{
}

void DifficultyOption_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DifficultyOption);
	HX_MARK_MEMBER_NAME(diff,"diff");
	HX_MARK_MEMBER_NAME(select,"select");
	HX_MARK_MEMBER_NAME(sounds,"sounds");
	HX_MARK_MEMBER_NAME(items,"items");
	HX_MARK_MEMBER_NAME(cooldown,"cooldown");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DifficultyOption_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(diff,"diff");
	HX_VISIT_MEMBER_NAME(select,"select");
	HX_VISIT_MEMBER_NAME(sounds,"sounds");
	HX_VISIT_MEMBER_NAME(items,"items");
	HX_VISIT_MEMBER_NAME(cooldown,"cooldown");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DifficultyOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"diff") ) { return ::hx::Val( diff ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { return ::hx::Val( items ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"select") ) { return ::hx::Val( select ); }
		if (HX_FIELD_EQ(inName,"sounds") ) { return ::hx::Val( sounds ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cooldown") ) { return ::hx::Val( cooldown ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DifficultyOption_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"diff") ) { diff=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"items") ) { items=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"select") ) { select=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sounds") ) { sounds=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cooldown") ) { cooldown=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DifficultyOption_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("diff",05,5c,69,42));
	outFields->push(HX_("select",fc,1a,33,6a));
	outFields->push(HX_("sounds",c4,a8,2e,32));
	outFields->push(HX_("items",00,ac,0c,c2));
	outFields->push(HX_("cooldown",ab,4b,a2,f9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DifficultyOption_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DifficultyOption_obj,diff),HX_("diff",05,5c,69,42)},
	{::hx::fsInt,(int)offsetof(DifficultyOption_obj,select),HX_("select",fc,1a,33,6a)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(DifficultyOption_obj,sounds),HX_("sounds",c4,a8,2e,32)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(DifficultyOption_obj,items),HX_("items",00,ac,0c,c2)},
	{::hx::fsFloat,(int)offsetof(DifficultyOption_obj,cooldown),HX_("cooldown",ab,4b,a2,f9)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DifficultyOption_obj_sStaticStorageInfo = 0;
#endif

static ::String DifficultyOption_obj_sMemberFields[] = {
	HX_("diff",05,5c,69,42),
	HX_("select",fc,1a,33,6a),
	HX_("sounds",c4,a8,2e,32),
	HX_("items",00,ac,0c,c2),
	HX_("cooldown",ab,4b,a2,f9),
	HX_("update",09,86,05,87),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

::hx::Class DifficultyOption_obj::__mClass;

void DifficultyOption_obj::__register()
{
	DifficultyOption_obj _hx_dummy;
	DifficultyOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DifficultyOption",30,50,b9,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DifficultyOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DifficultyOption_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DifficultyOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DifficultyOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

