// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_events_BaseEvent
#include <modchart/events/BaseEvent.h>
#endif
#ifndef INCLUDED_modchart_events_ModEvent
#include <modchart/events/ModEvent.h>
#endif
#ifndef INCLUDED_modchart_events_SetEvent
#include <modchart/events/SetEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_14aae8b4545fcdaf_5_new,"modchart.events.SetEvent","new",0xaf3afe0d,"modchart.events.SetEvent.new","modchart/events/SetEvent.hx",5,0x466fc3e3)
HX_LOCAL_STACK_FRAME(_hx_pos_14aae8b4545fcdaf_7_run,"modchart.events.SetEvent","run",0xaf3e14f8,"modchart.events.SetEvent.run","modchart/events/SetEvent.hx",7,0x466fc3e3)
namespace modchart{
namespace events{

void SetEvent_obj::__construct(Float step,::String modName,Float target, ::Dynamic player, ::modchart::ModManager modMgr){
            	HX_STACKFRAME(&_hx_pos_14aae8b4545fcdaf_5_new)
HXDLIN(   5)		super::__construct(step,modName,target,player,modMgr);
            	}

Dynamic SetEvent_obj::__CreateEmpty() { return new SetEvent_obj; }

void *SetEvent_obj::_hx_vtable = 0;

Dynamic SetEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SetEvent_obj > _hx_result = new SetEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool SetEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x43e39c8d) {
		if (inClassId<=(int)0x01e47a14) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x01e47a14;
		} else {
			return inClassId==(int)0x43e39c8d;
		}
	} else {
		return inClassId==(int)0x60f16bad;
	}
}

void SetEvent_obj::run(Float curStep){
            	HX_STACKFRAME(&_hx_pos_14aae8b4545fcdaf_7_run)
HXLINE(   9)		this->manager->setValue(this->modName,this->endVal,this->player);
HXLINE(  10)		this->finished = true;
            	}



::hx::ObjectPtr< SetEvent_obj > SetEvent_obj::__new(Float step,::String modName,Float target, ::Dynamic player, ::modchart::ModManager modMgr) {
	::hx::ObjectPtr< SetEvent_obj > __this = new SetEvent_obj();
	__this->__construct(step,modName,target,player,modMgr);
	return __this;
}

::hx::ObjectPtr< SetEvent_obj > SetEvent_obj::__alloc(::hx::Ctx *_hx_ctx,Float step,::String modName,Float target, ::Dynamic player, ::modchart::ModManager modMgr) {
	SetEvent_obj *__this = (SetEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SetEvent_obj), true, "modchart.events.SetEvent"));
	*(void **)__this = SetEvent_obj::_hx_vtable;
	__this->__construct(step,modName,target,player,modMgr);
	return __this;
}

SetEvent_obj::SetEvent_obj()
{
}

::hx::Val SetEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SetEvent_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SetEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String SetEvent_obj_sMemberFields[] = {
	HX_("run",4b,e7,56,00),
	::String(null()) };

::hx::Class SetEvent_obj::__mClass;

void SetEvent_obj::__register()
{
	SetEvent_obj _hx_dummy;
	SetEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.events.SetEvent",9b,f3,ed,f7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SetEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SetEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SetEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SetEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace events
