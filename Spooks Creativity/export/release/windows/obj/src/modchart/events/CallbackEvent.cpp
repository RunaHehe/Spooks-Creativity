// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_events_BaseEvent
#include <modchart/events/BaseEvent.h>
#endif
#ifndef INCLUDED_modchart_events_CallbackEvent
#include <modchart/events/CallbackEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_197eb07f271d1a68_6_new,"modchart.events.CallbackEvent","new",0xb26d38a4,"modchart.events.CallbackEvent.new","modchart/events/CallbackEvent.hx",6,0xc53a596c)
HX_LOCAL_STACK_FRAME(_hx_pos_197eb07f271d1a68_11_run,"modchart.events.CallbackEvent","run",0xb2704f8f,"modchart.events.CallbackEvent.run","modchart/events/CallbackEvent.hx",11,0xc53a596c)
namespace modchart{
namespace events{

void CallbackEvent_obj::__construct(Float step, ::Dynamic callback, ::modchart::ModManager modMgr){
            	HX_STACKFRAME(&_hx_pos_197eb07f271d1a68_6_new)
HXLINE(   7)		super::__construct(step,modMgr);
HXLINE(   8)		this->callback = callback;
            	}

Dynamic CallbackEvent_obj::__CreateEmpty() { return new CallbackEvent_obj; }

void *CallbackEvent_obj::_hx_vtable = 0;

Dynamic CallbackEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CallbackEvent_obj > _hx_result = new CallbackEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool CallbackEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x01e47a14) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x01e47a14;
	} else {
		return inClassId==(int)0x18d15d60;
	}
}

void CallbackEvent_obj::run(Float curStep){
            	HX_STACKFRAME(&_hx_pos_197eb07f271d1a68_11_run)
HXLINE(  12)		this->callback(::hx::ObjectPtr<OBJ_>(this),curStep);
HXLINE(  13)		this->finished = true;
            	}



::hx::ObjectPtr< CallbackEvent_obj > CallbackEvent_obj::__new(Float step, ::Dynamic callback, ::modchart::ModManager modMgr) {
	::hx::ObjectPtr< CallbackEvent_obj > __this = new CallbackEvent_obj();
	__this->__construct(step,callback,modMgr);
	return __this;
}

::hx::ObjectPtr< CallbackEvent_obj > CallbackEvent_obj::__alloc(::hx::Ctx *_hx_ctx,Float step, ::Dynamic callback, ::modchart::ModManager modMgr) {
	CallbackEvent_obj *__this = (CallbackEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CallbackEvent_obj), true, "modchart.events.CallbackEvent"));
	*(void **)__this = CallbackEvent_obj::_hx_vtable;
	__this->__construct(step,callback,modMgr);
	return __this;
}

CallbackEvent_obj::CallbackEvent_obj()
{
}

void CallbackEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CallbackEvent);
	HX_MARK_MEMBER_NAME(callback,"callback");
	 ::modchart::events::BaseEvent_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CallbackEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(callback,"callback");
	 ::modchart::events::BaseEvent_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CallbackEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { return ::hx::Val( callback ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CallbackEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CallbackEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(CallbackEvent_obj,callback),HX_("callback",c5,99,06,7f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CallbackEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String CallbackEvent_obj_sMemberFields[] = {
	HX_("callback",c5,99,06,7f),
	HX_("run",4b,e7,56,00),
	::String(null()) };

::hx::Class CallbackEvent_obj::__mClass;

void CallbackEvent_obj::__register()
{
	CallbackEvent_obj _hx_dummy;
	CallbackEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.events.CallbackEvent",b2,56,fb,06);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CallbackEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CallbackEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallbackEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallbackEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace events
