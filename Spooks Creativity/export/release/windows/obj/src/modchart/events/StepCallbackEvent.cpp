// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_events_BaseEvent
#include <modchart/events/BaseEvent.h>
#endif
#ifndef INCLUDED_modchart_events_CallbackEvent
#include <modchart/events/CallbackEvent.h>
#endif
#ifndef INCLUDED_modchart_events_StepCallbackEvent
#include <modchart/events/StepCallbackEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89de6588e743c5e2_5_new,"modchart.events.StepCallbackEvent","new",0xec5b6e38,"modchart.events.StepCallbackEvent.new","modchart/events/StepCallbackEvent.hx",5,0x84058258)
HX_LOCAL_STACK_FRAME(_hx_pos_89de6588e743c5e2_13_run,"modchart.events.StepCallbackEvent","run",0xec5e8523,"modchart.events.StepCallbackEvent.run","modchart/events/StepCallbackEvent.hx",13,0x84058258)
namespace modchart{
namespace events{

void StepCallbackEvent_obj::__construct(Float step,Float endStep, ::Dynamic callback, ::modchart::ModManager modMgr){
            	HX_STACKFRAME(&_hx_pos_89de6588e743c5e2_5_new)
HXLINE(   6)		this->endStep = ((Float)0);
HXLINE(   9)		super::__construct(step,callback,modMgr);
HXLINE(  10)		this->endStep = endStep;
            	}

Dynamic StepCallbackEvent_obj::__CreateEmpty() { return new StepCallbackEvent_obj; }

void *StepCallbackEvent_obj::_hx_vtable = 0;

Dynamic StepCallbackEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StepCallbackEvent_obj > _hx_result = new StepCallbackEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool StepCallbackEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x18d15d60) {
		if (inClassId<=(int)0x01e47a14) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x01e47a14;
		} else {
			return inClassId==(int)0x18d15d60;
		}
	} else {
		return inClassId==(int)0x2e862d10;
	}
}

void StepCallbackEvent_obj::run(Float curStep){
            	HX_STACKFRAME(&_hx_pos_89de6588e743c5e2_13_run)
HXDLIN(  13)		if ((curStep <= this->endStep)) {
HXLINE(  14)			this->callback(::hx::ObjectPtr<OBJ_>(this),curStep);
            		}
            		else {
HXLINE(  16)			this->finished = true;
            		}
            	}



::hx::ObjectPtr< StepCallbackEvent_obj > StepCallbackEvent_obj::__new(Float step,Float endStep, ::Dynamic callback, ::modchart::ModManager modMgr) {
	::hx::ObjectPtr< StepCallbackEvent_obj > __this = new StepCallbackEvent_obj();
	__this->__construct(step,endStep,callback,modMgr);
	return __this;
}

::hx::ObjectPtr< StepCallbackEvent_obj > StepCallbackEvent_obj::__alloc(::hx::Ctx *_hx_ctx,Float step,Float endStep, ::Dynamic callback, ::modchart::ModManager modMgr) {
	StepCallbackEvent_obj *__this = (StepCallbackEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StepCallbackEvent_obj), true, "modchart.events.StepCallbackEvent"));
	*(void **)__this = StepCallbackEvent_obj::_hx_vtable;
	__this->__construct(step,endStep,callback,modMgr);
	return __this;
}

StepCallbackEvent_obj::StepCallbackEvent_obj()
{
}

::hx::Val StepCallbackEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endStep") ) { return ::hx::Val( endStep ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StepCallbackEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"endStep") ) { endStep=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StepCallbackEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("endStep",c7,a0,80,2e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StepCallbackEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(StepCallbackEvent_obj,endStep),HX_("endStep",c7,a0,80,2e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StepCallbackEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String StepCallbackEvent_obj_sMemberFields[] = {
	HX_("endStep",c7,a0,80,2e),
	HX_("run",4b,e7,56,00),
	::String(null()) };

::hx::Class StepCallbackEvent_obj::__mClass;

void StepCallbackEvent_obj::__register()
{
	StepCallbackEvent_obj _hx_dummy;
	StepCallbackEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.events.StepCallbackEvent",46,32,92,45);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StepCallbackEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StepCallbackEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StepCallbackEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StepCallbackEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace events
