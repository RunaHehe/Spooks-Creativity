// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_events_BaseEvent
#include <modchart/events/BaseEvent.h>
#endif
#ifndef INCLUDED_modchart_events_ModEvent
#include <modchart/events/ModEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_66bc6e39a1a9adaa_5_new,"modchart.events.ModEvent","new",0x28c71eed,"modchart.events.ModEvent.new","modchart/events/ModEvent.hx",5,0x950b5f03)
namespace modchart{
namespace events{

void ModEvent_obj::__construct(Float step,::String modName,Float target,::hx::Null< int >  __o_player, ::modchart::ModManager modMgr){
            		int player = __o_player.Default(-1);
            	HX_STACKFRAME(&_hx_pos_66bc6e39a1a9adaa_5_new)
HXLINE(   8)		this->player = -1;
HXLINE(   7)		this->endVal = ((Float)0);
HXLINE(   6)		this->modName = HX_("",00,00,00,00);
HXLINE(  14)		super::__construct(step,modMgr);
HXLINE(  15)		this->modName = modName;
HXLINE(  16)		this->player = player;
HXLINE(  17)		this->endVal = target;
HXLINE(  19)		this->mod = ( ( ::modchart::Modifier)(modMgr->_hx_register->get(modName)) );
            	}

Dynamic ModEvent_obj::__CreateEmpty() { return new ModEvent_obj; }

void *ModEvent_obj::_hx_vtable = 0;

Dynamic ModEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModEvent_obj > _hx_result = new ModEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool ModEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x01e47a14) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x01e47a14;
	} else {
		return inClassId==(int)0x43e39c8d;
	}
}


::hx::ObjectPtr< ModEvent_obj > ModEvent_obj::__new(Float step,::String modName,Float target,::hx::Null< int >  __o_player, ::modchart::ModManager modMgr) {
	::hx::ObjectPtr< ModEvent_obj > __this = new ModEvent_obj();
	__this->__construct(step,modName,target,__o_player,modMgr);
	return __this;
}

::hx::ObjectPtr< ModEvent_obj > ModEvent_obj::__alloc(::hx::Ctx *_hx_ctx,Float step,::String modName,Float target,::hx::Null< int >  __o_player, ::modchart::ModManager modMgr) {
	ModEvent_obj *__this = (ModEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModEvent_obj), true, "modchart.events.ModEvent"));
	*(void **)__this = ModEvent_obj::_hx_vtable;
	__this->__construct(step,modName,target,__o_player,modMgr);
	return __this;
}

ModEvent_obj::ModEvent_obj()
{
}

void ModEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModEvent);
	HX_MARK_MEMBER_NAME(modName,"modName");
	HX_MARK_MEMBER_NAME(endVal,"endVal");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(mod,"mod");
	 ::modchart::events::BaseEvent_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(modName,"modName");
	HX_VISIT_MEMBER_NAME(endVal,"endVal");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(mod,"mod");
	 ::modchart::events::BaseEvent_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mod") ) { return ::hx::Val( mod ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"endVal") ) { return ::hx::Val( endVal ); }
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"modName") ) { return ::hx::Val( modName ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ModEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mod") ) { mod=inValue.Cast<  ::modchart::Modifier >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"endVal") ) { endVal=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"modName") ) { modName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ModEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("modName",2d,3e,2b,de));
	outFields->push(HX_("endVal",c6,2d,7a,fa));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("mod",c2,16,53,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(ModEvent_obj,modName),HX_("modName",2d,3e,2b,de)},
	{::hx::fsFloat,(int)offsetof(ModEvent_obj,endVal),HX_("endVal",c6,2d,7a,fa)},
	{::hx::fsInt,(int)offsetof(ModEvent_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::modchart::Modifier */ ,(int)offsetof(ModEvent_obj,mod),HX_("mod",c2,16,53,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ModEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String ModEvent_obj_sMemberFields[] = {
	HX_("modName",2d,3e,2b,de),
	HX_("endVal",c6,2d,7a,fa),
	HX_("player",61,eb,b8,37),
	HX_("mod",c2,16,53,00),
	::String(null()) };

::hx::Class ModEvent_obj::__mClass;

void ModEvent_obj::__register()
{
	ModEvent_obj _hx_dummy;
	ModEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.events.ModEvent",7b,24,e0,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace events
