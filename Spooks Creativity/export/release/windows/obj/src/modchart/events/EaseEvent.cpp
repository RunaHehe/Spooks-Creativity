// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_events_BaseEvent
#include <modchart/events/BaseEvent.h>
#endif
#ifndef INCLUDED_modchart_events_EaseEvent
#include <modchart/events/EaseEvent.h>
#endif
#ifndef INCLUDED_modchart_events_ModEvent
#include <modchart/events/ModEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9b6af6255c99877c_8_new,"modchart.events.EaseEvent","new",0x08d426db,"modchart.events.EaseEvent.new","modchart/events/EaseEvent.hx",8,0x4e0ccf15)
HX_LOCAL_STACK_FRAME(_hx_pos_9b6af6255c99877c_24_ease,"modchart.events.EaseEvent","ease",0xaad7e113,"modchart.events.EaseEvent.ease","modchart/events/EaseEvent.hx",24,0x4e0ccf15)
HX_LOCAL_STACK_FRAME(_hx_pos_9b6af6255c99877c_31_run,"modchart.events.EaseEvent","run",0x08d73dc6,"modchart.events.EaseEvent.run","modchart/events/EaseEvent.hx",31,0x4e0ccf15)
namespace modchart{
namespace events{

void EaseEvent_obj::__construct(Float step,Float endStep,::String modName,Float target, ::Dynamic easeFunc,::hx::Null< int >  __o_player, ::modchart::ModManager modMgr, ::Dynamic startVal){
            		int player = __o_player.Default(0);
            	HX_STACKFRAME(&_hx_pos_9b6af6255c99877c_8_new)
HXLINE(  12)		this->length = ((Float)0);
HXLINE(   9)		this->endStep = ((Float)0);
HXLINE(  14)		super::__construct(step,modName,target,player,modMgr);
HXLINE(  15)		this->endStep = endStep;
HXLINE(  16)		this->easeFunc = easeFunc;
HXLINE(  17)		this->startVal = startVal;
HXLINE(  18)		if (::hx::IsNull( this->mod )) {
HXLINE(  18)			::haxe::Log_obj::trace((modName + HX_(" is null!",24,eb,29,f1)),::hx::SourceInfo(HX_("source/modchart/events/EaseEvent.hx",09,a4,a6,be),18,HX_("modchart.events.EaseEvent",69,1d,b3,00),HX_("new",60,d0,53,00)));
            		}
HXLINE(  20)		this->length = (endStep - step);
            	}

Dynamic EaseEvent_obj::__CreateEmpty() { return new EaseEvent_obj; }

void *EaseEvent_obj::_hx_vtable = 0;

Dynamic EaseEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EaseEvent_obj > _hx_result = new EaseEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool EaseEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x43e39c8d) {
		if (inClassId<=(int)0x01e47a14) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x01e47a14;
		} else {
			return inClassId==(int)0x43e39c8d;
		}
	} else {
		return inClassId==(int)0x7ab8b517;
	}
}

Float EaseEvent_obj::ease( ::Dynamic e,Float t,Float b,Float c,Float d){
            	HX_STACKFRAME(&_hx_pos_9b6af6255c99877c_24_ease)
HXLINE(  25)		Float time = (t / d);
HXLINE(  26)		return ((c * ( (Float)(e(time)) )) + b);
            	}


HX_DEFINE_DYNAMIC_FUNC5(EaseEvent_obj,ease,return )

void EaseEvent_obj::run(Float curStep){
            	HX_STACKFRAME(&_hx_pos_9b6af6255c99877c_31_run)
HXDLIN(  31)		if ((curStep <= this->endStep)) {
HXLINE(  33)			if (::hx::IsNull( this->startVal )) {
HXLINE(  34)				this->startVal = this->mod->getValue(this->player);
            			}
HXLINE(  37)			Float passed = (curStep - this->executionStep);
HXLINE(  38)			Float change = (this->endVal - ( (Float)(this->startVal) ));
HXLINE(  40)			 ::modchart::ModManager _hx_tmp = this->manager;
HXDLIN(  40)			::String _hx_tmp1 = this->modName;
HXDLIN(  40)			Float _hx_tmp2 = this->ease(this->easeFunc,passed,( (Float)(this->startVal) ),change,this->length);
HXDLIN(  40)			_hx_tmp->setValue(_hx_tmp1,_hx_tmp2,this->player);
            		}
            		else {
HXLINE(  42)			if ((curStep > this->endStep)) {
HXLINE(  44)				this->finished = true;
HXLINE(  45)				this->manager->setValue(this->modName,this->endVal,this->player);
            			}
            		}
            	}



::hx::ObjectPtr< EaseEvent_obj > EaseEvent_obj::__new(Float step,Float endStep,::String modName,Float target, ::Dynamic easeFunc,::hx::Null< int >  __o_player, ::modchart::ModManager modMgr, ::Dynamic startVal) {
	::hx::ObjectPtr< EaseEvent_obj > __this = new EaseEvent_obj();
	__this->__construct(step,endStep,modName,target,easeFunc,__o_player,modMgr,startVal);
	return __this;
}

::hx::ObjectPtr< EaseEvent_obj > EaseEvent_obj::__alloc(::hx::Ctx *_hx_ctx,Float step,Float endStep,::String modName,Float target, ::Dynamic easeFunc,::hx::Null< int >  __o_player, ::modchart::ModManager modMgr, ::Dynamic startVal) {
	EaseEvent_obj *__this = (EaseEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EaseEvent_obj), true, "modchart.events.EaseEvent"));
	*(void **)__this = EaseEvent_obj::_hx_vtable;
	__this->__construct(step,endStep,modName,target,easeFunc,__o_player,modMgr,startVal);
	return __this;
}

EaseEvent_obj::EaseEvent_obj()
{
}

void EaseEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EaseEvent);
	HX_MARK_MEMBER_NAME(endStep,"endStep");
	HX_MARK_MEMBER_NAME(startVal,"startVal");
	HX_MARK_MEMBER_NAME(easeFunc,"easeFunc");
	HX_MARK_MEMBER_NAME(length,"length");
	 ::modchart::events::ModEvent_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EaseEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(endStep,"endStep");
	HX_VISIT_MEMBER_NAME(startVal,"startVal");
	HX_VISIT_MEMBER_NAME(easeFunc,"easeFunc");
	HX_VISIT_MEMBER_NAME(length,"length");
	 ::modchart::events::ModEvent_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EaseEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ease") ) { return ::hx::Val( ease_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endStep") ) { return ::hx::Val( endStep ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"startVal") ) { return ::hx::Val( startVal ); }
		if (HX_FIELD_EQ(inName,"easeFunc") ) { return ::hx::Val( easeFunc ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EaseEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endStep") ) { endStep=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"startVal") ) { startVal=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"easeFunc") ) { easeFunc=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EaseEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("endStep",c7,a0,80,2e));
	outFields->push(HX_("startVal",9f,8b,9d,42));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EaseEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(EaseEvent_obj,endStep),HX_("endStep",c7,a0,80,2e)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(EaseEvent_obj,startVal),HX_("startVal",9f,8b,9d,42)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(EaseEvent_obj,easeFunc),HX_("easeFunc",52,32,aa,a3)},
	{::hx::fsFloat,(int)offsetof(EaseEvent_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EaseEvent_obj_sStaticStorageInfo = 0;
#endif

static ::String EaseEvent_obj_sMemberFields[] = {
	HX_("endStep",c7,a0,80,2e),
	HX_("startVal",9f,8b,9d,42),
	HX_("easeFunc",52,32,aa,a3),
	HX_("length",e6,94,07,9f),
	HX_("ease",ee,8b,0c,43),
	HX_("run",4b,e7,56,00),
	::String(null()) };

::hx::Class EaseEvent_obj::__mClass;

void EaseEvent_obj::__register()
{
	EaseEvent_obj _hx_dummy;
	EaseEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.events.EaseEvent",69,1d,b3,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EaseEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EaseEvent_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EaseEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EaseEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace events
