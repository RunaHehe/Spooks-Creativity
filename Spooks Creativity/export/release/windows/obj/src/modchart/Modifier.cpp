// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_exceptions_NotImplementedException
#include <haxe/exceptions/NotImplementedException.h>
#endif
#ifndef INCLUDED_haxe_exceptions_PosException
#include <haxe/exceptions/PosException.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_ModifierType
#include <modchart/ModifierType.h>
#endif
#ifndef INCLUDED_modchart_SubModifier
#include <modchart/SubModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_25_new,"modchart.Modifier","new",0xaad56cbb,"modchart.Modifier.new","modchart/Modifier.hx",25,0x597930b4)
static const Float _hx_array_data_3763f349_2[] = {
	(Float)0,(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_34_getModType,"modchart.Modifier","getModType",0x5baeb9ab,"modchart.Modifier.getModType","modchart/Modifier.hx",34,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_37_ignorePos,"modchart.Modifier","ignorePos",0x8c93a63d,"modchart.Modifier.ignorePos","modchart/Modifier.hx",37,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_40_ignoreUpdateReceptor,"modchart.Modifier","ignoreUpdateReceptor",0xdb7c50dc,"modchart.Modifier.ignoreUpdateReceptor","modchart/Modifier.hx",40,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_43_ignoreUpdateNote,"modchart.Modifier","ignoreUpdateNote",0x8ba71112,"modchart.Modifier.ignoreUpdateNote","modchart/Modifier.hx",43,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_46_doesUpdate,"modchart.Modifier","doesUpdate",0xb88128a7,"modchart.Modifier.doesUpdate","modchart/Modifier.hx",46,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_50_shouldExecute,"modchart.Modifier","shouldExecute",0x4ace025d,"modchart.Modifier.shouldExecute","modchart/Modifier.hx",50,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_54_getOrder,"modchart.Modifier","getOrder",0x459ab9dd,"modchart.Modifier.getOrder","modchart/Modifier.hx",54,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_57_getName,"modchart.Modifier","getName",0x827887dc,"modchart.Modifier.getName","modchart/Modifier.hx",57,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_62_getValue,"modchart.Modifier","getValue",0x423248c0,"modchart.Modifier.getValue","modchart/Modifier.hx",62,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_65_getPercent,"modchart.Modifier","getPercent",0xf254a5d4,"modchart.Modifier.getPercent","modchart/Modifier.hx",65,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_69_setValue,"modchart.Modifier","setValue",0xf08fa234,"modchart.Modifier.setValue","modchart/Modifier.hx",69,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_76_setPercent,"modchart.Modifier","setPercent",0xf5d24448,"modchart.Modifier.setPercent","modchart/Modifier.hx",76,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_80_getSubmods,"modchart.Modifier","getSubmods",0xa5053800,"modchart.Modifier.getSubmods","modchart/Modifier.hx",80,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_85_getSubmodPercent,"modchart.Modifier","getSubmodPercent",0x00c6b1f2,"modchart.Modifier.getSubmodPercent","modchart/Modifier.hx",85,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_94_getSubmodValue,"modchart.Modifier","getSubmodValue",0x09d2715e,"modchart.Modifier.getSubmodValue","modchart/Modifier.hx",94,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_101_setSubmodPercent,"modchart.Modifier","setSubmodPercent",0x57089f66,"modchart.Modifier.setSubmodPercent","modchart/Modifier.hx",101,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_104_setSubmodValue,"modchart.Modifier","setSubmodValue",0x29f259d2,"modchart.Modifier.setSubmodValue","modchart/Modifier.hx",104,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_123_updateReceptor,"modchart.Modifier","updateReceptor",0xf5be166a,"modchart.Modifier.updateReceptor","modchart/Modifier.hx",123,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_124_updateNote,"modchart.Modifier","updateNote",0x2bd777a0,"modchart.Modifier.updateNote","modchart/Modifier.hx",124,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_125_getPos,"modchart.Modifier","getPos",0x18b2e523,"modchart.Modifier.getPos","modchart/Modifier.hx",125,0x597930b4)
HX_LOCAL_STACK_FRAME(_hx_pos_0db9e4e21f4a7d14_127_update,"modchart.Modifier","update",0xfc93d48e,"modchart.Modifier.update","modchart/Modifier.hx",127,0x597930b4)
namespace modchart{

void Modifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_GC_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_25_new)
HXLINE(  30)		this->active = false;
HXLINE(  28)		this->submods =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  27)		this->percents = ::Array_obj< Float >::fromData( _hx_array_data_3763f349_2,2);
HXLINE( 108)		this->modMgr = modMgr;
HXLINE( 109)		this->parent = parent;
HXLINE( 110)		{
HXLINE( 110)			int _g = 0;
HXDLIN( 110)			::Array< ::String > _g1 = this->getSubmods();
HXDLIN( 110)			while((_g < _g1->length)){
HXLINE( 110)				::String submod = _g1->__get(_g);
HXDLIN( 110)				_g = (_g + 1);
HXLINE( 111)				{
HXLINE( 111)					::Dynamic this1 = this->submods;
HXDLIN( 111)					( ( ::haxe::ds::StringMap)(this1) )->set(submod,( ( ::modchart::Modifier)( ::modchart::SubModifier_obj::__alloc( HX_CTX ,submod,modMgr,::hx::ObjectPtr<OBJ_>(this))) ));
            				}
            			}
            		}
            	}

Dynamic Modifier_obj::__CreateEmpty() { return new Modifier_obj; }

void *Modifier_obj::_hx_vtable = 0;

Dynamic Modifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Modifier_obj > _hx_result = new Modifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Modifier_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4386e937;
}

 ::modchart::ModifierType Modifier_obj::getModType(){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_34_getModType)
HXDLIN(  34)		return ::modchart::ModifierType_obj::MISC_MOD_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Modifier_obj,getModType,return )

bool Modifier_obj::ignorePos(){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_37_ignorePos)
HXDLIN(  37)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Modifier_obj,ignorePos,return )

bool Modifier_obj::ignoreUpdateReceptor(){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_40_ignoreUpdateReceptor)
HXDLIN(  40)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Modifier_obj,ignoreUpdateReceptor,return )

bool Modifier_obj::ignoreUpdateNote(){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_43_ignoreUpdateNote)
HXDLIN(  43)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Modifier_obj,ignoreUpdateNote,return )

bool Modifier_obj::doesUpdate(){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_46_doesUpdate)
HXDLIN(  46)		return ::hx::IsPointerEq( this->getModType(),::modchart::ModifierType_obj::MISC_MOD_dyn() );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Modifier_obj,doesUpdate,return )

bool Modifier_obj::shouldExecute(int player,Float value){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_50_shouldExecute)
HXDLIN(  50)		return (value != 0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Modifier_obj,shouldExecute,return )

int Modifier_obj::getOrder(){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_54_getOrder)
HXDLIN(  54)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Modifier_obj,getOrder,return )

::String Modifier_obj::getName(){
            	HX_GC_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_57_getName)
HXDLIN(  57)		HX_STACK_DO_THROW( ::haxe::exceptions::NotImplementedException_obj::__alloc( HX_CTX ,null(),null(),::hx::SourceInfo(HX_("source/modchart/Modifier.hx",a8,f1,3a,84),57,HX_("modchart.Modifier",49,f3,63,37),HX_("getName",01,22,82,1b))));
HXDLIN(  57)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Modifier_obj,getName,return )

Float Modifier_obj::getValue(int player){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_62_getValue)
HXDLIN(  62)		return this->percents->__get(player);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Modifier_obj,getValue,return )

Float Modifier_obj::getPercent(int player){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_65_getPercent)
HXDLIN(  65)		return (this->getValue(player) * ( (Float)(100) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Modifier_obj,getPercent,return )

void Modifier_obj::setValue(Float value,::hx::Null< int >  __o_player){
            		int player = __o_player.Default(-1);
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_69_setValue)
HXDLIN(  69)		if ((player == -1)) {
HXLINE(  70)			int _g = 0;
HXDLIN(  70)			int _g1 = this->percents->length;
HXDLIN(  70)			while((_g < _g1)){
HXLINE(  70)				_g = (_g + 1);
HXDLIN(  70)				int idx = (_g - 1);
HXLINE(  71)				this->percents[idx] = value;
            			}
            		}
            		else {
HXLINE(  73)			this->percents[player] = value;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Modifier_obj,setValue,(void))

void Modifier_obj::setPercent(Float percent,::hx::Null< int >  __o_player){
            		int player = __o_player.Default(-1);
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_76_setPercent)
HXDLIN(  76)		this->setValue((percent / ( (Float)(100) )),player);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Modifier_obj,setPercent,(void))

::Array< ::String > Modifier_obj::getSubmods(){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_80_getSubmods)
HXDLIN(  80)		return ::Array_obj< ::String >::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Modifier_obj,getSubmods,return )

Float Modifier_obj::getSubmodPercent(::String modName,int player){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_85_getSubmodPercent)
HXDLIN(  85)		if (this->submods->exists(modName)) {
HXLINE(  86)			return ( ( ::modchart::Modifier)(this->submods->get(modName)) )->getPercent(player);
            		}
            		else {
HXLINE(  88)			return ( (Float)(0) );
            		}
HXLINE(  85)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Modifier_obj,getSubmodPercent,return )

Float Modifier_obj::getSubmodValue(::String modName,int player){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_94_getSubmodValue)
HXDLIN(  94)		if (this->submods->exists(modName)) {
HXLINE(  95)			return ( ( ::modchart::Modifier)(this->submods->get(modName)) )->getValue(player);
            		}
            		else {
HXLINE(  97)			return ( (Float)(0) );
            		}
HXLINE(  94)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Modifier_obj,getSubmodValue,return )

void Modifier_obj::setSubmodPercent(::String modName,Float endPercent,int player){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_101_setSubmodPercent)
HXDLIN( 101)		( ( ::modchart::Modifier)(this->submods->get(modName)) )->setPercent(endPercent,player);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Modifier_obj,setSubmodPercent,(void))

void Modifier_obj::setSubmodValue(::String modName,Float endValue,int player){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_104_setSubmodValue)
HXDLIN( 104)		( ( ::modchart::Modifier)(this->submods->get(modName)) )->setValue(endValue,player);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Modifier_obj,setSubmodValue,(void))

void Modifier_obj::updateReceptor(Float beat, ::StrumNote receptor, ::math::Vector3 pos,int player){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_123_updateReceptor)
            	}


HX_DEFINE_DYNAMIC_FUNC4(Modifier_obj,updateReceptor,(void))

void Modifier_obj::updateNote(Float beat, ::Note note, ::math::Vector3 pos,int player){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_124_updateNote)
            	}


HX_DEFINE_DYNAMIC_FUNC4(Modifier_obj,updateNote,(void))

 ::math::Vector3 Modifier_obj::getPos(Float time,Float diff,Float tDiff,Float beat, ::math::Vector3 pos,int data,int player, ::flixel::FlxSprite obj){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_125_getPos)
HXDLIN( 125)		return pos;
            	}


HX_DEFINE_DYNAMIC_FUNC8(Modifier_obj,getPos,return )

void Modifier_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_0db9e4e21f4a7d14_127_update)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Modifier_obj,update,(void))


::hx::ObjectPtr< Modifier_obj > Modifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< Modifier_obj > __this = new Modifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< Modifier_obj > Modifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	Modifier_obj *__this = (Modifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Modifier_obj), true, "modchart.Modifier"));
	*(void **)__this = Modifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

Modifier_obj::Modifier_obj()
{
}

void Modifier_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Modifier);
	HX_MARK_MEMBER_NAME(modMgr,"modMgr");
	HX_MARK_MEMBER_NAME(percents,"percents");
	HX_MARK_MEMBER_NAME(submods,"submods");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_END_CLASS();
}

void Modifier_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(modMgr,"modMgr");
	HX_VISIT_MEMBER_NAME(percents,"percents");
	HX_VISIT_MEMBER_NAME(submods,"submods");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(active,"active");
}

::hx::Val Modifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"modMgr") ) { return ::hx::Val( modMgr ); }
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		if (HX_FIELD_EQ(inName,"active") ) { return ::hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"getPos") ) { return ::hx::Val( getPos_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"submods") ) { return ::hx::Val( submods ); }
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"percents") ) { return ::hx::Val( percents ); }
		if (HX_FIELD_EQ(inName,"getOrder") ) { return ::hx::Val( getOrder_dyn() ); }
		if (HX_FIELD_EQ(inName,"getValue") ) { return ::hx::Val( getValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"setValue") ) { return ::hx::Val( setValue_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ignorePos") ) { return ::hx::Val( ignorePos_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getModType") ) { return ::hx::Val( getModType_dyn() ); }
		if (HX_FIELD_EQ(inName,"doesUpdate") ) { return ::hx::Val( doesUpdate_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPercent") ) { return ::hx::Val( getPercent_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPercent") ) { return ::hx::Val( setPercent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSubmods") ) { return ::hx::Val( getSubmods_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNote") ) { return ::hx::Val( updateNote_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shouldExecute") ) { return ::hx::Val( shouldExecute_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getSubmodValue") ) { return ::hx::Val( getSubmodValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSubmodValue") ) { return ::hx::Val( setSubmodValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateReceptor") ) { return ::hx::Val( updateReceptor_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignoreUpdateNote") ) { return ::hx::Val( ignoreUpdateNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSubmodPercent") ) { return ::hx::Val( getSubmodPercent_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSubmodPercent") ) { return ::hx::Val( setSubmodPercent_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"ignoreUpdateReceptor") ) { return ::hx::Val( ignoreUpdateReceptor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Modifier_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"modMgr") ) { modMgr=inValue.Cast<  ::modchart::ModManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::modchart::Modifier >(); return inValue; }
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"submods") ) { submods=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"percents") ) { percents=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Modifier_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("modMgr",36,d6,b4,c0));
	outFields->push(HX_("percents",0e,c2,7a,46));
	outFields->push(HX_("submods",f1,3c,8b,2b));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("active",c6,41,46,16));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Modifier_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::modchart::ModManager */ ,(int)offsetof(Modifier_obj,modMgr),HX_("modMgr",36,d6,b4,c0)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(Modifier_obj,percents),HX_("percents",0e,c2,7a,46)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(Modifier_obj,submods),HX_("submods",f1,3c,8b,2b)},
	{::hx::fsObject /*  ::modchart::Modifier */ ,(int)offsetof(Modifier_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsBool,(int)offsetof(Modifier_obj,active),HX_("active",c6,41,46,16)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Modifier_obj_sStaticStorageInfo = 0;
#endif

static ::String Modifier_obj_sMemberFields[] = {
	HX_("modMgr",36,d6,b4,c0),
	HX_("percents",0e,c2,7a,46),
	HX_("submods",f1,3c,8b,2b),
	HX_("parent",2a,05,7e,ed),
	HX_("active",c6,41,46,16),
	HX_("getModType",a6,44,96,31),
	HX_("ignorePos",a2,d3,d3,ae),
	HX_("ignoreUpdateReceptor",97,83,07,f8),
	HX_("ignoreUpdateNote",4d,8a,5d,a0),
	HX_("doesUpdate",a2,b3,68,8e),
	HX_("shouldExecute",42,46,a1,bc),
	HX_("getOrder",18,00,f8,94),
	HX_("getName",01,22,82,1b),
	HX_("getValue",fb,8e,8f,91),
	HX_("getPercent",cf,30,3c,c8),
	HX_("setValue",6f,e8,ec,3f),
	HX_("setPercent",43,cf,b9,cb),
	HX_("getSubmods",fb,c2,ec,7a),
	HX_("getSubmodPercent",2d,2b,7d,15),
	HX_("getSubmodValue",d9,95,da,30),
	HX_("setSubmodPercent",a1,18,bf,6b),
	HX_("setSubmodValue",4d,7e,fa,50),
	HX_("updateReceptor",e5,3a,c6,1c),
	HX_("updateNote",9b,02,bf,01),
	HX_("getPos",9e,96,24,a3),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Modifier_obj::__mClass;

void Modifier_obj::__register()
{
	Modifier_obj _hx_dummy;
	Modifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.Modifier",49,f3,63,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Modifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Modifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Modifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Modifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
