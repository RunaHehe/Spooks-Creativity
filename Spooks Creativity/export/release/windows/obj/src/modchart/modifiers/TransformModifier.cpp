// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_TransformModifier
#include <modchart/modifiers/TransformModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e6045b92f9244e93_11_new,"modchart.modifiers.TransformModifier","new",0xc93ca8f1,"modchart.modifiers.TransformModifier.new","modchart/modifiers/TransformModifier.hx",11,0xf93dd7e1)
HX_LOCAL_STACK_FRAME(_hx_pos_e6045b92f9244e93_13_lerp,"modchart.modifiers.TransformModifier","lerp",0x4a84b8c6,"modchart.modifiers.TransformModifier.lerp","modchart/modifiers/TransformModifier.hx",13,0xf93dd7e1)
HX_LOCAL_STACK_FRAME(_hx_pos_e6045b92f9244e93_17_getName,"modchart.modifiers.TransformModifier","getName",0x82d11712,"modchart.modifiers.TransformModifier.getName","modchart/modifiers/TransformModifier.hx",17,0xf93dd7e1)
HX_LOCAL_STACK_FRAME(_hx_pos_e6045b92f9244e93_20_getOrder,"modchart.modifiers.TransformModifier","getOrder",0x92bf79e7,"modchart.modifiers.TransformModifier.getOrder","modchart/modifiers/TransformModifier.hx",20,0xf93dd7e1)
HX_LOCAL_STACK_FRAME(_hx_pos_e6045b92f9244e93_23_getPos,"modchart.modifiers.TransformModifier","getPos",0x812aaead,"modchart.modifiers.TransformModifier.getPos","modchart/modifiers/TransformModifier.hx",23,0xf93dd7e1)
HX_LOCAL_STACK_FRAME(_hx_pos_e6045b92f9244e93_35_getSubmods,"modchart.modifiers.TransformModifier","getSubmods",0x14e18e8a,"modchart.modifiers.TransformModifier.getSubmods","modchart/modifiers/TransformModifier.hx",35,0xf93dd7e1)
static const ::String _hx_array_data_61bf5c7f_7[] = {
	HX_("transformY",6d,91,34,9b),HX_("transformZ",6e,91,34,9b),HX_("transformX-a",00,ec,8c,3e),HX_("transformY-a",41,ae,8d,3e),HX_("transformZ-a",82,70,8e,3e),
};
namespace modchart{
namespace modifiers{

void TransformModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_e6045b92f9244e93_11_new)
HXDLIN(  11)		super::__construct(modMgr,parent);
            	}

Dynamic TransformModifier_obj::__CreateEmpty() { return new TransformModifier_obj; }

void *TransformModifier_obj::_hx_vtable = 0;

Dynamic TransformModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TransformModifier_obj > _hx_result = new TransformModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TransformModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4386e937) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x4386e937;
		}
	} else {
		return inClassId==(int)0x768747a3;
	}
}

Float TransformModifier_obj::lerp(Float a,Float b,Float c){
            	HX_STACKFRAME(&_hx_pos_e6045b92f9244e93_13_lerp)
HXDLIN(  13)		return (a + ((b - a) * c));
            	}


HX_DEFINE_DYNAMIC_FUNC3(TransformModifier_obj,lerp,return )

::String TransformModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_e6045b92f9244e93_17_getName)
HXDLIN(  17)		return HX_("transformX",6c,91,34,9b);
            	}


int TransformModifier_obj::getOrder(){
            	HX_STACKFRAME(&_hx_pos_e6045b92f9244e93_20_getOrder)
HXDLIN(  20)		return 1000;
            	}


 ::math::Vector3 TransformModifier_obj::getPos(Float time,Float visualDiff,Float timeDiff,Float beat, ::math::Vector3 pos,int data,int player, ::flixel::FlxSprite obj){
            	HX_STACKFRAME(&_hx_pos_e6045b92f9244e93_23_getPos)
HXLINE(  24)		 ::math::Vector3 pos1 = pos;
HXDLIN(  24)		Float pos2 = pos1->x;
HXDLIN(  24)		Float _hx_tmp = this->getValue(player);
HXDLIN(  24)		pos1->x = (pos2 + (_hx_tmp + this->getSubmodValue(HX_("transformX-a",00,ec,8c,3e),player)));
HXLINE(  25)		 ::math::Vector3 pos3 = pos;
HXDLIN(  25)		Float pos4 = pos3->y;
HXDLIN(  25)		Float _hx_tmp1 = this->getSubmodValue(HX_("transformY",6d,91,34,9b),player);
HXDLIN(  25)		pos3->y = (pos4 + (_hx_tmp1 + this->getSubmodValue(HX_("transformY-a",41,ae,8d,3e),player)));
HXLINE(  26)		 ::math::Vector3 pos5 = pos;
HXDLIN(  26)		Float pos6 = pos5->z;
HXDLIN(  26)		Float _hx_tmp2 = this->getSubmodValue(HX_("transformZ",6e,91,34,9b),player);
HXDLIN(  26)		pos5->z = (pos6 + (_hx_tmp2 + this->getSubmodValue(HX_("transformZ-a",82,70,8e,3e),player)));
HXLINE(  28)		 ::math::Vector3 pos7 = pos;
HXDLIN(  28)		Float pos8 = pos7->x;
HXDLIN(  28)		Float _hx_tmp3 = this->getSubmodValue(((HX_("transform",6c,2d,93,45) + data) + HX_("X",58,00,00,00)),player);
HXDLIN(  28)		pos7->x = (pos8 + (_hx_tmp3 + this->getSubmodValue(((HX_("transform",6c,2d,93,45) + data) + HX_("X-a",ec,ed,42,00)),player)));
HXLINE(  29)		 ::math::Vector3 pos9 = pos;
HXDLIN(  29)		Float pos10 = pos9->y;
HXDLIN(  29)		Float _hx_tmp4 = this->getSubmodValue(((HX_("transform",6c,2d,93,45) + data) + HX_("Y",59,00,00,00)),player);
HXDLIN(  29)		pos9->y = (pos10 + (_hx_tmp4 + this->getSubmodValue(((HX_("transform",6c,2d,93,45) + data) + HX_("Y-a",2d,b0,43,00)),player)));
HXLINE(  30)		 ::math::Vector3 pos11 = pos;
HXDLIN(  30)		Float pos12 = pos11->z;
HXDLIN(  30)		Float _hx_tmp5 = this->getSubmodValue(((HX_("transform",6c,2d,93,45) + data) + HX_("Z",5a,00,00,00)),player);
HXDLIN(  30)		pos11->z = (pos12 + (_hx_tmp5 + this->getSubmodValue(((HX_("transform",6c,2d,93,45) + data) + HX_("Z-a",6e,72,44,00)),player)));
HXLINE(  32)		return pos;
            	}


::Array< ::String > TransformModifier_obj::getSubmods(){
            	HX_STACKFRAME(&_hx_pos_e6045b92f9244e93_35_getSubmods)
HXLINE(  36)		::Array< ::String > subMods = ::Array_obj< ::String >::fromData( _hx_array_data_61bf5c7f_7,5);
HXLINE(  38)		::Array< ::Dynamic> receptors = this->modMgr->receptors->__get(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  39)		{
HXLINE(  39)			int _g = 0;
HXDLIN(  39)			while((_g < 4)){
HXLINE(  39)				_g = (_g + 1);
HXDLIN(  39)				int i = (_g - 1);
HXLINE(  40)				subMods->push(((HX_("transform",6c,2d,93,45) + i) + HX_("X",58,00,00,00)));
HXLINE(  41)				subMods->push(((HX_("transform",6c,2d,93,45) + i) + HX_("Y",59,00,00,00)));
HXLINE(  42)				subMods->push(((HX_("transform",6c,2d,93,45) + i) + HX_("Z",5a,00,00,00)));
HXLINE(  43)				subMods->push(((HX_("transform",6c,2d,93,45) + i) + HX_("X-a",ec,ed,42,00)));
HXLINE(  44)				subMods->push(((HX_("transform",6c,2d,93,45) + i) + HX_("Y-a",2d,b0,43,00)));
HXLINE(  45)				subMods->push(((HX_("transform",6c,2d,93,45) + i) + HX_("Z-a",6e,72,44,00)));
            			}
            		}
HXLINE(  47)		return subMods;
            	}



::hx::ObjectPtr< TransformModifier_obj > TransformModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< TransformModifier_obj > __this = new TransformModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< TransformModifier_obj > TransformModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	TransformModifier_obj *__this = (TransformModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TransformModifier_obj), true, "modchart.modifiers.TransformModifier"));
	*(void **)__this = TransformModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

TransformModifier_obj::TransformModifier_obj()
{
}

::hx::Val TransformModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { return ::hx::Val( lerp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getPos") ) { return ::hx::Val( getPos_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getOrder") ) { return ::hx::Val( getOrder_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getSubmods") ) { return ::hx::Val( getSubmods_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TransformModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TransformModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String TransformModifier_obj_sMemberFields[] = {
	HX_("lerp",77,12,b0,47),
	HX_("getName",01,22,82,1b),
	HX_("getOrder",18,00,f8,94),
	HX_("getPos",9e,96,24,a3),
	HX_("getSubmods",fb,c2,ec,7a),
	::String(null()) };

::hx::Class TransformModifier_obj::__mClass;

void TransformModifier_obj::__register()
{
	TransformModifier_obj _hx_dummy;
	TransformModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.TransformModifier",7f,5c,bf,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TransformModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TransformModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TransformModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TransformModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
