// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_FlipModifier
#include <modchart/modifiers/FlipModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7dae06fc15d05704_6_new,"modchart.modifiers.FlipModifier","new",0x0ff4bdfa,"modchart.modifiers.FlipModifier.new","modchart/modifiers/FlipModifier.hx",6,0x03d72db4)
HX_LOCAL_STACK_FRAME(_hx_pos_7dae06fc15d05704_7_getName,"modchart.modifiers.FlipModifier","getName",0x1e52e49b,"modchart.modifiers.FlipModifier.getName","modchart/modifiers/FlipModifier.hx",7,0x03d72db4)
HX_LOCAL_STACK_FRAME(_hx_pos_7dae06fc15d05704_9_getPos,"modchart.modifiers.FlipModifier","getPos",0x24e0a544,"modchart.modifiers.FlipModifier.getPos","modchart/modifiers/FlipModifier.hx",9,0x03d72db4)
namespace modchart{
namespace modifiers{

void FlipModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_7dae06fc15d05704_6_new)
HXDLIN(   6)		super::__construct(modMgr,parent);
            	}

Dynamic FlipModifier_obj::__CreateEmpty() { return new FlipModifier_obj; }

void *FlipModifier_obj::_hx_vtable = 0;

Dynamic FlipModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlipModifier_obj > _hx_result = new FlipModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlipModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4386e937) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x4386e937;
		}
	} else {
		return inClassId==(int)0x551be064;
	}
}

::String FlipModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_7dae06fc15d05704_7_getName)
HXDLIN(   7)		return HX_("flip",ad,12,be,43);
            	}


 ::math::Vector3 FlipModifier_obj::getPos(Float time,Float diff,Float tDiff,Float beat, ::math::Vector3 pos,int data,int player, ::flixel::FlxSprite obj){
            	HX_STACKFRAME(&_hx_pos_7dae06fc15d05704_9_getPos)
HXLINE(  10)		if ((this->getValue(player) == 0)) {
HXLINE(  11)			return pos;
            		}
HXLINE(  13)		::Array< ::Dynamic> receptors = this->modMgr->receptors->__get(player).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  15)		Float distance = ((::Note_obj::swagWidth * (( (Float)(receptors->length) ) * ((Float)0.5))) * (((Float)1.5) - ( (Float)(data) )));
HXLINE(  16)		 ::math::Vector3 pos1 = pos;
HXDLIN(  16)		Float pos2 = pos1->x;
HXDLIN(  16)		pos1->x = (pos2 + (distance * this->getValue(player)));
HXLINE(  17)		return pos;
            	}



::hx::ObjectPtr< FlipModifier_obj > FlipModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< FlipModifier_obj > __this = new FlipModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< FlipModifier_obj > FlipModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	FlipModifier_obj *__this = (FlipModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlipModifier_obj), true, "modchart.modifiers.FlipModifier"));
	*(void **)__this = FlipModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

FlipModifier_obj::FlipModifier_obj()
{
}

::hx::Val FlipModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"getPos") ) { return ::hx::Val( getPos_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlipModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlipModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String FlipModifier_obj_sMemberFields[] = {
	HX_("getName",01,22,82,1b),
	HX_("getPos",9e,96,24,a3),
	::String(null()) };

::hx::Class FlipModifier_obj::__mClass;

void FlipModifier_obj::__register()
{
	FlipModifier_obj _hx_dummy;
	FlipModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.FlipModifier",08,f9,13,8a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlipModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlipModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlipModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlipModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
