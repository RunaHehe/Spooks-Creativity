// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_WiggleModifier
#include <modchart/modifiers/WiggleModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4f1db64e20925352_10_new,"modchart.modifiers.WiggleModifier","new",0xc95c4af8,"modchart.modifiers.WiggleModifier.new","modchart/modifiers/WiggleModifier.hx",10,0xcf5905f6)
HX_LOCAL_STACK_FRAME(_hx_pos_4f1db64e20925352_11_getName,"modchart.modifiers.WiggleModifier","getName",0x7037c899,"modchart.modifiers.WiggleModifier.getName","modchart/modifiers/WiggleModifier.hx",11,0xcf5905f6)
HX_LOCAL_STACK_FRAME(_hx_pos_4f1db64e20925352_14_getPos,"modchart.modifiers.WiggleModifier","getPos",0x379ccb06,"modchart.modifiers.WiggleModifier.getPos","modchart/modifiers/WiggleModifier.hx",14,0xcf5905f6)
HX_LOCAL_STACK_FRAME(_hx_pos_4f1db64e20925352_32_getSubmods,"modchart.modifiers.WiggleModifier","getSubmods",0x633b4b63,"modchart.modifiers.WiggleModifier.getSubmods","modchart/modifiers/WiggleModifier.hx",32,0xcf5905f6)
static const ::String _hx_array_data_5835af06_4[] = {
	HX_("wiggleFreq",03,d4,af,2a),
};
namespace modchart{
namespace modifiers{

void WiggleModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_4f1db64e20925352_10_new)
HXDLIN(  10)		super::__construct(modMgr,parent);
            	}

Dynamic WiggleModifier_obj::__CreateEmpty() { return new WiggleModifier_obj; }

void *WiggleModifier_obj::_hx_vtable = 0;

Dynamic WiggleModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WiggleModifier_obj > _hx_result = new WiggleModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool WiggleModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4386e937) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x4386e937;
		}
	} else {
		return inClassId==(int)0x7f752a7e;
	}
}

::String WiggleModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_4f1db64e20925352_11_getName)
HXDLIN(  11)		return HX_("wiggle",ab,59,ee,4d);
            	}


 ::math::Vector3 WiggleModifier_obj::getPos(Float time,Float visualDiff,Float timeDiff,Float beat, ::math::Vector3 pos,int data,int player, ::flixel::FlxSprite obj){
            	HX_STACKFRAME(&_hx_pos_4f1db64e20925352_14_getPos)
HXLINE(  15)		Float wiggle = this->getValue(player);
HXLINE(  16)		Float time1 = (::Conductor_obj::songPosition / ( (Float)(1000) ));
HXLINE(  18)		Float xAdjust = ( (Float)(0) );
HXLINE(  19)		 ::Dynamic reverse = this->modMgr->_hx_register->get(HX_("reverse",22,39,fc,1a));
HXLINE(  20)		Float reversePercent = ( (Float)(reverse->__Field(HX_("getReverseValue",a5,b0,07,6b),::hx::paccDynamic)(data,player)) );
HXLINE(  21)		Float mult = (((reversePercent * ( (Float)(-2) )) / ( (Float)(1) )) + 1);
HXLINE(  23)		if ((wiggle != 0)) {
HXLINE(  24)			Float n = ((visualDiff / ( (Float)(45) )) * this->getSubmodValue(HX_("wiggleFreq",03,d4,af,2a),player));
HXDLIN(  24)			n = (n * ((Float)0.3183098862));
HXDLIN(  24)			if ((n > 1)) {
HXLINE(  24)				n = (n - ( (Float)(((::Math_obj::ceil(n) >> 1) << 1)) ));
            			}
            			else {
HXLINE(  24)				if ((n < -1)) {
HXLINE(  24)					n = (n + ((::Math_obj::ceil(-(n)) >> 1) << 1));
            				}
            			}
HXDLIN(  24)			Float xAdjust1;
HXDLIN(  24)			if ((n > 0)) {
HXLINE(  24)				xAdjust1 = (n * (((Float)3.1) + (n * (((Float)0.5) + (n * (((Float)-7.2) + (n * ((Float)3.6))))))));
            			}
            			else {
HXLINE(  24)				xAdjust1 = (n * (((Float)3.1) - (n * (((Float)0.5) + (n * (((Float)7.2) + (n * ((Float)3.6))))))));
            			}
HXDLIN(  24)			xAdjust = (xAdjust + ((wiggle * ( (Float)(20) )) * xAdjust1));
            		}
HXLINE(  27)		 ::math::Vector3 pos1 = pos;
HXDLIN(  27)		pos1->x = (pos1->x + (xAdjust * mult));
HXLINE(  28)		return pos;
            	}


::Array< ::String > WiggleModifier_obj::getSubmods(){
            	HX_STACKFRAME(&_hx_pos_4f1db64e20925352_32_getSubmods)
HXDLIN(  32)		return ::Array_obj< ::String >::fromData( _hx_array_data_5835af06_4,1);
            	}



::hx::ObjectPtr< WiggleModifier_obj > WiggleModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< WiggleModifier_obj > __this = new WiggleModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< WiggleModifier_obj > WiggleModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	WiggleModifier_obj *__this = (WiggleModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WiggleModifier_obj), true, "modchart.modifiers.WiggleModifier"));
	*(void **)__this = WiggleModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

WiggleModifier_obj::WiggleModifier_obj()
{
}

::hx::Val WiggleModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"getPos") ) { return ::hx::Val( getPos_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getSubmods") ) { return ::hx::Val( getSubmods_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *WiggleModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *WiggleModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String WiggleModifier_obj_sMemberFields[] = {
	HX_("getName",01,22,82,1b),
	HX_("getPos",9e,96,24,a3),
	HX_("getSubmods",fb,c2,ec,7a),
	::String(null()) };

::hx::Class WiggleModifier_obj::__mClass;

void WiggleModifier_obj::__register()
{
	WiggleModifier_obj _hx_dummy;
	WiggleModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.WiggleModifier",06,af,35,58);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WiggleModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WiggleModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WiggleModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WiggleModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
