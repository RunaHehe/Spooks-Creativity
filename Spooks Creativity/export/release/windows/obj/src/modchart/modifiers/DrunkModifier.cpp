// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_DrunkModifier
#include <modchart/modifiers/DrunkModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fe73bf1824cdd7a4_10_new,"modchart.modifiers.DrunkModifier","new",0x78ffaea9,"modchart.modifiers.DrunkModifier.new","modchart/modifiers/DrunkModifier.hx",10,0x10cb2829)
HX_LOCAL_STACK_FRAME(_hx_pos_fe73bf1824cdd7a4_11_getName,"modchart.modifiers.DrunkModifier","getName",0xc2b558ca,"modchart.modifiers.DrunkModifier.getName","modchart/modifiers/DrunkModifier.hx",11,0x10cb2829)
HX_LOCAL_STACK_FRAME(_hx_pos_fe73bf1824cdd7a4_14_getPos,"modchart.modifiers.DrunkModifier","getPos",0x94f80bf5,"modchart.modifiers.DrunkModifier.getPos","modchart/modifiers/DrunkModifier.hx",14,0x10cb2829)
HX_LOCAL_STACK_FRAME(_hx_pos_fe73bf1824cdd7a4_57_getSubmods,"modchart.modifiers.DrunkModifier","getSubmods",0x4bfb2fd2,"modchart.modifiers.DrunkModifier.getSubmods","modchart/modifiers/DrunkModifier.hx",57,0x10cb2829)
static const ::String _hx_array_data_71af2637_4[] = {
	HX_("tipsy",c1,12,38,10),HX_("bumpy",c3,e7,ed,ba),HX_("drunkSpeed",c3,67,a5,eb),HX_("drunkOffset",d7,fb,59,ea),HX_("drunkPeriod",45,c5,35,c5),HX_("tipsySpeed",06,59,be,d0),HX_("tipsyOffset",34,25,14,7b),HX_("bumpyOffset",b6,a7,82,4a),HX_("bumpyPeriod",24,71,5e,25),HX_("tipZ",9f,ce,fc,4c),HX_("tipZSpeed",68,d8,2d,4d),HX_("tipZOffset",92,1b,34,e0),HX_("drunkZ",b6,02,08,ed),HX_("drunkZSpeed",f1,70,3b,66),HX_("drunkZOffset",e9,fa,0b,b3),HX_("drunkZPeriod",57,c4,e7,8d),
};
namespace modchart{
namespace modifiers{

void DrunkModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_fe73bf1824cdd7a4_10_new)
HXDLIN(  10)		super::__construct(modMgr,parent);
            	}

Dynamic DrunkModifier_obj::__CreateEmpty() { return new DrunkModifier_obj; }

void *DrunkModifier_obj::_hx_vtable = 0;

Dynamic DrunkModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DrunkModifier_obj > _hx_result = new DrunkModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DrunkModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4386e937) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x4386e937;
		}
	} else {
		return inClassId==(int)0x4d91af5b;
	}
}

::String DrunkModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_fe73bf1824cdd7a4_11_getName)
HXDLIN(  11)		return HX_("drunk",24,7d,c5,df);
            	}


 ::math::Vector3 DrunkModifier_obj::getPos(Float time,Float visualDiff,Float timeDiff,Float beat, ::math::Vector3 pos,int data,int player, ::flixel::FlxSprite obj){
            	HX_STACKFRAME(&_hx_pos_fe73bf1824cdd7a4_14_getPos)
HXLINE(  15)		Float drunkPerc = this->getValue(player);
HXLINE(  16)		Float tipsyPerc = this->getSubmodValue(HX_("tipsy",c1,12,38,10),player);
HXLINE(  17)		Float bumpyPerc = this->getSubmodValue(HX_("bumpy",c3,e7,ed,ba),player);
HXLINE(  18)		Float tipZPerc = this->getSubmodValue(HX_("tipZ",9f,ce,fc,4c),player);
HXLINE(  20)		Float time1 = (::Conductor_obj::songPosition / ( (Float)(1000) ));
HXLINE(  21)		if ((tipsyPerc != 0)) {
HXLINE(  22)			Float speed = this->getSubmodValue(HX_("tipsySpeed",06,59,be,d0),player);
HXLINE(  23)			Float offset = this->getSubmodValue(HX_("tipsyOffset",34,25,14,7b),player);
HXLINE(  24)			 ::math::Vector3 pos1 = pos;
HXDLIN(  24)			Float n = (((time1 * ((speed * ((Float)1.2)) + ((Float)1.2))) + (( (Float)(data) ) * ((offset * ((Float)1.8)) + ((Float)1.8)))) + ((Float)1.570796327));
HXDLIN(  24)			n = (n * ((Float)0.3183098862));
HXDLIN(  24)			if ((n > 1)) {
HXLINE(  24)				n = (n - ( (Float)(((::Math_obj::ceil(n) >> 1) << 1)) ));
            			}
            			else {
HXLINE(  24)				if ((n < -1)) {
HXLINE(  24)					n = (n + ((::Math_obj::ceil(-(n)) >> 1) << 1));
            				}
            			}
HXDLIN(  24)			Float _hx_tmp;
HXDLIN(  24)			if ((n > 0)) {
HXLINE(  24)				_hx_tmp = (n * (((Float)3.1) + (n * (((Float)0.5) + (n * (((Float)-7.2) + (n * ((Float)3.6))))))));
            			}
            			else {
HXLINE(  24)				_hx_tmp = (n * (((Float)3.1) - (n * (((Float)0.5) + (n * (((Float)7.2) + (n * ((Float)3.6))))))));
            			}
HXDLIN(  24)			pos1->y = (pos1->y + (tipsyPerc * ((_hx_tmp * ::Note_obj::swagWidth) * ((Float).4))));
            		}
HXLINE(  27)		if ((drunkPerc != 0)) {
HXLINE(  28)			Float speed1 = this->getSubmodValue(HX_("drunkSpeed",c3,67,a5,eb),player);
HXLINE(  29)			Float period = this->getSubmodValue(HX_("drunkPeriod",45,c5,35,c5),player);
HXLINE(  30)			Float offset1 = this->getSubmodValue(HX_("drunkOffset",d7,fb,59,ea),player);
HXLINE(  32)			Float angle = (((time1 * (1 + speed1)) + (( (Float)(data) ) * ((offset1 * ((Float)0.2)) + ((Float)0.2)))) + ((visualDiff * ((period * ( (Float)(10) )) + 10)) / ( (Float)(::flixel::FlxG_obj::height) )));
HXLINE(  34)			 ::math::Vector3 pos2 = pos;
HXDLIN(  34)			Float n1 = (angle + ((Float)1.570796327));
HXDLIN(  34)			n1 = (n1 * ((Float)0.3183098862));
HXDLIN(  34)			if ((n1 > 1)) {
HXLINE(  34)				n1 = (n1 - ( (Float)(((::Math_obj::ceil(n1) >> 1) << 1)) ));
            			}
            			else {
HXLINE(  34)				if ((n1 < -1)) {
HXLINE(  34)					n1 = (n1 + ((::Math_obj::ceil(-(n1)) >> 1) << 1));
            				}
            			}
HXDLIN(  34)			Float _hx_tmp1;
HXDLIN(  34)			if ((n1 > 0)) {
HXLINE(  34)				_hx_tmp1 = (n1 * (((Float)3.1) + (n1 * (((Float)0.5) + (n1 * (((Float)-7.2) + (n1 * ((Float)3.6))))))));
            			}
            			else {
HXLINE(  34)				_hx_tmp1 = (n1 * (((Float)3.1) - (n1 * (((Float)0.5) + (n1 * (((Float)7.2) + (n1 * ((Float)3.6))))))));
            			}
HXDLIN(  34)			pos2->x = (pos2->x + (drunkPerc * ((_hx_tmp1 * ::Note_obj::swagWidth) * ((Float)0.5))));
            		}
HXLINE(  37)		if ((tipZPerc != 0)) {
HXLINE(  39)			Float speed2 = this->getSubmodValue(HX_("tipZSpeed",68,d8,2d,4d),player);
HXLINE(  40)			Float offset2 = this->getSubmodValue(HX_("tipZOffset",92,1b,34,e0),player);
HXLINE(  41)			 ::math::Vector3 pos3 = pos;
HXDLIN(  41)			Float n2 = (((time1 * ((speed2 * ((Float)1.2)) + ((Float)1.2))) + (( (Float)(data) ) * ((offset2 * ((Float)1.8)) + ((Float)3.2)))) + ((Float)1.570796327));
HXDLIN(  41)			n2 = (n2 * ((Float)0.3183098862));
HXDLIN(  41)			if ((n2 > 1)) {
HXLINE(  41)				n2 = (n2 - ( (Float)(((::Math_obj::ceil(n2) >> 1) << 1)) ));
            			}
            			else {
HXLINE(  41)				if ((n2 < -1)) {
HXLINE(  41)					n2 = (n2 + ((::Math_obj::ceil(-(n2)) >> 1) << 1));
            				}
            			}
HXDLIN(  41)			Float _hx_tmp2;
HXDLIN(  41)			if ((n2 > 0)) {
HXLINE(  41)				_hx_tmp2 = (n2 * (((Float)3.1) + (n2 * (((Float)0.5) + (n2 * (((Float)-7.2) + (n2 * ((Float)3.6))))))));
            			}
            			else {
HXLINE(  41)				_hx_tmp2 = (n2 * (((Float)3.1) - (n2 * (((Float)0.5) + (n2 * (((Float)7.2) + (n2 * ((Float)3.6))))))));
            			}
HXDLIN(  41)			pos3->z = (pos3->z + (tipZPerc * (_hx_tmp2 * ((Float)0.15))));
            		}
HXLINE(  45)		if ((bumpyPerc != 0)) {
HXLINE(  46)			Float period1 = this->getSubmodValue(HX_("bumpyPeriod",24,71,5e,25),player);
HXLINE(  47)			Float offset3 = this->getSubmodValue(HX_("bumpyOffset",b6,a7,82,4a),player);
HXLINE(  48)			Float angle1 = ((visualDiff + (((Float)100.0) * offset3)) / ((period1 * ((Float)16.0)) + ((Float)16.0)));
HXLINE(  49)			 ::math::Vector3 pos4 = pos;
HXDLIN(  49)			Float n3 = angle1;
HXDLIN(  49)			n3 = (n3 * ((Float)0.3183098862));
HXDLIN(  49)			if ((n3 > 1)) {
HXLINE(  49)				n3 = (n3 - ( (Float)(((::Math_obj::ceil(n3) >> 1) << 1)) ));
            			}
            			else {
HXLINE(  49)				if ((n3 < -1)) {
HXLINE(  49)					n3 = (n3 + ((::Math_obj::ceil(-(n3)) >> 1) << 1));
            				}
            			}
HXDLIN(  49)			Float _hx_tmp3;
HXDLIN(  49)			if ((n3 > 0)) {
HXLINE(  49)				_hx_tmp3 = (n3 * (((Float)3.1) + (n3 * (((Float)0.5) + (n3 * (((Float)-7.2) + (n3 * ((Float)3.6))))))));
            			}
            			else {
HXLINE(  49)				_hx_tmp3 = (n3 * (((Float)3.1) - (n3 * (((Float)0.5) + (n3 * (((Float)7.2) + (n3 * ((Float)3.6))))))));
            			}
HXDLIN(  49)			pos4->z = (pos4->z + (((bumpyPerc * ( (Float)(40) )) * _hx_tmp3) / ( (Float)(250) )));
            		}
HXLINE(  53)		return pos;
            	}


::Array< ::String > DrunkModifier_obj::getSubmods(){
            	HX_STACKFRAME(&_hx_pos_fe73bf1824cdd7a4_57_getSubmods)
HXDLIN(  57)		return ::Array_obj< ::String >::fromData( _hx_array_data_71af2637_4,16);
            	}



::hx::ObjectPtr< DrunkModifier_obj > DrunkModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< DrunkModifier_obj > __this = new DrunkModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< DrunkModifier_obj > DrunkModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	DrunkModifier_obj *__this = (DrunkModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DrunkModifier_obj), true, "modchart.modifiers.DrunkModifier"));
	*(void **)__this = DrunkModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

DrunkModifier_obj::DrunkModifier_obj()
{
}

::hx::Val DrunkModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"getPos") ) { return ::hx::Val( getPos_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getSubmods") ) { return ::hx::Val( getSubmods_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *DrunkModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *DrunkModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String DrunkModifier_obj_sMemberFields[] = {
	HX_("getName",01,22,82,1b),
	HX_("getPos",9e,96,24,a3),
	HX_("getSubmods",fb,c2,ec,7a),
	::String(null()) };

::hx::Class DrunkModifier_obj::__mClass;

void DrunkModifier_obj::__register()
{
	DrunkModifier_obj _hx_dummy;
	DrunkModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.DrunkModifier",37,26,af,71);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DrunkModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DrunkModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DrunkModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DrunkModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
