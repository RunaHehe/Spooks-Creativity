// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_BeatModifier
#include <modchart/modifiers/BeatModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c5e187761af9d107_9_new,"modchart.modifiers.BeatModifier","new",0xe1ea1643,"modchart.modifiers.BeatModifier.new","modchart/modifiers/BeatModifier.hx",9,0x3625318b)
HX_LOCAL_STACK_FRAME(_hx_pos_c5e187761af9d107_10_getName,"modchart.modifiers.BeatModifier","getName",0xda149564,"modchart.modifiers.BeatModifier.getName","modchart/modifiers/BeatModifier.hx",10,0x3625318b)
HX_LOCAL_STACK_FRAME(_hx_pos_c5e187761af9d107_11_getPos,"modchart.modifiers.BeatModifier","getPos",0x9512e09b,"modchart.modifiers.BeatModifier.getPos","modchart/modifiers/BeatModifier.hx",11,0x3625318b)
namespace modchart{
namespace modifiers{

void BeatModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_c5e187761af9d107_9_new)
HXDLIN(   9)		super::__construct(modMgr,parent);
            	}

Dynamic BeatModifier_obj::__CreateEmpty() { return new BeatModifier_obj; }

void *BeatModifier_obj::_hx_vtable = 0;

Dynamic BeatModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BeatModifier_obj > _hx_result = new BeatModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool BeatModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x117b202d) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x117b202d;
		}
	} else {
		return inClassId==(int)0x4386e937;
	}
}

::String BeatModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_c5e187761af9d107_10_getName)
HXDLIN(  10)		return HX_("beat",76,e1,13,41);
            	}


 ::math::Vector3 BeatModifier_obj::getPos(Float time,Float visualDiff,Float timeDiff,Float beat, ::math::Vector3 pos,int data,int player, ::flixel::FlxSprite obj){
            	HX_STACKFRAME(&_hx_pos_c5e187761af9d107_11_getPos)
HXLINE(  12)		if ((this->getValue(player) == 0)) {
HXLINE(  12)			return pos;
            		}
HXLINE(  13)		Float accelTime = ((Float)0.3);
HXLINE(  14)		Float totalTime = ((Float)0.7);
HXLINE(  16)		Float beat1 = (::PlayState_obj::instance->curDecBeat + accelTime);
HXLINE(  17)		bool evenBeat = (::hx::Mod(beat1,2) != 0);
HXLINE(  19)		if ((beat1 < 0)) {
HXLINE(  19)			return pos;
            		}
HXLINE(  21)		beat1 = (beat1 - ( (Float)(::Math_obj::floor(beat1)) ));
HXLINE(  22)		beat1 = (beat1 + 1);
HXLINE(  23)		beat1 = (beat1 - ( (Float)(::Math_obj::floor(beat1)) ));
HXLINE(  24)		if ((beat1 >= totalTime)) {
HXLINE(  24)			return pos;
            		}
HXLINE(  26)		Float amount = ( (Float)(0) );
HXLINE(  27)		if ((beat1 < accelTime)) {
HXLINE(  28)			amount = (beat1 / accelTime);
HXLINE(  29)			amount = (amount * amount);
            		}
            		else {
HXLINE(  31)			amount = ((((beat1 - accelTime) * ( (Float)(-1) )) / (totalTime - accelTime)) + 1);
HXLINE(  32)			amount = (( (Float)(1) ) - ((( (Float)(1) ) - amount) * (( (Float)(1) ) - amount)));
            		}
HXLINE(  34)		if (evenBeat) {
HXLINE(  34)			amount = (amount * ( (Float)(-1) ));
            		}
HXLINE(  36)		Float n = ((visualDiff / ( (Float)(30) )) + (::Math_obj::PI / ( (Float)(2) )));
HXDLIN(  36)		n = (n * ((Float)0.3183098862));
HXDLIN(  36)		if ((n > 1)) {
HXLINE(  36)			n = (n - ( (Float)(((::Math_obj::ceil(n) >> 1) << 1)) ));
            		}
            		else {
HXLINE(  36)			if ((n < -1)) {
HXLINE(  36)				n = (n + ((::Math_obj::ceil(-(n)) >> 1) << 1));
            			}
            		}
HXDLIN(  36)		Float shift;
HXDLIN(  36)		if ((n > 0)) {
HXLINE(  36)			shift = (n * (((Float)3.1) + (n * (((Float)0.5) + (n * (((Float)-7.2) + (n * ((Float)3.6))))))));
            		}
            		else {
HXLINE(  36)			shift = (n * (((Float)3.1) - (n * (((Float)0.5) + (n * (((Float)7.2) + (n * ((Float)3.6))))))));
            		}
HXDLIN(  36)		Float shift1 = ((( (Float)(40) ) * amount) * shift);
HXLINE(  37)		 ::math::Vector3 pos1 = pos;
HXDLIN(  37)		Float pos2 = pos1->x;
HXDLIN(  37)		pos1->x = (pos2 + (this->getValue(player) * shift1));
HXLINE(  38)		return pos;
            	}



::hx::ObjectPtr< BeatModifier_obj > BeatModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< BeatModifier_obj > __this = new BeatModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< BeatModifier_obj > BeatModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	BeatModifier_obj *__this = (BeatModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BeatModifier_obj), true, "modchart.modifiers.BeatModifier"));
	*(void **)__this = BeatModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

BeatModifier_obj::BeatModifier_obj()
{
}

::hx::Val BeatModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"getPos") ) { return ::hx::Val( getPos_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BeatModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BeatModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String BeatModifier_obj_sMemberFields[] = {
	HX_("getName",01,22,82,1b),
	HX_("getPos",9e,96,24,a3),
	::String(null()) };

::hx::Class BeatModifier_obj::__mClass;

void BeatModifier_obj::__register()
{
	BeatModifier_obj _hx_dummy;
	BeatModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.BeatModifier",d1,38,73,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BeatModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BeatModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BeatModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BeatModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
