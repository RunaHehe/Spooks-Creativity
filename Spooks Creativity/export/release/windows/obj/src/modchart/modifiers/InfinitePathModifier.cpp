// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_InfinitePathModifier
#include <modchart/modifiers/InfinitePathModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_PathModifier
#include <modchart/modifiers/PathModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c6f67ee0f42b3fb0_7_new,"modchart.modifiers.InfinitePathModifier","new",0x7ce383e6,"modchart.modifiers.InfinitePathModifier.new","modchart/modifiers/InfinitePathModifier.hx",7,0x5fdcb748)
HX_LOCAL_STACK_FRAME(_hx_pos_c6f67ee0f42b3fb0_8_getName,"modchart.modifiers.InfinitePathModifier","getName",0x6d191087,"modchart.modifiers.InfinitePathModifier.getName","modchart/modifiers/InfinitePathModifier.hx",8,0x5fdcb748)
HX_LOCAL_STACK_FRAME(_hx_pos_c6f67ee0f42b3fb0_11_getMoveSpeed,"modchart.modifiers.InfinitePathModifier","getMoveSpeed",0x00e3aefa,"modchart.modifiers.InfinitePathModifier.getMoveSpeed","modchart/modifiers/InfinitePathModifier.hx",11,0x5fdcb748)
HX_LOCAL_STACK_FRAME(_hx_pos_c6f67ee0f42b3fb0_15_getPath,"modchart.modifiers.InfinitePathModifier","getPath",0x6e6b83e1,"modchart.modifiers.InfinitePathModifier.getPath","modchart/modifiers/InfinitePathModifier.hx",15,0x5fdcb748)
namespace modchart{
namespace modifiers{

void InfinitePathModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_c6f67ee0f42b3fb0_7_new)
HXDLIN(   7)		super::__construct(modMgr,parent);
            	}

Dynamic InfinitePathModifier_obj::__CreateEmpty() { return new InfinitePathModifier_obj; }

void *InfinitePathModifier_obj::_hx_vtable = 0;

Dynamic InfinitePathModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InfinitePathModifier_obj > _hx_result = new InfinitePathModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool InfinitePathModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x08defc50) {
		if (inClassId<=(int)0x08af6b5c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x08af6b5c;
		} else {
			return inClassId==(int)0x08defc50;
		}
	} else {
		return inClassId==(int)0x0ce062e5 || inClassId==(int)0x4386e937;
	}
}

::String InfinitePathModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_c6f67ee0f42b3fb0_8_getName)
HXDLIN(   8)		return HX_("infinite",d4,16,69,da);
            	}


int InfinitePathModifier_obj::getMoveSpeed(){
            	HX_STACKFRAME(&_hx_pos_c6f67ee0f42b3fb0_11_getMoveSpeed)
HXDLIN(  11)		return 1850;
            	}


::Array< ::Dynamic> InfinitePathModifier_obj::getPath(){
            	HX_GC_STACKFRAME(&_hx_pos_c6f67ee0f42b3fb0_15_getPath)
HXLINE(  16)		::Array< ::Dynamic> infPath = ::Array_obj< ::Dynamic>::__new(4)->init(0,::Array_obj< ::Dynamic>::__new(0))->init(1,::Array_obj< ::Dynamic>::__new(0))->init(2,::Array_obj< ::Dynamic>::__new(0))->init(3,::Array_obj< ::Dynamic>::__new(0));
HXLINE(  18)		int r = 0;
HXLINE(  19)		while((r < 360)){
HXLINE(  21)			{
HXLINE(  21)				int _g = 0;
HXDLIN(  21)				int _g1 = infPath->length;
HXDLIN(  21)				while((_g < _g1)){
HXLINE(  21)					_g = (_g + 1);
HXDLIN(  21)					int data = (_g - 1);
HXLINE(  23)					Float rad = ((( (Float)(r) ) * ::Math_obj::PI) / ( (Float)(180) ));
HXLINE(  24)					Float n = rad;
HXDLIN(  24)					n = (n * ((Float)0.3183098862));
HXDLIN(  24)					if ((n > 1)) {
HXLINE(  24)						n = (n - ( (Float)(((::Math_obj::ceil(n) >> 1) << 1)) ));
            					}
            					else {
HXLINE(  24)						if ((n < -1)) {
HXLINE(  24)							n = (n + ((::Math_obj::ceil(-(n)) >> 1) << 1));
            						}
            					}
HXDLIN(  24)					Float _hx_tmp;
HXDLIN(  24)					if ((n > 0)) {
HXLINE(  24)						_hx_tmp = (n * (((Float)3.1) + (n * (((Float)0.5) + (n * (((Float)-7.2) + (n * ((Float)3.6))))))));
            					}
            					else {
HXLINE(  24)						_hx_tmp = (n * (((Float)3.1) - (n * (((Float)0.5) + (n * (((Float)7.2) + (n * ((Float)3.6))))))));
            					}
HXLINE(  25)					Float n1 = rad;
HXDLIN(  25)					n1 = (n1 * ((Float)0.3183098862));
HXDLIN(  25)					if ((n1 > 1)) {
HXLINE(  25)						n1 = (n1 - ( (Float)(((::Math_obj::ceil(n1) >> 1) << 1)) ));
            					}
            					else {
HXLINE(  25)						if ((n1 < -1)) {
HXLINE(  25)							n1 = (n1 + ((::Math_obj::ceil(-(n1)) >> 1) << 1));
            						}
            					}
HXDLIN(  25)					Float _hx_tmp1;
HXDLIN(  25)					if ((n1 > 0)) {
HXLINE(  25)						_hx_tmp1 = (n1 * (((Float)3.1) + (n1 * (((Float)0.5) + (n1 * (((Float)-7.2) + (n1 * ((Float)3.6))))))));
            					}
            					else {
HXLINE(  25)						_hx_tmp1 = (n1 * (((Float)3.1) - (n1 * (((Float)0.5) + (n1 * (((Float)7.2) + (n1 * ((Float)3.6))))))));
            					}
HXDLIN(  25)					Float n2 = (rad + ((Float)1.570796327));
HXDLIN(  25)					n2 = (n2 * ((Float)0.3183098862));
HXDLIN(  25)					if ((n2 > 1)) {
HXLINE(  25)						n2 = (n2 - ( (Float)(((::Math_obj::ceil(n2) >> 1) << 1)) ));
            					}
            					else {
HXLINE(  25)						if ((n2 < -1)) {
HXLINE(  25)							n2 = (n2 + ((::Math_obj::ceil(-(n2)) >> 1) << 1));
            						}
            					}
HXDLIN(  25)					Float _hx_tmp2;
HXDLIN(  25)					if ((n2 > 0)) {
HXLINE(  25)						_hx_tmp2 = (n2 * (((Float)3.1) + (n2 * (((Float)0.5) + (n2 * (((Float)-7.2) + (n2 * ((Float)3.6))))))));
            					}
            					else {
HXLINE(  25)						_hx_tmp2 = (n2 * (((Float)3.1) - (n2 * (((Float)0.5) + (n2 * (((Float)7.2) + (n2 * ((Float)3.6))))))));
            					}
HXLINE(  24)					infPath->__get(data).StaticCast< ::Array< ::Dynamic> >()->push( ::math::Vector3_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.5)) + (_hx_tmp * ( (Float)(600) ))),((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5)) + ((_hx_tmp1 * _hx_tmp2) * ( (Float)(600) ))),0));
            				}
            			}
HXLINE(  27)			r = (r + 15);
            		}
HXLINE(  29)		return infPath;
            	}



::hx::ObjectPtr< InfinitePathModifier_obj > InfinitePathModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< InfinitePathModifier_obj > __this = new InfinitePathModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< InfinitePathModifier_obj > InfinitePathModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	InfinitePathModifier_obj *__this = (InfinitePathModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InfinitePathModifier_obj), true, "modchart.modifiers.InfinitePathModifier"));
	*(void **)__this = InfinitePathModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

InfinitePathModifier_obj::InfinitePathModifier_obj()
{
}

::hx::Val InfinitePathModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPath") ) { return ::hx::Val( getPath_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMoveSpeed") ) { return ::hx::Val( getMoveSpeed_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *InfinitePathModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *InfinitePathModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String InfinitePathModifier_obj_sMemberFields[] = {
	HX_("getName",01,22,82,1b),
	HX_("getMoveSpeed",40,03,87,4e),
	HX_("getPath",5b,95,d4,1c),
	::String(null()) };

::hx::Class InfinitePathModifier_obj::__mClass;

void InfinitePathModifier_obj::__register()
{
	InfinitePathModifier_obj _hx_dummy;
	InfinitePathModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.InfinitePathModifier",f4,58,56,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InfinitePathModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InfinitePathModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InfinitePathModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InfinitePathModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
