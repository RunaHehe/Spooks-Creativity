// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ColorSwap
#include <ColorSwap.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_AlphaModifier
#include <modchart/modifiers/AlphaModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_8_new,"modchart.modifiers.AlphaModifier","new",0x128447e3,"modchart.modifiers.AlphaModifier.new","modchart/modifiers/AlphaModifier.hx",8,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_10_getName,"modchart.modifiers.AlphaModifier","getName",0x22381704,"modchart.modifiers.AlphaModifier.getName","modchart/modifiers/AlphaModifier.hx",10,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_13_ignorePos,"modchart.modifiers.AlphaModifier","ignorePos",0x46b34f65,"modchart.modifiers.AlphaModifier.ignorePos","modchart/modifiers/AlphaModifier.hx",13,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_18_getHiddenSudden,"modchart.modifiers.AlphaModifier","getHiddenSudden",0x3c5a524e,"modchart.modifiers.AlphaModifier.getHiddenSudden","modchart/modifiers/AlphaModifier.hx",18,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_22_getHiddenEnd,"modchart.modifiers.AlphaModifier","getHiddenEnd",0x0d335738,"modchart.modifiers.AlphaModifier.getHiddenEnd","modchart/modifiers/AlphaModifier.hx",22,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_26_getHiddenStart,"modchart.modifiers.AlphaModifier","getHiddenStart",0x55b318ff,"modchart.modifiers.AlphaModifier.getHiddenStart","modchart/modifiers/AlphaModifier.hx",26,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_30_getSuddenEnd,"modchart.modifiers.AlphaModifier","getSuddenEnd",0xcbf033b7,"modchart.modifiers.AlphaModifier.getSuddenEnd","modchart/modifiers/AlphaModifier.hx",30,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_34_getSuddenStart,"modchart.modifiers.AlphaModifier","getSuddenStart",0xe2bf533e,"modchart.modifiers.AlphaModifier.getSuddenStart","modchart/modifiers/AlphaModifier.hx",34,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_37_getVisibility,"modchart.modifiers.AlphaModifier","getVisibility",0x335c234b,"modchart.modifiers.AlphaModifier.getVisibility","modchart/modifiers/AlphaModifier.hx",37,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_74_getGlow,"modchart.modifiers.AlphaModifier","getGlow",0x1d9ff346,"modchart.modifiers.AlphaModifier.getGlow","modchart/modifiers/AlphaModifier.hx",74,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_79_getAlpha,"modchart.modifiers.AlphaModifier","getAlpha",0x59ee2485,"modchart.modifiers.AlphaModifier.getAlpha","modchart/modifiers/AlphaModifier.hx",79,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_84_shouldExecute,"modchart.modifiers.AlphaModifier","shouldExecute",0xc07d5f85,"modchart.modifiers.AlphaModifier.shouldExecute","modchart/modifiers/AlphaModifier.hx",84,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_85_ignoreUpdateReceptor,"modchart.modifiers.AlphaModifier","ignoreUpdateReceptor",0x4d0468b4,"modchart.modifiers.AlphaModifier.ignoreUpdateReceptor","modchart/modifiers/AlphaModifier.hx",85,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_86_ignoreUpdateNote,"modchart.modifiers.AlphaModifier","ignoreUpdateNote",0x20a05cea,"modchart.modifiers.AlphaModifier.ignoreUpdateNote","modchart/modifiers/AlphaModifier.hx",86,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_88_updateNote,"modchart.modifiers.AlphaModifier","updateNote",0x4d6bd178,"modchart.modifiers.AlphaModifier.updateNote","modchart/modifiers/AlphaModifier.hx",88,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_112_updateReceptor,"modchart.modifiers.AlphaModifier","updateReceptor",0x79803c42,"modchart.modifiers.AlphaModifier.updateReceptor","modchart/modifiers/AlphaModifier.hx",112,0x3bf5142f)
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_122_getSubmods,"modchart.modifiers.AlphaModifier","getSubmods",0xc69991d8,"modchart.modifiers.AlphaModifier.getSubmods","modchart/modifiers/AlphaModifier.hx",122,0x3bf5142f)
static const ::String _hx_array_data_d26c1a71_18[] = {
	HX_("noteAlpha",0c,f2,23,5f),HX_("alpha",5e,a7,96,21),HX_("hidden",6a,ff,95,4c),HX_("hiddenOffset",9d,76,56,18),HX_("sudden",8b,ed,51,9b),HX_("suddenOffset",7e,33,fd,f5),HX_("blink",5c,f1,f7,b4),HX_("randomVanish",9e,dc,e9,28),HX_("dark",76,54,63,42),HX_("dontUseStealthGlow",5a,41,9a,c5),HX_("stealthPastReceptors",42,2a,00,e8),
};
HX_LOCAL_STACK_FRAME(_hx_pos_7561126d7d9ec2cd_15_boot,"modchart.modifiers.AlphaModifier","boot",0x19539f4f,"modchart.modifiers.AlphaModifier.boot","modchart/modifiers/AlphaModifier.hx",15,0x3bf5142f)
namespace modchart{
namespace modifiers{

void AlphaModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_8_new)
HXDLIN(   8)		super::__construct(modMgr,parent);
            	}

Dynamic AlphaModifier_obj::__CreateEmpty() { return new AlphaModifier_obj; }

void *AlphaModifier_obj::_hx_vtable = 0;

Dynamic AlphaModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AlphaModifier_obj > _hx_result = new AlphaModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool AlphaModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x271ac85d) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x271ac85d;
		}
	} else {
		return inClassId==(int)0x4386e937;
	}
}

::String AlphaModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_10_getName)
HXDLIN(  10)		return HX_("stealth",c3,d5,72,77);
            	}


bool AlphaModifier_obj::ignorePos(){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_13_ignorePos)
HXDLIN(  13)		return true;
            	}


Float AlphaModifier_obj::getHiddenSudden(::hx::Null< int >  __o_player){
            		int player = __o_player.Default(-1);
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_18_getHiddenSudden)
HXDLIN(  18)		Float _hx_tmp = this->getSubmodValue(HX_("hidden",6a,ff,95,4c),player);
HXDLIN(  18)		return (_hx_tmp * this->getSubmodValue(HX_("sudden",8b,ed,51,9b),player));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AlphaModifier_obj,getHiddenSudden,return )

Float AlphaModifier_obj::getHiddenEnd(::hx::Null< int >  __o_player){
            		int player = __o_player.Default(-1);
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_22_getHiddenEnd)
HXDLIN(  22)		Float _hx_tmp = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5));
HXDLIN(  22)		int _hx_tmp1 = ::modchart::modifiers::AlphaModifier_obj::fadeDistY;
HXDLIN(  22)		Float _hx_tmp2 = (_hx_tmp + (( (Float)(_hx_tmp1) ) * (((this->getHiddenSudden(player) * ((Float)-0.25)) / ( (Float)(1) )) + -1)));
HXDLIN(  22)		Float _hx_tmp3 = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5));
HXDLIN(  22)		return (_hx_tmp2 + (_hx_tmp3 * this->getSubmodValue(HX_("hiddenOffset",9d,76,56,18),player)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AlphaModifier_obj,getHiddenEnd,return )

Float AlphaModifier_obj::getHiddenStart(::hx::Null< int >  __o_player){
            		int player = __o_player.Default(-1);
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_26_getHiddenStart)
HXDLIN(  26)		Float _hx_tmp = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5));
HXDLIN(  26)		int _hx_tmp1 = ::modchart::modifiers::AlphaModifier_obj::fadeDistY;
HXDLIN(  26)		Float _hx_tmp2 = (_hx_tmp + (( (Float)(_hx_tmp1) ) * ((this->getHiddenSudden(player) * ((Float)-0.25)) / ( (Float)(1) ))));
HXDLIN(  26)		Float _hx_tmp3 = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5));
HXDLIN(  26)		return (_hx_tmp2 + (_hx_tmp3 * this->getSubmodValue(HX_("hiddenOffset",9d,76,56,18),player)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AlphaModifier_obj,getHiddenStart,return )

Float AlphaModifier_obj::getSuddenEnd(::hx::Null< int >  __o_player){
            		int player = __o_player.Default(-1);
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_30_getSuddenEnd)
HXDLIN(  30)		Float _hx_tmp = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5));
HXDLIN(  30)		int _hx_tmp1 = ::modchart::modifiers::AlphaModifier_obj::fadeDistY;
HXDLIN(  30)		Float _hx_tmp2 = (_hx_tmp + (( (Float)(_hx_tmp1) ) * (((this->getHiddenSudden(player) * ((Float)0.25)) / ( (Float)(1) )) + 1)));
HXDLIN(  30)		Float _hx_tmp3 = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5));
HXDLIN(  30)		return (_hx_tmp2 + (_hx_tmp3 * this->getSubmodValue(HX_("suddenOffset",7e,33,fd,f5),player)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AlphaModifier_obj,getSuddenEnd,return )

Float AlphaModifier_obj::getSuddenStart(::hx::Null< int >  __o_player){
            		int player = __o_player.Default(-1);
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_34_getSuddenStart)
HXDLIN(  34)		Float _hx_tmp = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5));
HXDLIN(  34)		int _hx_tmp1 = ::modchart::modifiers::AlphaModifier_obj::fadeDistY;
HXDLIN(  34)		Float _hx_tmp2 = (_hx_tmp + (( (Float)(_hx_tmp1) ) * ((this->getHiddenSudden(player) * ((Float)0.25)) / ( (Float)(1) ))));
HXDLIN(  34)		Float _hx_tmp3 = (( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.5));
HXDLIN(  34)		return (_hx_tmp2 + (_hx_tmp3 * this->getSubmodValue(HX_("suddenOffset",7e,33,fd,f5),player)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AlphaModifier_obj,getSuddenStart,return )

Float AlphaModifier_obj::getVisibility(Float yPos,int player, ::Note note){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_37_getVisibility)
HXLINE(  38)		Float distFromCenter = yPos;
HXLINE(  39)		Float alpha = ( (Float)(0) );
HXLINE(  41)		bool _hx_tmp;
HXDLIN(  41)		if (((yPos - ( (Float)(50) )) < 0)) {
HXLINE(  41)			_hx_tmp = (this->getSubmodValue(HX_("stealthPastReceptors",42,2a,00,e8),player) == 0);
            		}
            		else {
HXLINE(  41)			_hx_tmp = false;
            		}
HXDLIN(  41)		if (_hx_tmp) {
HXLINE(  42)			return ((Float)1.0);
            		}
HXLINE(  45)		Float time = (::Conductor_obj::songPosition / ( (Float)(1000) ));
HXLINE(  47)		if ((this->getSubmodValue(HX_("hidden",6a,ff,95,4c),player) != 0)) {
HXLINE(  48)			Float l1 = this->getHiddenStart(player);
HXDLIN(  48)			Float n = (((yPos - l1) * ( (Float)(-1) )) / (this->getHiddenEnd(player) - l1));
HXDLIN(  48)			if ((n > 0)) {
HXLINE(  48)				n = ( (Float)(0) );
            			}
HXDLIN(  48)			if ((n < -1)) {
HXLINE(  48)				n = ( (Float)(-1) );
            			}
HXDLIN(  48)			Float hiddenAdjust = n;
HXLINE(  49)			alpha = (alpha + (this->getSubmodValue(HX_("hidden",6a,ff,95,4c),player) * hiddenAdjust));
            		}
HXLINE(  52)		if ((this->getSubmodValue(HX_("sudden",8b,ed,51,9b),player) != 0)) {
HXLINE(  53)			Float l11 = this->getSuddenStart(player);
HXDLIN(  53)			Float n1 = (((yPos - l11) * ( (Float)(-1) )) / (this->getSuddenEnd(player) - l11));
HXDLIN(  53)			if ((n1 > 0)) {
HXLINE(  53)				n1 = ( (Float)(0) );
            			}
HXDLIN(  53)			if ((n1 < -1)) {
HXLINE(  53)				n1 = ( (Float)(-1) );
            			}
HXDLIN(  53)			Float suddenAdjust = n1;
HXLINE(  54)			alpha = (alpha + (this->getSubmodValue(HX_("sudden",8b,ed,51,9b),player) * suddenAdjust));
            		}
HXLINE(  57)		if ((this->getValue(player) != 0)) {
HXLINE(  58)			alpha = (alpha - this->getValue(player));
            		}
HXLINE(  61)		if ((this->getSubmodValue(HX_("blink",5c,f1,f7,b4),player) != 0)) {
HXLINE(  62)			Float n2 = (time * ( (Float)(10) ));
HXDLIN(  62)			n2 = (n2 * ((Float)0.3183098862));
HXDLIN(  62)			if ((n2 > 1)) {
HXLINE(  62)				n2 = (n2 - ( (Float)(((::Math_obj::ceil(n2) >> 1) << 1)) ));
            			}
            			else {
HXLINE(  62)				if ((n2 < -1)) {
HXLINE(  62)					n2 = (n2 + ((::Math_obj::ceil(-(n2)) >> 1) << 1));
            				}
            			}
HXDLIN(  62)			Float f;
HXDLIN(  62)			if ((n2 > 0)) {
HXLINE(  62)				f = (n2 * (((Float)3.1) + (n2 * (((Float)0.5) + (n2 * (((Float)-7.2) + (n2 * ((Float)3.6))))))));
            			}
            			else {
HXLINE(  62)				f = (n2 * (((Float)3.1) - (n2 * (((Float)0.5) + (n2 * (((Float)7.2) + (n2 * ((Float)3.6))))))));
            			}
HXDLIN(  62)			Float f1 = (( (Float)(::Std_obj::_hx_int(((f + ((Float)0.16665)) / ((Float)0.3333)))) ) * ((Float)0.3333));
HXLINE(  63)			alpha = (alpha + ((f1 / ( (Float)(1) )) + -1));
            		}
HXLINE(  66)		if ((this->getSubmodValue(HX_("randomVanish",9e,dc,e9,28),player) != 0)) {
HXLINE(  67)			Float realFadeDist = ( (Float)(240) );
HXLINE(  68)			Float alpha1 = (((::Math_obj::abs(distFromCenter) - realFadeDist) / ((( (Float)(2) ) * realFadeDist) - realFadeDist)) + -1);
HXDLIN(  68)			alpha = (alpha + (alpha1 * this->getSubmodValue(HX_("randomVanish",9e,dc,e9,28),player)));
            		}
HXLINE(  71)		Float n3 = (alpha + 1);
HXDLIN(  71)		if ((n3 > 1)) {
HXLINE(  71)			n3 = ( (Float)(1) );
            		}
HXDLIN(  71)		if ((n3 < 0)) {
HXLINE(  71)			n3 = ( (Float)(0) );
            		}
HXDLIN(  71)		return n3;
            	}


HX_DEFINE_DYNAMIC_FUNC3(AlphaModifier_obj,getVisibility,return )

Float AlphaModifier_obj::getGlow(Float visible){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_74_getGlow)
HXLINE(  75)		Float glow = (((visible - ( (Float)(1) )) * ((Float)1.3)) / ((Float)-0.5));
HXLINE(  76)		Float n = glow;
HXDLIN(  76)		if ((n > 1)) {
HXLINE(  76)			n = ( (Float)(1) );
            		}
HXDLIN(  76)		if ((n < 0)) {
HXLINE(  76)			n = ( (Float)(0) );
            		}
HXDLIN(  76)		return n;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AlphaModifier_obj,getGlow,return )

Float AlphaModifier_obj::getAlpha(Float visible){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_79_getAlpha)
HXLINE(  80)		Float alpha = ((((visible - ((Float)0.5)) * ( (Float)(-1) )) / ((Float)-0.5)) + 1);
HXLINE(  81)		Float n = alpha;
HXDLIN(  81)		if ((n > 1)) {
HXLINE(  81)			n = ( (Float)(1) );
            		}
HXDLIN(  81)		if ((n < 0)) {
HXLINE(  81)			n = ( (Float)(0) );
            		}
HXDLIN(  81)		return n;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AlphaModifier_obj,getAlpha,return )

bool AlphaModifier_obj::shouldExecute(int player,Float val){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_84_shouldExecute)
HXDLIN(  84)		return true;
            	}


bool AlphaModifier_obj::ignoreUpdateReceptor(){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_85_ignoreUpdateReceptor)
HXDLIN(  85)		return false;
            	}


bool AlphaModifier_obj::ignoreUpdateNote(){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_86_ignoreUpdateNote)
HXDLIN(  86)		return false;
            	}


void AlphaModifier_obj::updateNote(Float beat, ::Note note, ::math::Vector3 pos,int player){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_88_updateNote)
HXLINE(  89)		int player1;
HXDLIN(  89)		if ((note->mustPress == true)) {
HXLINE(  89)			player1 = 0;
            		}
            		else {
HXLINE(  89)			player1 = 1;
            		}
HXLINE(  95)		Float speed = (::PlayState_obj::instance->songSpeed * note->multSpeed);
HXLINE(  96)		Float yPos = (-(((((Float)0.45) * (::Conductor_obj::songPosition - note->strumTime)) * speed)) + 50);
HXLINE(  98)		note->colorSwap->set_flash(( (Float)(0) ));
HXLINE(  99)		Float alphaMod = (( (Float)(1) ) - this->getSubmodValue(HX_("alpha",5e,a7,96,21),player1));
HXDLIN(  99)		Float alphaMod1 = (alphaMod * (( (Float)(1) ) - this->getSubmodValue((HX_("alpha",5e,a7,96,21) + note->noteData),player1)));
HXDLIN(  99)		Float alphaMod2 = (alphaMod1 * (( (Float)(1) ) - this->getSubmodValue(HX_("noteAlpha",0c,f2,23,5f),player1)));
HXDLIN(  99)		Float alphaMod3 = (alphaMod2 * (( (Float)(1) ) - this->getSubmodValue((HX_("noteAlpha",0c,f2,23,5f) + note->noteData),player1)));
HXLINE( 100)		Float alpha = this->getVisibility(yPos,player1,note);
HXLINE( 102)		if ((this->getSubmodValue(HX_("dontUseStealthGlow",5a,41,9a,c5),player1) == 0)) {
HXLINE( 103)			note->alphaMod = this->getAlpha(alpha);
HXLINE( 104)			 ::ColorSwap note1 = note->colorSwap;
HXDLIN( 104)			note1->set_flash(this->getGlow(alpha));
            		}
            		else {
HXLINE( 106)			note->colorSwap->set_daAlpha(alpha);
            		}
HXLINE( 108)		 ::Note note2 = note;
HXDLIN( 108)		note2->alphaMod = (note2->alphaMod * alphaMod3);
            	}


void AlphaModifier_obj::updateReceptor(Float beat, ::StrumNote receptor, ::math::Vector3 pos,int player){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_112_updateReceptor)
HXLINE( 113)		Float alpha = (( (Float)(1) ) - this->getSubmodValue(HX_("alpha",5e,a7,96,21),player));
HXDLIN( 113)		Float alpha1 = (alpha * (( (Float)(1) ) - this->getSubmodValue((HX_("alpha",5e,a7,96,21) + receptor->noteData),player)));
HXLINE( 114)		bool _hx_tmp;
HXDLIN( 114)		if ((this->getSubmodValue(HX_("dark",76,54,63,42),player) == 0)) {
HXLINE( 114)			_hx_tmp = (this->getSubmodValue((HX_("dark",76,54,63,42) + receptor->noteData),player) != 0);
            		}
            		else {
HXLINE( 114)			_hx_tmp = true;
            		}
HXDLIN( 114)		if (_hx_tmp) {
HXLINE( 115)			Float alpha2 = (alpha1 * (( (Float)(1) ) - this->getSubmodValue(HX_("dark",76,54,63,42),player)));
HXDLIN( 115)			alpha1 = (alpha2 * (( (Float)(1) ) - this->getSubmodValue((HX_("dark",76,54,63,42) + receptor->noteData),player)));
            		}
HXLINE( 118)		receptor->colorSwap->set_daAlpha(alpha1);
            	}


::Array< ::String > AlphaModifier_obj::getSubmods(){
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_122_getSubmods)
HXLINE( 123)		::Array< ::String > subMods = ::Array_obj< ::String >::fromData( _hx_array_data_d26c1a71_18,11);
HXLINE( 124)		{
HXLINE( 124)			int _g = 0;
HXDLIN( 124)			while((_g < 4)){
HXLINE( 124)				_g = (_g + 1);
HXDLIN( 124)				int i = (_g - 1);
HXLINE( 125)				subMods->push((HX_("noteAlpha",0c,f2,23,5f) + i));
HXLINE( 126)				subMods->push((HX_("alpha",5e,a7,96,21) + i));
HXLINE( 127)				subMods->push((HX_("dark",76,54,63,42) + i));
            			}
            		}
HXLINE( 129)		return subMods;
            	}


int AlphaModifier_obj::fadeDistY;


::hx::ObjectPtr< AlphaModifier_obj > AlphaModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< AlphaModifier_obj > __this = new AlphaModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< AlphaModifier_obj > AlphaModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	AlphaModifier_obj *__this = (AlphaModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AlphaModifier_obj), true, "modchart.modifiers.AlphaModifier"));
	*(void **)__this = AlphaModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

AlphaModifier_obj::AlphaModifier_obj()
{
}

::hx::Val AlphaModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGlow") ) { return ::hx::Val( getGlow_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getAlpha") ) { return ::hx::Val( getAlpha_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"ignorePos") ) { return ::hx::Val( ignorePos_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateNote") ) { return ::hx::Val( updateNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSubmods") ) { return ::hx::Val( getSubmods_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getHiddenEnd") ) { return ::hx::Val( getHiddenEnd_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSuddenEnd") ) { return ::hx::Val( getSuddenEnd_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getVisibility") ) { return ::hx::Val( getVisibility_dyn() ); }
		if (HX_FIELD_EQ(inName,"shouldExecute") ) { return ::hx::Val( shouldExecute_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getHiddenStart") ) { return ::hx::Val( getHiddenStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSuddenStart") ) { return ::hx::Val( getSuddenStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateReceptor") ) { return ::hx::Val( updateReceptor_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getHiddenSudden") ) { return ::hx::Val( getHiddenSudden_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignoreUpdateNote") ) { return ::hx::Val( ignoreUpdateNote_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"ignoreUpdateReceptor") ) { return ::hx::Val( ignoreUpdateReceptor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AlphaModifier_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fadeDistY") ) { outValue = ( fadeDistY ); return true; }
	}
	return false;
}

bool AlphaModifier_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fadeDistY") ) { fadeDistY=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AlphaModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo AlphaModifier_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &AlphaModifier_obj::fadeDistY,HX_("fadeDistY",17,6b,b9,c5)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String AlphaModifier_obj_sMemberFields[] = {
	HX_("getName",01,22,82,1b),
	HX_("ignorePos",a2,d3,d3,ae),
	HX_("getHiddenSudden",4b,22,53,76),
	HX_("getHiddenEnd",1b,57,8f,e1),
	HX_("getHiddenStart",a2,17,f9,f8),
	HX_("getSuddenEnd",9a,33,4c,a0),
	HX_("getSuddenStart",e1,51,05,86),
	HX_("getVisibility",08,0a,80,2f),
	HX_("getGlow",43,fe,e9,16),
	HX_("getAlpha",e8,b6,6d,81),
	HX_("shouldExecute",42,46,a1,bc),
	HX_("ignoreUpdateReceptor",97,83,07,f8),
	HX_("ignoreUpdateNote",4d,8a,5d,a0),
	HX_("updateNote",9b,02,bf,01),
	HX_("updateReceptor",e5,3a,c6,1c),
	HX_("getSubmods",fb,c2,ec,7a),
	::String(null()) };

static void AlphaModifier_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AlphaModifier_obj::fadeDistY,"fadeDistY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AlphaModifier_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AlphaModifier_obj::fadeDistY,"fadeDistY");
};

#endif

::hx::Class AlphaModifier_obj::__mClass;

static ::String AlphaModifier_obj_sStaticFields[] = {
	HX_("fadeDistY",17,6b,b9,c5),
	::String(null())
};

void AlphaModifier_obj::__register()
{
	AlphaModifier_obj _hx_dummy;
	AlphaModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.AlphaModifier",71,1a,6c,d2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AlphaModifier_obj::__GetStatic;
	__mClass->mSetStaticField = &AlphaModifier_obj::__SetStatic;
	__mClass->mMarkFunc = AlphaModifier_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AlphaModifier_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AlphaModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AlphaModifier_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AlphaModifier_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AlphaModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AlphaModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AlphaModifier_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7561126d7d9ec2cd_15_boot)
HXDLIN(  15)		fadeDistY = 120;
            	}
}

} // end namespace modchart
} // end namespace modifiers
