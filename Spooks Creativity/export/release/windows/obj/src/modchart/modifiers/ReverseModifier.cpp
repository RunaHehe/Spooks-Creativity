// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_ReverseModifier
#include <modchart/modifiers/ReverseModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_406fcc3c8d48101d_13_new,"modchart.modifiers.ReverseModifier","new",0x1a7e8ea7,"modchart.modifiers.ReverseModifier.new","modchart/modifiers/ReverseModifier.hx",13,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_16_lerp,"modchart.modifiers.ReverseModifier","lerp",0x12ebd250,"modchart.modifiers.ReverseModifier.lerp","modchart/modifiers/ReverseModifier.hx",16,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_18_getOrder,"modchart.modifiers.ReverseModifier","getOrder",0x94732071,"modchart.modifiers.ReverseModifier.getOrder","modchart/modifiers/ReverseModifier.hx",18,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_19_getName,"modchart.modifiers.ReverseModifier","getName",0x96570fc8,"modchart.modifiers.ReverseModifier.getName","modchart/modifiers/ReverseModifier.hx",19,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_21_getReverseValue,"modchart.modifiers.ReverseModifier","getReverseValue",0x51ba3d6c,"modchart.modifiers.ReverseModifier.getReverseValue","modchart/modifiers/ReverseModifier.hx",21,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_61_getScrollReversePerc,"modchart.modifiers.ReverseModifier","getScrollReversePerc",0xd66bd47e,"modchart.modifiers.ReverseModifier.getScrollReversePerc","modchart/modifiers/ReverseModifier.hx",61,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_64_shouldExecute,"modchart.modifiers.ReverseModifier","shouldExecute",0xc0954349,"modchart.modifiers.ReverseModifier.shouldExecute","modchart/modifiers/ReverseModifier.hx",64,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_67_ignoreUpdateNote,"modchart.modifiers.ReverseModifier","ignoreUpdateNote",0x95e62ba6,"modchart.modifiers.ReverseModifier.ignoreUpdateNote","modchart/modifiers/ReverseModifier.hx",67,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_71_updateNote,"modchart.modifiers.ReverseModifier","updateNote",0x2e85ab34,"modchart.modifiers.ReverseModifier.updateNote","modchart/modifiers/ReverseModifier.hx",71,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_109_getPos,"modchart.modifiers.ReverseModifier","getPos",0x84b2beb7,"modchart.modifiers.ReverseModifier.getPos","modchart/modifiers/ReverseModifier.hx",109,0xc2f4a66b)
HX_LOCAL_STACK_FRAME(_hx_pos_406fcc3c8d48101d_145_getSubmods,"modchart.modifiers.ReverseModifier","getSubmods",0xa7b36b94,"modchart.modifiers.ReverseModifier.getSubmods","modchart/modifiers/ReverseModifier.hx",145,0xc2f4a66b)
static const ::String _hx_array_data_af02af35_11[] = {
	HX_("cross",80,5f,5a,4c),HX_("split",da,ea,6e,81),HX_("alternate",3a,c9,33,35),HX_("reverseScroll",cf,0a,40,c9),HX_("crossScroll",ad,4b,a0,c9),HX_("splitScroll",87,d6,ba,cb),HX_("alternateScroll",e7,bc,86,df),HX_("centered",74,5d,50,8f),HX_("unboundedReverse",9e,2a,58,d4),
};
namespace modchart{
namespace modifiers{

void ReverseModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_13_new)
HXDLIN(  13)		super::__construct(modMgr,parent);
            	}

Dynamic ReverseModifier_obj::__CreateEmpty() { return new ReverseModifier_obj; }

void *ReverseModifier_obj::_hx_vtable = 0;

Dynamic ReverseModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ReverseModifier_obj > _hx_result = new ReverseModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ReverseModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f74c959) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x2f74c959;
		}
	} else {
		return inClassId==(int)0x4386e937;
	}
}

Float ReverseModifier_obj::lerp(Float a,Float b,Float c){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_16_lerp)
HXDLIN(  16)		return (a + ((b - a) * c));
            	}


HX_DEFINE_DYNAMIC_FUNC3(ReverseModifier_obj,lerp,return )

int ReverseModifier_obj::getOrder(){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_18_getOrder)
HXDLIN(  18)		return -2;
            	}


::String ReverseModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_19_getName)
HXDLIN(  19)		return HX_("reverse",22,39,fc,1a);
            	}


Float ReverseModifier_obj::getReverseValue(int dir,int player, ::Dynamic __o_scrolling){
            		 ::Dynamic scrolling = __o_scrolling;
            		if (::hx::IsNull(__o_scrolling)) scrolling = false;
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_21_getReverseValue)
HXLINE(  22)		::String suffix = HX_("",00,00,00,00);
HXLINE(  23)		if (::hx::IsEq( scrolling,true )) {
HXLINE(  23)			suffix = HX_("Scroll",2d,4c,f9,7b);
            		}
HXLINE(  24)		::Array< ::Dynamic> receptors = this->modMgr->receptors->__get(player).StaticCast< ::Array< ::Dynamic> >();
HXLINE(  25)		int kNum = receptors->length;
HXLINE(  26)		Float val = ( (Float)(0) );
HXLINE(  27)		if ((dir >= (( (Float)(kNum) ) / ( (Float)(2) )))) {
HXLINE(  28)			val = (val + this->getSubmodValue((HX_("split",da,ea,6e,81) + suffix),player));
            		}
HXLINE(  30)		if ((::hx::Mod(dir,2) == 1)) {
HXLINE(  31)			val = (val + this->getSubmodValue((HX_("alternate",3a,c9,33,35) + suffix),player));
            		}
HXLINE(  33)		Float first = (( (Float)(kNum) ) / ( (Float)(4) ));
HXLINE(  34)		Float last = (( (Float)((kNum - 1)) ) - first);
HXLINE(  36)		bool _hx_tmp;
HXDLIN(  36)		if ((dir >= first)) {
HXLINE(  36)			_hx_tmp = (dir <= last);
            		}
            		else {
HXLINE(  36)			_hx_tmp = false;
            		}
HXDLIN(  36)		if (_hx_tmp) {
HXLINE(  37)			val = (val + this->getSubmodValue((HX_("cross",80,5f,5a,4c) + suffix),player));
            		}
HXLINE(  40)		if ((suffix == HX_("",00,00,00,00))) {
HXLINE(  41)			Float val1 = this->getValue(player);
HXDLIN(  41)			val = (val + (val1 + this->getSubmodValue((HX_("reverse",22,39,fc,1a) + ::Std_obj::string(dir)),player)));
            		}
            		else {
HXLINE(  43)			val = (val + this->getSubmodValue((HX_("reverse",22,39,fc,1a) + suffix),player));
            		}
HXLINE(  46)		if ((this->getSubmodValue(HX_("unboundedReverse",9e,2a,58,d4),player) == 0)) {
HXLINE(  47)			val = ::hx::Mod(val,2);
HXLINE(  48)			if ((val > 1)) {
HXLINE(  48)				val = (( (Float)(2) ) - val);
            			}
            		}
HXLINE(  54)		if (::ClientPrefs_obj::downScroll) {
HXLINE(  55)			val = (( (Float)(1) ) - val);
            		}
HXLINE(  57)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC3(ReverseModifier_obj,getReverseValue,return )

Float ReverseModifier_obj::getScrollReversePerc(int dir,int player){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_61_getScrollReversePerc)
HXDLIN(  61)		return (this->getReverseValue(dir,player,null()) * ( (Float)(100) ));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ReverseModifier_obj,getScrollReversePerc,return )

bool ReverseModifier_obj::shouldExecute(int player,Float val){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_64_shouldExecute)
HXDLIN(  64)		return true;
            	}


bool ReverseModifier_obj::ignoreUpdateNote(){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_67_ignoreUpdateNote)
HXDLIN(  67)		return false;
            	}


void ReverseModifier_obj::updateNote(Float beat, ::Note daNote, ::math::Vector3 pos,int player){
            	HX_GC_STACKFRAME(&_hx_pos_406fcc3c8d48101d_71_updateNote)
HXDLIN(  71)		if (daNote->isSustainNote) {
HXLINE(  73)			Float y = (pos->y + daNote->offsetY);
HXLINE(  74)			Float revPerc = this->getReverseValue(daNote->noteData,player,null());
HXLINE(  75)			 ::StrumNote strumLine = this->modMgr->receptors->__get(player).StaticCast< ::Array< ::Dynamic> >()->__get(daNote->noteData).StaticCast<  ::StrumNote >();
HXLINE(  76)			bool shitGotHit;
HXDLIN(  76)			bool shitGotHit1;
HXDLIN(  76)			bool shitGotHit2;
HXDLIN(  76)			if (strumLine->sustainReduce) {
HXLINE(  76)				shitGotHit2 = daNote->isSustainNote;
            			}
            			else {
HXLINE(  76)				shitGotHit2 = false;
            			}
HXDLIN(  76)			if (shitGotHit2) {
HXLINE(  78)				if (!(daNote->mustPress)) {
HXLINE(  76)					shitGotHit1 = !(daNote->ignoreNote);
            				}
            				else {
HXLINE(  76)					shitGotHit1 = true;
            				}
            			}
            			else {
HXLINE(  76)				shitGotHit1 = false;
            			}
HXDLIN(  76)			if (shitGotHit1) {
HXLINE(  79)				if (daNote->mustPress) {
HXLINE(  79)					if (!(daNote->wasGoodHit)) {
HXLINE(  79)						if (daNote->prevNote->wasGoodHit) {
HXLINE(  76)							shitGotHit = !(daNote->canBeHit);
            						}
            						else {
HXLINE(  76)							shitGotHit = false;
            						}
            					}
            					else {
HXLINE(  76)						shitGotHit = true;
            					}
            				}
            				else {
HXLINE(  76)					shitGotHit = true;
            				}
            			}
            			else {
HXLINE(  76)				shitGotHit = false;
            			}
HXLINE(  80)			if (shitGotHit) {
HXLINE(  82)				Float center = (strumLine->y + (::Note_obj::swagWidth * ((Float)0.5)));
HXLINE(  83)				if ((revPerc >= ((Float)0.5))) {
HXLINE(  85)					Float _hx_tmp = (y - (daNote->offset->y * daNote->scale->y));
HXDLIN(  85)					if (((_hx_tmp + daNote->get_height()) >= center)) {
HXLINE(  87)						 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,daNote->frameWidth,daNote->frameHeight);
HXLINE(  88)						swagRect->height = ((center - y) / daNote->scale->y);
HXLINE(  89)						swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(  91)						daNote->set_clipRect(swagRect);
            					}
            				}
            				else {
HXLINE(  96)					if (((y + (daNote->offset->y * daNote->scale->y)) <= center)) {
HXLINE(  98)						 ::flixel::math::FlxRect swagRect1 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,daNote->frameWidth,daNote->frameHeight);
HXLINE(  99)						swagRect1->y = ((center - y) / daNote->scale->y);
HXLINE( 100)						 ::flixel::math::FlxRect swagRect2 = swagRect1;
HXDLIN( 100)						swagRect2->height = (swagRect2->height - swagRect1->y);
HXLINE( 102)						daNote->set_clipRect(swagRect1);
            					}
            				}
            			}
            		}
            	}


 ::math::Vector3 ReverseModifier_obj::getPos(Float time,Float visualDiff,Float timeDiff,Float beat, ::math::Vector3 pos,int data,int player, ::flixel::FlxSprite obj){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_109_getPos)
HXLINE( 110)		Float perc = this->getReverseValue(data,player,null());
HXLINE( 111)		Float shift = (((perc * (( (Float)((::flixel::FlxG_obj::height - 150)) ) - ( (Float)(50) ))) / ( (Float)(1) )) + 50);
HXLINE( 112)		Float mult = (((perc * ( (Float)(-2) )) / ( (Float)(1) )) + 1);
HXLINE( 113)		Float x = this->getSubmodValue(HX_("centered",74,5d,50,8f),player);
HXDLIN( 113)		shift = (((x * (((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) - ( (Float)(56) )) - shift)) / ( (Float)(1) )) + shift);
HXLINE( 115)		pos->y = (shift + (visualDiff * mult));
HXLINE( 119)		if (::Std_obj::isOfType(obj,::hx::ClassOf< ::Note >())) {
HXLINE( 120)			 ::Note note = ( ( ::Note)(obj) );
HXLINE( 121)			bool _hx_tmp;
HXDLIN( 121)			if (note->isSustainNote) {
HXLINE( 121)				_hx_tmp = (perc > 0);
            			}
            			else {
HXLINE( 121)				_hx_tmp = false;
            			}
HXDLIN( 121)			if (_hx_tmp) {
HXLINE( 123)				Float daY = pos->y;
HXLINE( 124)				Float fakeCrochet = ((( (Float)(60) ) / ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) ));
HXLINE( 125)				Float songSpeed = (::PlayState_obj::instance->songSpeed * note->multSpeed);
HXLINE( 126)				if (::StringTools_obj::endsWith(note->animation->_curAnim->name,HX_("end",db,03,4d,00))) {
HXLINE( 128)					daY = (daY + ((((((Float)10.5) * (fakeCrochet * ((Float)0.00250))) * ((Float)1.5)) * songSpeed) + (( (Float)(46) ) * (songSpeed - ( (Float)(1) )))));
HXLINE( 129)					daY = (daY - ((( (Float)(46) ) * (( (Float)(1) ) - (fakeCrochet / ( (Float)(600) )))) * songSpeed));
HXLINE( 133)					daY = (daY - ( (Float)(19) ));
            				}
HXLINE( 135)				daY = (daY + ((::Note_obj::swagWidth * ((Float)0.5)) - (((Float)60.5) * (songSpeed - ( (Float)(1) )))));
HXLINE( 136)				daY = (daY + ((((Float)27.5) * ((( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ) * ((Float)0.01)) - ( (Float)(1) ))) * (songSpeed - ( (Float)(1) ))));
HXLINE( 138)				Float a = pos->y;
HXDLIN( 138)				pos->y = (a + ((daY - a) * perc));
            			}
            		}
HXLINE( 142)		return pos;
            	}


::Array< ::String > ReverseModifier_obj::getSubmods(){
            	HX_STACKFRAME(&_hx_pos_406fcc3c8d48101d_145_getSubmods)
HXLINE( 146)		::Array< ::String > subMods = ::Array_obj< ::String >::fromData( _hx_array_data_af02af35_11,9);
HXLINE( 148)		::Array< ::Dynamic> receptors = this->modMgr->receptors->__get(0).StaticCast< ::Array< ::Dynamic> >();
HXLINE( 149)		{
HXLINE( 151)			subMods->push((HX_("reverse",22,39,fc,1a) + 0));
HXDLIN( 151)			subMods->push((HX_("reverse",22,39,fc,1a) + 1));
HXDLIN( 151)			subMods->push((HX_("reverse",22,39,fc,1a) + 2));
HXDLIN( 151)			subMods->push((HX_("reverse",22,39,fc,1a) + 3));
            		}
HXLINE( 153)		return subMods;
            	}



::hx::ObjectPtr< ReverseModifier_obj > ReverseModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< ReverseModifier_obj > __this = new ReverseModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< ReverseModifier_obj > ReverseModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	ReverseModifier_obj *__this = (ReverseModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ReverseModifier_obj), true, "modchart.modifiers.ReverseModifier"));
	*(void **)__this = ReverseModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

ReverseModifier_obj::ReverseModifier_obj()
{
}

::hx::Val ReverseModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lerp") ) { return ::hx::Val( lerp_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getPos") ) { return ::hx::Val( getPos_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getOrder") ) { return ::hx::Val( getOrder_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateNote") ) { return ::hx::Val( updateNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSubmods") ) { return ::hx::Val( getSubmods_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shouldExecute") ) { return ::hx::Val( shouldExecute_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getReverseValue") ) { return ::hx::Val( getReverseValue_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"ignoreUpdateNote") ) { return ::hx::Val( ignoreUpdateNote_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getScrollReversePerc") ) { return ::hx::Val( getScrollReversePerc_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ReverseModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ReverseModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String ReverseModifier_obj_sMemberFields[] = {
	HX_("lerp",77,12,b0,47),
	HX_("getOrder",18,00,f8,94),
	HX_("getName",01,22,82,1b),
	HX_("getReverseValue",a5,b0,07,6b),
	HX_("getScrollReversePerc",a5,12,d5,ba),
	HX_("shouldExecute",42,46,a1,bc),
	HX_("ignoreUpdateNote",4d,8a,5d,a0),
	HX_("updateNote",9b,02,bf,01),
	HX_("getPos",9e,96,24,a3),
	HX_("getSubmods",fb,c2,ec,7a),
	::String(null()) };

::hx::Class ReverseModifier_obj::__mClass;

void ReverseModifier_obj::__register()
{
	ReverseModifier_obj _hx_dummy;
	ReverseModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.ReverseModifier",35,af,02,af);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ReverseModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ReverseModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ReverseModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ReverseModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
