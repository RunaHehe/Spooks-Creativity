// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_ConfusionModifier
#include <modchart/modifiers/ConfusionModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dc376cba53c07ff3_8_new,"modchart.modifiers.ConfusionModifier","new",0x9b63fc4b,"modchart.modifiers.ConfusionModifier.new","modchart/modifiers/ConfusionModifier.hx",8,0xf471adc7)
HX_LOCAL_STACK_FRAME(_hx_pos_dc376cba53c07ff3_9_getName,"modchart.modifiers.ConfusionModifier","getName",0x08ae1f6c,"modchart.modifiers.ConfusionModifier.getName","modchart/modifiers/ConfusionModifier.hx",9,0xf471adc7)
HX_LOCAL_STACK_FRAME(_hx_pos_dc376cba53c07ff3_10_shouldExecute,"modchart.modifiers.ConfusionModifier","shouldExecute",0x73e1a5ed,"modchart.modifiers.ConfusionModifier.shouldExecute","modchart/modifiers/ConfusionModifier.hx",10,0xf471adc7)
HX_LOCAL_STACK_FRAME(_hx_pos_dc376cba53c07ff3_14_updateNote,"modchart.modifiers.ConfusionModifier","updateNote",0xe328fa10,"modchart.modifiers.ConfusionModifier.updateNote","modchart/modifiers/ConfusionModifier.hx",14,0xf471adc7)
HX_LOCAL_STACK_FRAME(_hx_pos_dc376cba53c07ff3_21_updateReceptor,"modchart.modifiers.ConfusionModifier","updateReceptor",0xbdd990da,"modchart.modifiers.ConfusionModifier.updateReceptor","modchart/modifiers/ConfusionModifier.hx",21,0xf471adc7)
HX_LOCAL_STACK_FRAME(_hx_pos_dc376cba53c07ff3_26_getSubmods,"modchart.modifiers.ConfusionModifier","getSubmods",0x5c56ba70,"modchart.modifiers.ConfusionModifier.getSubmods","modchart/modifiers/ConfusionModifier.hx",26,0xf471adc7)
static const ::String _hx_array_data_446f7ad9_7[] = {
	HX_("noteAngle",81,8e,6f,60),HX_("receptorAngle",77,e2,a9,3a),
};
namespace modchart{
namespace modifiers{

void ConfusionModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_dc376cba53c07ff3_8_new)
HXDLIN(   8)		super::__construct(modMgr,parent);
            	}

Dynamic ConfusionModifier_obj::__CreateEmpty() { return new ConfusionModifier_obj; }

void *ConfusionModifier_obj::_hx_vtable = 0;

Dynamic ConfusionModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ConfusionModifier_obj > _hx_result = new ConfusionModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ConfusionModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4386e937) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x4386e937;
		}
	} else {
		return inClassId==(int)0x593765fd;
	}
}

::String ConfusionModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_dc376cba53c07ff3_9_getName)
HXDLIN(   9)		return HX_("confusion",c6,61,10,b1);
            	}


bool ConfusionModifier_obj::shouldExecute(int player,Float val){
            	HX_STACKFRAME(&_hx_pos_dc376cba53c07ff3_10_shouldExecute)
HXDLIN(  10)		return true;
            	}


void ConfusionModifier_obj::updateNote(Float beat, ::Note note, ::math::Vector3 pos,int player){
            	HX_STACKFRAME(&_hx_pos_dc376cba53c07ff3_14_updateNote)
HXDLIN(  14)		if (!(note->isSustainNote)) {
HXLINE(  15)			Float _hx_tmp = this->getValue(player);
HXDLIN(  15)			Float _hx_tmp1 = (_hx_tmp + this->getSubmodValue((HX_("confusion",c6,61,10,b1) + note->noteData),player));
HXDLIN(  15)			note->set_angle((_hx_tmp1 + this->getSubmodValue(((HX_("note",f2,17,0a,49) + note->noteData) + HX_("Angle",b3,b3,0f,b6)),player)));
            		}
            		else {
HXLINE(  17)			note->set_angle(note->mAngle);
            		}
            	}


void ConfusionModifier_obj::updateReceptor(Float beat, ::StrumNote receptor, ::math::Vector3 pos,int player){
            	HX_STACKFRAME(&_hx_pos_dc376cba53c07ff3_21_updateReceptor)
HXDLIN(  21)		Float _hx_tmp = this->getValue(player);
HXDLIN(  21)		Float _hx_tmp1 = (_hx_tmp + this->getSubmodValue((HX_("confusion",c6,61,10,b1) + receptor->noteData),player));
HXDLIN(  21)		receptor->set_angle((_hx_tmp1 + this->getSubmodValue(((HX_("receptor",bc,47,9c,e7) + receptor->noteData) + HX_("Angle",b3,b3,0f,b6)),player)));
            	}


::Array< ::String > ConfusionModifier_obj::getSubmods(){
            	HX_STACKFRAME(&_hx_pos_dc376cba53c07ff3_26_getSubmods)
HXLINE(  27)		::Array< ::String > subMods = ::Array_obj< ::String >::fromData( _hx_array_data_446f7ad9_7,2);
HXLINE(  29)		{
HXLINE(  29)			int _g = 0;
HXDLIN(  29)			while((_g < 4)){
HXLINE(  29)				_g = (_g + 1);
HXDLIN(  29)				int i = (_g - 1);
HXLINE(  30)				subMods->push(((HX_("note",f2,17,0a,49) + i) + HX_("Angle",b3,b3,0f,b6)));
HXLINE(  31)				subMods->push(((HX_("receptor",bc,47,9c,e7) + i) + HX_("Angle",b3,b3,0f,b6)));
HXLINE(  32)				subMods->push((HX_("confusion",c6,61,10,b1) + i));
            			}
            		}
HXLINE(  35)		return subMods;
            	}



::hx::ObjectPtr< ConfusionModifier_obj > ConfusionModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< ConfusionModifier_obj > __this = new ConfusionModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< ConfusionModifier_obj > ConfusionModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	ConfusionModifier_obj *__this = (ConfusionModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ConfusionModifier_obj), true, "modchart.modifiers.ConfusionModifier"));
	*(void **)__this = ConfusionModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

ConfusionModifier_obj::ConfusionModifier_obj()
{
}

::hx::Val ConfusionModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateNote") ) { return ::hx::Val( updateNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSubmods") ) { return ::hx::Val( getSubmods_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shouldExecute") ) { return ::hx::Val( shouldExecute_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateReceptor") ) { return ::hx::Val( updateReceptor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ConfusionModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ConfusionModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String ConfusionModifier_obj_sMemberFields[] = {
	HX_("getName",01,22,82,1b),
	HX_("shouldExecute",42,46,a1,bc),
	HX_("updateNote",9b,02,bf,01),
	HX_("updateReceptor",e5,3a,c6,1c),
	HX_("getSubmods",fb,c2,ec,7a),
	::String(null()) };

::hx::Class ConfusionModifier_obj::__mClass;

void ConfusionModifier_obj::__register()
{
	ConfusionModifier_obj _hx_dummy;
	ConfusionModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.ConfusionModifier",d9,7a,6f,44);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ConfusionModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ConfusionModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ConfusionModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ConfusionModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
