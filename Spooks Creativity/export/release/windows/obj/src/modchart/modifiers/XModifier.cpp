// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_math_Vector3
#include <math/Vector3.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif
#ifndef INCLUDED_modchart_modifiers_XModifier
#include <modchart/modifiers/XModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f15e8be3504fb49a_5_new,"modchart.modifiers.XModifier","new",0x426ee1fd,"modchart.modifiers.XModifier.new","modchart/modifiers/XModifier.hx",5,0x782f7255)
HX_LOCAL_STACK_FRAME(_hx_pos_f15e8be3504fb49a_7_getName,"modchart.modifiers.XModifier","getName",0x3ce2c61e,"modchart.modifiers.XModifier.getName","modchart/modifiers/XModifier.hx",7,0x782f7255)
HX_LOCAL_STACK_FRAME(_hx_pos_f15e8be3504fb49a_10_shouldExecute,"modchart.modifiers.XModifier","shouldExecute",0x9c035e1f,"modchart.modifiers.XModifier.shouldExecute","modchart/modifiers/XModifier.hx",10,0x782f7255)
HX_LOCAL_STACK_FRAME(_hx_pos_f15e8be3504fb49a_14_updateNote,"modchart.modifiers.XModifier","updateNote",0x76880e9e,"modchart.modifiers.XModifier.updateNote","modchart/modifiers/XModifier.hx",14,0x782f7255)
HX_LOCAL_STACK_FRAME(_hx_pos_f15e8be3504fb49a_18_getSubmods,"modchart.modifiers.XModifier","getSubmods",0xefb5cefe,"modchart.modifiers.XModifier.getSubmods","modchart/modifiers/XModifier.hx",18,0x782f7255)
namespace modchart{
namespace modifiers{

void XModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_f15e8be3504fb49a_5_new)
HXDLIN(   5)		super::__construct(modMgr,parent);
            	}

Dynamic XModifier_obj::__CreateEmpty() { return new XModifier_obj; }

void *XModifier_obj::_hx_vtable = 0;

Dynamic XModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< XModifier_obj > _hx_result = new XModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool XModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4386e937) {
		if (inClassId<=(int)0x0ce062e5) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
		} else {
			return inClassId==(int)0x4386e937;
		}
	} else {
		return inClassId==(int)0x665b46af;
	}
}

::String XModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_f15e8be3504fb49a_7_getName)
HXDLIN(   7)		return HX_("xmod",4a,b1,a4,4f);
            	}


bool XModifier_obj::shouldExecute(int player,Float val){
            	HX_STACKFRAME(&_hx_pos_f15e8be3504fb49a_10_shouldExecute)
HXDLIN(  10)		return true;
            	}


void XModifier_obj::updateNote(Float beat, ::Note daNote, ::math::Vector3 pos,int player){
            	HX_STACKFRAME(&_hx_pos_f15e8be3504fb49a_14_updateNote)
HXDLIN(  14)		Float _hx_tmp = this->getValue(player);
HXDLIN(  14)		daNote->set_multSpeed((_hx_tmp * this->getSubmodValue((HX_("xmod",4a,b1,a4,4f) + daNote->noteData),player)));
            	}


::Array< ::String > XModifier_obj::getSubmods(){
            	HX_STACKFRAME(&_hx_pos_f15e8be3504fb49a_18_getSubmods)
HXLINE(  19)		::Array< ::String > subMods = ::Array_obj< ::String >::__new(0);
HXLINE(  20)		{
HXLINE(  21)			subMods->push((HX_("xmod",4a,b1,a4,4f) + 0));
HXDLIN(  21)			subMods->push((HX_("xmod",4a,b1,a4,4f) + 1));
HXDLIN(  21)			subMods->push((HX_("xmod",4a,b1,a4,4f) + 2));
HXDLIN(  21)			subMods->push((HX_("xmod",4a,b1,a4,4f) + 3));
            		}
HXLINE(  23)		return subMods;
            	}



::hx::ObjectPtr< XModifier_obj > XModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< XModifier_obj > __this = new XModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< XModifier_obj > XModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	XModifier_obj *__this = (XModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(XModifier_obj), true, "modchart.modifiers.XModifier"));
	*(void **)__this = XModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

XModifier_obj::XModifier_obj()
{
}

::hx::Val XModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateNote") ) { return ::hx::Val( updateNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSubmods") ) { return ::hx::Val( getSubmods_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"shouldExecute") ) { return ::hx::Val( shouldExecute_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *XModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *XModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String XModifier_obj_sMemberFields[] = {
	HX_("getName",01,22,82,1b),
	HX_("shouldExecute",42,46,a1,bc),
	HX_("updateNote",9b,02,bf,01),
	HX_("getSubmods",fb,c2,ec,7a),
	::String(null()) };

::hx::Class XModifier_obj::__mClass;

void XModifier_obj::__register()
{
	XModifier_obj _hx_dummy;
	XModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.modifiers.XModifier",8b,1f,85,88);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(XModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< XModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = XModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = XModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
} // end namespace modifiers
