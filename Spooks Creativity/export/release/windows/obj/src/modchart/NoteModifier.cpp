// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_ModifierType
#include <modchart/ModifierType.h>
#endif
#ifndef INCLUDED_modchart_NoteModifier
#include <modchart/NoteModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_06855a4ca28c77b9_7_new,"modchart.NoteModifier","new",0x668354cd,"modchart.NoteModifier.new","modchart/NoteModifier.hx",7,0xc4342c62)
HX_LOCAL_STACK_FRAME(_hx_pos_06855a4ca28c77b9_9_getModType,"modchart.NoteModifier","getModType",0xdc99d7d9,"modchart.NoteModifier.getModType","modchart/NoteModifier.hx",9,0xc4342c62)
namespace modchart{

void NoteModifier_obj::__construct( ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_06855a4ca28c77b9_7_new)
HXDLIN(   7)		super::__construct(modMgr,parent);
            	}

Dynamic NoteModifier_obj::__CreateEmpty() { return new NoteModifier_obj; }

void *NoteModifier_obj::_hx_vtable = 0;

Dynamic NoteModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NoteModifier_obj > _hx_result = new NoteModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NoteModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ce062e5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0ce062e5;
	} else {
		return inClassId==(int)0x4386e937;
	}
}

 ::modchart::ModifierType NoteModifier_obj::getModType(){
            	HX_STACKFRAME(&_hx_pos_06855a4ca28c77b9_9_getModType)
HXDLIN(   9)		return ::modchart::ModifierType_obj::NOTE_MOD_dyn();
            	}



::hx::ObjectPtr< NoteModifier_obj > NoteModifier_obj::__new( ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< NoteModifier_obj > __this = new NoteModifier_obj();
	__this->__construct(modMgr,parent);
	return __this;
}

::hx::ObjectPtr< NoteModifier_obj > NoteModifier_obj::__alloc(::hx::Ctx *_hx_ctx, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	NoteModifier_obj *__this = (NoteModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NoteModifier_obj), true, "modchart.NoteModifier"));
	*(void **)__this = NoteModifier_obj::_hx_vtable;
	__this->__construct(modMgr,parent);
	return __this;
}

NoteModifier_obj::NoteModifier_obj()
{
}

::hx::Val NoteModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"getModType") ) { return ::hx::Val( getModType_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *NoteModifier_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *NoteModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String NoteModifier_obj_sMemberFields[] = {
	HX_("getModType",a6,44,96,31),
	::String(null()) };

::hx::Class NoteModifier_obj::__mClass;

void NoteModifier_obj::__register()
{
	NoteModifier_obj _hx_dummy;
	NoteModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.NoteModifier",5b,ea,13,99);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NoteModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NoteModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoteModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoteModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
