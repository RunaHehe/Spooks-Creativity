// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_SubModifier
#include <modchart/SubModifier.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_285a000230054ff1_3_new,"modchart.SubModifier","new",0xe4c053b7,"modchart.SubModifier.new","modchart/SubModifier.hx",3,0x4ed56f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_285a000230054ff1_5_getName,"modchart.SubModifier","getName",0x3bc89cd8,"modchart.SubModifier.getName","modchart/SubModifier.hx",5,0x4ed56f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_285a000230054ff1_7_getOrder,"modchart.SubModifier","getOrder",0xb25d0161,"modchart.SubModifier.getOrder","modchart/SubModifier.hx",7,0x4ed56f5a)
HX_LOCAL_STACK_FRAME(_hx_pos_285a000230054ff1_8_doesUpdate,"modchart.SubModifier","doesUpdate",0x9007592b,"modchart.SubModifier.doesUpdate","modchart/SubModifier.hx",8,0x4ed56f5a)
namespace modchart{

void SubModifier_obj::__construct(::String name, ::modchart::ModManager modMgr, ::modchart::Modifier parent){
            	HX_STACKFRAME(&_hx_pos_285a000230054ff1_3_new)
HXLINE(   4)		this->name = HX_("unspecified",b7,e3,45,04);
HXLINE(  10)		super::__construct(modMgr,parent);
HXLINE(  11)		this->name = name;
            	}

Dynamic SubModifier_obj::__CreateEmpty() { return new SubModifier_obj; }

void *SubModifier_obj::_hx_vtable = 0;

Dynamic SubModifier_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SubModifier_obj > _hx_result = new SubModifier_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SubModifier_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4386e937) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4386e937;
	} else {
		return inClassId==(int)0x6f8612fb;
	}
}

::String SubModifier_obj::getName(){
            	HX_STACKFRAME(&_hx_pos_285a000230054ff1_5_getName)
HXDLIN(   5)		return this->name;
            	}


int SubModifier_obj::getOrder(){
            	HX_STACKFRAME(&_hx_pos_285a000230054ff1_7_getOrder)
HXDLIN(   7)		return 1000;
            	}


bool SubModifier_obj::doesUpdate(){
            	HX_STACKFRAME(&_hx_pos_285a000230054ff1_8_doesUpdate)
HXDLIN(   8)		return false;
            	}



::hx::ObjectPtr< SubModifier_obj > SubModifier_obj::__new(::String name, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	::hx::ObjectPtr< SubModifier_obj > __this = new SubModifier_obj();
	__this->__construct(name,modMgr,parent);
	return __this;
}

::hx::ObjectPtr< SubModifier_obj > SubModifier_obj::__alloc(::hx::Ctx *_hx_ctx,::String name, ::modchart::ModManager modMgr, ::modchart::Modifier parent) {
	SubModifier_obj *__this = (SubModifier_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SubModifier_obj), true, "modchart.SubModifier"));
	*(void **)__this = SubModifier_obj::_hx_vtable;
	__this->__construct(name,modMgr,parent);
	return __this;
}

SubModifier_obj::SubModifier_obj()
{
}

void SubModifier_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SubModifier);
	HX_MARK_MEMBER_NAME(name,"name");
	 ::modchart::Modifier_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SubModifier_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	 ::modchart::Modifier_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SubModifier_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getName") ) { return ::hx::Val( getName_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getOrder") ) { return ::hx::Val( getOrder_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doesUpdate") ) { return ::hx::Val( doesUpdate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SubModifier_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SubModifier_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SubModifier_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(SubModifier_obj,name),HX_("name",4b,72,ff,48)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SubModifier_obj_sStaticStorageInfo = 0;
#endif

static ::String SubModifier_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("getName",01,22,82,1b),
	HX_("getOrder",18,00,f8,94),
	HX_("doesUpdate",a2,b3,68,8e),
	::String(null()) };

::hx::Class SubModifier_obj::__mClass;

void SubModifier_obj::__register()
{
	SubModifier_obj _hx_dummy;
	SubModifier_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("modchart.SubModifier",45,ac,98,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SubModifier_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SubModifier_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SubModifier_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SubModifier_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace modchart
