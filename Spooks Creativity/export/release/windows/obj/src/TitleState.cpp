// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_ColorSwap
#include <ColorSwap.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_FlashingState
#include <FlashingState.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_MainMenuStateAmmar
#include <MainMenuStateAmmar.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_WeekData
#include <WeekData.h>
#endif
#ifndef INCLUDED_antidebug_DebugSave
#include <antidebug/DebugSave.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hxvlc_flixel_FlxVideoSprite
#include <hxvlc/flixel/FlxVideoSprite.h>
#endif
#ifndef INCLUDED_hxvlc_openfl_Video
#include <hxvlc/openfl/Video.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a55214e0452daa02_63_new,"TitleState","new",0x3b23deeb,"TitleState.new","TitleState.hx",63,0xd132a6e5)
static const ::String _hx_array_data_8ca18d79_1[] = {
	HX_("discord-annoyer",97,ac,58,20),HX_("shut-up",14,0a,f3,ed),HX_("depression",a6,ce,69,c6),HX_("moderator",05,40,3b,22),HX_("hate-comment",7c,74,56,74),HX_("twitter-argument",d7,36,da,54),HX_("google",b9,c3,e9,61),HX_("big-problem",92,37,56,11),HX_("no-debug",07,16,aa,70),HX_("myself",f8,10,b3,8c),
};
static const Float _hx_array_data_8ca18d79_2[] = {
	(Float)1,.64,
};
static const int _hx_array_data_8ca18d79_3[] = {
	(int)-13369345,(int)-13421620,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_89_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",89,0xd132a6e5)
static const int _hx_array_data_8ca18d79_5[] = {
	(int)9,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_148_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",148,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_159_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",159,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_315_startIntro,"TitleState","startIntro",0x6a094b7f,"TitleState.startIntro","TitleState.hx",315,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_184_startIntro,"TitleState","startIntro",0x6a094b7f,"TitleState.startIntro","TitleState.hx",184,0xd132a6e5)
static const int _hx_array_data_8ca18d79_10[] = {
	(int)30,(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,
};
static const int _hx_array_data_8ca18d79_11[] = {
	(int)15,(int)16,(int)17,(int)18,(int)19,(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,(int)26,(int)27,(int)28,(int)29,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_369_getIntroTextShit,"TitleState","getIntroTextShit",0x5dcf15b8,"TitleState.getIntroTextShit","TitleState.hx",369,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_390_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",390,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_469_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",469,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_495_createCoolText,"TitleState","createCoolText",0x83610287,"TitleState.createCoolText","TitleState.hx",495,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_509_addMoreText,"TitleState","addMoreText",0xcf420fae,"TitleState.addMoreText","TitleState.hx",509,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_520_deleteCoolText,"TitleState","deleteCoolText",0x8afda2b6,"TitleState.deleteCoolText","TitleState.hx",520,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_530_beatHit,"TitleState","beatHit",0xfba69a88,"TitleState.beatHit","TitleState.hx",530,0xd132a6e5)
static const ::String _hx_array_data_8ca18d79_22[] = {
	HX_("FNF",fe,61,35,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_638_skipIntro,"TitleState","skipIntro",0xc9924038,"TitleState.skipIntro","TitleState.hx",638,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_663_skipIntro,"TitleState","skipIntro",0xc9924038,"TitleState.skipIntro","TitleState.hx",663,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_681_cacheSongs,"TitleState","cacheSongs",0x53514631,"TitleState.cacheSongs","TitleState.hx",681,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_65_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",65,0xd132a6e5)
static const int _hx_array_data_8ca18d79_28[] = {
	(int)48,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_66_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",66,0xd132a6e5)
static const int _hx_array_data_8ca18d79_30[] = {
	(int)109,(int)189,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_67_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",67,0xd132a6e5)
static const int _hx_array_data_8ca18d79_32[] = {
	(int)107,(int)187,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_69_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",69,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_86_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",86,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_384_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",384,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_528_boot,"TitleState","boot",0x7c582f47,"TitleState.boot","TitleState.hx",528,0xd132a6e5)

void TitleState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_63_new)
HXLINE( 675)		this->songsToCache = ::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_1,10);
HXLINE( 636)		this->skippedIntro = false;
HXLINE( 527)		this->sickBeats = 0;
HXLINE( 387)		this->titleTimer = ((Float)0);
HXLINE( 386)		this->newTitle = false;
HXLINE( 383)		this->transitioning = false;
HXLINE( 181)		this->logoCanBeat = false;
HXLINE( 170)		this->swagShader = null();
HXLINE( 168)		this->danceLeft = false;
HXLINE(  84)		this->curWacky = ::Array_obj< ::String >::__new(0);
HXLINE(  82)		this->titleTextAlphas = ::Array_obj< Float >::fromData( _hx_array_data_8ca18d79_2,2);
HXLINE(  81)		this->titleTextColors = ::Array_obj< int >::fromData( _hx_array_data_8ca18d79_3,2);
HXLINE(  63)		super::__construct(TransIn,TransOut);
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x22c6bd01) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x22c6bd01;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void TitleState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_89_create)
HXDLIN(  89)		 ::TitleState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  90)		::Paths_obj::clearStoredMemory(null());
HXLINE(  91)		::Paths_obj::clearUnusedMemory();
HXLINE(  94)		::Paths_obj::pushGlobalMods();
HXLINE(  97)		::WeekData_obj::loadTheFirstEnabledMod();
HXLINE(  99)		::flixel::FlxG_obj::game->focusLostFramerate = 60;
HXLINE( 100)		::flixel::FlxG_obj::sound->muteKeys = ::TitleState_obj::muteKeys;
HXLINE( 101)		::flixel::FlxG_obj::sound->volumeDownKeys = ::TitleState_obj::volumeDownKeys;
HXLINE( 102)		::flixel::FlxG_obj::sound->volumeUpKeys = ::TitleState_obj::volumeUpKeys;
HXLINE( 103)		::flixel::FlxG_obj::keys->preventDefaultKeys = ::Array_obj< int >::fromData( _hx_array_data_8ca18d79_5,1);
HXLINE( 105)		::PlayerSettings_obj::init();
HXLINE( 109)		this->swagShader =  ::ColorSwap_obj::__alloc( HX_CTX );
HXLINE( 110)		this->super::create();
HXLINE( 112)		::flixel::FlxG_obj::save->bind(HX_("funkin",31,b2,4f,6f),HX_("ninjamuffin99/AnAmmar",8d,68,e0,df));
HXLINE( 113)		::ClientPrefs_obj::loadPrefs();
HXLINE( 114)		::Highscore_obj::load();
HXLINE( 117)		if (!(::TitleState_obj::initialized)) {
HXLINE( 119)			bool _hx_tmp;
HXDLIN( 119)			if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data )) {
HXLINE( 119)				_hx_tmp = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("fullscreen",3b,3a,b4,f9),::hx::paccDynamic)) );
            			}
            			else {
HXLINE( 119)				_hx_tmp = false;
            			}
HXDLIN( 119)			if (_hx_tmp) {
HXLINE( 121)				::flixel::FlxG_obj::set_fullscreen(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("fullscreen",3b,3a,b4,f9),::hx::paccDynamic)) ));
            			}
HXLINE( 124)			this->persistentUpdate = true;
HXLINE( 125)			this->persistentDraw = true;
            		}
HXLINE( 128)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("weekCompleted",f7,82,ec,84),::hx::paccDynamic) )) {
HXLINE( 129)			::StoryMenuState_obj::weekCompleted = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("weekCompleted",f7,82,ec,84),::hx::paccDynamic)) );
            		}
HXLINE( 132)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 137)		bool _hx_tmp1;
HXDLIN( 137)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic) )) {
HXLINE( 137)			_hx_tmp1 = !(::FlashingState_obj::leftState);
            		}
            		else {
HXLINE( 137)			_hx_tmp1 = false;
            		}
HXDLIN( 137)		if (_hx_tmp1) {
HXLINE( 138)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE( 139)			::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE( 140)			::MusicBeatState_obj::switchState( ::FlashingState_obj::__alloc( HX_CTX ,null(),null()));
            		}
            		else {
HXLINE( 144)			if (!(::DiscordClient_obj::isInitialized)) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run(int exitCode){
            					HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_148_create)
HXLINE( 148)					::DiscordClient_obj::shutdown();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 146)				::DiscordClient_obj::initialize();
HXLINE( 147)				::lime::app::Application_obj::current->onExit->add( ::Dynamic(new _hx_Closure_0()),null(),null());
            			}
HXLINE( 153)			if (::TitleState_obj::initialized) {
HXLINE( 154)				this->startIntro();
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::TitleState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_159_create)
HXLINE( 159)					_gthis->startIntro();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 157)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            			}
            		}
            	}


void TitleState_obj::startIntro(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::TitleState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_315_startIntro)
HXLINE( 316)			_gthis->video->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 317)			_gthis->video->updateHitbox();
HXLINE( 318)			{
HXLINE( 318)				 ::hxvlc::flixel::FlxVideoSprite _this = _gthis->video;
HXDLIN( 318)				int axes = 17;
HXDLIN( 318)				bool _hx_tmp;
HXDLIN( 318)				if ((axes != 1)) {
HXLINE( 318)					_hx_tmp = (axes == 17);
            				}
            				else {
HXLINE( 318)					_hx_tmp = true;
            				}
HXDLIN( 318)				if (_hx_tmp) {
HXLINE( 318)					int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 318)					_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 318)				bool _hx_tmp2;
HXDLIN( 318)				if ((axes != 16)) {
HXLINE( 318)					_hx_tmp2 = (axes == 17);
            				}
            				else {
HXLINE( 318)					_hx_tmp2 = true;
            				}
HXDLIN( 318)				if (_hx_tmp2) {
HXLINE( 318)					int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 318)					_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_184_startIntro)
HXDLIN( 184)		 ::TitleState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 185)		if (!(::TitleState_obj::initialized)) {
HXLINE( 187)			if (::hx::IsNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 188)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 188)				::String library = null();
HXDLIN( 188)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN( 188)				_hx_tmp->playMusic(file,0,null(),null());
            			}
            		}
HXLINE( 192)		::Conductor_obj::changeBPM(( (Float)(102) ));
HXLINE( 193)		this->persistentUpdate = true;
HXLINE( 195)		::antidebug::DebugSave_obj::loadAntiDebug();
HXLINE( 197)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,-1500,null());
HXDLIN( 197)		::String library1 = null();
HXDLIN( 197)		 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("ammar/introBG",14,7e,d9,b6),library1);
HXDLIN( 197)		this->bg = _hx_tmp1->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE( 198)		this->bg->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 199)		this->bg->setGraphicSize(1344,null());
HXLINE( 200)		this->bg->updateHitbox();
HXLINE( 201)		{
HXLINE( 201)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN( 201)			int axes = 1;
HXDLIN( 201)			bool _hx_tmp2;
HXDLIN( 201)			if ((axes != 1)) {
HXLINE( 201)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 201)				_hx_tmp2 = true;
            			}
HXDLIN( 201)			if (_hx_tmp2) {
HXLINE( 201)				int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN( 201)				_this->set_x(((( (Float)(_hx_tmp3) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 201)			bool _hx_tmp4;
HXDLIN( 201)			if ((axes != 16)) {
HXLINE( 201)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE( 201)				_hx_tmp4 = true;
            			}
HXDLIN( 201)			if (_hx_tmp4) {
HXLINE( 201)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN( 201)				_this->set_y(((( (Float)(_hx_tmp5) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 203)		this->bg->set_alpha(( (Float)(1) ));
HXLINE( 204)		this->add(this->bg);
HXLINE( 206)		::String library2 = null();
HXDLIN( 206)		 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(HX_("ammar/Head",7d,72,86,9d),library2);
HXDLIN( 206)		this->checksDark =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,returnAsset1,17,null(),null());
HXLINE( 207)		this->checksDark->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 208)		 ::flixel::addons::display::FlxBackdrop _hx_tmp6 = this->checksDark;
HXDLIN( 208)		_hx_tmp6->setGraphicSize(::Std_obj::_hx_int((this->checksDark->get_width() * ((Float)2.9))),null());
HXLINE( 209)		this->checksDark->updateHitbox();
HXLINE( 210)		{
HXLINE( 210)			 ::flixel::addons::display::FlxBackdrop _this1 = this->checksDark;
HXDLIN( 210)			int axes1 = 17;
HXDLIN( 210)			bool _hx_tmp7;
HXDLIN( 210)			if ((axes1 != 1)) {
HXLINE( 210)				_hx_tmp7 = (axes1 == 17);
            			}
            			else {
HXLINE( 210)				_hx_tmp7 = true;
            			}
HXDLIN( 210)			if (_hx_tmp7) {
HXLINE( 210)				int _hx_tmp8 = ::flixel::FlxG_obj::width;
HXDLIN( 210)				_this1->set_x(((( (Float)(_hx_tmp8) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 210)			bool _hx_tmp9;
HXDLIN( 210)			if ((axes1 != 16)) {
HXLINE( 210)				_hx_tmp9 = (axes1 == 17);
            			}
            			else {
HXLINE( 210)				_hx_tmp9 = true;
            			}
HXDLIN( 210)			if (_hx_tmp9) {
HXLINE( 210)				int _hx_tmp10 = ::flixel::FlxG_obj::height;
HXDLIN( 210)				_this1->set_y(((( (Float)(_hx_tmp10) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 211)		{
HXLINE( 211)			 ::flixel::math::FlxBasePoint this1 = this->checksDark->velocity;
HXDLIN( 211)			this1->set_x(((Float)14.));
HXDLIN( 211)			this1->set_y(((Float)-10.5));
            		}
HXLINE( 212)		this->checksDark->set_alpha(( (Float)(0) ));
HXLINE( 213)		this->checksDark->set_color(-16777216);
HXLINE( 214)		this->add(this->checksDark);
HXLINE( 216)		::String library3 = null();
HXDLIN( 216)		 ::flixel::graphics::FlxGraphic returnAsset2 = ::Paths_obj::returnGraphic(HX_("ammar/Head",7d,72,86,9d),library3);
HXDLIN( 216)		this->checks =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,returnAsset2,17,null(),null());
HXLINE( 217)		this->checks->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 218)		 ::flixel::addons::display::FlxBackdrop _hx_tmp11 = this->checks;
HXDLIN( 218)		_hx_tmp11->setGraphicSize(::Std_obj::_hx_int((this->checks->get_width() * ((Float)2.9))),null());
HXLINE( 219)		this->checks->updateHitbox();
HXLINE( 220)		{
HXLINE( 220)			 ::flixel::addons::display::FlxBackdrop _this2 = this->checks;
HXDLIN( 220)			int axes2 = 17;
HXDLIN( 220)			bool _hx_tmp12;
HXDLIN( 220)			if ((axes2 != 1)) {
HXLINE( 220)				_hx_tmp12 = (axes2 == 17);
            			}
            			else {
HXLINE( 220)				_hx_tmp12 = true;
            			}
HXDLIN( 220)			if (_hx_tmp12) {
HXLINE( 220)				int _hx_tmp13 = ::flixel::FlxG_obj::width;
HXDLIN( 220)				_this2->set_x(((( (Float)(_hx_tmp13) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 220)			bool _hx_tmp14;
HXDLIN( 220)			if ((axes2 != 16)) {
HXLINE( 220)				_hx_tmp14 = (axes2 == 17);
            			}
            			else {
HXLINE( 220)				_hx_tmp14 = true;
            			}
HXDLIN( 220)			if (_hx_tmp14) {
HXLINE( 220)				int _hx_tmp15 = ::flixel::FlxG_obj::height;
HXDLIN( 220)				_this2->set_y(((( (Float)(_hx_tmp15) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 221)		{
HXLINE( 221)			 ::flixel::math::FlxBasePoint this2 = this->checks->velocity;
HXDLIN( 221)			this2->set_x(( (Float)(20) ));
HXDLIN( 221)			this2->set_y(( (Float)(-15) ));
            		}
HXLINE( 222)		this->checks->set_alpha(( (Float)(0) ));
HXLINE( 223)		this->add(this->checks);
HXLINE( 225)		this->checks->set_blend(12);
HXLINE( 226)		this->checksDark->set_blend(9);
HXLINE( 228)		::String library4 = null();
HXDLIN( 228)		 ::flixel::graphics::FlxGraphic returnAsset3 = ::Paths_obj::returnGraphic(HX_("ammar/blackDots",cc,08,2a,a6),library4);
HXDLIN( 228)		this->dotsGradient =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,returnAsset3,1,null(),null());
HXLINE( 229)		this->dotsGradient->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 230)		this->dotsGradient->setGraphicSize(1331,null());
HXLINE( 231)		this->dotsGradient->updateHitbox();
HXLINE( 232)		{
HXLINE( 232)			 ::flixel::addons::display::FlxBackdrop _this3 = this->dotsGradient;
HXDLIN( 232)			int axes3 = 17;
HXDLIN( 232)			bool _hx_tmp16;
HXDLIN( 232)			if ((axes3 != 1)) {
HXLINE( 232)				_hx_tmp16 = (axes3 == 17);
            			}
            			else {
HXLINE( 232)				_hx_tmp16 = true;
            			}
HXDLIN( 232)			if (_hx_tmp16) {
HXLINE( 232)				int _hx_tmp17 = ::flixel::FlxG_obj::width;
HXDLIN( 232)				_this3->set_x(((( (Float)(_hx_tmp17) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 232)			bool _hx_tmp18;
HXDLIN( 232)			if ((axes3 != 16)) {
HXLINE( 232)				_hx_tmp18 = (axes3 == 17);
            			}
            			else {
HXLINE( 232)				_hx_tmp18 = true;
            			}
HXDLIN( 232)			if (_hx_tmp18) {
HXLINE( 232)				int _hx_tmp19 = ::flixel::FlxG_obj::height;
HXDLIN( 232)				_this3->set_y(((( (Float)(_hx_tmp19) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 233)		{
HXLINE( 233)			 ::flixel::math::FlxBasePoint this3 = this->dotsGradient->velocity;
HXDLIN( 233)			this3->set_x(( (Float)(30) ));
HXDLIN( 233)			this3->set_y(( (Float)(0) ));
            		}
HXLINE( 234)		this->dotsGradient->set_alpha(( (Float)(0) ));
HXLINE( 235)		 ::flixel::addons::display::FlxBackdrop fh = this->dotsGradient;
HXDLIN( 235)		fh->set_y((fh->y + 125));
HXLINE( 236)		this->add(this->dotsGradient);
HXLINE( 238)		this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-150,-100,null());
HXLINE( 239)		 ::flixel::FlxSprite _hx_tmp20 = this->logoBl;
HXDLIN( 239)		::String library5 = null();
HXDLIN( 239)		 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(HX_("logoBumpin",26,cb,02,ab),null());
HXDLIN( 239)		bool xmlExists = false;
HXDLIN( 239)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 239)			xmlExists = true;
            		}
HXDLIN( 239)		 ::Dynamic _hx_tmp21;
HXDLIN( 239)		if (::hx::IsNotNull( imageLoaded )) {
HXLINE( 239)			_hx_tmp21 = imageLoaded;
            		}
            		else {
HXLINE( 239)			 ::flixel::graphics::FlxGraphic returnAsset4 = ::Paths_obj::returnGraphic(HX_("logoBumpin",26,cb,02,ab),library5);
HXDLIN( 239)			_hx_tmp21 = returnAsset4;
            		}
HXDLIN( 239)		 ::Dynamic _hx_tmp22;
HXDLIN( 239)		if (xmlExists) {
HXLINE( 239)			_hx_tmp22 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE( 239)			_hx_tmp22 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("logoBumpin",26,cb,02,ab)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library5);
            		}
HXDLIN( 239)		_hx_tmp20->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp21,_hx_tmp22));
HXLINE( 240)		this->logoBl->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 242)		this->logoBl->animation->addByPrefix(HX_("bump",f6,0f,20,41),HX_("logo bumpin",70,a1,0b,72),24,false,null(),null());
HXLINE( 243)		this->logoBl->animation->play(HX_("bump",f6,0f,20,41),null(),null(),null());
HXLINE( 244)		this->logoBl->updateHitbox();
HXLINE( 246)		 ::flixel::FlxSprite _hx_tmp23 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 246)		::String library6 = null();
HXDLIN( 246)		 ::flixel::graphics::FlxGraphic returnAsset5 = ::Paths_obj::returnGraphic(HX_("ammar/FNF",61,7b,29,88),library6);
HXDLIN( 246)		this->fnf = _hx_tmp23->loadGraphic(returnAsset5,null(),null(),null(),null(),null());
HXLINE( 247)		this->fnf->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 248)		{
HXLINE( 248)			 ::flixel::FlxSprite _this4 = this->fnf;
HXDLIN( 248)			int axes4 = 17;
HXDLIN( 248)			bool _hx_tmp24;
HXDLIN( 248)			if ((axes4 != 1)) {
HXLINE( 248)				_hx_tmp24 = (axes4 == 17);
            			}
            			else {
HXLINE( 248)				_hx_tmp24 = true;
            			}
HXDLIN( 248)			if (_hx_tmp24) {
HXLINE( 248)				int _hx_tmp25 = ::flixel::FlxG_obj::width;
HXDLIN( 248)				_this4->set_x(((( (Float)(_hx_tmp25) ) - _this4->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 248)			bool _hx_tmp26;
HXDLIN( 248)			if ((axes4 != 16)) {
HXLINE( 248)				_hx_tmp26 = (axes4 == 17);
            			}
            			else {
HXLINE( 248)				_hx_tmp26 = true;
            			}
HXDLIN( 248)			if (_hx_tmp26) {
HXLINE( 248)				int _hx_tmp27 = ::flixel::FlxG_obj::height;
HXDLIN( 248)				_this4->set_y(((( (Float)(_hx_tmp27) ) - _this4->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 249)		this->fnf->set_alpha(( (Float)(0) ));
HXLINE( 251)		 ::flixel::FlxSprite _hx_tmp28 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 251)		::String library7 = null();
HXDLIN( 251)		 ::flixel::graphics::FlxGraphic returnAsset6 = ::Paths_obj::returnGraphic(HX_("ammar/An Ammar",7c,8d,c4,89),library7);
HXDLIN( 251)		this->anammar = _hx_tmp28->loadGraphic(returnAsset6,null(),null(),null(),null(),null());
HXLINE( 252)		this->anammar->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 253)		{
HXLINE( 253)			 ::flixel::FlxSprite _this5 = this->anammar;
HXDLIN( 253)			int axes5 = 17;
HXDLIN( 253)			bool _hx_tmp29;
HXDLIN( 253)			if ((axes5 != 1)) {
HXLINE( 253)				_hx_tmp29 = (axes5 == 17);
            			}
            			else {
HXLINE( 253)				_hx_tmp29 = true;
            			}
HXDLIN( 253)			if (_hx_tmp29) {
HXLINE( 253)				int _hx_tmp30 = ::flixel::FlxG_obj::width;
HXDLIN( 253)				_this5->set_x(((( (Float)(_hx_tmp30) ) - _this5->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 253)			bool _hx_tmp31;
HXDLIN( 253)			if ((axes5 != 16)) {
HXLINE( 253)				_hx_tmp31 = (axes5 == 17);
            			}
            			else {
HXLINE( 253)				_hx_tmp31 = true;
            			}
HXDLIN( 253)			if (_hx_tmp31) {
HXLINE( 253)				int _hx_tmp32 = ::flixel::FlxG_obj::height;
HXDLIN( 253)				_this5->set_y(((( (Float)(_hx_tmp32) ) - _this5->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 254)		this->anammar->set_alpha(( (Float)(0) ));
HXLINE( 256)		 ::flixel::FlxSprite _hx_tmp33 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 256)		::String library8 = null();
HXDLIN( 256)		 ::flixel::graphics::FlxGraphic returnAsset7 = ::Paths_obj::returnGraphic(HX_("ammar/Creativity",95,53,82,e4),library8);
HXDLIN( 256)		this->creativity = _hx_tmp33->loadGraphic(returnAsset7,null(),null(),null(),null(),null());
HXLINE( 257)		this->creativity->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 258)		{
HXLINE( 258)			 ::flixel::FlxSprite _this6 = this->creativity;
HXDLIN( 258)			int axes6 = 17;
HXDLIN( 258)			bool _hx_tmp34;
HXDLIN( 258)			if ((axes6 != 1)) {
HXLINE( 258)				_hx_tmp34 = (axes6 == 17);
            			}
            			else {
HXLINE( 258)				_hx_tmp34 = true;
            			}
HXDLIN( 258)			if (_hx_tmp34) {
HXLINE( 258)				int _hx_tmp35 = ::flixel::FlxG_obj::width;
HXDLIN( 258)				_this6->set_x(((( (Float)(_hx_tmp35) ) - _this6->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 258)			bool _hx_tmp36;
HXDLIN( 258)			if ((axes6 != 16)) {
HXLINE( 258)				_hx_tmp36 = (axes6 == 17);
            			}
            			else {
HXLINE( 258)				_hx_tmp36 = true;
            			}
HXDLIN( 258)			if (_hx_tmp36) {
HXLINE( 258)				int _hx_tmp37 = ::flixel::FlxG_obj::height;
HXDLIN( 258)				_this6->set_y(((( (Float)(_hx_tmp37) ) - _this6->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 259)		this->creativity->set_alpha(( (Float)(0) ));
HXLINE( 261)		this->add(this->fnf);
HXLINE( 262)		this->add(this->anammar);
HXLINE( 263)		this->add(this->creativity);
HXLINE( 264)		{
HXLINE( 264)			 ::flixel::math::FlxBasePoint this4 = this->fnf->scale;
HXDLIN( 264)			this4->set_x(( (Float)(3) ));
HXDLIN( 264)			this4->set_y(( (Float)(3) ));
            		}
HXLINE( 265)		{
HXLINE( 265)			 ::flixel::math::FlxBasePoint this5 = this->anammar->scale;
HXDLIN( 265)			this5->set_x(( (Float)(3) ));
HXDLIN( 265)			this5->set_y(( (Float)(3) ));
            		}
HXLINE( 266)		{
HXLINE( 266)			 ::flixel::math::FlxBasePoint this6 = this->creativity->scale;
HXDLIN( 266)			this6->set_x(( (Float)(3) ));
HXDLIN( 266)			this6->set_y(( (Float)(3) ));
            		}
HXLINE( 268)		this->swagShader =  ::ColorSwap_obj::__alloc( HX_CTX );
HXLINE( 269)		this->gfDance =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,512,40,null());
HXLINE( 271)		::String easterEgg = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("psychDevsEasterEgg",22,2b,1d,02),::hx::paccDynamic)) );
HXLINE( 272)		if (::hx::IsNull( easterEgg )) {
HXLINE( 272)			easterEgg = HX_("",00,00,00,00);
            		}
HXLINE( 274)		 ::flixel::FlxSprite _hx_tmp38 = this->gfDance;
HXDLIN( 274)		::String library9 = null();
HXDLIN( 274)		 ::flixel::graphics::FlxGraphic imageLoaded1 = ::Paths_obj::returnGraphic(HX_("gfDanceTitle",64,64,d2,7b),null());
HXDLIN( 274)		bool xmlExists1 = false;
HXDLIN( 274)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("gfDanceTitle",64,64,d2,7b)) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 274)			xmlExists1 = true;
            		}
HXDLIN( 274)		 ::Dynamic _hx_tmp39;
HXDLIN( 274)		if (::hx::IsNotNull( imageLoaded1 )) {
HXLINE( 274)			_hx_tmp39 = imageLoaded1;
            		}
            		else {
HXLINE( 274)			 ::flixel::graphics::FlxGraphic returnAsset8 = ::Paths_obj::returnGraphic(HX_("gfDanceTitle",64,64,d2,7b),library9);
HXDLIN( 274)			_hx_tmp39 = returnAsset8;
            		}
HXDLIN( 274)		 ::Dynamic _hx_tmp40;
HXDLIN( 274)		if (xmlExists1) {
HXLINE( 274)			_hx_tmp40 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("gfDanceTitle",64,64,d2,7b)) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE( 274)			_hx_tmp40 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("gfDanceTitle",64,64,d2,7b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library9);
            		}
HXDLIN( 274)		_hx_tmp38->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp39,_hx_tmp40));
HXLINE( 275)		this->gfDance->animation->addByIndices(HX_("danceLeft",da,cc,f9,df),HX_("gfDance",94,88,3a,eb),::Array_obj< int >::fromData( _hx_array_data_8ca18d79_10,16),HX_("",00,00,00,00),24,false,null(),null());
HXLINE( 276)		this->gfDance->animation->addByIndices(HX_("danceRight",a9,7f,a6,91),HX_("gfDance",94,88,3a,eb),::Array_obj< int >::fromData( _hx_array_data_8ca18d79_11,15),HX_("",00,00,00,00),24,false,null(),null());
HXLINE( 277)		this->gfDance->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 284)		this->titleText =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,140,576,null());
HXLINE( 285)		 ::flixel::FlxSprite _hx_tmp41 = this->titleText;
HXDLIN( 285)		::String library10 = null();
HXDLIN( 285)		 ::flixel::graphics::FlxGraphic imageLoaded2 = ::Paths_obj::returnGraphic(HX_("titleEnter",60,80,6b,82),null());
HXDLIN( 285)		bool xmlExists2 = false;
HXDLIN( 285)		if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("titleEnter",60,80,6b,82)) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE( 285)			xmlExists2 = true;
            		}
HXDLIN( 285)		 ::Dynamic _hx_tmp42;
HXDLIN( 285)		if (::hx::IsNotNull( imageLoaded2 )) {
HXLINE( 285)			_hx_tmp42 = imageLoaded2;
            		}
            		else {
HXLINE( 285)			 ::flixel::graphics::FlxGraphic returnAsset9 = ::Paths_obj::returnGraphic(HX_("titleEnter",60,80,6b,82),library10);
HXDLIN( 285)			_hx_tmp42 = returnAsset9;
            		}
HXDLIN( 285)		 ::Dynamic _hx_tmp43;
HXDLIN( 285)		if (xmlExists2) {
HXLINE( 285)			_hx_tmp43 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + HX_("titleEnter",60,80,6b,82)) + HX_(".xml",69,3e,c3,1e))));
            		}
            		else {
HXLINE( 285)			_hx_tmp43 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("titleEnter",60,80,6b,82)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library10);
            		}
HXDLIN( 285)		_hx_tmp41->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp42,_hx_tmp43));
HXLINE( 286)		::Array< ::Dynamic> animFrames = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 287)		{
HXLINE( 288)			this->titleText->animation->findByPrefix(animFrames,HX_("ENTER IDLE",3c,57,01,7a),null());
HXLINE( 289)			this->titleText->animation->findByPrefix(animFrames,HX_("ENTER FREEZE",7f,78,5c,d6),null());
            		}
HXLINE( 292)		if ((animFrames->length > 0)) {
HXLINE( 293)			this->newTitle = true;
HXLINE( 295)			this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("ENTER IDLE",3c,57,01,7a),24,null(),null(),null());
HXLINE( 296)			::String _hx_tmp44;
HXDLIN( 296)			if (::ClientPrefs_obj::flashing) {
HXLINE( 296)				_hx_tmp44 = HX_("ENTER PRESSED",5a,47,9f,63);
            			}
            			else {
HXLINE( 296)				_hx_tmp44 = HX_("ENTER FREEZE",7f,78,5c,d6);
            			}
HXDLIN( 296)			this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),_hx_tmp44,24,null(),null(),null());
            		}
            		else {
HXLINE( 299)			this->newTitle = false;
HXLINE( 301)			this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Press Enter to Begin",e9,79,2c,83),24,null(),null(),null());
HXLINE( 302)			this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("ENTER PRESSED",5a,47,9f,63),24,null(),null(),null());
            		}
HXLINE( 305)		this->titleText->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 306)		this->titleText->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 307)		this->titleText->updateHitbox();
HXLINE( 309)		this->add(this->titleText);
HXLINE( 310)		this->titleText->set_alpha(( (Float)(0) ));
HXLINE( 313)		this->video =  ::hxvlc::flixel::FlxVideoSprite_obj::__alloc( HX_CTX ,0,0);
HXLINE( 314)		this->video->bitmap->onFormatSetup->add( ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
HXLINE( 320)		this->video->bitmap->onEndReached->add(this->video->destroy_dyn(),null(),null());
HXLINE( 321)		this->video->autoPause = true;
HXLINE( 323)		 ::hxvlc::flixel::FlxVideoSprite _hx_tmp45 = this->video;
HXDLIN( 323)		_hx_tmp45->load(::Paths_obj::video(HX_("Intro",4c,3a,4e,51)),null());
HXLINE( 324)		this->video->set_antialiasing(false);
HXLINE( 325)		this->video->autoVolumeHandle = false;
HXLINE( 326)		this->video->bitmap->set_mute(true);
HXLINE( 327)		this->add(this->video);
HXLINE( 329)		this->credGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 330)		this->add(this->credGroup);
HXLINE( 331)		this->textGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 333)		this->credTextShit =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("",00,00,00,00),true);
HXLINE( 334)		{
HXLINE( 334)			 ::Alphabet _this7 = this->credTextShit;
HXDLIN( 334)			int axes7 = 17;
HXDLIN( 334)			bool _hx_tmp46;
HXDLIN( 334)			if ((axes7 != 1)) {
HXLINE( 334)				_hx_tmp46 = (axes7 == 17);
            			}
            			else {
HXLINE( 334)				_hx_tmp46 = true;
            			}
HXDLIN( 334)			if (_hx_tmp46) {
HXLINE( 334)				int _hx_tmp47 = ::flixel::FlxG_obj::width;
HXDLIN( 334)				_this7->set_x(((( (Float)(_hx_tmp47) ) - _this7->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 334)			bool _hx_tmp48;
HXDLIN( 334)			if ((axes7 != 16)) {
HXLINE( 334)				_hx_tmp48 = (axes7 == 17);
            			}
            			else {
HXLINE( 334)				_hx_tmp48 = true;
            			}
HXDLIN( 334)			if (_hx_tmp48) {
HXLINE( 334)				int _hx_tmp49 = ::flixel::FlxG_obj::height;
HXDLIN( 334)				_this7->set_y(((( (Float)(_hx_tmp49) ) - _this7->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 338)		this->credTextShit->set_visible(false);
HXLINE( 340)		 ::flixel::FlxSprite _hx_tmp50 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.52)),null());
HXDLIN( 340)		::String library11 = null();
HXDLIN( 340)		 ::flixel::graphics::FlxGraphic returnAsset10 = ::Paths_obj::returnGraphic(HX_("newgrounds_logo",1e,5c,8d,a6),library11);
HXDLIN( 340)		this->ngSpr = _hx_tmp50->loadGraphic(returnAsset10,null(),null(),null(),null(),null());
HXLINE( 341)		this->add(this->ngSpr);
HXLINE( 342)		this->ngSpr->set_visible(false);
HXLINE( 343)		 ::flixel::FlxSprite _hx_tmp51 = this->ngSpr;
HXDLIN( 343)		_hx_tmp51->setGraphicSize(::Std_obj::_hx_int((this->ngSpr->get_width() * ((Float)0.8))),null());
HXLINE( 344)		this->ngSpr->updateHitbox();
HXLINE( 345)		{
HXLINE( 345)			 ::flixel::FlxSprite _this8 = this->ngSpr;
HXDLIN( 345)			int axes8 = 1;
HXDLIN( 345)			bool _hx_tmp52;
HXDLIN( 345)			if ((axes8 != 1)) {
HXLINE( 345)				_hx_tmp52 = (axes8 == 17);
            			}
            			else {
HXLINE( 345)				_hx_tmp52 = true;
            			}
HXDLIN( 345)			if (_hx_tmp52) {
HXLINE( 345)				int _hx_tmp53 = ::flixel::FlxG_obj::width;
HXDLIN( 345)				_this8->set_x(((( (Float)(_hx_tmp53) ) - _this8->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 345)			bool _hx_tmp54;
HXDLIN( 345)			if ((axes8 != 16)) {
HXLINE( 345)				_hx_tmp54 = (axes8 == 17);
            			}
            			else {
HXLINE( 345)				_hx_tmp54 = true;
            			}
HXDLIN( 345)			if (_hx_tmp54) {
HXLINE( 345)				int _hx_tmp55 = ::flixel::FlxG_obj::height;
HXDLIN( 345)				_this8->set_y(((( (Float)(_hx_tmp55) ) - _this8->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 346)		this->ngSpr->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE( 348)		::flixel::tweens::FlxTween_obj::tween(this->credTextShit, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(this->credTextShit->y + 20))),((Float)2.9), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),4)));
HXLINE( 350)		if (::TitleState_obj::initialized) {
HXLINE( 351)			this->skipIntro();
            		}
            		else {
HXLINE( 353)			::TitleState_obj::initialized = true;
HXLINE( 354)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp56 = ::flixel::FlxG_obj::sound;
HXDLIN( 354)			::String library12 = null();
HXDLIN( 354)			 ::openfl::media::Sound file1 = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library12);
HXDLIN( 354)			_hx_tmp56->playMusic(file1,0,null(),null());
HXLINE( 355)			{
HXLINE( 355)				 ::flixel::sound::FlxSound _this9 = ::flixel::FlxG_obj::sound->music;
HXDLIN( 355)				 ::Dynamic onComplete = null();
HXDLIN( 355)				if (::hx::IsNull( _this9->_channel )) {
HXLINE( 355)					_this9->play(null(),null(),null());
            				}
HXDLIN( 355)				if (::hx::IsNotNull( _this9->fadeTween )) {
HXLINE( 355)					_this9->fadeTween->cancel();
            				}
HXDLIN( 355)				_this9->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.7),4, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this9->volumeTween_dyn());
            			}
HXLINE( 356)			::haxe::Log_obj::trace(HX_("----------------- Aku Sayang Aku juga sayang ---------------",99,cc,0b,83),::hx::SourceInfo(HX_("source/TitleState.hx",71,4f,0c,46),356,HX_("TitleState",79,8d,a1,8c),HX_("startIntro",aa,a2,37,da)));
HXLINE( 358)			if (::hx::IsNotNull( this->video )) {
HXLINE( 359)				{
HXLINE( 359)					 ::hxvlc::flixel::FlxVideoSprite _this10 = this->video;
HXDLIN( 359)					if (::hx::IsNotNull( _this10->bitmap )) {
HXLINE( 359)						_this10->bitmap->play();
            					}
            				}
HXLINE( 360)				this->video->bitmap->set_mute(true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,startIntro,(void))

::Array< ::Dynamic> TitleState_obj::getIntroTextShit(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_369_getIntroTextShit)
HXLINE( 370)		::String library = null();
HXDLIN( 370)		::String fullText = ::openfl::utils::Assets_obj::getText(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + HX_("introText",39,69,67,a6)) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 372)		::Array< ::String > firstArray = fullText.split(HX_("\n",0a,00,00,00));
HXLINE( 373)		::Array< ::Dynamic> swagGoodArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 375)		{
HXLINE( 375)			int _g = 0;
HXDLIN( 375)			while((_g < firstArray->length)){
HXLINE( 375)				::String i = firstArray->__get(_g);
HXDLIN( 375)				_g = (_g + 1);
HXLINE( 377)				swagGoodArray->push(i.split(HX_("--",60,27,00,00)));
            			}
            		}
HXLINE( 380)		return swagGoodArray;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,getIntroTextShit,return )

void TitleState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_390_update)
HXLINE( 391)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 392)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 395)		Float a = ::flixel::FlxG_obj::camera->zoom;
HXDLIN( 395)		Float Value = (elapsed * ( (Float)(7) ));
HXDLIN( 395)		Float lowerBound;
HXDLIN( 395)		if ((Value < 0)) {
HXLINE( 395)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 395)			lowerBound = Value;
            		}
HXDLIN( 395)		Float _hx_tmp;
HXDLIN( 395)		if ((lowerBound > 1)) {
HXLINE( 395)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE( 395)			_hx_tmp = lowerBound;
            		}
HXDLIN( 395)		::flixel::FlxG_obj::camera->set_zoom((a + (_hx_tmp * (( (Float)(1) ) - a))));
HXLINE( 396)		Float a1 = ::flixel::FlxG_obj::camera->angle;
HXDLIN( 396)		Float Value1 = (elapsed * ( (Float)(7) ));
HXDLIN( 396)		Float lowerBound1;
HXDLIN( 396)		if ((Value1 < 0)) {
HXLINE( 396)			lowerBound1 = ( (Float)(0) );
            		}
            		else {
HXLINE( 396)			lowerBound1 = Value1;
            		}
HXDLIN( 396)		Float _hx_tmp1;
HXDLIN( 396)		if ((lowerBound1 > 1)) {
HXLINE( 396)			_hx_tmp1 = ( (Float)(1) );
            		}
            		else {
HXLINE( 396)			_hx_tmp1 = lowerBound1;
            		}
HXDLIN( 396)		::flixel::FlxG_obj::camera->set_angle((a1 + (_hx_tmp1 * (( (Float)(0) ) - a1))));
HXLINE( 397)		if (::hx::IsNotNull( this->checks )) {
HXLINE( 398)			Float a2 = this->checks->angle;
HXDLIN( 398)			Float Value2 = (elapsed * ( (Float)(6) ));
HXDLIN( 398)			Float lowerBound2;
HXDLIN( 398)			if ((Value2 < 0)) {
HXLINE( 398)				lowerBound2 = ( (Float)(0) );
            			}
            			else {
HXLINE( 398)				lowerBound2 = Value2;
            			}
HXDLIN( 398)			Float _hx_tmp2;
HXDLIN( 398)			if ((lowerBound2 > 1)) {
HXLINE( 398)				_hx_tmp2 = ( (Float)(1) );
            			}
            			else {
HXLINE( 398)				_hx_tmp2 = lowerBound2;
            			}
HXDLIN( 398)			this->checks->set_angle((a2 + (_hx_tmp2 * (( (Float)(0) ) - a2))));
HXLINE( 399)			Float a3 = this->checksDark->angle;
HXDLIN( 399)			Float Value3 = (elapsed * ( (Float)(6) ));
HXDLIN( 399)			Float lowerBound3;
HXDLIN( 399)			if ((Value3 < 0)) {
HXLINE( 399)				lowerBound3 = ( (Float)(0) );
            			}
            			else {
HXLINE( 399)				lowerBound3 = Value3;
            			}
HXDLIN( 399)			Float _hx_tmp3;
HXDLIN( 399)			if ((lowerBound3 > 1)) {
HXLINE( 399)				_hx_tmp3 = ( (Float)(1) );
            			}
            			else {
HXLINE( 399)				_hx_tmp3 = lowerBound3;
            			}
HXDLIN( 399)			this->checksDark->set_angle((a3 + (_hx_tmp3 * (( (Float)(0) ) - a3))));
            		}
HXLINE( 401)		if (this->logoCanBeat) {
HXLINE( 403)			Float a4 = this->fnf->scale->x;
HXDLIN( 403)			Float Value4 = (elapsed * ((Float)7.5));
HXDLIN( 403)			Float lowerBound4;
HXDLIN( 403)			if ((Value4 < 0)) {
HXLINE( 403)				lowerBound4 = ( (Float)(0) );
            			}
            			else {
HXLINE( 403)				lowerBound4 = Value4;
            			}
HXDLIN( 403)			Float fnfsizeLerp;
HXDLIN( 403)			if ((lowerBound4 > 1)) {
HXLINE( 403)				fnfsizeLerp = ( (Float)(1) );
            			}
            			else {
HXLINE( 403)				fnfsizeLerp = lowerBound4;
            			}
HXDLIN( 403)			Float fnfsizeLerp1 = (a4 + (fnfsizeLerp * (( (Float)(1) ) - a4)));
HXLINE( 404)			Float a5 = this->anammar->scale->x;
HXDLIN( 404)			Float Value5 = (elapsed * ((Float)7.5));
HXDLIN( 404)			Float lowerBound5;
HXDLIN( 404)			if ((Value5 < 0)) {
HXLINE( 404)				lowerBound5 = ( (Float)(0) );
            			}
            			else {
HXLINE( 404)				lowerBound5 = Value5;
            			}
HXDLIN( 404)			Float ansizeLerp;
HXDLIN( 404)			if ((lowerBound5 > 1)) {
HXLINE( 404)				ansizeLerp = ( (Float)(1) );
            			}
            			else {
HXLINE( 404)				ansizeLerp = lowerBound5;
            			}
HXDLIN( 404)			Float ansizeLerp1 = (a5 + (ansizeLerp * (( (Float)(1) ) - a5)));
HXLINE( 405)			Float a6 = this->creativity->scale->x;
HXDLIN( 405)			Float Value6 = (elapsed * ((Float)7.5));
HXDLIN( 405)			Float lowerBound6;
HXDLIN( 405)			if ((Value6 < 0)) {
HXLINE( 405)				lowerBound6 = ( (Float)(0) );
            			}
            			else {
HXLINE( 405)				lowerBound6 = Value6;
            			}
HXDLIN( 405)			Float crsizeLerp;
HXDLIN( 405)			if ((lowerBound6 > 1)) {
HXLINE( 405)				crsizeLerp = ( (Float)(1) );
            			}
            			else {
HXLINE( 405)				crsizeLerp = lowerBound6;
            			}
HXDLIN( 405)			Float crsizeLerp1 = (a6 + (crsizeLerp * (( (Float)(1) ) - a6)));
HXLINE( 406)			{
HXLINE( 406)				 ::flixel::math::FlxBasePoint this1 = this->fnf->scale;
HXDLIN( 406)				this1->set_x(fnfsizeLerp1);
HXDLIN( 406)				this1->set_y(fnfsizeLerp1);
            			}
HXLINE( 407)			{
HXLINE( 407)				 ::flixel::math::FlxBasePoint this2 = this->anammar->scale;
HXDLIN( 407)				this2->set_x(ansizeLerp1);
HXDLIN( 407)				this2->set_y(ansizeLerp1);
            			}
HXLINE( 408)			{
HXLINE( 408)				 ::flixel::math::FlxBasePoint this3 = this->creativity->scale;
HXDLIN( 408)				this3->set_x(crsizeLerp1);
HXDLIN( 408)				this3->set_y(crsizeLerp1);
            			}
            		}
HXLINE( 411)		bool pressedEnter;
HXDLIN( 411)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 411)		if (!(_this->keyManager->checkStatusUnsafe(13,_this->status))) {
HXLINE( 411)			pressedEnter = ::PlayerSettings_obj::player1->controls->_accept->check();
            		}
            		else {
HXLINE( 411)			pressedEnter = true;
            		}
HXLINE( 421)		 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 423)		if (::hx::IsNotNull( gamepad )) {
HXLINE( 425)			 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this1 = gamepad->justPressed;
HXDLIN( 425)			int id = 7;
HXDLIN( 425)			 ::flixel::input::gamepad::FlxGamepad _this2 = _this1->gamepad;
HXDLIN( 425)			int Status = _this1->status;
HXDLIN( 425)			bool _hx_tmp4;
HXDLIN( 425)			switch((int)(id)){
            				case (int)-2: {
HXLINE( 425)					_hx_tmp4 = _this2->anyButton(Status);
            				}
            				break;
            				case (int)-1: {
HXLINE( 425)					_hx_tmp4 = !(_this2->anyButton(Status));
            				}
            				break;
            				default:{
HXLINE( 425)					int RawID = _this2->mapping->getRawID(id);
HXDLIN( 425)					 ::flixel::input::gamepad::FlxGamepadButton button = _this2->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 425)					if (::hx::IsNotNull( button )) {
HXLINE( 425)						_hx_tmp4 = button->hasState(Status);
            					}
            					else {
HXLINE( 425)						_hx_tmp4 = false;
            					}
            				}
            			}
HXDLIN( 425)			if (_hx_tmp4) {
HXLINE( 426)				pressedEnter = true;
            			}
            		}
HXLINE( 434)		if (this->newTitle) {
HXLINE( 435)			 ::TitleState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 435)			_hx_tmp5->titleTimer = (_hx_tmp5->titleTimer + ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),elapsed)));
HXLINE( 436)			if ((this->titleTimer > 2)) {
HXLINE( 436)				 ::TitleState _hx_tmp6 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 436)				_hx_tmp6->titleTimer = (_hx_tmp6->titleTimer - ( (Float)(2) ));
            			}
            		}
HXLINE( 441)		bool _hx_tmp7;
HXDLIN( 441)		bool _hx_tmp8;
HXDLIN( 441)		if (::TitleState_obj::initialized) {
HXLINE( 441)			_hx_tmp8 = !(this->transitioning);
            		}
            		else {
HXLINE( 441)			_hx_tmp8 = false;
            		}
HXDLIN( 441)		if (_hx_tmp8) {
HXLINE( 441)			_hx_tmp7 = this->skippedIntro;
            		}
            		else {
HXLINE( 441)			_hx_tmp7 = false;
            		}
HXDLIN( 441)		if (_hx_tmp7) {
HXLINE( 443)			bool _hx_tmp9;
HXDLIN( 443)			if (this->newTitle) {
HXLINE( 443)				_hx_tmp9 = !(pressedEnter);
            			}
            			else {
HXLINE( 443)				_hx_tmp9 = false;
            			}
HXDLIN( 443)			if (_hx_tmp9) {
HXLINE( 445)				Float timer = this->titleTimer;
HXLINE( 446)				if ((timer >= 1)) {
HXLINE( 447)					timer = (-(timer) + 2);
            				}
HXLINE( 449)				Float t = timer;
HXDLIN( 449)				if ((t <= ((Float).5))) {
HXLINE( 449)					timer = ((t * t) * ( (Float)(2) ));
            				}
            				else {
HXLINE( 449)					t = (t - ( (Float)(1) ));
HXDLIN( 449)					timer = (( (Float)(1) ) - ((t * t) * ( (Float)(2) )));
            				}
HXLINE( 451)				 ::flixel::FlxSprite _hx_tmp10 = this->titleText;
HXDLIN( 451)				int Color1 = this->titleTextColors->__get(0);
HXDLIN( 451)				int Color2 = this->titleTextColors->__get(1);
HXDLIN( 451)				int r = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 16) & 255) - ((Color1 >> 16) & 255))) ) * timer) + ((Color1 >> 16) & 255)));
HXDLIN( 451)				int g = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 8) & 255) - ((Color1 >> 8) & 255))) ) * timer) + ((Color1 >> 8) & 255)));
HXDLIN( 451)				int b = ::Std_obj::_hx_int(((( (Float)(((Color2 & 255) - (Color1 & 255))) ) * timer) + (Color1 & 255)));
HXDLIN( 451)				int a7 = ::Std_obj::_hx_int(((( (Float)((((Color2 >> 24) & 255) - ((Color1 >> 24) & 255))) ) * timer) + ((Color1 >> 24) & 255)));
HXDLIN( 451)				int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 451)				{
HXLINE( 451)					color = (color & -16711681);
HXDLIN( 451)					int color1;
HXDLIN( 451)					if ((r > 255)) {
HXLINE( 451)						color1 = 255;
            					}
            					else {
HXLINE( 451)						if ((r < 0)) {
HXLINE( 451)							color1 = 0;
            						}
            						else {
HXLINE( 451)							color1 = r;
            						}
            					}
HXDLIN( 451)					color = (color | (color1 << 16));
            				}
HXDLIN( 451)				{
HXLINE( 451)					color = (color & -65281);
HXDLIN( 451)					int color2;
HXDLIN( 451)					if ((g > 255)) {
HXLINE( 451)						color2 = 255;
            					}
            					else {
HXLINE( 451)						if ((g < 0)) {
HXLINE( 451)							color2 = 0;
            						}
            						else {
HXLINE( 451)							color2 = g;
            						}
            					}
HXDLIN( 451)					color = (color | (color2 << 8));
            				}
HXDLIN( 451)				{
HXLINE( 451)					color = (color & -256);
HXDLIN( 451)					int color3;
HXDLIN( 451)					if ((b > 255)) {
HXLINE( 451)						color3 = 255;
            					}
            					else {
HXLINE( 451)						if ((b < 0)) {
HXLINE( 451)							color3 = 0;
            						}
            						else {
HXLINE( 451)							color3 = b;
            						}
            					}
HXDLIN( 451)					color = (color | color3);
            				}
HXDLIN( 451)				{
HXLINE( 451)					color = (color & 16777215);
HXDLIN( 451)					int color4;
HXDLIN( 451)					if ((a7 > 255)) {
HXLINE( 451)						color4 = 255;
            					}
            					else {
HXLINE( 451)						if ((a7 < 0)) {
HXLINE( 451)							color4 = 0;
            						}
            						else {
HXLINE( 451)							color4 = a7;
            						}
            					}
HXDLIN( 451)					color = (color | (color4 << 24));
            				}
HXDLIN( 451)				_hx_tmp10->set_color(color);
HXLINE( 452)				Float a8 = this->titleTextAlphas->__get(0);
HXDLIN( 452)				this->titleText->set_alpha((a8 + (timer * (this->titleTextAlphas->__get(1) - a8))));
            			}
HXLINE( 455)			if (pressedEnter) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_469_update)
HXLINE( 470)					::MusicBeatState_obj::switchState( ::MainMenuStateAmmar_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 472)					::TitleState_obj::closedState = true;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 457)				this->titleText->set_color(-1);
HXLINE( 458)				this->titleText->set_alpha(( (Float)(1) ));
HXLINE( 460)				if (::hx::IsNotNull( this->titleText )) {
HXLINE( 460)					this->titleText->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            				}
HXLINE( 462)				int _hx_tmp11;
HXDLIN( 462)				if (::ClientPrefs_obj::flashing) {
HXLINE( 462)					_hx_tmp11 = -1;
            				}
            				else {
HXLINE( 462)					_hx_tmp11 = (int)1291845631;
            				}
HXDLIN( 462)				::flixel::FlxG_obj::camera->flash(_hx_tmp11,1,null(),null());
HXLINE( 463)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp12 = ::flixel::FlxG_obj::sound;
HXDLIN( 463)				_hx_tmp12->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),((Float)0.7),null(),null(),null(),null());
HXLINE( 465)				this->transitioning = true;
HXLINE( 468)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
            			}
            		}
HXLINE( 478)		bool _hx_tmp13;
HXDLIN( 478)		bool _hx_tmp14;
HXDLIN( 478)		bool _hx_tmp15;
HXDLIN( 478)		if (::TitleState_obj::initialized) {
HXLINE( 478)			_hx_tmp15 = pressedEnter;
            		}
            		else {
HXLINE( 478)			_hx_tmp15 = false;
            		}
HXDLIN( 478)		if (_hx_tmp15) {
HXLINE( 478)			_hx_tmp14 = !(this->skippedIntro);
            		}
            		else {
HXLINE( 478)			_hx_tmp14 = false;
            		}
HXDLIN( 478)		if (_hx_tmp14) {
HXLINE( 478)			_hx_tmp13 = (::ClientPrefs_obj::progress >= 0);
            		}
            		else {
HXLINE( 478)			_hx_tmp13 = false;
            		}
HXDLIN( 478)		if (_hx_tmp13) {
HXLINE( 480)			this->skipIntro();
HXLINE( 481)			::flixel::FlxG_obj::camera->flash(-1,4,null(),null());
            		}
HXLINE( 484)		if (::hx::IsNotNull( this->swagShader )) {
HXLINE( 486)			if (::PlayerSettings_obj::player1->controls->_ui_left->check()) {
HXLINE( 486)				 ::ColorSwap fh = this->swagShader;
HXDLIN( 486)				fh->set_hue((fh->hue - (elapsed * ((Float)0.1))));
            			}
HXLINE( 487)			if (::PlayerSettings_obj::player1->controls->_ui_right->check()) {
HXLINE( 487)				 ::ColorSwap fh1 = this->swagShader;
HXDLIN( 487)				fh1->set_hue((fh1->hue + (elapsed * ((Float)0.1))));
            			}
            		}
HXLINE( 490)		this->super::update(elapsed);
            	}


void TitleState_obj::createCoolText(::Array< ::String > textArray, ::Dynamic __o_offset){
            		 ::Dynamic offset = __o_offset;
            		if (::hx::IsNull(__o_offset)) offset = 0;
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_495_createCoolText)
HXDLIN( 495)		int _g = 0;
HXDLIN( 495)		int _g1 = textArray->length;
HXDLIN( 495)		while((_g < _g1)){
HXDLIN( 495)			_g = (_g + 1);
HXDLIN( 495)			int i = (_g - 1);
HXLINE( 497)			 ::Alphabet money =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),textArray->__get(i),true);
HXLINE( 498)			{
HXLINE( 498)				int axes = 1;
HXDLIN( 498)				bool _hx_tmp;
HXDLIN( 498)				if ((axes != 1)) {
HXLINE( 498)					_hx_tmp = (axes == 17);
            				}
            				else {
HXLINE( 498)					_hx_tmp = true;
            				}
HXDLIN( 498)				if (_hx_tmp) {
HXLINE( 498)					int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 498)					money->set_x(((( (Float)(_hx_tmp1) ) - money->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 498)				bool _hx_tmp2;
HXDLIN( 498)				if ((axes != 16)) {
HXLINE( 498)					_hx_tmp2 = (axes == 17);
            				}
            				else {
HXLINE( 498)					_hx_tmp2 = true;
            				}
HXDLIN( 498)				if (_hx_tmp2) {
HXLINE( 498)					int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 498)					money->set_y(((( (Float)(_hx_tmp3) ) - money->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 499)			money->set_y((money->y + (((i * 60) + 200) + offset)));
HXLINE( 500)			bool _hx_tmp4;
HXDLIN( 500)			if (::hx::IsNotNull( this->credGroup )) {
HXLINE( 500)				_hx_tmp4 = ::hx::IsNotNull( this->textGroup );
            			}
            			else {
HXLINE( 500)				_hx_tmp4 = false;
            			}
HXDLIN( 500)			if (_hx_tmp4) {
HXLINE( 501)				this->credGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 502)				this->textGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TitleState_obj,createCoolText,(void))

void TitleState_obj::addMoreText(::String text, ::Dynamic __o_offset){
            		 ::Dynamic offset = __o_offset;
            		if (::hx::IsNull(__o_offset)) offset = 0;
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_509_addMoreText)
HXDLIN( 509)		bool _hx_tmp;
HXDLIN( 509)		if (::hx::IsNotNull( this->textGroup )) {
HXDLIN( 509)			_hx_tmp = ::hx::IsNotNull( this->credGroup );
            		}
            		else {
HXDLIN( 509)			_hx_tmp = false;
            		}
HXDLIN( 509)		if (_hx_tmp) {
HXLINE( 510)			 ::Alphabet coolText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),text,true);
HXLINE( 511)			{
HXLINE( 511)				int axes = 1;
HXDLIN( 511)				bool _hx_tmp1;
HXDLIN( 511)				if ((axes != 1)) {
HXLINE( 511)					_hx_tmp1 = (axes == 17);
            				}
            				else {
HXLINE( 511)					_hx_tmp1 = true;
            				}
HXDLIN( 511)				if (_hx_tmp1) {
HXLINE( 511)					int _hx_tmp2 = ::flixel::FlxG_obj::width;
HXDLIN( 511)					coolText->set_x(((( (Float)(_hx_tmp2) ) - coolText->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 511)				bool _hx_tmp3;
HXDLIN( 511)				if ((axes != 16)) {
HXLINE( 511)					_hx_tmp3 = (axes == 17);
            				}
            				else {
HXLINE( 511)					_hx_tmp3 = true;
            				}
HXDLIN( 511)				if (_hx_tmp3) {
HXLINE( 511)					int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 511)					coolText->set_y(((( (Float)(_hx_tmp4) ) - coolText->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 512)			coolText->set_y((coolText->y + (((this->textGroup->length * 60) + 200) + offset)));
HXLINE( 513)			this->credGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 514)			this->textGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TitleState_obj,addMoreText,(void))

void TitleState_obj::deleteCoolText(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_520_deleteCoolText)
HXDLIN( 520)		while((this->textGroup->members->get_length() > 0)){
HXLINE( 522)			this->credGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 523)			this->textGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,deleteCoolText,(void))

void TitleState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_530_beatHit)
HXLINE( 531)		this->super::beatHit();
HXLINE( 533)		if (::hx::IsNotNull( this->logoBl )) {
HXLINE( 534)			this->logoBl->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
            		}
HXLINE( 536)		if (::hx::IsNotNull( this->gfDance )) {
HXLINE( 537)			this->danceLeft = !(this->danceLeft);
HXLINE( 538)			if (this->danceLeft) {
HXLINE( 539)				this->gfDance->animation->play(HX_("danceRight",a9,7f,a6,91),null(),null(),null());
            			}
            			else {
HXLINE( 541)				this->gfDance->animation->play(HX_("danceLeft",da,cc,f9,df),null(),null(),null());
            			}
            		}
HXLINE( 544)		if ((this->curBeat >= 32)) {
HXLINE( 545)			Float _hx_tmp;
HXDLIN( 545)			if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE( 545)				_hx_tmp = ((Float)1.03);
            			}
            			else {
HXLINE( 545)				_hx_tmp = ((Float)1.01);
            			}
HXDLIN( 545)			::flixel::FlxG_obj::camera->set_zoom(_hx_tmp);
            		}
HXLINE( 547)		if (this->skippedIntro) {
HXLINE( 548)			Float _hx_tmp1;
HXDLIN( 548)			if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE( 548)				_hx_tmp1 = ( (Float)(1) );
            			}
            			else {
HXLINE( 548)				_hx_tmp1 = ( (Float)(-1) );
            			}
HXDLIN( 548)			::flixel::FlxG_obj::camera->set_angle(_hx_tmp1);
            		}
HXLINE( 549)		if (this->logoCanBeat) {
HXLINE( 551)			{
HXLINE( 551)				 ::flixel::math::FlxBasePoint this1 = this->fnf->scale;
HXDLIN( 551)				this1->set_x(((Float)1.06));
HXDLIN( 551)				this1->set_y(((Float)1.06));
            			}
HXLINE( 552)			{
HXLINE( 552)				 ::flixel::math::FlxBasePoint this2 = this->anammar->scale;
HXDLIN( 552)				this2->set_x(((Float)1.1));
HXDLIN( 552)				this2->set_y(((Float)1.1));
            			}
HXLINE( 553)			{
HXLINE( 553)				 ::flixel::math::FlxBasePoint this3 = this->creativity->scale;
HXDLIN( 553)				this3->set_x(((Float)1.13));
HXDLIN( 553)				this3->set_y(((Float)1.13));
            			}
HXLINE( 555)			if (::hx::IsNotNull( this->checks )) {
HXLINE( 556)				Float _hx_tmp2;
HXDLIN( 556)				if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE( 556)					_hx_tmp2 = ( (Float)(15) );
            				}
            				else {
HXLINE( 556)					_hx_tmp2 = ( (Float)(-15) );
            				}
HXDLIN( 556)				this->checks->set_angle(_hx_tmp2);
HXLINE( 557)				Float _hx_tmp3;
HXDLIN( 557)				if ((::hx::Mod(this->curBeat,2) == 0)) {
HXLINE( 557)					_hx_tmp3 = ( (Float)(-15) );
            				}
            				else {
HXLINE( 557)					_hx_tmp3 = ( (Float)(15) );
            				}
HXDLIN( 557)				this->checksDark->set_angle(_hx_tmp3);
            			}
            		}
HXLINE( 561)		if (!(::TitleState_obj::closedState)) {
HXLINE( 562)			bool _hx_tmp4;
HXDLIN( 562)			bool _hx_tmp5;
HXDLIN( 562)			if ((this->curBeat < 32)) {
HXLINE( 562)				_hx_tmp5 = ::hx::IsNotNull( this->video );
            			}
            			else {
HXLINE( 562)				_hx_tmp5 = false;
            			}
HXDLIN( 562)			if (_hx_tmp5) {
HXLINE( 562)				_hx_tmp4 = ::hx::IsNotNull( this->video->bitmap );
            			}
            			else {
HXLINE( 562)				_hx_tmp4 = false;
            			}
HXDLIN( 562)			if (_hx_tmp4) {
HXLINE( 563)				{
HXLINE( 563)					 ::hxvlc::openfl::Video tmp = this->video->bitmap;
HXDLIN( 563)					if (::hx::IsNotNull( tmp )) {
HXLINE( 563)						tmp->pause();
            					}
            				}
HXLINE( 564)				 ::hxvlc::openfl::Video _hx_tmp6 = this->video->bitmap;
HXDLIN( 564)				_hx_tmp6->set_time(( (::cpp::Int64)(::Std_obj::_hx_int(::Conductor_obj::songPosition)) ));
HXLINE( 565)				{
HXLINE( 565)					 ::hxvlc::flixel::FlxVideoSprite _this = this->video;
HXDLIN( 565)					if (::hx::IsNotNull( _this->bitmap )) {
HXLINE( 565)						_this->bitmap->play();
            					}
            				}
            			}
HXLINE( 567)			switch((int)(this->curBeat)){
            				case (int)1: {
            				}
            				break;
            				case (int)28: {
HXLINE( 618)					this->createCoolText(::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_22,1),null());
            				}
            				break;
            				case (int)29: {
HXLINE( 621)					this->addMoreText(HX_("Spooks",05,32,33,f6),null());
            				}
            				break;
            				case (int)30: {
HXLINE( 624)					this->addMoreText(HX_("Creativity",98,2a,4f,ba),null());
            				}
            				break;
            				case (int)31: {
HXLINE( 627)					this->addMoreText(HX_("V1",1b,4b,00,00),null());
            				}
            				break;
            				case (int)32: {
HXLINE( 630)					this->skipIntro();
HXLINE( 631)					::flixel::FlxG_obj::camera->flash(-1,4,null(),null());
            				}
            				break;
            			}
            		}
            	}


void TitleState_obj::skipIntro(){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_638_skipIntro)
HXDLIN( 638)		 ::TitleState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 639)		if (!(this->skippedIntro)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::TitleState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_663_skipIntro)
HXLINE( 664)				_gthis->logoCanBeat = true;
HXLINE( 665)				_gthis->fnf->origin->set_y(( (Float)(283) ));
HXLINE( 666)				_gthis->anammar->origin->set_y(( (Float)(283) ));
HXLINE( 667)				_gthis->creativity->origin->set_y(( (Float)(283) ));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 641)			this->remove(this->ngSpr,null());
HXLINE( 642)			this->remove(this->credGroup,null());
HXLINE( 644)			this->titleText->set_alpha(( (Float)(1) ));
HXLINE( 646)			 ::flixel::FlxSprite _hx_tmp = this->bg;
HXDLIN( 646)			Float _hx_tmp1 = (((Float)360.) - (this->bg->get_height() / ( (Float)(2) )));
HXDLIN( 646)			::flixel::tweens::FlxTween_obj::tween(_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),_hx_tmp1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE( 647)			::flixel::tweens::FlxTween_obj::tween(this->fnf, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            				->setFixed(1,HX_("scale.x",94,2d,07,65),1)
            				->setFixed(2,HX_("scale.y",95,2d,07,65),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.3))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE( 648)			::flixel::tweens::FlxTween_obj::tween(this->anammar, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            				->setFixed(1,HX_("scale.x",94,2d,07,65),1)
            				->setFixed(2,HX_("scale.y",95,2d,07,65),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.4))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE( 649)			::flixel::tweens::FlxTween_obj::tween(this->creativity, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)
            				->setFixed(1,HX_("scale.x",94,2d,07,65),1)
            				->setFixed(2,HX_("scale.y",95,2d,07,65),1)),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.5))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoOut_dyn())));
HXLINE( 651)			::flixel::tweens::FlxTween_obj::tween(this->checks, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.3))),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.5))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 652)			::flixel::tweens::FlxTween_obj::tween(this->checksDark, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.14))),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.5))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 653)			::flixel::tweens::FlxTween_obj::tween(this->dotsGradient, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.3))),1, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.6))
            				->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 656)			if (::hx::IsNotNull( this->video )) {
HXLINE( 657)				{
HXLINE( 657)					 ::hxvlc::openfl::Video tmp = this->video->bitmap;
HXDLIN( 657)					if (::hx::IsNotNull( tmp )) {
HXLINE( 657)						tmp->stop();
            					}
            				}
HXLINE( 658)				this->video->destroy();
HXLINE( 659)				this->video->set_alpha(( (Float)(0) ));
            			}
HXLINE( 663)			 ::flixel::util::FlxTimer timer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.5), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 671)			this->skippedIntro = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,skipIntro,(void))

void TitleState_obj::cacheSongs(){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_681_cacheSongs)
HXLINE( 682)		::haxe::Log_obj::trace(HX_("loading song",f9,e3,8d,1b),::hx::SourceInfo(HX_("source/TitleState.hx",71,4f,0c,46),682,HX_("TitleState",79,8d,a1,8c),HX_("cacheSongs",5c,9d,7f,c3)));
HXLINE( 683)		{
HXLINE( 683)			int _g = 0;
HXDLIN( 683)			::Array< ::String > _g1 = this->songsToCache;
HXDLIN( 683)			while((_g < _g1->length)){
HXLINE( 683)				::String song = _g1->__get(_g);
HXDLIN( 683)				_g = (_g + 1);
HXLINE( 684)				{
HXLINE( 684)					 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 684)					 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 684)					::String path = invalidChars->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 684)					::String songKey = (((HX_("",00,00,00,00) + hideChars->split(path)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Inst",95,b3,69,40)) + HX_("",00,00,00,00));
HXDLIN( 684)					 ::openfl::media::Sound inst = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey,null());
            				}
HXLINE( 685)				{
HXLINE( 685)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 685)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 685)					::String path1 = invalidChars1->split(::StringTools_obj::replace(song,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 685)					::String songKey1 = (((HX_("",00,00,00,00) + hideChars1->split(path1)->join(HX_("",00,00,00,00)).toLowerCase()) + HX_("/Voices",10,18,4f,34)) + HX_("",00,00,00,00));
HXDLIN( 685)					 ::openfl::media::Sound voices = ::Paths_obj::returnSound(HX_("songs",fe,36,c7,80),songKey1,null());
            				}
            			}
            		}
HXLINE( 687)		::haxe::Log_obj::trace(HX_("done loaded",e3,23,ec,76),::hx::SourceInfo(HX_("source/TitleState.hx",71,4f,0c,46),687,HX_("TitleState",79,8d,a1,8c),HX_("cacheSongs",5c,9d,7f,c3)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TitleState_obj,cacheSongs,(void))

::Array< int > TitleState_obj::muteKeys;

::Array< int > TitleState_obj::volumeDownKeys;

::Array< int > TitleState_obj::volumeUpKeys;

bool TitleState_obj::initialized;

::String TitleState_obj::updateVersion;

bool TitleState_obj::playJingle;

bool TitleState_obj::closedState;


::hx::ObjectPtr< TitleState_obj > TitleState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	TitleState_obj *__this = (TitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(blackScreen,"blackScreen");
	HX_MARK_MEMBER_NAME(credGroup,"credGroup");
	HX_MARK_MEMBER_NAME(credTextShit,"credTextShit");
	HX_MARK_MEMBER_NAME(textGroup,"textGroup");
	HX_MARK_MEMBER_NAME(ngSpr,"ngSpr");
	HX_MARK_MEMBER_NAME(video,"video");
	HX_MARK_MEMBER_NAME(titleTextColors,"titleTextColors");
	HX_MARK_MEMBER_NAME(titleTextAlphas,"titleTextAlphas");
	HX_MARK_MEMBER_NAME(curWacky,"curWacky");
	HX_MARK_MEMBER_NAME(logoBl,"logoBl");
	HX_MARK_MEMBER_NAME(gfDance,"gfDance");
	HX_MARK_MEMBER_NAME(danceLeft,"danceLeft");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(swagShader,"swagShader");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(fnf,"fnf");
	HX_MARK_MEMBER_NAME(anammar,"anammar");
	HX_MARK_MEMBER_NAME(creativity,"creativity");
	HX_MARK_MEMBER_NAME(checks,"checks");
	HX_MARK_MEMBER_NAME(checksDark,"checksDark");
	HX_MARK_MEMBER_NAME(dotsGradient,"dotsGradient");
	HX_MARK_MEMBER_NAME(logoCanBeat,"logoCanBeat");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(newTitle,"newTitle");
	HX_MARK_MEMBER_NAME(titleTimer,"titleTimer");
	HX_MARK_MEMBER_NAME(sickBeats,"sickBeats");
	HX_MARK_MEMBER_NAME(skippedIntro,"skippedIntro");
	HX_MARK_MEMBER_NAME(songsToCache,"songsToCache");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(blackScreen,"blackScreen");
	HX_VISIT_MEMBER_NAME(credGroup,"credGroup");
	HX_VISIT_MEMBER_NAME(credTextShit,"credTextShit");
	HX_VISIT_MEMBER_NAME(textGroup,"textGroup");
	HX_VISIT_MEMBER_NAME(ngSpr,"ngSpr");
	HX_VISIT_MEMBER_NAME(video,"video");
	HX_VISIT_MEMBER_NAME(titleTextColors,"titleTextColors");
	HX_VISIT_MEMBER_NAME(titleTextAlphas,"titleTextAlphas");
	HX_VISIT_MEMBER_NAME(curWacky,"curWacky");
	HX_VISIT_MEMBER_NAME(logoBl,"logoBl");
	HX_VISIT_MEMBER_NAME(gfDance,"gfDance");
	HX_VISIT_MEMBER_NAME(danceLeft,"danceLeft");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(swagShader,"swagShader");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(fnf,"fnf");
	HX_VISIT_MEMBER_NAME(anammar,"anammar");
	HX_VISIT_MEMBER_NAME(creativity,"creativity");
	HX_VISIT_MEMBER_NAME(checks,"checks");
	HX_VISIT_MEMBER_NAME(checksDark,"checksDark");
	HX_VISIT_MEMBER_NAME(dotsGradient,"dotsGradient");
	HX_VISIT_MEMBER_NAME(logoCanBeat,"logoCanBeat");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(newTitle,"newTitle");
	HX_VISIT_MEMBER_NAME(titleTimer,"titleTimer");
	HX_VISIT_MEMBER_NAME(sickBeats,"sickBeats");
	HX_VISIT_MEMBER_NAME(skippedIntro,"skippedIntro");
	HX_VISIT_MEMBER_NAME(songsToCache,"songsToCache");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"fnf") ) { return ::hx::Val( fnf ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { return ::hx::Val( ngSpr ); }
		if (HX_FIELD_EQ(inName,"video") ) { return ::hx::Val( video ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"logoBl") ) { return ::hx::Val( logoBl ); }
		if (HX_FIELD_EQ(inName,"checks") ) { return ::hx::Val( checks ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { return ::hx::Val( gfDance ); }
		if (HX_FIELD_EQ(inName,"anammar") ) { return ::hx::Val( anammar ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { return ::hx::Val( curWacky ); }
		if (HX_FIELD_EQ(inName,"newTitle") ) { return ::hx::Val( newTitle ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { return ::hx::Val( credGroup ); }
		if (HX_FIELD_EQ(inName,"textGroup") ) { return ::hx::Val( textGroup ); }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { return ::hx::Val( danceLeft ); }
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		if (HX_FIELD_EQ(inName,"sickBeats") ) { return ::hx::Val( sickBeats ); }
		if (HX_FIELD_EQ(inName,"skipIntro") ) { return ::hx::Val( skipIntro_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"swagShader") ) { return ::hx::Val( swagShader ); }
		if (HX_FIELD_EQ(inName,"creativity") ) { return ::hx::Val( creativity ); }
		if (HX_FIELD_EQ(inName,"checksDark") ) { return ::hx::Val( checksDark ); }
		if (HX_FIELD_EQ(inName,"startIntro") ) { return ::hx::Val( startIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"titleTimer") ) { return ::hx::Val( titleTimer ); }
		if (HX_FIELD_EQ(inName,"cacheSongs") ) { return ::hx::Val( cacheSongs_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { return ::hx::Val( blackScreen ); }
		if (HX_FIELD_EQ(inName,"logoCanBeat") ) { return ::hx::Val( logoCanBeat ); }
		if (HX_FIELD_EQ(inName,"addMoreText") ) { return ::hx::Val( addMoreText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { return ::hx::Val( credTextShit ); }
		if (HX_FIELD_EQ(inName,"dotsGradient") ) { return ::hx::Val( dotsGradient ); }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { return ::hx::Val( skippedIntro ); }
		if (HX_FIELD_EQ(inName,"songsToCache") ) { return ::hx::Val( songsToCache ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createCoolText") ) { return ::hx::Val( createCoolText_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteCoolText") ) { return ::hx::Val( deleteCoolText_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"titleTextColors") ) { return ::hx::Val( titleTextColors ); }
		if (HX_FIELD_EQ(inName,"titleTextAlphas") ) { return ::hx::Val( titleTextAlphas ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getIntroTextShit") ) { return ::hx::Val( getIntroTextShit_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool TitleState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"muteKeys") ) { outValue = ( muteKeys ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playJingle") ) { outValue = ( playJingle ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
		if (HX_FIELD_EQ(inName,"closedState") ) { outValue = ( closedState ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeUpKeys") ) { outValue = ( volumeUpKeys ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateVersion") ) { outValue = ( updateVersion ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeDownKeys") ) { outValue = ( volumeDownKeys ); return true; }
	}
	return false;
}

::hx::Val TitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"fnf") ) { fnf=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { ngSpr=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"video") ) { video=inValue.Cast<  ::hxvlc::flixel::FlxVideoSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"logoBl") ) { logoBl=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checks") ) { checks=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { gfDance=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"anammar") ) { anammar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { curWacky=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newTitle") ) { newTitle=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { credGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textGroup") ) { textGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { danceLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sickBeats") ) { sickBeats=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"swagShader") ) { swagShader=inValue.Cast<  ::ColorSwap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"creativity") ) { creativity=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"checksDark") ) { checksDark=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleTimer") ) { titleTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { blackScreen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"logoCanBeat") ) { logoCanBeat=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { credTextShit=inValue.Cast<  ::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dotsGradient") ) { dotsGradient=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { skippedIntro=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songsToCache") ) { songsToCache=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"titleTextColors") ) { titleTextColors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleTextAlphas") ) { titleTextAlphas=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TitleState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"muteKeys") ) { muteKeys=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"playJingle") ) { playJingle=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"closedState") ) { closedState=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"volumeUpKeys") ) { volumeUpKeys=ioValue.Cast< ::Array< int > >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateVersion") ) { updateVersion=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"volumeDownKeys") ) { volumeDownKeys=ioValue.Cast< ::Array< int > >(); return true; }
	}
	return false;
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("blackScreen",8b,de,f4,5d));
	outFields->push(HX_("credGroup",91,7f,9c,9c));
	outFields->push(HX_("credTextShit",fb,55,c1,3c));
	outFields->push(HX_("textGroup",52,43,e2,32));
	outFields->push(HX_("ngSpr",7c,26,68,9a));
	outFields->push(HX_("video",7b,14,fc,36));
	outFields->push(HX_("titleTextColors",f5,4d,ff,7e));
	outFields->push(HX_("titleTextAlphas",9a,53,b4,fa));
	outFields->push(HX_("curWacky",67,31,c6,0c));
	outFields->push(HX_("logoBl",15,ca,6e,5c));
	outFields->push(HX_("gfDance",94,88,3a,eb));
	outFields->push(HX_("danceLeft",da,cc,f9,df));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("swagShader",4f,e1,a0,28));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("fnf",1e,c6,4d,00));
	outFields->push(HX_("anammar",25,41,21,df));
	outFields->push(HX_("creativity",78,26,9e,c3));
	outFields->push(HX_("checks",ab,16,0f,ba));
	outFields->push(HX_("checksDark",c1,c8,13,e1));
	outFields->push(HX_("dotsGradient",da,c5,58,77));
	outFields->push(HX_("logoCanBeat",7b,e5,dc,96));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("newTitle",18,59,85,33));
	outFields->push(HX_("titleTimer",0d,d3,1a,22));
	outFields->push(HX_("sickBeats",9f,58,9e,58));
	outFields->push(HX_("skippedIntro",9c,44,26,49));
	outFields->push(HX_("songsToCache",69,d3,22,75));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,blackScreen),HX_("blackScreen",8b,de,f4,5d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TitleState_obj,credGroup),HX_("credGroup",91,7f,9c,9c)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(TitleState_obj,credTextShit),HX_("credTextShit",fb,55,c1,3c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(TitleState_obj,textGroup),HX_("textGroup",52,43,e2,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,ngSpr),HX_("ngSpr",7c,26,68,9a)},
	{::hx::fsObject /*  ::hxvlc::flixel::FlxVideoSprite */ ,(int)offsetof(TitleState_obj,video),HX_("video",7b,14,fc,36)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(TitleState_obj,titleTextColors),HX_("titleTextColors",f5,4d,ff,7e)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(TitleState_obj,titleTextAlphas),HX_("titleTextAlphas",9a,53,b4,fa)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(TitleState_obj,curWacky),HX_("curWacky",67,31,c6,0c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,logoBl),HX_("logoBl",15,ca,6e,5c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,gfDance),HX_("gfDance",94,88,3a,eb)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,danceLeft),HX_("danceLeft",da,cc,f9,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsObject /*  ::ColorSwap */ ,(int)offsetof(TitleState_obj,swagShader),HX_("swagShader",4f,e1,a0,28)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,fnf),HX_("fnf",1e,c6,4d,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,anammar),HX_("anammar",25,41,21,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(TitleState_obj,creativity),HX_("creativity",78,26,9e,c3)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(TitleState_obj,checks),HX_("checks",ab,16,0f,ba)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(TitleState_obj,checksDark),HX_("checksDark",c1,c8,13,e1)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(TitleState_obj,dotsGradient),HX_("dotsGradient",da,c5,58,77)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,logoCanBeat),HX_("logoCanBeat",7b,e5,dc,96)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,newTitle),HX_("newTitle",18,59,85,33)},
	{::hx::fsFloat,(int)offsetof(TitleState_obj,titleTimer),HX_("titleTimer",0d,d3,1a,22)},
	{::hx::fsInt,(int)offsetof(TitleState_obj,sickBeats),HX_("sickBeats",9f,58,9e,58)},
	{::hx::fsBool,(int)offsetof(TitleState_obj,skippedIntro),HX_("skippedIntro",9c,44,26,49)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(TitleState_obj,songsToCache),HX_("songsToCache",69,d3,22,75)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo TitleState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::muteKeys,HX_("muteKeys",6d,5d,88,16)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::volumeDownKeys,HX_("volumeDownKeys",70,2f,58,0b)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &TitleState_obj::volumeUpKeys,HX_("volumeUpKeys",69,bb,f5,23)},
	{::hx::fsBool,(void *) &TitleState_obj::initialized,HX_("initialized",14,f5,0f,37)},
	{::hx::fsString,(void *) &TitleState_obj::updateVersion,HX_("updateVersion",0f,4c,60,48)},
	{::hx::fsBool,(void *) &TitleState_obj::playJingle,HX_("playJingle",45,b8,ae,c6)},
	{::hx::fsBool,(void *) &TitleState_obj::closedState,HX_("closedState",c5,ac,a4,98)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_("blackScreen",8b,de,f4,5d),
	HX_("credGroup",91,7f,9c,9c),
	HX_("credTextShit",fb,55,c1,3c),
	HX_("textGroup",52,43,e2,32),
	HX_("ngSpr",7c,26,68,9a),
	HX_("video",7b,14,fc,36),
	HX_("titleTextColors",f5,4d,ff,7e),
	HX_("titleTextAlphas",9a,53,b4,fa),
	HX_("curWacky",67,31,c6,0c),
	HX_("create",fc,66,0f,7c),
	HX_("logoBl",15,ca,6e,5c),
	HX_("gfDance",94,88,3a,eb),
	HX_("danceLeft",da,cc,f9,df),
	HX_("titleText",65,ba,a4,70),
	HX_("swagShader",4f,e1,a0,28),
	HX_("bg",c5,55,00,00),
	HX_("fnf",1e,c6,4d,00),
	HX_("anammar",25,41,21,df),
	HX_("creativity",78,26,9e,c3),
	HX_("checks",ab,16,0f,ba),
	HX_("checksDark",c1,c8,13,e1),
	HX_("dotsGradient",da,c5,58,77),
	HX_("logoCanBeat",7b,e5,dc,96),
	HX_("startIntro",aa,a2,37,da),
	HX_("getIntroTextShit",23,9f,f3,eb),
	HX_("transitioning",6d,6a,93,94),
	HX_("newTitle",18,59,85,33),
	HX_("titleTimer",0d,d3,1a,22),
	HX_("update",09,86,05,87),
	HX_("createCoolText",32,cb,41,41),
	HX_("addMoreText",23,fe,9f,87),
	HX_("deleteCoolText",61,6b,de,48),
	HX_("sickBeats",9f,58,9e,58),
	HX_("beatHit",7d,ea,04,74),
	HX_("skippedIntro",9c,44,26,49),
	HX_("skipIntro",6d,37,1c,d2),
	HX_("songsToCache",69,d3,22,75),
	HX_("cacheSongs",5c,9d,7f,c3),
	::String(null()) };

static void TitleState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TitleState_obj::muteKeys,"muteKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::volumeDownKeys,"volumeDownKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::volumeUpKeys,"volumeUpKeys");
	HX_MARK_MEMBER_NAME(TitleState_obj::initialized,"initialized");
	HX_MARK_MEMBER_NAME(TitleState_obj::updateVersion,"updateVersion");
	HX_MARK_MEMBER_NAME(TitleState_obj::playJingle,"playJingle");
	HX_MARK_MEMBER_NAME(TitleState_obj::closedState,"closedState");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TitleState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TitleState_obj::muteKeys,"muteKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::volumeDownKeys,"volumeDownKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::volumeUpKeys,"volumeUpKeys");
	HX_VISIT_MEMBER_NAME(TitleState_obj::initialized,"initialized");
	HX_VISIT_MEMBER_NAME(TitleState_obj::updateVersion,"updateVersion");
	HX_VISIT_MEMBER_NAME(TitleState_obj::playJingle,"playJingle");
	HX_VISIT_MEMBER_NAME(TitleState_obj::closedState,"closedState");
};

#endif

::hx::Class TitleState_obj::__mClass;

static ::String TitleState_obj_sStaticFields[] = {
	HX_("muteKeys",6d,5d,88,16),
	HX_("volumeDownKeys",70,2f,58,0b),
	HX_("volumeUpKeys",69,bb,f5,23),
	HX_("initialized",14,f5,0f,37),
	HX_("updateVersion",0f,4c,60,48),
	HX_("playJingle",45,b8,ae,c6),
	HX_("closedState",c5,ac,a4,98),
	::String(null())
};

void TitleState_obj::__register()
{
	TitleState_obj _hx_dummy;
	TitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TitleState",79,8d,a1,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TitleState_obj::__GetStatic;
	__mClass->mSetStaticField = &TitleState_obj::__SetStatic;
	__mClass->mMarkFunc = TitleState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TitleState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TitleState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TitleState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_65_boot)
HXDLIN(  65)		muteKeys = ::Array_obj< int >::fromData( _hx_array_data_8ca18d79_28,1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_66_boot)
HXDLIN(  66)		volumeDownKeys = ::Array_obj< int >::fromData( _hx_array_data_8ca18d79_30,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_67_boot)
HXDLIN(  67)		volumeUpKeys = ::Array_obj< int >::fromData( _hx_array_data_8ca18d79_32,2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_69_boot)
HXDLIN(  69)		initialized = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_86_boot)
HXDLIN(  86)		updateVersion = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_384_boot)
HXDLIN( 384)		playJingle = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_528_boot)
HXDLIN( 528)		closedState = false;
            	}
}

