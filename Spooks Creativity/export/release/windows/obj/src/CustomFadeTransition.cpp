// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_CustomFadeTransition
#include <CustomFadeTransition.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_11636191a51c3638_19_new,"CustomFadeTransition","new",0x93baefd4,"CustomFadeTransition.new","CustomFadeTransition.hx",19,0xa4d2e61c)
static const int _hx_array_data_00f1b5e2_1[] = {
	(int)0,(int)-16777216,
};
static const int _hx_array_data_00f1b5e2_2[] = {
	(int)-16777216,(int)0,
};
HX_DEFINE_STACK_FRAME(_hx_pos_11636191a51c3638_77_new,"CustomFadeTransition","new",0x93baefd4,"CustomFadeTransition.new","CustomFadeTransition.hx",77,0xa4d2e61c)
HX_DEFINE_STACK_FRAME(_hx_pos_11636191a51c3638_93_new,"CustomFadeTransition","new",0x93baefd4,"CustomFadeTransition.new","CustomFadeTransition.hx",93,0xa4d2e61c)
HX_LOCAL_STACK_FRAME(_hx_pos_11636191a51c3638_116_update,"CustomFadeTransition","update",0x98488715,"CustomFadeTransition.update","CustomFadeTransition.hx",116,0xa4d2e61c)
HX_LOCAL_STACK_FRAME(_hx_pos_11636191a51c3638_130_destroy,"CustomFadeTransition","destroy",0x2de4166e,"CustomFadeTransition.destroy","CustomFadeTransition.hx",130,0xa4d2e61c)
HX_LOCAL_STACK_FRAME(_hx_pos_11636191a51c3638_29_boot,"CustomFadeTransition","boot",0xa7efea3e,"CustomFadeTransition.boot","CustomFadeTransition.hx",29,0xa4d2e61c)
HX_LOCAL_STACK_FRAME(_hx_pos_11636191a51c3638_30_boot,"CustomFadeTransition","boot",0xa7efea3e,"CustomFadeTransition.boot","CustomFadeTransition.hx",30,0xa4d2e61c)
static const ::String _hx_array_data_00f1b5e2_9[] = {
	HX_("char1",9b,9c,b3,45),HX_("char2",9c,9c,b3,45),HX_("char3",9d,9c,b3,45),HX_("char4",9e,9c,b3,45),
};
HX_LOCAL_STACK_FRAME(_hx_pos_11636191a51c3638_33_boot,"CustomFadeTransition","boot",0xa7efea3e,"CustomFadeTransition.boot","CustomFadeTransition.hx",33,0xa4d2e61c)

void CustomFadeTransition_obj::__construct(Float duration,bool isTransIn){
            	HX_GC_STACKFRAME(&_hx_pos_11636191a51c3638_19_new)
HXLINE(  23)		this->isTransIn = false;
HXLINE(  21)		this->leTween = null();
HXLINE(  35)		 ::CustomFadeTransition _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  36)		super::__construct();
HXLINE(  38)		this->isTransIn = isTransIn;
HXLINE(  39)		Float Value = ::flixel::FlxG_obj::camera->zoom;
HXDLIN(  39)		Float lowerBound;
HXDLIN(  39)		if ((Value < ((Float)0.05))) {
HXLINE(  39)			lowerBound = ((Float)0.05);
            		}
            		else {
HXLINE(  39)			lowerBound = Value;
            		}
HXDLIN(  39)		Float zoom;
HXDLIN(  39)		if ((lowerBound > 1)) {
HXLINE(  39)			zoom = ( (Float)(1) );
            		}
            		else {
HXLINE(  39)			zoom = lowerBound;
            		}
HXLINE(  40)		int width = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) / zoom));
HXLINE(  41)		int height = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::height) ) / zoom));
HXLINE(  42)		::Array< int > _hx_tmp;
HXDLIN(  42)		if (isTransIn) {
HXLINE(  42)			_hx_tmp = ::Array_obj< int >::fromData( _hx_array_data_00f1b5e2_1,2);
            		}
            		else {
HXLINE(  42)			_hx_tmp = ::Array_obj< int >::fromData( _hx_array_data_00f1b5e2_2,2);
            		}
HXDLIN(  42)		this->transGradient = ::flixel::util::FlxGradient_obj::createGradientFlxSprite(1,height,_hx_tmp,null(),null(),null());
HXLINE(  43)		this->transGradient->scale->set_x(( (Float)(width) ));
HXLINE(  44)		this->transGradient->updateHitbox();
HXLINE(  45)		{
HXLINE(  45)			 ::flixel::math::FlxBasePoint this1 = this->transGradient->scrollFactor;
HXDLIN(  45)			this1->set_x(( (Float)(0) ));
HXDLIN(  45)			this1->set_y(( (Float)(0) ));
            		}
HXLINE(  46)		this->add(this->transGradient);
HXLINE(  48)		this->transBlack =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1,(height + 400),-16777216,null(),null());
HXLINE(  49)		this->transBlack->scale->set_x(( (Float)(width) ));
HXLINE(  50)		this->transBlack->updateHitbox();
HXLINE(  51)		{
HXLINE(  51)			 ::flixel::math::FlxBasePoint this2 = this->transBlack->scrollFactor;
HXDLIN(  51)			this2->set_x(( (Float)(0) ));
HXDLIN(  51)			this2->set_y(( (Float)(0) ));
            		}
HXLINE(  52)		this->add(this->transBlack);
HXLINE(  58)		if (::CustomFadeTransition_obj::newLoading) {
HXLINE(  59)			this->loading =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,1280,null());
HXLINE(  60)			 ::flixel::FlxSprite _hx_tmp1 = this->loading;
HXDLIN(  60)			::String library = null();
HXDLIN(  60)			 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(HX_("transition/loading",c2,6c,3c,66),library);
HXDLIN(  60)			_hx_tmp1->loadGraphic(returnAsset,null(),null(),null(),null(),null());
HXLINE(  61)			this->loading->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(  62)			int _hx_tmp2 = (this->members->indexOf(this->transBlack,null()) + 2);
HXDLIN(  62)			this->insert(_hx_tmp2,this->loading);
HXLINE(  64)			this->_hx_char =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,-1280,null());
HXLINE(  65)			 ::flixel::FlxSprite _hx_tmp3 = this->_hx_char;
HXDLIN(  65)			::String library1 = null();
HXDLIN(  65)			 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic((HX_("transition/",fa,54,ec,40) + ::CustomFadeTransition_obj::charName),library1);
HXDLIN(  65)			_hx_tmp3->loadGraphic(returnAsset1,null(),null(),null(),null(),null());
HXLINE(  66)			this->_hx_char->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(  67)			int _hx_tmp4 = (this->members->indexOf(this->transBlack,null()) + 2);
HXDLIN(  67)			this->insert(_hx_tmp4,this->_hx_char);
            		}
HXLINE(  70)		 ::flixel::FlxSprite fh = this->transGradient;
HXDLIN(  70)		fh->set_x((fh->x - (( (Float)((width - ::flixel::FlxG_obj::width)) ) / ( (Float)(2) ))));
HXLINE(  71)		this->transBlack->set_x(this->transGradient->x);
HXLINE(  73)		if (isTransIn) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::CustomFadeTransition,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_GC_STACKFRAME(&_hx_pos_11636191a51c3638_77_new)
HXLINE(  77)				_gthis->close();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  74)			 ::flixel::FlxSprite _hx_tmp5 = this->transGradient;
HXDLIN(  74)			Float _hx_tmp6 = this->transBlack->y;
HXDLIN(  74)			_hx_tmp5->set_y((_hx_tmp6 - this->transBlack->get_height()));
HXLINE(  75)			 ::flixel::FlxSprite _hx_tmp7 = this->transGradient;
HXDLIN(  75)			Float _hx_tmp8 = (this->transGradient->get_height() + 50);
HXDLIN(  75)			::flixel::tweens::FlxTween_obj::tween(_hx_tmp7, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),_hx_tmp8)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
HXLINE(  81)			if (::CustomFadeTransition_obj::newLoading) {
HXLINE(  82)				this->_hx_char->set_y(( (Float)(0) ));
HXLINE(  83)				this->loading->set_y(( (Float)(0) ));
HXLINE(  84)				this->charTween = ::flixel::tweens::FlxTween_obj::tween(this->_hx_char, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),1280)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.05))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
HXLINE(  85)				this->loadingTween = ::flixel::tweens::FlxTween_obj::tween(this->loading, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),-1280)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),((Float)0.05))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadIn_dyn())));
            			}
HXLINE(  87)			::CustomFadeTransition_obj::charName = ::CustomFadeTransition_obj::chars->__get(::flixel::FlxG_obj::random->_hx_int(0,(::CustomFadeTransition_obj::chars->length - 1),null()));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_GC_STACKFRAME(&_hx_pos_11636191a51c3638_93_new)
HXLINE(  93)				if (::hx::IsNotNull( ::CustomFadeTransition_obj::finishCallback )) {
HXLINE(  94)					::CustomFadeTransition_obj::finishCallback();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  89)			 ::flixel::FlxSprite _hx_tmp9 = this->transGradient;
HXDLIN(  89)			_hx_tmp9->set_y(-(this->transGradient->get_height()));
HXLINE(  90)			 ::flixel::FlxSprite _hx_tmp10 = this->transBlack;
HXDLIN(  90)			Float _hx_tmp11 = this->transGradient->y;
HXDLIN(  90)			_hx_tmp10->set_y(((_hx_tmp11 - this->transBlack->get_height()) + 50));
HXLINE(  91)			 ::flixel::FlxSprite _hx_tmp12 = this->transGradient;
HXDLIN(  91)			Float _hx_tmp13 = (this->transGradient->get_height() + 50);
HXDLIN(  91)			this->leTween = ::flixel::tweens::FlxTween_obj::tween(_hx_tmp12, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),_hx_tmp13)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::linear_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1()))));
HXLINE(  99)			if (::CustomFadeTransition_obj::newLoading) {
HXLINE( 100)				this->charTween = ::flixel::tweens::FlxTween_obj::tween(this->_hx_char, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),0)),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE( 101)				this->loadingTween = ::flixel::tweens::FlxTween_obj::tween(this->loading, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),0)),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
            			}
            		}
HXLINE( 105)		if (::hx::IsNotNull( ::CustomFadeTransition_obj::nextCamera )) {
HXLINE( 106)			this->transBlack->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::CustomFadeTransition_obj::nextCamera));
HXLINE( 107)			this->transGradient->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::CustomFadeTransition_obj::nextCamera));
HXLINE( 108)			if (::CustomFadeTransition_obj::newLoading) {
HXLINE( 109)				this->_hx_char->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::CustomFadeTransition_obj::nextCamera));
HXLINE( 110)				this->loading->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,::CustomFadeTransition_obj::nextCamera));
            			}
            		}
HXLINE( 113)		::CustomFadeTransition_obj::nextCamera = null();
            	}

Dynamic CustomFadeTransition_obj::__CreateEmpty() { return new CustomFadeTransition_obj; }

void *CustomFadeTransition_obj::_hx_vtable = 0;

Dynamic CustomFadeTransition_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CustomFadeTransition_obj > _hx_result = new CustomFadeTransition_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CustomFadeTransition_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x0add7632) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0add7632;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void CustomFadeTransition_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_11636191a51c3638_116_update)
HXLINE( 117)		if (this->isTransIn) {
HXLINE( 118)			 ::flixel::FlxSprite _hx_tmp = this->transBlack;
HXDLIN( 118)			Float _hx_tmp1 = this->transGradient->y;
HXDLIN( 118)			_hx_tmp->set_y((_hx_tmp1 + this->transGradient->get_height()));
            		}
            		else {
HXLINE( 120)			 ::flixel::FlxSprite _hx_tmp2 = this->transBlack;
HXDLIN( 120)			Float _hx_tmp3 = this->transGradient->y;
HXDLIN( 120)			_hx_tmp2->set_y((_hx_tmp3 - this->transBlack->get_height()));
            		}
HXLINE( 122)		this->super::update(elapsed);
HXLINE( 123)		if (this->isTransIn) {
HXLINE( 124)			 ::flixel::FlxSprite _hx_tmp4 = this->transBlack;
HXDLIN( 124)			Float _hx_tmp5 = this->transGradient->y;
HXDLIN( 124)			_hx_tmp4->set_y((_hx_tmp5 + this->transGradient->get_height()));
            		}
            		else {
HXLINE( 126)			 ::flixel::FlxSprite _hx_tmp6 = this->transBlack;
HXDLIN( 126)			Float _hx_tmp7 = this->transGradient->y;
HXDLIN( 126)			_hx_tmp6->set_y((_hx_tmp7 - this->transBlack->get_height()));
            		}
            	}


void CustomFadeTransition_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_11636191a51c3638_130_destroy)
HXLINE( 131)		if (::hx::IsNotNull( this->leTween )) {
HXLINE( 132)			::CustomFadeTransition_obj::finishCallback();
HXLINE( 133)			this->leTween->cancel();
            		}
HXLINE( 135)		if (::hx::IsNotNull( this->charTween )) {
HXLINE( 136)			this->charTween->cancel();
            		}
HXLINE( 137)		if (::hx::IsNotNull( this->loadingTween )) {
HXLINE( 138)			this->loadingTween->cancel();
            		}
HXLINE( 140)		this->super::destroy();
            	}


 ::Dynamic CustomFadeTransition_obj::finishCallback;

 ::flixel::FlxCamera CustomFadeTransition_obj::nextCamera;

::String CustomFadeTransition_obj::charName;

::Array< ::String > CustomFadeTransition_obj::chars;

bool CustomFadeTransition_obj::newLoading;


::hx::ObjectPtr< CustomFadeTransition_obj > CustomFadeTransition_obj::__new(Float duration,bool isTransIn) {
	::hx::ObjectPtr< CustomFadeTransition_obj > __this = new CustomFadeTransition_obj();
	__this->__construct(duration,isTransIn);
	return __this;
}

::hx::ObjectPtr< CustomFadeTransition_obj > CustomFadeTransition_obj::__alloc(::hx::Ctx *_hx_ctx,Float duration,bool isTransIn) {
	CustomFadeTransition_obj *__this = (CustomFadeTransition_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CustomFadeTransition_obj), true, "CustomFadeTransition"));
	*(void **)__this = CustomFadeTransition_obj::_hx_vtable;
	__this->__construct(duration,isTransIn);
	return __this;
}

CustomFadeTransition_obj::CustomFadeTransition_obj()
{
}

void CustomFadeTransition_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CustomFadeTransition);
	HX_MARK_MEMBER_NAME(leTween,"leTween");
	HX_MARK_MEMBER_NAME(isTransIn,"isTransIn");
	HX_MARK_MEMBER_NAME(transBlack,"transBlack");
	HX_MARK_MEMBER_NAME(transGradient,"transGradient");
	HX_MARK_MEMBER_NAME(loading,"loading");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(charTween,"charTween");
	HX_MARK_MEMBER_NAME(loadingTween,"loadingTween");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CustomFadeTransition_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(leTween,"leTween");
	HX_VISIT_MEMBER_NAME(isTransIn,"isTransIn");
	HX_VISIT_MEMBER_NAME(transBlack,"transBlack");
	HX_VISIT_MEMBER_NAME(transGradient,"transGradient");
	HX_VISIT_MEMBER_NAME(loading,"loading");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(charTween,"charTween");
	HX_VISIT_MEMBER_NAME(loadingTween,"loadingTween");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CustomFadeTransition_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { return ::hx::Val( _hx_char ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leTween") ) { return ::hx::Val( leTween ); }
		if (HX_FIELD_EQ(inName,"loading") ) { return ::hx::Val( loading ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isTransIn") ) { return ::hx::Val( isTransIn ); }
		if (HX_FIELD_EQ(inName,"charTween") ) { return ::hx::Val( charTween ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"transBlack") ) { return ::hx::Val( transBlack ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadingTween") ) { return ::hx::Val( loadingTween ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transGradient") ) { return ::hx::Val( transGradient ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CustomFadeTransition_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { outValue = ( chars ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charName") ) { outValue = ( charName ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nextCamera") ) { outValue = ( nextCamera ); return true; }
		if (HX_FIELD_EQ(inName,"newLoading") ) { outValue = ( newLoading ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"finishCallback") ) { outValue = ( finishCallback ); return true; }
	}
	return false;
}

::hx::Val CustomFadeTransition_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leTween") ) { leTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loading") ) { loading=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isTransIn") ) { isTransIn=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"charTween") ) { charTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"transBlack") ) { transBlack=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadingTween") ) { loadingTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transGradient") ) { transGradient=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CustomFadeTransition_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"chars") ) { chars=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charName") ) { charName=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nextCamera") ) { nextCamera=ioValue.Cast<  ::flixel::FlxCamera >(); return true; }
		if (HX_FIELD_EQ(inName,"newLoading") ) { newLoading=ioValue.Cast< bool >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"finishCallback") ) { finishCallback=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void CustomFadeTransition_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("leTween",32,a5,b7,99));
	outFields->push(HX_("isTransIn",63,af,52,93));
	outFields->push(HX_("transBlack",77,1c,bf,de));
	outFields->push(HX_("transGradient",38,f6,20,1d));
	outFields->push(HX_("loading",7c,ce,f2,08));
	outFields->push(HX_("char",d6,5e,bf,41));
	outFields->push(HX_("charTween",b5,33,c9,d2));
	outFields->push(HX_("loadingTween",4f,4a,01,0f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CustomFadeTransition_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(CustomFadeTransition_obj,leTween),HX_("leTween",32,a5,b7,99)},
	{::hx::fsBool,(int)offsetof(CustomFadeTransition_obj,isTransIn),HX_("isTransIn",63,af,52,93)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomFadeTransition_obj,transBlack),HX_("transBlack",77,1c,bf,de)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomFadeTransition_obj,transGradient),HX_("transGradient",38,f6,20,1d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomFadeTransition_obj,loading),HX_("loading",7c,ce,f2,08)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomFadeTransition_obj,_hx_char),HX_("char",d6,5e,bf,41)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(CustomFadeTransition_obj,charTween),HX_("charTween",b5,33,c9,d2)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(CustomFadeTransition_obj,loadingTween),HX_("loadingTween",4f,4a,01,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CustomFadeTransition_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &CustomFadeTransition_obj::finishCallback,HX_("finishCallback",38,a1,bc,b4)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(void *) &CustomFadeTransition_obj::nextCamera,HX_("nextCamera",f8,f7,bd,6c)},
	{::hx::fsString,(void *) &CustomFadeTransition_obj::charName,HX_("charName",41,20,5f,a3)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &CustomFadeTransition_obj::chars,HX_("chars",dd,9c,b3,45)},
	{::hx::fsBool,(void *) &CustomFadeTransition_obj::newLoading,HX_("newLoading",fc,f1,f4,45)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CustomFadeTransition_obj_sMemberFields[] = {
	HX_("leTween",32,a5,b7,99),
	HX_("isTransIn",63,af,52,93),
	HX_("transBlack",77,1c,bf,de),
	HX_("transGradient",38,f6,20,1d),
	HX_("loading",7c,ce,f2,08),
	HX_("char",d6,5e,bf,41),
	HX_("charTween",b5,33,c9,d2),
	HX_("loadingTween",4f,4a,01,0f),
	HX_("update",09,86,05,87),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

static void CustomFadeTransition_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CustomFadeTransition_obj::finishCallback,"finishCallback");
	HX_MARK_MEMBER_NAME(CustomFadeTransition_obj::nextCamera,"nextCamera");
	HX_MARK_MEMBER_NAME(CustomFadeTransition_obj::charName,"charName");
	HX_MARK_MEMBER_NAME(CustomFadeTransition_obj::chars,"chars");
	HX_MARK_MEMBER_NAME(CustomFadeTransition_obj::newLoading,"newLoading");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CustomFadeTransition_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CustomFadeTransition_obj::finishCallback,"finishCallback");
	HX_VISIT_MEMBER_NAME(CustomFadeTransition_obj::nextCamera,"nextCamera");
	HX_VISIT_MEMBER_NAME(CustomFadeTransition_obj::charName,"charName");
	HX_VISIT_MEMBER_NAME(CustomFadeTransition_obj::chars,"chars");
	HX_VISIT_MEMBER_NAME(CustomFadeTransition_obj::newLoading,"newLoading");
};

#endif

::hx::Class CustomFadeTransition_obj::__mClass;

static ::String CustomFadeTransition_obj_sStaticFields[] = {
	HX_("finishCallback",38,a1,bc,b4),
	HX_("nextCamera",f8,f7,bd,6c),
	HX_("charName",41,20,5f,a3),
	HX_("chars",dd,9c,b3,45),
	HX_("newLoading",fc,f1,f4,45),
	::String(null())
};

void CustomFadeTransition_obj::__register()
{
	CustomFadeTransition_obj _hx_dummy;
	CustomFadeTransition_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CustomFadeTransition",e2,b5,f1,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CustomFadeTransition_obj::__GetStatic;
	__mClass->mSetStaticField = &CustomFadeTransition_obj::__SetStatic;
	__mClass->mMarkFunc = CustomFadeTransition_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CustomFadeTransition_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CustomFadeTransition_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CustomFadeTransition_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CustomFadeTransition_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomFadeTransition_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomFadeTransition_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CustomFadeTransition_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_11636191a51c3638_29_boot)
HXDLIN(  29)		charName = HX_("char1",9b,9c,b3,45);
            	}
{
            	HX_STACKFRAME(&_hx_pos_11636191a51c3638_30_boot)
HXDLIN(  30)		chars = ::Array_obj< ::String >::fromData( _hx_array_data_00f1b5e2_9,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_11636191a51c3638_33_boot)
HXDLIN(  33)		newLoading = false;
            	}
}

