// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CustomFadeTransition
#include <CustomFadeTransition.h>
#endif
#ifndef INCLUDED_CustomSubstate
#include <CustomSubstate.h>
#endif
#ifndef INCLUDED_DialogueBoxPsych
#include <DialogueBoxPsych.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_FunkinLua
#include <FunkinLua.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_HScript
#include <HScript.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModchartSprite
#include <ModchartSprite.h>
#endif
#ifndef INCLUDED_ModchartText
#include <ModchartText.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_StrumNote
#include <StrumNote.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_WeekData
#include <WeekData.h>
#endif
#ifndef INCLUDED_animateatlas_AtlasFrameMaker
#include <animateatlas/AtlasFrameMaker.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxRuntimeShader
#include <flixel/addons/display/FlxRuntimeShader.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadAnalogStick
#include <flixel/input/gamepad/FlxGamepadAnalogStick.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad__FlxGamepadInputID_FlxGamepadInputID_Impl_
#include <flixel/input/gamepad/_FlxGamepadInputID/FlxGamepadInputID_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_llua_Convert
#include <llua/Convert.h>
#endif
#ifndef INCLUDED_llua_Lua_helper
#include <llua/Lua_helper.h>
#endif
#ifndef INCLUDED_modchart_ModManager
#include <modchart/ModManager.h>
#endif
#ifndef INCLUDED_modchart_Modifier
#include <modchart/Modifier.h>
#endif
#ifndef INCLUDED_modchart_SubModifier
#include <modchart/SubModifier.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_69_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",69,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_256_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",256,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_253_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",253,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_271_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",271,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_275_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",275,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_282_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",282,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_287_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",287,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_292_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",292,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_297_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",297,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_301_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",301,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_307_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",307,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_313_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",313,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_319_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",319,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_323_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",323,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_328_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",328,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_342_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",342,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_353_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",353,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_364_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",364,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_390_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",390,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_405_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",405,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_420_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",420,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_435_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",435,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_450_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",450,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_465_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",465,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_480_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",480,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_497_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",497,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_507_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",507,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_517_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",517,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_527_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",527,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_537_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",537,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_547_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",547,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_560_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",560,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_569_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",569,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_587_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",587,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_645_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",645,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_710_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",710,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_833_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",833,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_873_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",873,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_918_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",918,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_965_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",965,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_985_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",985,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1001_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1001,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1022_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1022,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1036_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1036,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1049_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1049,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1060_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1060,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1069_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1069,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1099_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1099,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1119_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1119,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1132_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1132,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1144_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1144,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1160_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1160,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1174_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1174,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1190_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1190,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1194_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1194,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1203_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1203,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1207_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1207,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1216_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1216,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1220_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1220,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1229_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1229,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1233_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1233,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1242_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1242,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1246_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1246,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1255_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1255,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1264_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1264,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1275_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1275,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1282_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1282,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1289_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1289,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1296_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1296,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1303_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1303,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1310_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1310,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1317_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1317,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1324_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1324,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1331_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1331,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1343_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1343,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1353_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1353,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1363_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1363,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1370_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1370,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1377_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1377,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1384_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1384,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1393_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1393,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1396_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1396,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1398_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1398,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1407_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1407,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1443_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1443,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1447_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1447,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1451_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1451,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1455_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1455,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1459_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1459,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1463_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1463,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1468_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1468,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1471_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1471,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1474_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1474,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1478_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1478,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1480_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1480,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1484_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1484,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1487_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1487,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1495_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1495,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1499_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1499,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1503_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1503,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1508_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1508,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1512_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1512,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1516_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1516,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1520_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1520,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1529_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1529,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1538_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1538,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1547_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1547,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1556_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1556,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1565_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1565,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1580_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1580,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1591_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1591,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1602_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1602,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1611_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1611,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1614_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1614,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1617_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1617,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1619_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1619,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1627_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1627,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1631_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1631,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1636_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1636,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1641_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1641,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1666_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1666,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1670_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1670,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1680_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1680,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1690_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1690,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1700_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1700,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1709_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1709,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1718_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1718,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1721_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1721,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1726_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1726,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1732_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1732,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1735_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1735,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1738_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1738,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1740_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1740,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1744_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1744,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1749_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1749,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1759_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1759,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1769_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1769,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1779_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1779,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1789_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1789,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1799_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1799,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1810_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1810,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1817_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1817,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1829_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1829,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1839_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1839,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1855_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1855,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1874_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1874,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1894_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1894,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1897_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1897,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1902_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1902,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1942_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1942,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1956_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1956,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1968_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1968,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_1997_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",1997,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2018_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2018,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2039_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2039,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2053_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2053,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2061_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2061,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2083_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2083,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2086_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2086,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2089_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2089,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2092_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2092,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2101_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2101,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2111_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2111,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2139_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2139,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2159_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2159,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2187_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2187,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2206_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2206,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2220_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2220,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2229_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2229,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2239_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2239,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2241_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2241,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2275_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2275,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2296_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2296,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2298_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2298,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2304_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2304,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2313_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2313,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2319_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2319,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2324_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2324,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2329_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2329,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2337_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2337,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2344_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2344,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2356_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2356,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2367_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2367,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2375_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2375,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2382_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2382,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2393_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2393,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2402_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2402,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2409_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2409,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2415_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2415,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2422_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2422,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2432_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2432,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2442_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2442,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2452_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2452,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2466_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2466,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2479_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2479,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2489_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2489,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2499_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2499,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2517_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2517,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2527_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2527,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2536_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2536,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2546_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2546,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2557_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2557,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2566_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2566,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2587_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2587,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2597_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2597,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2605_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2605,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2614_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2614,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2623_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2623,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2645_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2645,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2661_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2661,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2687_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2687,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2691_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2691,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2705_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2705,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2719_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2719,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2728_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2728,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2738_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2738,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2753_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2753,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2759_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2759,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2768_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2768,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2776_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2776,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2786_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2786,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2801_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2801,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2819_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2819,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2824_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2824,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2831_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2831,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2834_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2834,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2837_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2837,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2840_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2840,0x00117937)
HX_DEFINE_STACK_FRAME(_hx_pos_ac4b451d003459d8_2843_new,"FunkinLua","new",0x0f3d1459,"FunkinLua.new","FunkinLua.hx",2843,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_2873_initHaxeModule,"FunkinLua","initHaxeModule",0xe2226d49,"FunkinLua.initHaxeModule","FunkinLua.hx",2873,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_2958_getShader,"FunkinLua","getShader",0xcd954d14,"FunkinLua.getShader","FunkinLua.hx",2958,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_2975_initLuaShader,"FunkinLua","initLuaShader",0x6acebf06,"FunkinLua.initLuaShader","FunkinLua.hx",2975,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3025_getGroupStuff,"FunkinLua","getGroupStuff",0x11e9e0a4,"FunkinLua.getGroupStuff","FunkinLua.hx",3025,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3049_loadFrames,"FunkinLua","loadFrames",0xc7d6fb93,"FunkinLua.loadFrames","FunkinLua.hx",3049,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3065_setGroupStuff,"FunkinLua","setGroupStuff",0x56efc2b0,"FunkinLua.setGroupStuff","FunkinLua.hx",3065,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3078_resetTextTag,"FunkinLua","resetTextTag",0xe26aea85,"FunkinLua.resetTextTag","FunkinLua.hx",3078,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3092_resetSpriteTag,"FunkinLua","resetSpriteTag",0x3513682d,"FunkinLua.resetSpriteTag","FunkinLua.hx",3092,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3107_cancelTween,"FunkinLua","cancelTween",0xb2cc778a,"FunkinLua.cancelTween","FunkinLua.hx",3107,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3114_tweenShit,"FunkinLua","tweenShit",0xb737bc84,"FunkinLua.tweenShit","FunkinLua.hx",3114,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3125_cancelTimer,"FunkinLua","cancelTimer",0xa9918ce4,"FunkinLua.cancelTimer","FunkinLua.hx",3125,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3134_getFlxEaseByString,"FunkinLua","getFlxEaseByString",0x2e3003d9,"FunkinLua.getFlxEaseByString","FunkinLua.hx",3134,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3176_blendModeFromString,"FunkinLua","blendModeFromString",0x22a3cd48,"FunkinLua.blendModeFromString","FunkinLua.hx",3176,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3196_cameraFromString,"FunkinLua","cameraFromString",0x153f0d47,"FunkinLua.cameraFromString","FunkinLua.hx",3196,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3206_luaTrace,"FunkinLua","luaTrace",0x51031f14,"FunkinLua.luaTrace","FunkinLua.hx",3206,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3217_getErrorMessage,"FunkinLua","getErrorMessage",0xefa7460e,"FunkinLua.getErrorMessage","FunkinLua.hx",3217,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3243_getResult,"FunkinLua","getResult",0xb8f8f6cc,"FunkinLua.getResult","FunkinLua.hx",3243,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3265_typeToString,"FunkinLua","typeToString",0xf196be6d,"FunkinLua.typeToString","FunkinLua.hx",3265,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3287_call,"FunkinLua","call",0x3eec4e85,"FunkinLua.call","FunkinLua.hx",3287,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3381_resultIsAllowed,"FunkinLua","resultIsAllowed",0x9872373a,"FunkinLua.resultIsAllowed","FunkinLua.hx",3381,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3386_isErrorAllowed,"FunkinLua","isErrorAllowed",0x9597f1f1,"FunkinLua.isErrorAllowed","FunkinLua.hx",3386,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3396_set,"FunkinLua","set",0x0f40df9b,"FunkinLua.set","FunkinLua.hx",3396,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3408_getBool,"FunkinLua","getBool",0x82ab6859,"FunkinLua.getBool","FunkinLua.hx",3408,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3421_stop,"FunkinLua","stop",0x498e25e9,"FunkinLua.stop","FunkinLua.hx",3421,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_2862_isOfTypes,"FunkinLua","isOfTypes",0xb64aadd1,"FunkinLua.isOfTypes","FunkinLua.hx",2862,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_2882_setVarInArray,"FunkinLua","setVarInArray",0xf3e9dac8,"FunkinLua.setVarInArray","FunkinLua.hx",2882,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_2920_getVarInArray,"FunkinLua","getVarInArray",0xaee3f8bc,"FunkinLua.getVarInArray","FunkinLua.hx",2920,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_2954_getTextObject,"FunkinLua","getTextObject",0x6333b0bb,"FunkinLua.getTextObject","FunkinLua.hx",2954,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3331_addAnimByIndices,"FunkinLua","addAnimByIndices",0x4ee7f345,"FunkinLua.addAnimByIndices","FunkinLua.hx",3331,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3359_getPropertyLoopThingWhatever,"FunkinLua","getPropertyLoopThingWhatever",0x5b606cc8,"FunkinLua.getPropertyLoopThingWhatever","FunkinLua.hx",3359,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3371_getObjectDirectly,"FunkinLua","getObjectDirectly",0x8859acc4,"FunkinLua.getObjectDirectly","FunkinLua.hx",3371,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_3434_getInstance,"FunkinLua","getInstance",0x7b084744,"FunkinLua.getInstance","FunkinLua.hx",3434,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_70_boot,"FunkinLua","boot",0x3e4dba19,"FunkinLua.boot","FunkinLua.hx",70,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_71_boot,"FunkinLua","boot",0x3e4dba19,"FunkinLua.boot","FunkinLua.hx",71,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_72_boot,"FunkinLua","boot",0x3e4dba19,"FunkinLua.boot","FunkinLua.hx",72,0x00117937)
HX_LOCAL_STACK_FRAME(_hx_pos_ac4b451d003459d8_83_boot,"FunkinLua","boot",0x3e4dba19,"FunkinLua.boot","FunkinLua.hx",83,0x00117937)

void FunkinLua_obj::__construct(::String script){
            	HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_69_new)
HXLINE(3286)		this->lastCalledFunction = HX_("",00,00,00,00);
HXLINE(  80)		this->closed = false;
HXLINE(  79)		this->scriptName = HX_("",00,00,00,00);
HXLINE(  76)		this->lua = null();
HXLINE(  86)		 ::FunkinLua _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  88)		this->lua = luaL_newstate();
HXLINE(  89)		luaL_openlibs(this->lua);
HXLINE(  90)		{
HXLINE(  90)			 cpp::Reference<lua_State> l = this->lua;
HXDLIN(  90)			linc::callbacks::set_callbacks_function(::cpp::Function< int ( cpp::Reference<lua_State>,::String)>(::hx::AnyCast(&::llua::Lua_helper_obj::callback_handler )));
            		}
HXLINE(  96)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  97)			 ::Dynamic result = luaL_dofile(this->lua,script);
HXLINE(  98)			::String resultStr = linc::lua::tostring(this->lua,( (int)(result) ));
HXLINE(  99)			bool _hx_tmp;
HXDLIN(  99)			if (::hx::IsNotNull( resultStr )) {
HXLINE(  99)				_hx_tmp = ::hx::IsNotEq( result,0 );
            			}
            			else {
HXLINE(  99)				_hx_tmp = false;
            			}
HXDLIN(  99)			if (_hx_tmp) {
HXLINE( 100)				::haxe::Log_obj::trace((HX_("Error on lua script! ",3b,0a,ce,5a) + resultStr),::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),100,HX_("FunkinLua",e7,f3,7b,36),HX_("new",60,d0,53,00)));
HXLINE( 102)				::lime::app::Application_obj::current->_hx___window->alert(resultStr,HX_("Error on lua script!",45,f2,65,3e));
HXLINE( 106)				this->lua = null();
HXLINE( 107)				return;
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 109)				 ::Dynamic e = _g;
HXLINE( 110)				::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),110,HX_("FunkinLua",e7,f3,7b,36),HX_("new",60,d0,53,00)));
HXLINE( 111)				return;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 113)		this->scriptName = script;
HXLINE( 114)		this->initHaxeModule();
HXLINE( 116)		::haxe::Log_obj::trace((HX_("lua file loaded succesfully:",5f,de,e6,ea) + script),::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),116,HX_("FunkinLua",e7,f3,7b,36),HX_("new",60,d0,53,00)));
HXLINE( 119)		this->set(HX_("DifficultyOption",30,50,b9,ff),::ClientPrefs_obj::aDifficulty.toLowerCase());
HXLINE( 120)		this->set(HX_("ReduceShakeOption",b5,de,84,21),::ClientPrefs_obj::reduceShakiness);
HXLINE( 121)		this->set(HX_("InsaneMode",4d,d7,36,42),(::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("insane",aa,36,da,9d)));
HXLINE( 122)		this->set(HX_("HardMode",0e,3c,cd,33),(::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("hard",eb,2e,08,45)));
HXLINE( 123)		this->set(HX_("EasyMode",a5,70,fb,05),(::ClientPrefs_obj::aDifficulty.toLowerCase() == HX_("easy",02,8c,0c,43)));
HXLINE( 124)		this->set(HX_("CensoredOption",9e,0b,9d,1b),::ClientPrefs_obj::filterCurses);
HXLINE( 125)		this->set(HX_("NoPromotion",82,4d,22,db),::ClientPrefs_obj::nopromotion);
HXLINE( 126)		this->set(HX_("CuteMode",c6,95,9b,b5),::ClientPrefs_obj::cute);
HXLINE( 127)		this->set(HX_("SpecialNotesOption",fd,34,b7,50),::ClientPrefs_obj::specialNotes);
HXLINE( 128)		this->set(HX_("SourceCodeVer",7b,8b,4d,e5),true);
HXLINE( 131)		 ::Dynamic defaultValue = true;
HXDLIN( 131)		 ::Dynamic _hx_tmp1;
HXDLIN( 131)		if (::PlayState_obj::isStoryMode) {
HXLINE( 131)			_hx_tmp1 = defaultValue;
            		}
            		else {
HXLINE( 131)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("mechanics",6f,ef,7e,2e))) {
HXLINE( 131)				_hx_tmp1 = ::ClientPrefs_obj::gameplaySettings->get(HX_("mechanics",6f,ef,7e,2e));
            			}
            			else {
HXLINE( 131)				_hx_tmp1 = defaultValue;
            			}
            		}
HXDLIN( 131)		this->set(HX_("Mechanic",a4,c0,96,53),_hx_tmp1);
HXLINE( 132)		 ::Dynamic defaultValue1 = true;
HXDLIN( 132)		 ::Dynamic _hx_tmp2;
HXDLIN( 132)		if (::PlayState_obj::isStoryMode) {
HXLINE( 132)			_hx_tmp2 = defaultValue1;
            		}
            		else {
HXLINE( 132)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("specialnotes",68,b3,b2,60))) {
HXLINE( 132)				_hx_tmp2 = ::ClientPrefs_obj::gameplaySettings->get(HX_("specialnotes",68,b3,b2,60));
            			}
            			else {
HXLINE( 132)				_hx_tmp2 = defaultValue1;
            			}
            		}
HXDLIN( 132)		this->set(HX_("SpecialNotes",68,6f,f2,bb),_hx_tmp2);
HXLINE( 133)		 ::Dynamic defaultValue2 = true;
HXDLIN( 133)		 ::Dynamic _hx_tmp3;
HXDLIN( 133)		if (::PlayState_obj::isStoryMode) {
HXLINE( 133)			_hx_tmp3 = defaultValue2;
            		}
            		else {
HXLINE( 133)			if (::ClientPrefs_obj::gameplaySettings->exists(HX_("modchart",dc,c6,ac,a3))) {
HXLINE( 133)				_hx_tmp3 = ::ClientPrefs_obj::gameplaySettings->get(HX_("modchart",dc,c6,ac,a3));
            			}
            			else {
HXLINE( 133)				_hx_tmp3 = defaultValue2;
            			}
            		}
HXDLIN( 133)		this->set(HX_("Modchart",fc,82,5e,7d),_hx_tmp3);
HXLINE( 135)		this->set(HX_("Function_StopLua",6f,6f,62,22),::FunkinLua_obj::Function_StopLua);
HXLINE( 136)		this->set(HX_("Function_Stop",c9,a5,e8,d3),::FunkinLua_obj::Function_Stop);
HXLINE( 137)		this->set(HX_("Function_Continue",ae,85,11,8b),::FunkinLua_obj::Function_Continue);
HXLINE( 138)		this->set(HX_("luaDebugMode",7e,06,20,4c),false);
HXLINE( 139)		this->set(HX_("luaDeprecatedWarnings",02,69,36,70),true);
HXLINE( 140)		this->set(HX_("inChartEditor",46,79,c6,62),false);
HXLINE( 143)		this->set(HX_("curBpm",3f,61,c3,3e),::Conductor_obj::bpm);
HXLINE( 144)		this->set(HX_("bpm",df,be,4a,00), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)));
HXLINE( 145)		this->set(HX_("scrollSpeed",3a,e0,46,cb), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)));
HXLINE( 146)		this->set(HX_("crochet",34,d5,b5,d4),::Conductor_obj::crochet);
HXLINE( 147)		this->set(HX_("stepCrochet",48,d7,ff,e6),::Conductor_obj::stepCrochet);
HXLINE( 148)		this->set(HX_("songLength",9b,3a,8c,fa),::flixel::FlxG_obj::sound->music->_length);
HXLINE( 149)		this->set(HX_("songName",c0,d0,d7,36), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)));
HXLINE( 150)		::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN( 150)		 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 150)		 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 150)		::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 150)		this->set(HX_("songPath",1a,44,2a,38),hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase());
HXLINE( 151)		this->set(HX_("startedCountdown",30,57,28,9b),false);
HXLINE( 152)		this->set(HX_("curStage",1e,65,b9,cb), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)));
HXLINE( 154)		this->set(HX_("isStoryMode",ae,68,02,07),::PlayState_obj::isStoryMode);
HXLINE( 155)		this->set(HX_("difficulty",3b,4e,8e,47),::PlayState_obj::storyDifficulty);
HXLINE( 157)		::String difficultyName = ::CoolUtil_obj::difficulties->__get(::PlayState_obj::storyDifficulty);
HXLINE( 158)		this->set(HX_("difficultyName",26,26,4a,94),difficultyName);
HXLINE( 159)		 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN( 159)		 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN( 159)		::String path2 = invalidChars1->split(::StringTools_obj::replace(difficultyName,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN( 159)		this->set(HX_("difficultyPath",80,99,9c,95),hideChars1->split(path2)->join(HX_("",00,00,00,00)).toLowerCase());
HXLINE( 160)		this->set(HX_("weekRaw",54,9e,f6,24),::PlayState_obj::storyWeek);
HXLINE( 161)		this->set(HX_("week",f4,5f,f5,4e),::WeekData_obj::weeksList->__get(::PlayState_obj::storyWeek));
HXLINE( 162)		this->set(HX_("seenCutscene",25,d1,95,b5),::PlayState_obj::seenCutscene);
HXLINE( 165)		this->set(HX_("cameraX",13,8a,31,e3),0);
HXLINE( 166)		this->set(HX_("cameraY",14,8a,31,e3),0);
HXLINE( 169)		this->set(HX_("screenWidth",fa,02,e8,81),::flixel::FlxG_obj::width);
HXLINE( 170)		this->set(HX_("screenHeight",73,10,6a,df),::flixel::FlxG_obj::height);
HXLINE( 173)		this->set(HX_("curBeat",16,53,29,ac),0);
HXLINE( 174)		this->set(HX_("curStep",ec,58,71,b7),0);
HXLINE( 175)		this->set(HX_("curDecBeat",b8,a2,ef,d7),0);
HXLINE( 176)		this->set(HX_("curDecStep",8e,a8,37,e3),0);
HXLINE( 178)		this->set(HX_("score",52,73,d9,78),0);
HXLINE( 179)		this->set(HX_("misses",6a,62,54,56),0);
HXLINE( 180)		this->set(HX_("hits",c0,42,0e,45),0);
HXLINE( 182)		this->set(HX_("rating",1d,34,8a,bb),0);
HXLINE( 183)		this->set(HX_("ratingName",08,a5,2b,05),HX_("",00,00,00,00));
HXLINE( 184)		this->set(HX_("ratingFC",9a,72,95,59),HX_("",00,00,00,00));
HXLINE( 185)		this->set(HX_("version",18,e7,f1,7c),::StringTools_obj::trim(::MainMenuState_obj::psychEngineVersion));
HXLINE( 187)		this->set(HX_("inGameOver",6b,97,d6,11),false);
HXLINE( 188)		this->set(HX_("mustHitSection",3b,5f,87,62),false);
HXLINE( 189)		this->set(HX_("altAnim",da,f3,f2,e5),false);
HXLINE( 190)		this->set(HX_("gfSection",86,e5,63,d4),false);
HXLINE( 193)		this->set(HX_("healthGainMult",cb,10,f5,d9),::PlayState_obj::instance->healthGain);
HXLINE( 194)		this->set(HX_("healthLossMult",2f,4c,b0,1e),::PlayState_obj::instance->healthLoss);
HXLINE( 195)		this->set(HX_("playbackRate",9b,3a,8b,c0),::PlayState_obj::instance->playbackRate);
HXLINE( 196)		this->set(HX_("instakillOnMiss",94,43,20,66),::PlayState_obj::instance->instakillOnMiss);
HXLINE( 197)		this->set(HX_("botPlay",9b,27,83,4c),::PlayState_obj::instance->cpuControlled);
HXLINE( 198)		this->set(HX_("practice",bb,00,e7,a0),::PlayState_obj::instance->practiceMode);
HXLINE( 200)		{
HXLINE( 200)			int _g1 = 0;
HXDLIN( 200)			while((_g1 < 4)){
HXLINE( 200)				_g1 = (_g1 + 1);
HXDLIN( 200)				int i = (_g1 - 1);
HXLINE( 201)				this->set((HX_("defaultPlayerStrumX",91,a3,83,89) + i),0);
HXLINE( 202)				this->set((HX_("defaultPlayerStrumY",92,a3,83,89) + i),0);
HXLINE( 203)				this->set((HX_("defaultOpponentStrumX",0d,e1,d7,f1) + i),0);
HXLINE( 204)				this->set((HX_("defaultOpponentStrumY",0e,e1,d7,f1) + i),0);
            			}
            		}
HXLINE( 208)		this->set(HX_("defaultBoyfriendX",cf,cb,cd,d0),::PlayState_obj::instance->BF_X);
HXLINE( 209)		this->set(HX_("defaultBoyfriendY",d0,cb,cd,d0),::PlayState_obj::instance->BF_Y);
HXLINE( 210)		this->set(HX_("defaultOpponentX",1a,17,e2,6b),::PlayState_obj::instance->DAD_X);
HXLINE( 211)		this->set(HX_("defaultOpponentY",1b,17,e2,6b),::PlayState_obj::instance->DAD_Y);
HXLINE( 212)		this->set(HX_("defaultGirlfriendX",1d,56,56,66),::PlayState_obj::instance->GF_X);
HXLINE( 213)		this->set(HX_("defaultGirlfriendY",1e,56,56,66),::PlayState_obj::instance->GF_Y);
HXLINE( 216)		this->set(HX_("boyfriendName",d5,c4,d2,4c), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)));
HXLINE( 217)		this->set(HX_("dadName",32,04,eb,ce), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)));
HXLINE( 218)		this->set(HX_("gfName",0a,f4,79,1d), ::Dynamic(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)));
HXLINE( 221)		this->set(HX_("downscroll",ef,45,d4,4f),::ClientPrefs_obj::downScroll);
HXLINE( 222)		this->set(HX_("middlescroll",22,59,c4,2d),::ClientPrefs_obj::middleScroll);
HXLINE( 223)		this->set(HX_("framerate",8d,e5,4b,4e),::ClientPrefs_obj::framerate);
HXLINE( 224)		this->set(HX_("ghostTapping",c6,6a,da,10),::ClientPrefs_obj::ghostTapping);
HXLINE( 225)		this->set(HX_("hideHud",15,b9,3c,b7),::ClientPrefs_obj::hideHud);
HXLINE( 226)		this->set(HX_("timeBarType",a0,5d,bb,01),::ClientPrefs_obj::timeBarType);
HXLINE( 227)		this->set(HX_("scoreZoom",85,53,bc,e0),::ClientPrefs_obj::scoreZoom);
HXLINE( 228)		this->set(HX_("cameraZoomOnBeat",ad,fc,ca,a9),::ClientPrefs_obj::camZooms);
HXLINE( 229)		this->set(HX_("flashingLights",af,15,62,da),::ClientPrefs_obj::flashing);
HXLINE( 230)		this->set(HX_("noteOffset",25,a5,53,fe),::ClientPrefs_obj::noteOffset);
HXLINE( 231)		this->set(HX_("healthBarAlpha",47,c9,a0,80),::ClientPrefs_obj::healthBarAlpha);
HXLINE( 232)		this->set(HX_("noResetButton",60,f2,dd,d8),::ClientPrefs_obj::noReset);
HXLINE( 233)		this->set(HX_("lowQuality",8b,52,27,3e),::ClientPrefs_obj::lowQuality);
HXLINE( 234)		this->set(HX_("shadersEnabled",73,5c,87,d4),::ClientPrefs_obj::shaders);
HXLINE( 235)		this->set(HX_("scriptName",f6,4d,e0,41),this->scriptName);
HXLINE( 236)		this->set(HX_("currentModDirectory",24,ad,ec,de),::Paths_obj::currentModDirectory);
HXLINE( 239)		this->set(HX_("buildTarget",1f,d9,5d,d7),HX_("windows",83,de,74,e8));
HXLINE( 252)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::String,name) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_256_new)
HXLINE( 256)					::PlayState_obj::instance->callOnLuas(HX_("multiThread",23,1a,0c,7b),::cpp::VirtualArray_obj::__new(1)->init(0,name),null(),null());
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_253_new)
HXLINE( 255)				::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0(name)),false);
HXLINE( 258)				return true;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 252)			 cpp::Reference<lua_State> l1 = this->lua;
HXDLIN( 252)			::llua::Lua_helper_obj::callbacks->set(HX_("multiThread",23,1a,0c,7b), ::Dynamic(new _hx_Closure_1()));
HXDLIN( 252)			linc::callbacks::add_callback_function(l1,HX_("multiThread",23,1a,0c,7b));
            		}
HXLINE( 269)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			void _hx_run(::String modName,Float val, ::Dynamic __o_player){
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_271_new)
HXLINE( 271)				::PlayState_obj::instance->modManager->setValue(modName,(val * ((Float)0.01)),player);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 269)			 cpp::Reference<lua_State> l2 = this->lua;
HXDLIN( 269)			::llua::Lua_helper_obj::callbacks->set(HX_("setPercent",43,cf,b9,cb), ::Dynamic(new _hx_Closure_2()));
HXDLIN( 269)			linc::callbacks::add_callback_function(l2,HX_("setPercent",43,cf,b9,cb));
            		}
HXLINE( 274)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(3)
            			void _hx_run(::String modName, ::Dynamic __o_defaultVal, ::Dynamic __o_player){
            		Float defaultVal = __o_defaultVal.Default(0);
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_275_new)
HXLINE( 276)				{
HXLINE( 276)					 ::modchart::ModManager _this = ::PlayState_obj::instance->modManager;
HXDLIN( 276)					 ::modchart::Modifier mod =  ::modchart::SubModifier_obj::__alloc( HX_CTX ,modName,::PlayState_obj::instance->modManager,null());
HXDLIN( 276)					_this->registerMod(mod->getName(),mod,null());
            				}
HXLINE( 277)				::PlayState_obj::instance->modManager->setValue(modName,defaultVal,null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 274)			 cpp::Reference<lua_State> l3 = this->lua;
HXDLIN( 274)			::llua::Lua_helper_obj::callbacks->set(HX_("addBlankMod",0f,73,60,07), ::Dynamic(new _hx_Closure_3()));
HXDLIN( 274)			linc::callbacks::add_callback_function(l3,HX_("addBlankMod",0f,73,60,07));
            		}
HXLINE( 280)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(3)
            			void _hx_run(::String modName,Float val, ::Dynamic __o_player){
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_282_new)
HXLINE( 282)				::PlayState_obj::instance->modManager->setValue(modName,val,player);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 280)			 cpp::Reference<lua_State> l4 = this->lua;
HXDLIN( 280)			::llua::Lua_helper_obj::callbacks->set(HX_("setValue",6f,e8,ec,3f), ::Dynamic(new _hx_Closure_4()));
HXDLIN( 280)			linc::callbacks::add_callback_function(l4,HX_("setValue",6f,e8,ec,3f));
            		}
HXLINE( 285)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(2)
            			Float _hx_run(::String modName,int player){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_287_new)
HXLINE( 287)				return ( ( ::modchart::Modifier)(::PlayState_obj::instance->modManager->_hx_register->get(modName)) )->getPercent(player);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 285)			 cpp::Reference<lua_State> l5 = this->lua;
HXDLIN( 285)			::llua::Lua_helper_obj::callbacks->set(HX_("getPercent",cf,30,3c,c8), ::Dynamic(new _hx_Closure_5()));
HXDLIN( 285)			linc::callbacks::add_callback_function(l5,HX_("getPercent",cf,30,3c,c8));
            		}
HXLINE( 290)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(2)
            			Float _hx_run(::String modName,int player){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_292_new)
HXLINE( 292)				return ( ( ::modchart::Modifier)(::PlayState_obj::instance->modManager->_hx_register->get(modName)) )->getValue(player);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 290)			 cpp::Reference<lua_State> l6 = this->lua;
HXDLIN( 290)			::llua::Lua_helper_obj::callbacks->set(HX_("getValue",fb,8e,8f,91), ::Dynamic(new _hx_Closure_6()));
HXDLIN( 290)			linc::callbacks::add_callback_function(l6,HX_("getValue",fb,8e,8f,91));
            		}
HXLINE( 295)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(4)
            			void _hx_run(Float step,::String modName,Float target, ::Dynamic __o_player){
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_297_new)
HXLINE( 297)				::PlayState_obj::instance->modManager->queueSet(step,modName,target,player);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 295)			 cpp::Reference<lua_State> l7 = this->lua;
HXDLIN( 295)			::llua::Lua_helper_obj::callbacks->set(HX_("queueSet",91,d6,82,43), ::Dynamic(new _hx_Closure_7()));
HXDLIN( 295)			linc::callbacks::add_callback_function(l7,HX_("queueSet",91,d6,82,43));
            		}
HXLINE( 299)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(4)
            			void _hx_run(Float step,::String modName,Float perc, ::Dynamic __o_player){
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_301_new)
HXLINE( 301)				::PlayState_obj::instance->modManager->queueSetP(step,modName,perc,player);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 299)			 cpp::Reference<lua_State> l8 = this->lua;
HXDLIN( 299)			::llua::Lua_helper_obj::callbacks->set(HX_("queueSetP",9f,e8,f8,ce), ::Dynamic(new _hx_Closure_8()));
HXDLIN( 299)			linc::callbacks::add_callback_function(l8,HX_("queueSetP",9f,e8,f8,ce));
            		}
HXLINE( 304)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_9) HXARGC(7)
            			void _hx_run(Float step,Float endStep,::String modName,Float percent,::String __o_style, ::Dynamic __o_player, ::Dynamic startVal){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("linear",e5,51,a0,ec);
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_307_new)
HXLINE( 307)				::PlayState_obj::instance->modManager->queueEase(step,endStep,modName,percent,style,player,startVal);
            			}
            			HX_END_LOCAL_FUNC7((void))

HXLINE( 304)			 cpp::Reference<lua_State> l9 = this->lua;
HXDLIN( 304)			::llua::Lua_helper_obj::callbacks->set(HX_("queueEase",1f,e2,b4,c5), ::Dynamic(new _hx_Closure_9()));
HXDLIN( 304)			linc::callbacks::add_callback_function(l9,HX_("queueEase",1f,e2,b4,c5));
            		}
HXLINE( 310)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_10) HXARGC(7)
            			void _hx_run(Float step,Float endStep,::String modName,Float percent,::String __o_style, ::Dynamic __o_player, ::Dynamic startVal){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("linear",e5,51,a0,ec);
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_313_new)
HXLINE( 313)				::PlayState_obj::instance->modManager->queueEaseP(step,endStep,modName,percent,style,player,startVal);
            			}
            			HX_END_LOCAL_FUNC7((void))

HXLINE( 310)			 cpp::Reference<lua_State> l10 = this->lua;
HXDLIN( 310)			::llua::Lua_helper_obj::callbacks->set(HX_("queueEaseP",51,f9,90,38), ::Dynamic(new _hx_Closure_10()));
HXDLIN( 310)			linc::callbacks::add_callback_function(l10,HX_("queueEaseP",51,f9,90,38));
            		}
HXLINE( 316)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_11) HXARGC(7)
            			void _hx_run(Float step,Float endStep,::String modName,Float percent,::String __o_style, ::Dynamic __o_player, ::Dynamic startVal){
            		::String style = __o_style;
            		if (::hx::IsNull(__o_style)) style = HX_("linear",e5,51,a0,ec);
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_319_new)
HXLINE( 319)				::PlayState_obj::instance->modManager->ease(step,endStep,modName,percent,style,player,startVal);
            			}
            			HX_END_LOCAL_FUNC7((void))

HXLINE( 316)			 cpp::Reference<lua_State> l11 = this->lua;
HXDLIN( 316)			::llua::Lua_helper_obj::callbacks->set(HX_("ease",ee,8b,0c,43), ::Dynamic(new _hx_Closure_11()));
HXDLIN( 316)			linc::callbacks::add_callback_function(l11,HX_("ease",ee,8b,0c,43));
            		}
HXLINE( 321)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_12) HXARGC(4)
            			void _hx_run(Float step,::String modName,Float perc, ::Dynamic __o_player){
            		int player = __o_player.Default(-1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_323_new)
HXLINE( 323)				::PlayState_obj::instance->modManager->set(step,modName,perc,player);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE( 321)			 cpp::Reference<lua_State> l12 = this->lua;
HXDLIN( 321)			::llua::Lua_helper_obj::callbacks->set(HX_("set",a2,9b,57,00), ::Dynamic(new _hx_Closure_12()));
HXDLIN( 321)			linc::callbacks::add_callback_function(l12,HX_("set",a2,9b,57,00));
            		}
HXLINE( 328)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_13) HXARGC(2)
            			void _hx_run(::String name, ::Dynamic __o_pauseGame){
            		bool pauseGame = __o_pauseGame.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_328_new)
HXLINE( 329)				if (pauseGame) {
HXLINE( 331)					::PlayState_obj::instance->persistentUpdate = false;
HXLINE( 332)					::PlayState_obj::instance->persistentDraw = true;
HXLINE( 333)					::PlayState_obj::instance->paused = true;
HXLINE( 334)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 335)						::flixel::FlxG_obj::sound->music->pause();
HXLINE( 336)						::PlayState_obj::instance->vocals->pause();
            					}
            				}
HXLINE( 339)				 ::PlayState _hx_tmp = ::PlayState_obj::instance;
HXDLIN( 339)				_hx_tmp->openSubState( ::CustomSubstate_obj::__alloc( HX_CTX ,name));
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 328)			 cpp::Reference<lua_State> l13 = this->lua;
HXDLIN( 328)			::llua::Lua_helper_obj::callbacks->set(HX_("openCustomSubstate",cc,1e,ff,10), ::Dynamic(new _hx_Closure_13()));
HXDLIN( 328)			linc::callbacks::add_callback_function(l13,HX_("openCustomSubstate",cc,1e,ff,10));
            		}
HXLINE( 342)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_14) HXARGC(0)
            			bool _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_342_new)
HXLINE( 343)				if (::hx::IsNotNull( ::CustomSubstate_obj::instance )) {
HXLINE( 345)					::PlayState_obj::instance->closeSubState();
HXLINE( 346)					::CustomSubstate_obj::instance = null();
HXLINE( 347)					return true;
            				}
HXLINE( 349)				return false;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 342)			 cpp::Reference<lua_State> l14 = this->lua;
HXDLIN( 342)			::llua::Lua_helper_obj::callbacks->set(HX_("closeCustomSubstate",3a,f7,b7,f2), ::Dynamic(new _hx_Closure_14()));
HXDLIN( 342)			linc::callbacks::add_callback_function(l14,HX_("closeCustomSubstate",3a,f7,b7,f2));
            		}
HXLINE( 353)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String name, ::Dynamic __o_glslVersion){
            		int glslVersion = __o_glslVersion.Default(120);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_353_new)
HXLINE( 354)				if (!(::ClientPrefs_obj::shaders)) {
HXLINE( 354)					return false;
            				}
HXLINE( 357)				return _gthis->initLuaShader(name,glslVersion);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 353)			 cpp::Reference<lua_State> l15 = this->lua;
HXDLIN( 353)			::llua::Lua_helper_obj::callbacks->set(HX_("initLuaShader",cd,69,3d,b0), ::Dynamic(new _hx_Closure_15(_gthis)));
HXDLIN( 353)			linc::callbacks::add_callback_function(l15,HX_("initLuaShader",cd,69,3d,b0));
            		}
HXLINE( 364)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String obj,::String shader){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_364_new)
HXLINE( 365)				if (!(::ClientPrefs_obj::shaders)) {
HXLINE( 365)					return false;
            				}
HXLINE( 368)				bool _hx_tmp;
HXDLIN( 368)				if (!(::PlayState_obj::instance->runtimeShaders->exists(shader))) {
HXLINE( 368)					_hx_tmp = !(_gthis->initLuaShader(shader,null()));
            				}
            				else {
HXLINE( 368)					_hx_tmp = false;
            				}
HXDLIN( 368)				if (_hx_tmp) {
HXLINE( 370)					_gthis->luaTrace(((HX_("setSpriteShader: Shader ",09,aa,37,9c) + shader) + HX_(" is missing!",d1,64,6b,b3)),false,false,-65536);
HXLINE( 371)					return false;
            				}
HXLINE( 374)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE( 375)				 ::flixel::FlxSprite leObj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE( 376)				if ((killMe->length > 1)) {
HXLINE( 377)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN( 377)					leObj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE( 380)				if (::hx::IsNotNull( leObj )) {
HXLINE( 381)					::Array< ::String > arr = ( (::Array< ::String >)(::PlayState_obj::instance->runtimeShaders->get(shader)) );
HXLINE( 382)					leObj->shader =  ::flixel::addons::display::FlxRuntimeShader_obj::__alloc( HX_CTX ,arr->__get(0),arr->__get(1),null());
HXLINE( 383)					return true;
            				}
HXLINE( 388)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 364)			 cpp::Reference<lua_State> l16 = this->lua;
HXDLIN( 364)			::llua::Lua_helper_obj::callbacks->set(HX_("setSpriteShader",cc,33,b9,d3), ::Dynamic(new _hx_Closure_16(_gthis)));
HXDLIN( 364)			linc::callbacks::add_callback_function(l16,HX_("setSpriteShader",cc,33,b9,d3));
            		}
HXLINE( 390)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_17) HXARGC(1)
            			bool _hx_run(::String obj){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_390_new)
HXLINE( 391)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE( 392)				 ::flixel::FlxSprite leObj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE( 393)				if ((killMe->length > 1)) {
HXLINE( 394)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN( 394)					leObj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE( 397)				if (::hx::IsNotNull( leObj )) {
HXLINE( 398)					leObj->shader = null();
HXLINE( 399)					return true;
            				}
HXLINE( 401)				return false;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 390)			 cpp::Reference<lua_State> l17 = this->lua;
HXDLIN( 390)			::llua::Lua_helper_obj::callbacks->set(HX_("removeSpriteShader",6e,9f,39,01), ::Dynamic(new _hx_Closure_17()));
HXDLIN( 390)			linc::callbacks::add_callback_function(l17,HX_("removeSpriteShader",6e,9f,39,01));
            		}
HXLINE( 405)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::FunkinLua,_gthis) HXARGC(2)
            			 ::Dynamic _hx_run(::String obj,::String prop){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_405_new)
HXLINE( 407)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 408)				if (::hx::IsNull( shader )) {
HXLINE( 410)					lua_pushnil(_gthis->lua);
HXLINE( 411)					return null();
            				}
HXLINE( 413)				return shader->getBool(prop);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 405)			 cpp::Reference<lua_State> l18 = this->lua;
HXDLIN( 405)			::llua::Lua_helper_obj::callbacks->set(HX_("getShaderBool",25,c2,26,8c), ::Dynamic(new _hx_Closure_18(_gthis)));
HXDLIN( 405)			linc::callbacks::add_callback_function(l18,HX_("getShaderBool",25,c2,26,8c));
            		}
HXLINE( 420)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19, ::FunkinLua,_gthis) HXARGC(2)
            			::Array< bool > _hx_run(::String obj,::String prop){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_420_new)
HXLINE( 422)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 423)				if (::hx::IsNull( shader )) {
HXLINE( 425)					lua_pushnil(_gthis->lua);
HXLINE( 426)					return null();
            				}
HXLINE( 428)				return shader->getBoolArray(prop);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 420)			 cpp::Reference<lua_State> l19 = this->lua;
HXDLIN( 420)			::llua::Lua_helper_obj::callbacks->set(HX_("getShaderBoolArray",34,35,0b,6a), ::Dynamic(new _hx_Closure_19(_gthis)));
HXDLIN( 420)			linc::callbacks::add_callback_function(l19,HX_("getShaderBoolArray",34,35,0b,6a));
            		}
HXLINE( 435)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::FunkinLua,_gthis) HXARGC(2)
            			 ::Dynamic _hx_run(::String obj,::String prop){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_435_new)
HXLINE( 437)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 438)				if (::hx::IsNull( shader )) {
HXLINE( 440)					lua_pushnil(_gthis->lua);
HXLINE( 441)					return null();
            				}
HXLINE( 443)				return shader->getInt(prop);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 435)			 cpp::Reference<lua_State> l20 = this->lua;
HXDLIN( 435)			::llua::Lua_helper_obj::callbacks->set(HX_("getShaderInt",54,e7,a3,3e), ::Dynamic(new _hx_Closure_20(_gthis)));
HXDLIN( 435)			linc::callbacks::add_callback_function(l20,HX_("getShaderInt",54,e7,a3,3e));
            		}
HXLINE( 450)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::FunkinLua,_gthis) HXARGC(2)
            			::Array< int > _hx_run(::String obj,::String prop){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_450_new)
HXLINE( 452)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 453)				if (::hx::IsNull( shader )) {
HXLINE( 455)					lua_pushnil(_gthis->lua);
HXLINE( 456)					return null();
            				}
HXLINE( 458)				return shader->getIntArray(prop);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 450)			 cpp::Reference<lua_State> l21 = this->lua;
HXDLIN( 450)			::llua::Lua_helper_obj::callbacks->set(HX_("getShaderIntArray",a5,e5,8d,91), ::Dynamic(new _hx_Closure_21(_gthis)));
HXDLIN( 450)			linc::callbacks::add_callback_function(l21,HX_("getShaderIntArray",a5,e5,8d,91));
            		}
HXLINE( 465)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_22, ::FunkinLua,_gthis) HXARGC(2)
            			 ::Dynamic _hx_run(::String obj,::String prop){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_465_new)
HXLINE( 467)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 468)				if (::hx::IsNull( shader )) {
HXLINE( 470)					lua_pushnil(_gthis->lua);
HXLINE( 471)					return null();
            				}
HXLINE( 473)				return shader->getFloat(prop);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 465)			 cpp::Reference<lua_State> l22 = this->lua;
HXDLIN( 465)			::llua::Lua_helper_obj::callbacks->set(HX_("getShaderFloat",41,c3,61,61), ::Dynamic(new _hx_Closure_22(_gthis)));
HXDLIN( 465)			linc::callbacks::add_callback_function(l22,HX_("getShaderFloat",41,c3,61,61));
            		}
HXLINE( 480)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_23, ::FunkinLua,_gthis) HXARGC(2)
            			::Array< Float > _hx_run(::String obj,::String prop){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_480_new)
HXLINE( 482)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 483)				if (::hx::IsNull( shader )) {
HXLINE( 485)					lua_pushnil(_gthis->lua);
HXLINE( 486)					return null();
            				}
HXLINE( 488)				return shader->getFloatArray(prop);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 480)			 cpp::Reference<lua_State> l23 = this->lua;
HXDLIN( 480)			::llua::Lua_helper_obj::callbacks->set(HX_("getShaderFloatArray",98,ae,4a,4c), ::Dynamic(new _hx_Closure_23(_gthis)));
HXDLIN( 480)			linc::callbacks::add_callback_function(l23,HX_("getShaderFloatArray",98,ae,4a,4c));
            		}
HXLINE( 497)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_24, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String obj,::String prop,bool value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_497_new)
HXLINE( 499)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 500)				if (::hx::IsNull( shader )) {
HXLINE( 500)					return;
            				}
HXLINE( 502)				shader->setBool(prop,value);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 497)			 cpp::Reference<lua_State> l24 = this->lua;
HXDLIN( 497)			::llua::Lua_helper_obj::callbacks->set(HX_("setShaderBool",31,a4,2c,d1), ::Dynamic(new _hx_Closure_24(_gthis)));
HXDLIN( 497)			linc::callbacks::add_callback_function(l24,HX_("setShaderBool",31,a4,2c,d1));
            		}
HXLINE( 507)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String obj,::String prop, ::Dynamic values){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_507_new)
HXLINE( 509)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 510)				if (::hx::IsNull( shader )) {
HXLINE( 510)					return;
            				}
HXLINE( 512)				shader->setBoolArray(prop,( (::Array< bool >)(values) ));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 507)			 cpp::Reference<lua_State> l25 = this->lua;
HXDLIN( 507)			::llua::Lua_helper_obj::callbacks->set(HX_("setShaderBoolArray",a8,67,ba,46), ::Dynamic(new _hx_Closure_25(_gthis)));
HXDLIN( 507)			linc::callbacks::add_callback_function(l25,HX_("setShaderBoolArray",a8,67,ba,46));
            		}
HXLINE( 517)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_26, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String obj,::String prop,int value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_517_new)
HXLINE( 519)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 520)				if (::hx::IsNull( shader )) {
HXLINE( 520)					return;
            				}
HXLINE( 522)				shader->setInt(prop,value);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 517)			 cpp::Reference<lua_State> l26 = this->lua;
HXDLIN( 517)			::llua::Lua_helper_obj::callbacks->set(HX_("setShaderInt",c8,0a,9d,53), ::Dynamic(new _hx_Closure_26(_gthis)));
HXDLIN( 517)			linc::callbacks::add_callback_function(l26,HX_("setShaderInt",c8,0a,9d,53));
            		}
HXLINE( 527)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_27, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String obj,::String prop, ::Dynamic values){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_527_new)
HXLINE( 529)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 530)				if (::hx::IsNull( shader )) {
HXLINE( 530)					return;
            				}
HXLINE( 532)				shader->setIntArray(prop,( (::Array< int >)(values) ));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 527)			 cpp::Reference<lua_State> l27 = this->lua;
HXDLIN( 527)			::llua::Lua_helper_obj::callbacks->set(HX_("setShaderIntArray",b1,bd,fb,b4), ::Dynamic(new _hx_Closure_27(_gthis)));
HXDLIN( 527)			linc::callbacks::add_callback_function(l27,HX_("setShaderIntArray",b1,bd,fb,b4));
            		}
HXLINE( 537)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_28, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String obj,::String prop,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_537_new)
HXLINE( 539)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 540)				if (::hx::IsNull( shader )) {
HXLINE( 540)					return;
            				}
HXLINE( 542)				shader->setFloat(prop,value);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 537)			 cpp::Reference<lua_State> l28 = this->lua;
HXDLIN( 537)			::llua::Lua_helper_obj::callbacks->set(HX_("setShaderFloat",b5,ab,81,81), ::Dynamic(new _hx_Closure_28(_gthis)));
HXDLIN( 537)			linc::callbacks::add_callback_function(l28,HX_("setShaderFloat",b5,ab,81,81));
            		}
HXLINE( 547)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_29, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String obj,::String prop, ::Dynamic values){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_547_new)
HXLINE( 549)				 ::flixel::addons::display::FlxRuntimeShader shader = _gthis->getShader(obj);
HXLINE( 550)				if (::hx::IsNull( shader )) {
HXLINE( 550)					return;
            				}
HXLINE( 552)				shader->setFloatArray(prop,( (::Array< Float >)(values) ));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 547)			 cpp::Reference<lua_State> l29 = this->lua;
HXDLIN( 547)			::llua::Lua_helper_obj::callbacks->set(HX_("setShaderFloatArray",a4,a1,e7,88), ::Dynamic(new _hx_Closure_29(_gthis)));
HXDLIN( 547)			linc::callbacks::add_callback_function(l29,HX_("setShaderFloatArray",a4,a1,e7,88));
            		}
HXLINE( 560)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_30) HXARGC(0)
            			::Array< ::String > _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_560_new)
HXLINE( 561)				::Array< ::String > runningScripts = ::Array_obj< ::String >::__new(0);
HXLINE( 562)				{
HXLINE( 562)					int _g = 0;
HXDLIN( 562)					int _g1 = ::PlayState_obj::instance->luaArray->length;
HXDLIN( 562)					while((_g < _g1)){
HXLINE( 562)						_g = (_g + 1);
HXDLIN( 562)						int idx = (_g - 1);
HXLINE( 563)						runningScripts->push(::PlayState_obj::instance->luaArray->__get(idx).StaticCast<  ::FunkinLua >()->scriptName);
            					}
            				}
HXLINE( 566)				return runningScripts;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE( 560)			 cpp::Reference<lua_State> l30 = this->lua;
HXDLIN( 560)			::llua::Lua_helper_obj::callbacks->set(HX_("getRunningScripts",ff,b2,36,24), ::Dynamic(new _hx_Closure_30()));
HXDLIN( 560)			linc::callbacks::add_callback_function(l30,HX_("getRunningScripts",ff,b2,36,24));
            		}
HXLINE( 569)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_31, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String funcName,::cpp::VirtualArray args, ::Dynamic __o_ignoreStops, ::Dynamic __o_ignoreSelf,::Array< ::String > exclusions){
            		bool ignoreStops = __o_ignoreStops.Default(false);
            		bool ignoreSelf = __o_ignoreSelf.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_569_new)
HXLINE( 570)				if (::hx::IsNull( funcName )) {
HXLINE( 572)					linc::lual::error(_gthis->lua,HX_("bad argument #1 to 'callOnLuas' (string expected, got nil)",5c,49,bb,d6));
HXLINE( 574)					return;
            				}
HXLINE( 576)				if (::hx::IsNull( args )) {
HXLINE( 576)					args = ::cpp::VirtualArray_obj::__new(0);
            				}
HXLINE( 578)				if (::hx::IsNull( exclusions )) {
HXLINE( 578)					exclusions = ::Array_obj< ::String >::__new(0);
            				}
HXLINE( 580)				lua_getglobal(_gthis->lua,HX_("scriptName",f6,4d,e0,41));
HXLINE( 581)				::String daScriptName = linc::lua::tostring(_gthis->lua,-1);
HXLINE( 582)				lua_pop(_gthis->lua,1);
HXLINE( 583)				bool _hx_tmp;
HXDLIN( 583)				if (ignoreSelf) {
HXLINE( 583)					_hx_tmp = !(exclusions->contains(daScriptName));
            				}
            				else {
HXLINE( 583)					_hx_tmp = false;
            				}
HXDLIN( 583)				if (_hx_tmp) {
HXLINE( 583)					exclusions->push(daScriptName);
            				}
HXLINE( 584)				::PlayState_obj::instance->callOnLuas(funcName,args,ignoreStops,exclusions);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE( 569)			 cpp::Reference<lua_State> l31 = this->lua;
HXDLIN( 569)			::llua::Lua_helper_obj::callbacks->set(HX_("callOnLuas",b8,07,76,15), ::Dynamic(new _hx_Closure_31(_gthis)));
HXDLIN( 569)			linc::callbacks::add_callback_function(l31,HX_("callOnLuas",b8,07,76,15));
            		}
HXLINE( 587)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_32, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String luaFile,::String funcName,::cpp::VirtualArray args){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_587_new)
HXLINE( 588)				if (::hx::IsNull( luaFile )) {
HXLINE( 590)					linc::lual::error(_gthis->lua,HX_("bad argument #1 to 'callScript' (string expected, got nil)",6d,ee,1a,21));
HXLINE( 592)					return;
            				}
HXLINE( 594)				if (::hx::IsNull( funcName )) {
HXLINE( 596)					linc::lual::error(_gthis->lua,HX_("bad argument #2 to 'callScript' (string expected, got nil)",0c,38,c9,d0));
HXLINE( 598)					return;
            				}
HXLINE( 600)				if (::hx::IsNull( args )) {
HXLINE( 601)					args = ::cpp::VirtualArray_obj::__new(0);
            				}
HXLINE( 603)				::String cervix = (luaFile + HX_(".lua",4a,2a,ba,1e));
HXLINE( 604)				if (::StringTools_obj::endsWith(luaFile,HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 604)					cervix = luaFile;
            				}
HXLINE( 605)				bool doPush = false;
HXLINE( 607)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(cervix))) {
HXLINE( 609)					cervix = ::Paths_obj::modFolders(cervix);
HXLINE( 610)					doPush = true;
            				}
            				else {
HXLINE( 612)					if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 614)						doPush = true;
            					}
            					else {
HXLINE( 617)						::String file = cervix;
HXDLIN( 617)						if (::hx::IsNull( file )) {
HXLINE( 617)							file = HX_("",00,00,00,00);
            						}
HXDLIN( 617)						cervix = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE( 618)						if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 619)							doPush = true;
            						}
            					}
            				}
HXLINE( 628)				if (doPush) {
HXLINE( 630)					int _g = 0;
HXDLIN( 630)					::Array< ::Dynamic> _g1 = ::PlayState_obj::instance->luaArray;
HXDLIN( 630)					while((_g < _g1->length)){
HXLINE( 630)						 ::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN( 630)						_g = (_g + 1);
HXLINE( 632)						if ((luaInstance->scriptName == cervix)) {
HXLINE( 634)							luaInstance->call(funcName,args);
HXLINE( 636)							return;
            						}
            					}
            				}
HXLINE( 641)				lua_pushnil(_gthis->lua);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 587)			 cpp::Reference<lua_State> l32 = this->lua;
HXDLIN( 587)			::llua::Lua_helper_obj::callbacks->set(HX_("callScript",49,25,90,72), ::Dynamic(new _hx_Closure_32(_gthis)));
HXDLIN( 587)			linc::callbacks::add_callback_function(l32,HX_("callScript",49,25,90,72));
            		}
HXLINE( 645)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_33, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String luaFile,::String global){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_645_new)
HXLINE( 646)				if (::hx::IsNull( luaFile )) {
HXLINE( 648)					linc::lual::error(_gthis->lua,HX_("bad argument #1 to 'getGlobalFromScript' (string expected, got nil)",1a,ec,57,4d));
HXLINE( 650)					return;
            				}
HXLINE( 652)				if (::hx::IsNull( global )) {
HXLINE( 654)					linc::lual::error(_gthis->lua,HX_("bad argument #2 to 'getGlobalFromScript' (string expected, got nil)",9b,f6,58,e2));
HXLINE( 656)					return;
            				}
HXLINE( 658)				::String cervix = (luaFile + HX_(".lua",4a,2a,ba,1e));
HXLINE( 659)				if (::StringTools_obj::endsWith(luaFile,HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 659)					cervix = luaFile;
            				}
HXLINE( 660)				bool doPush = false;
HXLINE( 662)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(cervix))) {
HXLINE( 664)					cervix = ::Paths_obj::modFolders(cervix);
HXLINE( 665)					doPush = true;
            				}
            				else {
HXLINE( 667)					if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 669)						doPush = true;
            					}
            					else {
HXLINE( 672)						::String file = cervix;
HXDLIN( 672)						if (::hx::IsNull( file )) {
HXLINE( 672)							file = HX_("",00,00,00,00);
            						}
HXDLIN( 672)						cervix = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE( 673)						if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 674)							doPush = true;
            						}
            					}
            				}
HXLINE( 683)				if (doPush) {
HXLINE( 685)					int _g = 0;
HXDLIN( 685)					::Array< ::Dynamic> _g1 = ::PlayState_obj::instance->luaArray;
HXDLIN( 685)					while((_g < _g1->length)){
HXLINE( 685)						 ::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN( 685)						_g = (_g + 1);
HXLINE( 687)						if ((luaInstance->scriptName == cervix)) {
HXLINE( 689)							lua_getglobal(luaInstance->lua,global);
HXLINE( 690)							if ((lua_isnumber(luaInstance->lua,-1) != 0)) {
HXLINE( 691)								 cpp::Reference<lua_State> _gthis1 = _gthis->lua;
HXDLIN( 691)								lua_pushnumber(_gthis1,lua_tonumber(luaInstance->lua,-1));
            							}
            							else {
HXLINE( 692)								if ((lua_isstring(luaInstance->lua,-1) != 0)) {
HXLINE( 693)									 cpp::Reference<lua_State> _gthis2 = _gthis->lua;
HXDLIN( 693)									lua_pushstring(_gthis2,linc::lua::tostring(luaInstance->lua,-1));
            								}
            								else {
HXLINE( 694)									if ((lua_isboolean(luaInstance->lua,-1) != 0)) {
HXLINE( 695)										 cpp::Reference<lua_State> l = _gthis->lua;
HXDLIN( 695)										int _hx_tmp;
HXDLIN( 695)										if (((lua_toboolean(luaInstance->lua,-1) != 0) == true)) {
HXLINE( 695)											_hx_tmp = 1;
            										}
            										else {
HXLINE( 695)											_hx_tmp = 0;
            										}
HXDLIN( 695)										lua_pushboolean(l,_hx_tmp);
            									}
            									else {
HXLINE( 697)										lua_pushnil(_gthis->lua);
            									}
            								}
            							}
HXLINE( 701)							lua_pop(luaInstance->lua,1);
HXLINE( 703)							return;
            						}
            					}
            				}
HXLINE( 708)				lua_pushnil(_gthis->lua);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 645)			 cpp::Reference<lua_State> l33 = this->lua;
HXDLIN( 645)			::llua::Lua_helper_obj::callbacks->set(HX_("getGlobalFromScript",0e,ab,38,9e), ::Dynamic(new _hx_Closure_33(_gthis)));
HXDLIN( 645)			linc::callbacks::add_callback_function(l33,HX_("getGlobalFromScript",0e,ab,38,9e));
            		}
HXLINE( 710)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String luaFile,::String global, ::Dynamic val){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_710_new)
HXLINE( 711)				::String cervix = (luaFile + HX_(".lua",4a,2a,ba,1e));
HXLINE( 712)				if (::StringTools_obj::endsWith(luaFile,HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 712)					cervix = luaFile;
            				}
HXLINE( 713)				bool doPush = false;
HXLINE( 715)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(cervix))) {
HXLINE( 717)					cervix = ::Paths_obj::modFolders(cervix);
HXLINE( 718)					doPush = true;
            				}
            				else {
HXLINE( 720)					if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 722)						doPush = true;
            					}
            					else {
HXLINE( 725)						::String file = cervix;
HXDLIN( 725)						if (::hx::IsNull( file )) {
HXLINE( 725)							file = HX_("",00,00,00,00);
            						}
HXDLIN( 725)						cervix = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE( 726)						if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 727)							doPush = true;
            						}
            					}
            				}
HXLINE( 736)				if (doPush) {
HXLINE( 738)					int _g = 0;
HXDLIN( 738)					::Array< ::Dynamic> _g1 = ::PlayState_obj::instance->luaArray;
HXDLIN( 738)					while((_g < _g1->length)){
HXLINE( 738)						 ::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN( 738)						_g = (_g + 1);
HXLINE( 740)						if ((luaInstance->scriptName == cervix)) {
HXLINE( 742)							luaInstance->set(global,val);
            						}
            					}
            				}
HXLINE( 747)				lua_pushnil(_gthis->lua);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE( 710)			 cpp::Reference<lua_State> l34 = this->lua;
HXDLIN( 710)			::llua::Lua_helper_obj::callbacks->set(HX_("setGlobalFromScript",1a,9e,d5,da), ::Dynamic(new _hx_Closure_34(_gthis)));
HXDLIN( 710)			linc::callbacks::add_callback_function(l34,HX_("setGlobalFromScript",1a,9e,d5,da));
            		}
HXLINE( 833)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_35) HXARGC(1)
            			bool _hx_run(::String luaFile){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_833_new)
HXLINE( 834)				::String cervix = (luaFile + HX_(".lua",4a,2a,ba,1e));
HXLINE( 835)				if (::StringTools_obj::endsWith(luaFile,HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 835)					cervix = luaFile;
            				}
HXLINE( 836)				bool doPush = false;
HXLINE( 838)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(cervix))) {
HXLINE( 840)					cervix = ::Paths_obj::modFolders(cervix);
HXLINE( 841)					doPush = true;
            				}
            				else {
HXLINE( 843)					if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 845)						doPush = true;
            					}
            					else {
HXLINE( 848)						::String file = cervix;
HXDLIN( 848)						if (::hx::IsNull( file )) {
HXLINE( 848)							file = HX_("",00,00,00,00);
            						}
HXDLIN( 848)						cervix = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE( 849)						if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 850)							doPush = true;
            						}
            					}
            				}
HXLINE( 860)				if (doPush) {
HXLINE( 862)					int _g = 0;
HXDLIN( 862)					::Array< ::Dynamic> _g1 = ::PlayState_obj::instance->luaArray;
HXDLIN( 862)					while((_g < _g1->length)){
HXLINE( 862)						 ::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN( 862)						_g = (_g + 1);
HXLINE( 864)						if ((luaInstance->scriptName == cervix)) {
HXLINE( 865)							return true;
            						}
            					}
            				}
HXLINE( 869)				return false;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 833)			 cpp::Reference<lua_State> l35 = this->lua;
HXDLIN( 833)			::llua::Lua_helper_obj::callbacks->set(HX_("isRunning",35,eb,67,ef), ::Dynamic(new _hx_Closure_35()));
HXDLIN( 833)			linc::callbacks::add_callback_function(l35,HX_("isRunning",35,eb,67,ef));
            		}
HXLINE( 873)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String luaFile, ::Dynamic __o_ignoreAlreadyRunning){
            		 ::Dynamic ignoreAlreadyRunning = __o_ignoreAlreadyRunning;
            		if (::hx::IsNull(__o_ignoreAlreadyRunning)) ignoreAlreadyRunning = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_873_new)
HXLINE( 874)				::String cervix = (luaFile + HX_(".lua",4a,2a,ba,1e));
HXLINE( 875)				if (::StringTools_obj::endsWith(luaFile,HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 875)					cervix = luaFile;
            				}
HXLINE( 876)				bool doPush = false;
HXLINE( 878)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(cervix))) {
HXLINE( 880)					cervix = ::Paths_obj::modFolders(cervix);
HXLINE( 881)					doPush = true;
            				}
            				else {
HXLINE( 883)					if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 885)						doPush = true;
            					}
            					else {
HXLINE( 888)						::String file = cervix;
HXDLIN( 888)						if (::hx::IsNull( file )) {
HXLINE( 888)							file = HX_("",00,00,00,00);
            						}
HXDLIN( 888)						cervix = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE( 889)						if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 890)							doPush = true;
            						}
            					}
            				}
HXLINE( 900)				if (doPush) {
HXLINE( 902)					if (!(( (bool)(ignoreAlreadyRunning) ))) {
HXLINE( 904)						int _g = 0;
HXDLIN( 904)						::Array< ::Dynamic> _g1 = ::PlayState_obj::instance->luaArray;
HXDLIN( 904)						while((_g < _g1->length)){
HXLINE( 904)							 ::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN( 904)							_g = (_g + 1);
HXLINE( 906)							if ((luaInstance->scriptName == cervix)) {
HXLINE( 908)								_gthis->luaTrace(((HX_("addLuaScript: The script \"",24,83,49,8c) + cervix) + HX_("\" is already running!",c2,b4,3c,35)),null(),null(),null());
HXLINE( 909)								return;
            							}
            						}
            					}
HXLINE( 913)					::Array< ::Dynamic> _hx_tmp = ::PlayState_obj::instance->luaArray;
HXDLIN( 913)					_hx_tmp->push( ::FunkinLua_obj::__alloc( HX_CTX ,cervix));
HXLINE( 914)					return;
            				}
HXLINE( 916)				_gthis->luaTrace(HX_("addLuaScript: Script doesn't exist!",55,15,bb,80),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 873)			 cpp::Reference<lua_State> l36 = this->lua;
HXDLIN( 873)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaScript",82,57,d1,5e), ::Dynamic(new _hx_Closure_36(_gthis)));
HXDLIN( 873)			linc::callbacks::add_callback_function(l36,HX_("addLuaScript",82,57,d1,5e));
            		}
HXLINE( 918)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_37, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String luaFile, ::Dynamic __o_ignoreAlreadyRunning){
            		 ::Dynamic ignoreAlreadyRunning = __o_ignoreAlreadyRunning;
            		if (::hx::IsNull(__o_ignoreAlreadyRunning)) ignoreAlreadyRunning = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_918_new)
HXLINE( 919)				::String cervix = (luaFile + HX_(".lua",4a,2a,ba,1e));
HXLINE( 920)				if (::StringTools_obj::endsWith(luaFile,HX_(".lua",4a,2a,ba,1e))) {
HXLINE( 920)					cervix = luaFile;
            				}
HXLINE( 921)				bool doPush = false;
HXLINE( 923)				if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(cervix))) {
HXLINE( 925)					cervix = ::Paths_obj::modFolders(cervix);
HXLINE( 926)					doPush = true;
            				}
            				else {
HXLINE( 928)					if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 930)						doPush = true;
            					}
            					else {
HXLINE( 933)						::String file = cervix;
HXDLIN( 933)						if (::hx::IsNull( file )) {
HXLINE( 933)							file = HX_("",00,00,00,00);
            						}
HXDLIN( 933)						cervix = (HX_("assets/",4c,2a,dc,36) + file);
HXLINE( 934)						if (::sys::FileSystem_obj::exists(cervix)) {
HXLINE( 935)							doPush = true;
            						}
            					}
            				}
HXLINE( 945)				if (doPush) {
HXLINE( 947)					if (!(( (bool)(ignoreAlreadyRunning) ))) {
HXLINE( 949)						int _g = 0;
HXDLIN( 949)						::Array< ::Dynamic> _g1 = ::PlayState_obj::instance->luaArray;
HXDLIN( 949)						while((_g < _g1->length)){
HXLINE( 949)							 ::FunkinLua luaInstance = _g1->__get(_g).StaticCast<  ::FunkinLua >();
HXDLIN( 949)							_g = (_g + 1);
HXLINE( 951)							if ((luaInstance->scriptName == cervix)) {
HXLINE( 955)								::PlayState_obj::instance->luaArray->remove(luaInstance);
HXLINE( 956)								return;
            							}
            						}
            					}
HXLINE( 960)					return;
            				}
HXLINE( 962)				_gthis->luaTrace(HX_("removeLuaScript: Script doesn't exist!",78,2b,d9,17),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 918)			 cpp::Reference<lua_State> l37 = this->lua;
HXDLIN( 918)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaScript",ff,d0,9b,a0), ::Dynamic(new _hx_Closure_37(_gthis)));
HXDLIN( 918)			linc::callbacks::add_callback_function(l37,HX_("removeLuaScript",ff,d0,9b,a0));
            		}
HXLINE( 965)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::FunkinLua,_gthis) HXARGC(1)
            			 ::Dynamic _hx_run(::String codeToRun){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_965_new)
HXLINE( 966)				 ::Dynamic retVal = null();
HXLINE( 969)				_gthis->initHaxeModule();
HXLINE( 970)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 971)					retVal = ::FunkinLua_obj::hscript->execute(codeToRun);
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 973)						 ::Dynamic e = _g;
HXLINE( 974)						{
HXLINE( 974)							 ::FunkinLua _gthis1 = _gthis;
HXDLIN( 974)							::String _hx_tmp = (((_gthis->scriptName + HX_(":",3a,00,00,00)) + _gthis->lastCalledFunction) + HX_(" - ",73,6f,18,00));
HXDLIN( 974)							_gthis1->luaTrace((_hx_tmp + ::Std_obj::string(e)),false,false,-65536);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 980)				bool _hx_tmp1;
HXDLIN( 980)				if (::hx::IsNotNull( retVal )) {
HXLINE( 980)					_hx_tmp1 = !(::FunkinLua_obj::isOfTypes(retVal,::cpp::VirtualArray_obj::__new(5)->init(0,::hx::ClassOf< bool >())->init(1,::hx::ClassOf< int >())->init(2,::hx::ClassOf< ::Float >())->init(3,::hx::ClassOf< ::String >())->init(4,::hx::ArrayBase::__mClass)));
            				}
            				else {
HXLINE( 980)					_hx_tmp1 = false;
            				}
HXDLIN( 980)				if (_hx_tmp1) {
HXLINE( 980)					retVal = null();
            				}
HXLINE( 981)				if (::hx::IsNull( retVal )) {
HXLINE( 981)					lua_pushnil(_gthis->lua);
            				}
HXLINE( 982)				return retVal;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 965)			 cpp::Reference<lua_State> l38 = this->lua;
HXDLIN( 965)			::llua::Lua_helper_obj::callbacks->set(HX_("runHaxeCode",de,82,8b,0f), ::Dynamic(new _hx_Closure_38(_gthis)));
HXDLIN( 965)			linc::callbacks::add_callback_function(l38,HX_("runHaxeCode",de,82,8b,0f));
            		}
HXLINE( 985)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_39, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String libName,::String __o_libPackage){
            		::String libPackage = __o_libPackage;
            		if (::hx::IsNull(__o_libPackage)) libPackage = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_985_new)
HXLINE( 987)				_gthis->initHaxeModule();
HXLINE( 988)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 989)					::String str = HX_("",00,00,00,00);
HXLINE( 990)					if ((libPackage.length > 0)) {
HXLINE( 991)						str = (libPackage + HX_(".",2e,00,00,00));
            					}
HXLINE( 993)					{
HXLINE( 993)						::Dynamic this1 = ::FunkinLua_obj::hscript->get_variables();
HXDLIN( 993)						( ( ::haxe::ds::StringMap)(this1) )->set(libName,( ( ::Dynamic)(::Type_obj::resolveClass((str + libName))) ));
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 995)						 ::Dynamic e = _g;
HXLINE( 996)						{
HXLINE( 996)							 ::FunkinLua _gthis1 = _gthis;
HXDLIN( 996)							::String _hx_tmp = (((_gthis->scriptName + HX_(":",3a,00,00,00)) + _gthis->lastCalledFunction) + HX_(" - ",73,6f,18,00));
HXDLIN( 996)							_gthis1->luaTrace((_hx_tmp + ::Std_obj::string(e)),false,false,-65536);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE( 985)			 cpp::Reference<lua_State> l39 = this->lua;
HXDLIN( 985)			::llua::Lua_helper_obj::callbacks->set(HX_("addHaxeLibrary",d4,92,3b,4b), ::Dynamic(new _hx_Closure_39(_gthis)));
HXDLIN( 985)			linc::callbacks::add_callback_function(l39,HX_("addHaxeLibrary",d4,92,3b,4b));
            		}
HXLINE(1001)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_40) HXARGC(2)
            			void _hx_run(::String name, ::Dynamic __o_difficultyNum){
            		 ::Dynamic difficultyNum = __o_difficultyNum;
            		if (::hx::IsNull(__o_difficultyNum)) difficultyNum = -1;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1001_new)
HXLINE(1002)				bool _hx_tmp;
HXDLIN(1002)				if (::hx::IsNotNull( name )) {
HXLINE(1002)					_hx_tmp = (name.length < 1);
            				}
            				else {
HXLINE(1002)					_hx_tmp = true;
            				}
HXDLIN(1002)				if (_hx_tmp) {
HXLINE(1003)					name = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
            				}
HXLINE(1004)				if (::hx::IsEq( difficultyNum,-1 )) {
HXLINE(1005)					difficultyNum = ::PlayState_obj::storyDifficulty;
            				}
HXLINE(1007)				::String poop = ::Highscore_obj::formatSong(name,( (int)(difficultyNum) ));
HXLINE(1008)				::PlayState_obj::SONG = ::Song_obj::loadFromJson(poop,name);
HXLINE(1009)				::PlayState_obj::storyDifficulty = ( (int)(difficultyNum) );
HXLINE(1010)				::PlayState_obj::instance->persistentUpdate = false;
HXLINE(1011)				::MusicBeatState_obj::switchState(::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false));
HXLINE(1013)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(1014)				::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(1015)				if (::hx::IsNotNull( ::PlayState_obj::instance->vocals )) {
HXLINE(1017)					::PlayState_obj::instance->vocals->pause();
HXLINE(1018)					::PlayState_obj::instance->vocals->set_volume(( (Float)(0) ));
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1001)			 cpp::Reference<lua_State> l40 = this->lua;
HXDLIN(1001)			::llua::Lua_helper_obj::callbacks->set(HX_("loadSong",1b,f5,f7,bc), ::Dynamic(new _hx_Closure_40()));
HXDLIN(1001)			linc::callbacks::add_callback_function(l40,HX_("loadSong",1b,f5,f7,bc));
            		}
HXLINE(1022)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_41) HXARGC(4)
            			void _hx_run(::String variable,::String image, ::Dynamic __o_gridX, ::Dynamic __o_gridY){
            		 ::Dynamic gridX = __o_gridX;
            		if (::hx::IsNull(__o_gridX)) gridX = 0;
            		 ::Dynamic gridY = __o_gridY;
            		if (::hx::IsNull(__o_gridY)) gridY = 0;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1022_new)
HXLINE(1023)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1024)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1025)				bool animated;
HXDLIN(1025)				if (::hx::IsEq( gridX,0 )) {
HXLINE(1025)					animated = ::hx::IsNotEq( gridY,0 );
            				}
            				else {
HXLINE(1025)					animated = true;
            				}
HXLINE(1027)				if ((killMe->length > 1)) {
HXLINE(1028)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1028)					spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1031)				bool _hx_tmp;
HXDLIN(1031)				bool _hx_tmp1;
HXDLIN(1031)				if (::hx::IsNotNull( spr )) {
HXLINE(1031)					_hx_tmp1 = ::hx::IsNotNull( image );
            				}
            				else {
HXLINE(1031)					_hx_tmp1 = false;
            				}
HXDLIN(1031)				if (_hx_tmp1) {
HXLINE(1031)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE(1031)					_hx_tmp = false;
            				}
HXDLIN(1031)				if (_hx_tmp) {
HXLINE(1033)					::String library = null();
HXDLIN(1033)					 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(image,library);
HXDLIN(1033)					spr->loadGraphic(returnAsset,animated,gridX,gridY,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1022)			 cpp::Reference<lua_State> l41 = this->lua;
HXDLIN(1022)			::llua::Lua_helper_obj::callbacks->set(HX_("loadGraphic",22,19,a5,44), ::Dynamic(new _hx_Closure_41()));
HXDLIN(1022)			linc::callbacks::add_callback_function(l41,HX_("loadGraphic",22,19,a5,44));
            		}
HXLINE(1036)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_42, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String variable,::String image,::String __o_spriteType){
            		::String spriteType = __o_spriteType;
            		if (::hx::IsNull(__o_spriteType)) spriteType = HX_("sparrow",0c,3c,ac,9b);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1036_new)
HXLINE(1037)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1038)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1039)				if ((killMe->length > 1)) {
HXLINE(1040)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1040)					spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1043)				bool _hx_tmp;
HXDLIN(1043)				bool _hx_tmp1;
HXDLIN(1043)				if (::hx::IsNotNull( spr )) {
HXLINE(1043)					_hx_tmp1 = ::hx::IsNotNull( image );
            				}
            				else {
HXLINE(1043)					_hx_tmp1 = false;
            				}
HXDLIN(1043)				if (_hx_tmp1) {
HXLINE(1043)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE(1043)					_hx_tmp = false;
            				}
HXDLIN(1043)				if (_hx_tmp) {
HXLINE(1045)					_gthis->loadFrames(spr,image,spriteType);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1036)			 cpp::Reference<lua_State> l42 = this->lua;
HXDLIN(1036)			::llua::Lua_helper_obj::callbacks->set(HX_("loadFrames",6c,de,b0,61), ::Dynamic(new _hx_Closure_42(_gthis)));
HXDLIN(1036)			linc::callbacks::add_callback_function(l42,HX_("loadFrames",6c,de,b0,61));
            		}
HXLINE(1049)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_43, ::FunkinLua,_gthis) HXARGC(1)
            			 ::Dynamic _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1049_new)
HXLINE(1050)				 ::Dynamic result = null();
HXLINE(1051)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1052)				if ((killMe->length > 1)) {
HXLINE(1053)					 ::Dynamic result1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1053)					result = ::FunkinLua_obj::getVarInArray(result1,killMe->__get((killMe->length - 1)));
            				}
            				else {
HXLINE(1055)					 ::flixel::FlxState result2;
HXDLIN(1055)					if (::PlayState_obj::instance->isDead) {
HXLINE(1055)						result2 = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1055)						result2 = ::PlayState_obj::instance;
            					}
HXDLIN(1055)					result = ::FunkinLua_obj::getVarInArray(result2,variable);
            				}
HXLINE(1057)				if (::hx::IsNull( result )) {
HXLINE(1057)					lua_pushnil(_gthis->lua);
            				}
HXLINE(1058)				return result;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1049)			 cpp::Reference<lua_State> l43 = this->lua;
HXDLIN(1049)			::llua::Lua_helper_obj::callbacks->set(HX_("getProperty",0b,0b,2c,d2), ::Dynamic(new _hx_Closure_43(_gthis)));
HXDLIN(1049)			linc::callbacks::add_callback_function(l43,HX_("getProperty",0b,0b,2c,d2));
            		}
HXLINE(1060)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_44) HXARGC(2)
            			bool _hx_run(::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1060_new)
HXLINE(1061)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1062)				if ((killMe->length > 1)) {
HXLINE(1063)					 ::Dynamic _hx_tmp = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1063)					::FunkinLua_obj::setVarInArray(_hx_tmp,killMe->__get((killMe->length - 1)),value);
HXLINE(1064)					return true;
            				}
HXLINE(1066)				 ::flixel::FlxState _hx_tmp1;
HXDLIN(1066)				if (::PlayState_obj::instance->isDead) {
HXLINE(1066)					_hx_tmp1 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1066)					_hx_tmp1 = ::PlayState_obj::instance;
            				}
HXDLIN(1066)				::FunkinLua_obj::setVarInArray(_hx_tmp1,variable,value);
HXLINE(1067)				return true;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1060)			 cpp::Reference<lua_State> l44 = this->lua;
HXDLIN(1060)			::llua::Lua_helper_obj::callbacks->set(HX_("setProperty",17,12,99,dc), ::Dynamic(new _hx_Closure_44()));
HXDLIN(1060)			linc::callbacks::add_callback_function(l44,HX_("setProperty",17,12,99,dc));
            		}
HXLINE(1069)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_45, ::FunkinLua,_gthis) HXARGC(3)
            			 ::Dynamic _hx_run(::String obj,int index, ::Dynamic variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1069_new)
HXLINE(1070)				::Array< ::String > shitMyPants = obj.split(HX_(".",2e,00,00,00));
HXLINE(1071)				 ::flixel::FlxState realObject;
HXDLIN(1071)				if (::PlayState_obj::instance->isDead) {
HXLINE(1071)					realObject = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1071)					realObject = ::PlayState_obj::instance;
            				}
HXDLIN(1071)				 ::Dynamic realObject1 = ::Reflect_obj::getProperty(realObject,obj);
HXLINE(1072)				if ((shitMyPants->length > 1)) {
HXLINE(1073)					realObject1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(shitMyPants,true,false);
            				}
HXLINE(1076)				if (::Std_obj::isOfType(realObject1,::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE(1078)					 ::Dynamic result = _gthis->getGroupStuff( ::Dynamic(realObject1->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ));
HXLINE(1079)					if (::hx::IsNull( result )) {
HXLINE(1079)						lua_pushnil(_gthis->lua);
            					}
HXLINE(1080)					return result;
            				}
HXLINE(1084)				 ::Dynamic leArray = realObject1->__GetItem(index);
HXLINE(1085)				if (::hx::IsNotNull( leArray )) {
HXLINE(1086)					 ::Dynamic result1 = null();
HXLINE(1087)					if (::hx::IsPointerEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE(1088)						result1 = leArray->__GetItem(( (int)(variable) ));
            					}
            					else {
HXLINE(1090)						result1 = _gthis->getGroupStuff(leArray,( (::String)(variable) ));
            					}
HXLINE(1092)					if (::hx::IsNull( result1 )) {
HXLINE(1092)						lua_pushnil(_gthis->lua);
            					}
HXLINE(1093)					return result1;
            				}
HXLINE(1095)				_gthis->luaTrace(((((HX_("getPropertyFromGroup: Object #",b2,4e,2c,97) + index) + HX_(" from group: ",0f,87,ba,2b)) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(1096)				lua_pushnil(_gthis->lua);
HXLINE(1097)				return null();
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(1069)			 cpp::Reference<lua_State> l45 = this->lua;
HXDLIN(1069)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromGroup",ea,38,fe,ee), ::Dynamic(new _hx_Closure_45(_gthis)));
HXDLIN(1069)			linc::callbacks::add_callback_function(l45,HX_("getPropertyFromGroup",ea,38,fe,ee));
            		}
HXLINE(1099)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_46, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String obj,int index, ::Dynamic variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1099_new)
HXLINE(1100)				::Array< ::String > shitMyPants = obj.split(HX_(".",2e,00,00,00));
HXLINE(1101)				 ::flixel::FlxState realObject;
HXDLIN(1101)				if (::PlayState_obj::instance->isDead) {
HXLINE(1101)					realObject = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1101)					realObject = ::PlayState_obj::instance;
            				}
HXDLIN(1101)				 ::Dynamic realObject1 = ::Reflect_obj::getProperty(realObject,obj);
HXLINE(1102)				if ((shitMyPants->length > 1)) {
HXLINE(1103)					realObject1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(shitMyPants,true,false);
            				}
HXLINE(1105)				if (::Std_obj::isOfType(realObject1,::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE(1106)					_gthis->setGroupStuff( ::Dynamic(realObject1->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index),( (::String)(variable) ),value);
HXLINE(1107)					return;
            				}
HXLINE(1110)				 ::Dynamic leArray = realObject1->__GetItem(index);
HXLINE(1111)				if (::hx::IsNotNull( leArray )) {
HXLINE(1112)					if (::hx::IsPointerEq( ::Type_obj::_hx_typeof(variable),::ValueType_obj::TInt_dyn() )) {
HXLINE(1113)						leArray->__SetItem(( (int)(variable) ),value);
HXLINE(1114)						return;
            					}
HXLINE(1116)					_gthis->setGroupStuff(leArray,( (::String)(variable) ),value);
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1099)			 cpp::Reference<lua_State> l46 = this->lua;
HXDLIN(1099)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromGroup",5e,f0,b5,bb), ::Dynamic(new _hx_Closure_46(_gthis)));
HXDLIN(1099)			linc::callbacks::add_callback_function(l46,HX_("setPropertyFromGroup",5e,f0,b5,bb));
            		}
HXLINE(1119)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_47) HXARGC(3)
            			void _hx_run(::String obj,int index, ::Dynamic __o_dontDestroy){
            		bool dontDestroy = __o_dontDestroy.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1119_new)
HXLINE(1120)				 ::flixel::FlxState _hx_tmp;
HXDLIN(1120)				if (::PlayState_obj::instance->isDead) {
HXLINE(1120)					_hx_tmp = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1120)					_hx_tmp = ::PlayState_obj::instance;
            				}
HXDLIN(1120)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_hx_tmp,obj),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE(1121)					 ::flixel::FlxState sex;
HXDLIN(1121)					if (::PlayState_obj::instance->isDead) {
HXLINE(1121)						sex = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1121)						sex = ::PlayState_obj::instance;
            					}
HXDLIN(1121)					 ::Dynamic sex1 =  ::Dynamic(::Reflect_obj::getProperty(sex,obj)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index);
HXLINE(1122)					if (!(dontDestroy)) {
HXLINE(1123)						sex1->__Field(HX_("kill",9e,df,09,47),::hx::paccDynamic)();
            					}
HXLINE(1124)					 ::flixel::FlxState _hx_tmp1;
HXDLIN(1124)					if (::PlayState_obj::instance->isDead) {
HXLINE(1124)						_hx_tmp1 = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1124)						_hx_tmp1 = ::PlayState_obj::instance;
            					}
HXDLIN(1124)					::Reflect_obj::getProperty(_hx_tmp1,obj)->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic)(sex1,true);
HXLINE(1125)					if (!(dontDestroy)) {
HXLINE(1126)						sex1->__Field(HX_("destroy",fa,2c,86,24),::hx::paccDynamic)();
            					}
HXLINE(1127)					return;
            				}
HXLINE(1129)				 ::flixel::FlxState _hx_tmp2;
HXDLIN(1129)				if (::PlayState_obj::instance->isDead) {
HXLINE(1129)					_hx_tmp2 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1129)					_hx_tmp2 = ::PlayState_obj::instance;
            				}
HXDLIN(1129)				 ::Dynamic _hx_tmp3 =  ::Dynamic(::Reflect_obj::getProperty(_hx_tmp2,obj)->__Field(HX_("remove",44,9c,88,04),::hx::paccDynamic));
HXDLIN(1129)				 ::flixel::FlxState _hx_tmp4;
HXDLIN(1129)				if (::PlayState_obj::instance->isDead) {
HXLINE(1129)					_hx_tmp4 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1129)					_hx_tmp4 = ::PlayState_obj::instance;
            				}
HXDLIN(1129)				_hx_tmp3(::Reflect_obj::getProperty(_hx_tmp4,obj)->__GetItem(index));
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1119)			 cpp::Reference<lua_State> l47 = this->lua;
HXDLIN(1119)			::llua::Lua_helper_obj::callbacks->set(HX_("removeFromGroup",91,38,9c,8f), ::Dynamic(new _hx_Closure_47()));
HXDLIN(1119)			linc::callbacks::add_callback_function(l47,HX_("removeFromGroup",91,38,9c,8f));
            		}
HXLINE(1132)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_48) HXARGC(2)
            			 ::Dynamic _hx_run(::String classVar,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1132_new)
HXLINE(1134)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1135)				if ((killMe->length > 1)) {
HXLINE(1136)					::hx::Class coverMeInPiss = ::Type_obj::resolveClass(classVar);
HXDLIN(1136)					 ::Dynamic coverMeInPiss1 = ::FunkinLua_obj::getVarInArray(coverMeInPiss,killMe->__get(0));
HXLINE(1137)					{
HXLINE(1137)						int _g = 1;
HXDLIN(1137)						int _g1 = (killMe->length - 1);
HXDLIN(1137)						while((_g < _g1)){
HXLINE(1137)							_g = (_g + 1);
HXDLIN(1137)							int i = (_g - 1);
HXLINE(1138)							coverMeInPiss1 = ::FunkinLua_obj::getVarInArray(coverMeInPiss1,killMe->__get(i));
            						}
            					}
HXLINE(1140)					return ::FunkinLua_obj::getVarInArray(coverMeInPiss1,killMe->__get((killMe->length - 1)));
            				}
HXLINE(1142)				return ::FunkinLua_obj::getVarInArray(::Type_obj::resolveClass(classVar),variable);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1132)			 cpp::Reference<lua_State> l48 = this->lua;
HXDLIN(1132)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyFromClass",e3,fd,61,9d), ::Dynamic(new _hx_Closure_48()));
HXDLIN(1132)			linc::callbacks::add_callback_function(l48,HX_("getPropertyFromClass",e3,fd,61,9d));
            		}
HXLINE(1144)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_49) HXARGC(3)
            			bool _hx_run(::String classVar,::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1144_new)
HXLINE(1146)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1147)				if ((killMe->length > 1)) {
HXLINE(1148)					::hx::Class coverMeInPiss = ::Type_obj::resolveClass(classVar);
HXDLIN(1148)					 ::Dynamic coverMeInPiss1 = ::FunkinLua_obj::getVarInArray(coverMeInPiss,killMe->__get(0));
HXLINE(1149)					{
HXLINE(1149)						int _g = 1;
HXDLIN(1149)						int _g1 = (killMe->length - 1);
HXDLIN(1149)						while((_g < _g1)){
HXLINE(1149)							_g = (_g + 1);
HXDLIN(1149)							int i = (_g - 1);
HXLINE(1150)							coverMeInPiss1 = ::FunkinLua_obj::getVarInArray(coverMeInPiss1,killMe->__get(i));
            						}
            					}
HXLINE(1152)					::FunkinLua_obj::setVarInArray(coverMeInPiss1,killMe->__get((killMe->length - 1)),value);
HXLINE(1153)					return true;
            				}
HXLINE(1155)				::FunkinLua_obj::setVarInArray(::Type_obj::resolveClass(classVar),variable,value);
HXLINE(1156)				return true;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(1144)			 cpp::Reference<lua_State> l49 = this->lua;
HXDLIN(1144)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyFromClass",57,b5,19,6a), ::Dynamic(new _hx_Closure_49()));
HXDLIN(1144)			linc::callbacks::add_callback_function(l49,HX_("setPropertyFromClass",57,b5,19,6a));
            		}
HXLINE(1160)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_50, ::FunkinLua,_gthis) HXARGC(1)
            			int _hx_run(::String obj){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1160_new)
HXLINE(1161)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(1162)				 ::flixel::FlxBasic leObj = ( ( ::flixel::FlxBasic)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1163)				if ((killMe->length > 1)) {
HXLINE(1164)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1164)					leObj = ( ( ::flixel::FlxBasic)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1167)				if (::hx::IsNotNull( leObj )) {
HXLINE(1169)					 ::flixel::FlxState _hx_tmp;
HXDLIN(1169)					if (::PlayState_obj::instance->isDead) {
HXLINE(1169)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1169)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN(1169)					return _hx_tmp->members->indexOf(leObj,null());
            				}
HXLINE(1171)				_gthis->luaTrace(((HX_("getObjectOrder: Object ",02,eb,c9,ed) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(1172)				return -1;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1160)			 cpp::Reference<lua_State> l50 = this->lua;
HXDLIN(1160)			::llua::Lua_helper_obj::callbacks->set(HX_("getObjectOrder",59,60,ee,2b), ::Dynamic(new _hx_Closure_50(_gthis)));
HXDLIN(1160)			linc::callbacks::add_callback_function(l50,HX_("getObjectOrder",59,60,ee,2b));
            		}
HXLINE(1174)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_51, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String obj,int position){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1174_new)
HXLINE(1175)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(1176)				 ::flixel::FlxBasic leObj = ( ( ::flixel::FlxBasic)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1177)				if ((killMe->length > 1)) {
HXLINE(1178)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1178)					leObj = ( ( ::flixel::FlxBasic)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1181)				if (::hx::IsNotNull( leObj )) {
HXLINE(1182)					 ::flixel::FlxState _hx_tmp;
HXDLIN(1182)					if (::PlayState_obj::instance->isDead) {
HXLINE(1182)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1182)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN(1182)					_hx_tmp->remove(leObj,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1183)					 ::flixel::FlxState _hx_tmp1;
HXDLIN(1183)					if (::PlayState_obj::instance->isDead) {
HXLINE(1183)						_hx_tmp1 = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(1183)						_hx_tmp1 = ::PlayState_obj::instance;
            					}
HXDLIN(1183)					_hx_tmp1->insert(position,leObj).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1184)					return;
            				}
HXLINE(1186)				_gthis->luaTrace(((HX_("setObjectOrder: Object ",0e,54,2b,f0) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1174)			 cpp::Reference<lua_State> l51 = this->lua;
HXDLIN(1174)			::llua::Lua_helper_obj::callbacks->set(HX_("setObjectOrder",cd,48,0e,4c), ::Dynamic(new _hx_Closure_51(_gthis)));
HXDLIN(1174)			linc::callbacks::add_callback_function(l51,HX_("setObjectOrder",cd,48,0e,4c));
            		}
HXLINE(1190)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_53, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1190_new)
HXLINE(1191)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE(1192)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_52,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1194_new)
HXLINE(1195)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1196)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1193)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1193)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_52(tag)))));
HXDLIN(1193)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE(1200)					_gthis->luaTrace((HX_("doTweenX: Couldnt find object: ",95,dc,6f,3e) + vars),false,false,-65536);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1190)			 cpp::Reference<lua_State> l52 = this->lua;
HXDLIN(1190)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenX",78,f9,3b,bd), ::Dynamic(new _hx_Closure_53(_gthis)));
HXDLIN(1190)			linc::callbacks::add_callback_function(l52,HX_("doTweenX",78,f9,3b,bd));
            		}
HXLINE(1203)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_55, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1203_new)
HXLINE(1204)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE(1205)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_54,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1207_new)
HXLINE(1208)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1209)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1206)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1206)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_54(tag)))));
HXDLIN(1206)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE(1213)					_gthis->luaTrace((HX_("doTweenY: Couldnt find object: ",b4,bc,ac,ea) + vars),false,false,-65536);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1203)			 cpp::Reference<lua_State> l53 = this->lua;
HXDLIN(1203)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenY",79,f9,3b,bd), ::Dynamic(new _hx_Closure_55(_gthis)));
HXDLIN(1203)			linc::callbacks::add_callback_function(l53,HX_("doTweenY",79,f9,3b,bd));
            		}
HXLINE(1216)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_57, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1216_new)
HXLINE(1217)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE(1218)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_56,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1220_new)
HXLINE(1221)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1222)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1219)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1219)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("angle",d3,43,e2,22),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_56(tag)))));
HXDLIN(1219)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE(1226)					_gthis->luaTrace((HX_("doTweenAngle: Couldnt find object: ",9a,24,39,4e) + vars),false,false,-65536);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1216)			 cpp::Reference<lua_State> l54 = this->lua;
HXDLIN(1216)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenAngle",d3,bc,0e,60), ::Dynamic(new _hx_Closure_57(_gthis)));
HXDLIN(1216)			linc::callbacks::add_callback_function(l54,HX_("doTweenAngle",d3,bc,0e,60));
            		}
HXLINE(1229)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_59, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1229_new)
HXLINE(1230)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE(1231)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_58,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1233_new)
HXLINE(1234)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1235)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1232)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1232)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_58(tag)))));
HXDLIN(1232)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE(1239)					_gthis->luaTrace((HX_("doTweenAlpha: Couldnt find object: ",6f,d2,be,b5) + vars),false,false,-65536);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1229)			 cpp::Reference<lua_State> l55 = this->lua;
HXDLIN(1229)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenAlpha",5e,20,c3,5e), ::Dynamic(new _hx_Closure_59(_gthis)));
HXDLIN(1229)			linc::callbacks::add_callback_function(l55,HX_("doTweenAlpha",5e,20,c3,5e));
            		}
HXLINE(1242)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_61, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1242_new)
HXLINE(1243)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE(1244)				if (::hx::IsNotNull( penisExam )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_60,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1246_new)
HXLINE(1247)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1248)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1245)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1245)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(penisExam, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("zoom",13,a3,f8,50),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_60(tag)))));
HXDLIN(1245)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            				else {
HXLINE(1252)					_gthis->luaTrace((HX_("doTweenZoom: Couldnt find object: ",5a,3f,13,9a) + vars),false,false,-65536);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1242)			 cpp::Reference<lua_State> l56 = this->lua;
HXDLIN(1242)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenZoom",13,4a,be,e0), ::Dynamic(new _hx_Closure_61(_gthis)));
HXDLIN(1242)			linc::callbacks::add_callback_function(l56,HX_("doTweenZoom",13,4a,be,e0));
            		}
HXLINE(1255)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_63, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String vars,::String targetColor,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1255_new)
HXLINE(1256)				 ::Dynamic penisExam = _gthis->tweenShit(tag,vars);
HXLINE(1257)				if (::hx::IsNotNull( penisExam )) {
HXLINE(1258)					int color = ( (int)(::Std_obj::parseInt(targetColor)) );
HXLINE(1259)					if (!(::StringTools_obj::startsWith(targetColor,HX_("0x",48,2a,00,00)))) {
HXLINE(1259)						color = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + targetColor))) );
            					}
HXLINE(1261)					int curColor = ( (int)(penisExam->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic)) );
HXLINE(1262)					{
HXLINE(1262)						Float Value = ( (Float)(penisExam->__Field(HX_("alpha",5e,a7,96,21),::hx::paccDynamic)) );
HXDLIN(1262)						{
HXLINE(1262)							int Value1 = ::Math_obj::round((Value * ( (Float)(255) )));
HXDLIN(1262)							curColor = (curColor & 16777215);
HXDLIN(1262)							int curColor1;
HXDLIN(1262)							if ((Value1 > 255)) {
HXLINE(1262)								curColor1 = 255;
            							}
            							else {
HXLINE(1262)								if ((Value1 < 0)) {
HXLINE(1262)									curColor1 = 0;
            								}
            								else {
HXLINE(1262)									curColor1 = Value1;
            								}
            							}
HXDLIN(1262)							curColor = (curColor | (curColor1 << 24));
            						}
            					}
HXLINE(1263)					{
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_62,::String,tag) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1264_new)
HXLINE(1265)							::PlayState_obj::instance->modchartTweens->remove(tag);
HXLINE(1266)							::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1263)						::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1263)						 ::flixel::tweens::FlxTween value = ::flixel::tweens::FlxTween_obj::color(( ( ::flixel::FlxSprite)(penisExam) ),duration,curColor,color, ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_62(tag)))));
HXDLIN(1263)						( ( ::haxe::ds::StringMap)(this1) )->set(tag,value);
            					}
            				}
            				else {
HXLINE(1270)					_gthis->luaTrace((HX_("doTweenColor: Couldnt find object: ",0a,a9,a2,6b) + vars),false,false,-65536);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1255)			 cpp::Reference<lua_State> l57 = this->lua;
HXDLIN(1255)			::llua::Lua_helper_obj::callbacks->set(HX_("doTweenColor",63,ea,88,87), ::Dynamic(new _hx_Closure_63(_gthis)));
HXDLIN(1255)			linc::callbacks::add_callback_function(l57,HX_("doTweenColor",63,ea,88,87));
            		}
HXLINE(1275)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_65, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1275_new)
HXLINE(1276)				_gthis->cancelTween(tag);
HXLINE(1277)				if ((note < 0)) {
HXLINE(1277)					note = 0;
            				}
HXLINE(1278)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE(1280)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_64,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1282_new)
HXLINE(1283)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1284)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1281)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1281)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("x",78,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_64(tag)))));
HXDLIN(1281)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1275)			 cpp::Reference<lua_State> l58 = this->lua;
HXDLIN(1275)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenX",1f,81,38,c7), ::Dynamic(new _hx_Closure_65(_gthis)));
HXDLIN(1275)			linc::callbacks::add_callback_function(l58,HX_("noteTweenX",1f,81,38,c7));
            		}
HXLINE(1289)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_67, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1289_new)
HXLINE(1290)				_gthis->cancelTween(tag);
HXLINE(1291)				if ((note < 0)) {
HXLINE(1291)					note = 0;
            				}
HXLINE(1292)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE(1294)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_66,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1296_new)
HXLINE(1297)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1298)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1295)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1295)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_66(tag)))));
HXDLIN(1295)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1289)			 cpp::Reference<lua_State> l59 = this->lua;
HXDLIN(1289)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenY",20,81,38,c7), ::Dynamic(new _hx_Closure_67(_gthis)));
HXDLIN(1289)			linc::callbacks::add_callback_function(l59,HX_("noteTweenY",20,81,38,c7));
            		}
HXLINE(1303)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_69, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1303_new)
HXLINE(1304)				_gthis->cancelTween(tag);
HXLINE(1305)				if ((note < 0)) {
HXLINE(1305)					note = 0;
            				}
HXLINE(1306)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE(1308)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_68,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1310_new)
HXLINE(1311)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1312)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1309)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1309)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("angle",d3,43,e2,22),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_68(tag)))));
HXDLIN(1309)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1303)			 cpp::Reference<lua_State> l60 = this->lua;
HXDLIN(1303)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenAngle",fa,a3,45,58), ::Dynamic(new _hx_Closure_69(_gthis)));
HXDLIN(1303)			linc::callbacks::add_callback_function(l60,HX_("noteTweenAngle",fa,a3,45,58));
            		}
HXLINE(1317)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_71, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1317_new)
HXLINE(1318)				_gthis->cancelTween(tag);
HXLINE(1319)				if ((note < 0)) {
HXLINE(1319)					note = 0;
            				}
HXLINE(1320)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE(1322)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_70,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1324_new)
HXLINE(1325)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1326)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1323)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1323)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("direction",3f,62,40,10),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_70(tag)))));
HXDLIN(1323)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1317)			 cpp::Reference<lua_State> l61 = this->lua;
HXDLIN(1317)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenDirection",e6,61,74,1f), ::Dynamic(new _hx_Closure_71(_gthis)));
HXDLIN(1317)			linc::callbacks::add_callback_function(l61,HX_("noteTweenDirection",e6,61,74,1f));
            		}
HXLINE(1331)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_72) HXARGC(1)
            			bool _hx_run(::String button){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1331_new)
HXLINE(1332)				bool boobs = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
HXLINE(1333)				::String _hx_switch_0 = button;
            				if (  (_hx_switch_0==HX_("middle",55,d3,5e,4c)) ){
HXLINE(1335)					boobs = (::flixel::FlxG_obj::mouse->_middleButton->current == 2);
HXDLIN(1335)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_0==HX_("right",dc,0b,64,e9)) ){
HXLINE(1337)					boobs = (::flixel::FlxG_obj::mouse->_rightButton->current == 2);
HXDLIN(1337)					goto _hx_goto_10;
            				}
            				_hx_goto_10:;
HXLINE(1341)				return boobs;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1331)			 cpp::Reference<lua_State> l62 = this->lua;
HXDLIN(1331)			::llua::Lua_helper_obj::callbacks->set(HX_("mouseClicked",02,c7,d1,db), ::Dynamic(new _hx_Closure_72()));
HXDLIN(1331)			linc::callbacks::add_callback_function(l62,HX_("mouseClicked",02,c7,d1,db));
            		}
HXLINE(1343)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_73) HXARGC(1)
            			bool _hx_run(::String button){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1343_new)
HXLINE(1344)				 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(1344)				bool boobs;
HXDLIN(1344)				if ((_this->current != 1)) {
HXLINE(1344)					boobs = (_this->current == 2);
            				}
            				else {
HXLINE(1344)					boobs = true;
            				}
HXLINE(1345)				::String _hx_switch_1 = button;
            				if (  (_hx_switch_1==HX_("middle",55,d3,5e,4c)) ){
HXLINE(1347)					 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_middleButton;
HXDLIN(1347)					if ((_this1->current != 1)) {
HXLINE(1347)						boobs = (_this1->current == 2);
            					}
            					else {
HXLINE(1347)						boobs = true;
            					}
HXDLIN(1347)					goto _hx_goto_11;
            				}
            				if (  (_hx_switch_1==HX_("right",dc,0b,64,e9)) ){
HXLINE(1349)					 ::flixel::input::mouse::FlxMouseButton _this2 = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN(1349)					if ((_this2->current != 1)) {
HXLINE(1349)						boobs = (_this2->current == 2);
            					}
            					else {
HXLINE(1349)						boobs = true;
            					}
HXDLIN(1349)					goto _hx_goto_11;
            				}
            				_hx_goto_11:;
HXLINE(1351)				return boobs;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1343)			 cpp::Reference<lua_State> l63 = this->lua;
HXDLIN(1343)			::llua::Lua_helper_obj::callbacks->set(HX_("mousePressed",fd,22,8c,1b), ::Dynamic(new _hx_Closure_73()));
HXDLIN(1343)			linc::callbacks::add_callback_function(l63,HX_("mousePressed",fd,22,8c,1b));
            		}
HXLINE(1353)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_74) HXARGC(1)
            			bool _hx_run(::String button){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1353_new)
HXLINE(1354)				bool boobs = (::flixel::FlxG_obj::mouse->_leftButton->current == -1);
HXLINE(1355)				::String _hx_switch_2 = button;
            				if (  (_hx_switch_2==HX_("middle",55,d3,5e,4c)) ){
HXLINE(1357)					boobs = (::flixel::FlxG_obj::mouse->_middleButton->current == -1);
HXDLIN(1357)					goto _hx_goto_12;
            				}
            				if (  (_hx_switch_2==HX_("right",dc,0b,64,e9)) ){
HXLINE(1359)					boobs = (::flixel::FlxG_obj::mouse->_rightButton->current == -1);
HXDLIN(1359)					goto _hx_goto_12;
            				}
            				_hx_goto_12:;
HXLINE(1361)				return boobs;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1353)			 cpp::Reference<lua_State> l64 = this->lua;
HXDLIN(1353)			::llua::Lua_helper_obj::callbacks->set(HX_("mouseReleased",02,88,e8,05), ::Dynamic(new _hx_Closure_74()));
HXDLIN(1353)			linc::callbacks::add_callback_function(l64,HX_("mouseReleased",02,88,e8,05));
            		}
HXLINE(1363)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_76, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1363_new)
HXLINE(1364)				_gthis->cancelTween(tag);
HXLINE(1365)				if ((note < 0)) {
HXLINE(1365)					note = 0;
            				}
HXLINE(1366)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE(1368)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_75,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1370_new)
HXLINE(1371)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1372)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1369)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1369)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("angle",d3,43,e2,22),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_75(tag)))));
HXDLIN(1369)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1363)			 cpp::Reference<lua_State> l65 = this->lua;
HXDLIN(1363)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenAngle",fa,a3,45,58), ::Dynamic(new _hx_Closure_76(_gthis)));
HXDLIN(1363)			linc::callbacks::add_callback_function(l65,HX_("noteTweenAngle",fa,a3,45,58));
            		}
HXLINE(1377)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_78, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,int note, ::Dynamic value,Float duration,::String ease){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1377_new)
HXLINE(1378)				_gthis->cancelTween(tag);
HXLINE(1379)				if ((note < 0)) {
HXLINE(1379)					note = 0;
            				}
HXLINE(1380)				 ::StrumNote testicle = Dynamic( ::PlayState_obj::instance->strumLineNotes->members->__get(::hx::Mod(note,::PlayState_obj::instance->strumLineNotes->length))).StaticCast<  ::StrumNote >();
HXLINE(1382)				if (::hx::IsNotNull( testicle )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_77,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1384_new)
HXLINE(1385)						::PlayState_obj::instance->callOnLuas(HX_("onTweenCompleted",1f,bf,ab,08),::cpp::VirtualArray_obj::__new(1)->init(0,tag),null(),null());
HXLINE(1386)						::PlayState_obj::instance->modchartTweens->remove(tag);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1383)					::Dynamic this1 = ::PlayState_obj::instance->modchartTweens;
HXDLIN(1383)					 ::flixel::tweens::FlxTween value1 = ::flixel::tweens::FlxTween_obj::tween(testicle, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),value)),duration, ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),_gthis->getFlxEaseByString(ease))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_77(tag)))));
HXDLIN(1383)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value1);
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1377)			 cpp::Reference<lua_State> l66 = this->lua;
HXDLIN(1377)			::llua::Lua_helper_obj::callbacks->set(HX_("noteTweenAlpha",85,07,fa,56), ::Dynamic(new _hx_Closure_78(_gthis)));
HXDLIN(1377)			linc::callbacks::add_callback_function(l66,HX_("noteTweenAlpha",85,07,fa,56));
            		}
HXLINE(1392)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_79, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1393_new)
HXLINE(1393)				_gthis->cancelTween(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1392)			 cpp::Reference<lua_State> l67 = this->lua;
HXDLIN(1392)			::llua::Lua_helper_obj::callbacks->set(HX_("cancelTween",91,12,99,b7), ::Dynamic(new _hx_Closure_79(_gthis)));
HXDLIN(1392)			linc::callbacks::add_callback_function(l67,HX_("cancelTween",91,12,99,b7));
            		}
HXLINE(1396)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_81, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag, ::Dynamic __o_time, ::Dynamic __o_loops){
            		Float time = __o_time.Default(1);
            		int loops = __o_loops.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1396_new)
HXLINE(1397)				_gthis->cancelTimer(tag);
HXLINE(1398)				{
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_80,::String,tag) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1398_new)
HXLINE(1399)						if (tmr->finished) {
HXLINE(1400)							::PlayState_obj::instance->modchartTimers->remove(tag);
            						}
HXLINE(1402)						::PlayState_obj::instance->callOnLuas(HX_("onTimerCompleted",85,2e,4a,47),::cpp::VirtualArray_obj::__new(3)->init(0,tag)->init(1,tmr->loops)->init(2,(tmr->loops - tmr->_loopsCounter)),null(),null());
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1398)					::Dynamic this1 = ::PlayState_obj::instance->modchartTimers;
HXDLIN(1398)					 ::flixel::util::FlxTimer value =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(time, ::Dynamic(new _hx_Closure_80(tag)),loops);
HXDLIN(1398)					( ( ::haxe::ds::StringMap)(this1) )->set(tag,value);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1396)			 cpp::Reference<lua_State> l68 = this->lua;
HXDLIN(1396)			::llua::Lua_helper_obj::callbacks->set(HX_("runTimer",7a,f8,6a,18), ::Dynamic(new _hx_Closure_81(_gthis)));
HXDLIN(1396)			linc::callbacks::add_callback_function(l68,HX_("runTimer",7a,f8,6a,18));
            		}
HXLINE(1406)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_82, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1407_new)
HXLINE(1407)				_gthis->cancelTimer(tag);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1406)			 cpp::Reference<lua_State> l69 = this->lua;
HXDLIN(1406)			::llua::Lua_helper_obj::callbacks->set(HX_("cancelTimer",eb,27,5e,ae), ::Dynamic(new _hx_Closure_82(_gthis)));
HXDLIN(1406)			linc::callbacks::add_callback_function(l69,HX_("cancelTimer",eb,27,5e,ae));
            		}
HXLINE(1443)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_83) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1443_new)
HXLINE(1444)				 ::PlayState fh = ::PlayState_obj::instance;
HXDLIN(1444)				fh->songScore = (fh->songScore + value);
HXLINE(1445)				::PlayState_obj::instance->RecalculateRating(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1443)			 cpp::Reference<lua_State> l70 = this->lua;
HXDLIN(1443)			::llua::Lua_helper_obj::callbacks->set(HX_("addScore",71,99,36,f2), ::Dynamic(new _hx_Closure_83()));
HXDLIN(1443)			linc::callbacks::add_callback_function(l70,HX_("addScore",71,99,36,f2));
            		}
HXLINE(1447)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_84) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1447_new)
HXLINE(1448)				 ::PlayState fh = ::PlayState_obj::instance;
HXDLIN(1448)				fh->songMisses = (fh->songMisses + value);
HXLINE(1449)				::PlayState_obj::instance->RecalculateRating(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1447)			 cpp::Reference<lua_State> l71 = this->lua;
HXDLIN(1447)			::llua::Lua_helper_obj::callbacks->set(HX_("addMisses",6b,97,78,0e), ::Dynamic(new _hx_Closure_84()));
HXDLIN(1447)			linc::callbacks::add_callback_function(l71,HX_("addMisses",6b,97,78,0e));
            		}
HXLINE(1451)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_85) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1451_new)
HXLINE(1452)				 ::PlayState fh = ::PlayState_obj::instance;
HXDLIN(1452)				fh->songHits = (fh->songHits + value);
HXLINE(1453)				::PlayState_obj::instance->RecalculateRating(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1451)			 cpp::Reference<lua_State> l72 = this->lua;
HXDLIN(1451)			::llua::Lua_helper_obj::callbacks->set(HX_("addHits",81,85,4b,81), ::Dynamic(new _hx_Closure_85()));
HXDLIN(1451)			linc::callbacks::add_callback_function(l72,HX_("addHits",81,85,4b,81));
            		}
HXLINE(1455)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_86) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1455_new)
HXLINE(1456)				::PlayState_obj::instance->songScore = value;
HXLINE(1457)				::PlayState_obj::instance->RecalculateRating(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1455)			 cpp::Reference<lua_State> l73 = this->lua;
HXDLIN(1455)			::llua::Lua_helper_obj::callbacks->set(HX_("setScore",50,dc,0d,87), ::Dynamic(new _hx_Closure_86()));
HXDLIN(1455)			linc::callbacks::add_callback_function(l73,HX_("setScore",50,dc,0d,87));
            		}
HXLINE(1459)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_87) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1459_new)
HXLINE(1460)				::PlayState_obj::instance->songMisses = value;
HXLINE(1461)				::PlayState_obj::instance->RecalculateRating(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1459)			 cpp::Reference<lua_State> l74 = this->lua;
HXDLIN(1459)			::llua::Lua_helper_obj::callbacks->set(HX_("setMisses",ac,d7,fb,b5), ::Dynamic(new _hx_Closure_87()));
HXDLIN(1459)			linc::callbacks::add_callback_function(l74,HX_("setMisses",ac,d7,fb,b5));
            		}
HXLINE(1463)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_88) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		int value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1463_new)
HXLINE(1464)				::PlayState_obj::instance->songHits = value;
HXLINE(1465)				::PlayState_obj::instance->RecalculateRating(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1463)			 cpp::Reference<lua_State> l75 = this->lua;
HXDLIN(1463)			::llua::Lua_helper_obj::callbacks->set(HX_("setHits",82,83,92,0a), ::Dynamic(new _hx_Closure_88()));
HXDLIN(1463)			linc::callbacks::add_callback_function(l75,HX_("setHits",82,83,92,0a));
            		}
HXLINE(1467)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_89) HXARGC(0)
            			int _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1468_new)
HXLINE(1468)				return ::PlayState_obj::instance->songScore;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(1467)			 cpp::Reference<lua_State> l76 = this->lua;
HXDLIN(1467)			::llua::Lua_helper_obj::callbacks->set(HX_("getScore",dc,82,b0,d8), ::Dynamic(new _hx_Closure_89()));
HXDLIN(1467)			linc::callbacks::add_callback_function(l76,HX_("getScore",dc,82,b0,d8));
            		}
HXLINE(1470)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_90) HXARGC(0)
            			int _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1471_new)
HXLINE(1471)				return ::PlayState_obj::instance->songMisses;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(1470)			 cpp::Reference<lua_State> l77 = this->lua;
HXDLIN(1470)			::llua::Lua_helper_obj::callbacks->set(HX_("getMisses",a0,eb,aa,d2), ::Dynamic(new _hx_Closure_90()));
HXDLIN(1470)			linc::callbacks::add_callback_function(l77,HX_("getMisses",a0,eb,aa,d2));
            		}
HXLINE(1473)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_91) HXARGC(0)
            			int _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1474_new)
HXLINE(1474)				return ::PlayState_obj::instance->songHits;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(1473)			 cpp::Reference<lua_State> l78 = this->lua;
HXDLIN(1473)			::llua::Lua_helper_obj::callbacks->set(HX_("getHits",76,f2,90,17), ::Dynamic(new _hx_Closure_91()));
HXDLIN(1473)			linc::callbacks::add_callback_function(l78,HX_("getHits",76,f2,90,17));
            		}
HXLINE(1477)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_92) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		Float value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1478_new)
HXLINE(1478)				::PlayState_obj::instance->health = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1477)			 cpp::Reference<lua_State> l79 = this->lua;
HXDLIN(1477)			::llua::Lua_helper_obj::callbacks->set(HX_("setHealth",de,9d,ad,5c), ::Dynamic(new _hx_Closure_92()));
HXDLIN(1477)			linc::callbacks::add_callback_function(l79,HX_("setHealth",de,9d,ad,5c));
            		}
HXLINE(1480)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_93) HXARGC(1)
            			void _hx_run( ::Dynamic __o_value){
            		Float value = __o_value.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1480_new)
HXLINE(1481)				 ::PlayState fh = ::PlayState_obj::instance;
HXDLIN(1481)				fh->health = (fh->health + value);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1480)			 cpp::Reference<lua_State> l80 = this->lua;
HXDLIN(1480)			::llua::Lua_helper_obj::callbacks->set(HX_("addHealth",9d,5d,2a,b5), ::Dynamic(new _hx_Closure_93()));
HXDLIN(1480)			linc::callbacks::add_callback_function(l80,HX_("addHealth",9d,5d,2a,b5));
            		}
HXLINE(1483)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_94) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1484_new)
HXLINE(1484)				return ::PlayState_obj::instance->health;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(1483)			 cpp::Reference<lua_State> l81 = this->lua;
HXDLIN(1483)			::llua::Lua_helper_obj::callbacks->set(HX_("getHealth",d2,b1,5c,79), ::Dynamic(new _hx_Closure_94()));
HXDLIN(1483)			linc::callbacks::add_callback_function(l81,HX_("getHealth",d2,b1,5c,79));
            		}
HXLINE(1487)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_95) HXARGC(1)
            			int _hx_run(::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1487_new)
HXLINE(1488)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(1488)					color = (HX_("0xFF",88,89,15,20) + color);
            				}
HXLINE(1489)				int result = ( (int)(::Std_obj::parseInt(color)) );
HXLINE(1490)				return result;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1487)			 cpp::Reference<lua_State> l82 = this->lua;
HXDLIN(1487)			::llua::Lua_helper_obj::callbacks->set(HX_("getColorFromHex",24,62,3b,a4), ::Dynamic(new _hx_Closure_95()));
HXDLIN(1487)			linc::callbacks::add_callback_function(l82,HX_("getColorFromHex",24,62,3b,a4));
            		}
HXLINE(1493)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_96) HXARGC(1)
            			 ::Dynamic _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1495_new)
HXLINE(1495)				return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->justPressed,name);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1493)			 cpp::Reference<lua_State> l83 = this->lua;
HXDLIN(1493)			::llua::Lua_helper_obj::callbacks->set(HX_("keyboardJustPressed",6f,ec,b1,75), ::Dynamic(new _hx_Closure_96()));
HXDLIN(1493)			linc::callbacks::add_callback_function(l83,HX_("keyboardJustPressed",6f,ec,b1,75));
            		}
HXLINE(1497)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_97) HXARGC(1)
            			 ::Dynamic _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1499_new)
HXLINE(1499)				return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->pressed,name);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1497)			 cpp::Reference<lua_State> l84 = this->lua;
HXDLIN(1497)			::llua::Lua_helper_obj::callbacks->set(HX_("keyboardPressed",bb,30,e6,41), ::Dynamic(new _hx_Closure_97()));
HXDLIN(1497)			linc::callbacks::add_callback_function(l84,HX_("keyboardPressed",bb,30,e6,41));
            		}
HXLINE(1501)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_98) HXARGC(1)
            			 ::Dynamic _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1503_new)
HXLINE(1503)				return ::Reflect_obj::getProperty(::flixel::FlxG_obj::keys->justReleased,name);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1501)			 cpp::Reference<lua_State> l85 = this->lua;
HXDLIN(1501)			::llua::Lua_helper_obj::callbacks->set(HX_("keyboardReleased",84,80,5a,6e), ::Dynamic(new _hx_Closure_98()));
HXDLIN(1501)			linc::callbacks::add_callback_function(l85,HX_("keyboardReleased",84,80,5a,6e));
            		}
HXLINE(1506)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_99) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1508_new)
HXLINE(1508)				 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN(1508)				int buttonID;
HXDLIN(1508)				::String s = name;
HXDLIN(1508)				s = s.toUpperCase();
HXDLIN(1508)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE(1508)					buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            				}
            				else {
HXLINE(1508)					buttonID = -1;
            				}
HXDLIN(1508)				return _this->anyHasState(buttonID,2);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1506)			 cpp::Reference<lua_State> l86 = this->lua;
HXDLIN(1506)			::llua::Lua_helper_obj::callbacks->set(HX_("anyGamepadJustPressed",c1,00,a5,a2), ::Dynamic(new _hx_Closure_99()));
HXDLIN(1506)			linc::callbacks::add_callback_function(l86,HX_("anyGamepadJustPressed",c1,00,a5,a2));
            		}
HXLINE(1510)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_100) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1512_new)
HXLINE(1512)				 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN(1512)				int buttonID;
HXDLIN(1512)				::String s = name;
HXDLIN(1512)				s = s.toUpperCase();
HXDLIN(1512)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE(1512)					buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            				}
            				else {
HXLINE(1512)					buttonID = -1;
            				}
HXDLIN(1512)				return _this->anyHasState(buttonID,1);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1510)			 cpp::Reference<lua_State> l87 = this->lua;
HXDLIN(1510)			::llua::Lua_helper_obj::callbacks->set(HX_("anyGamepadPressed",0d,34,40,4f), ::Dynamic(new _hx_Closure_100()));
HXDLIN(1510)			linc::callbacks::add_callback_function(l87,HX_("anyGamepadPressed",0d,34,40,4f));
            		}
HXLINE(1514)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_101) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1516_new)
HXLINE(1516)				 ::flixel::input::gamepad::FlxGamepadManager _this = ::flixel::FlxG_obj::gamepads;
HXDLIN(1516)				int buttonID;
HXDLIN(1516)				::String s = name;
HXDLIN(1516)				s = s.toUpperCase();
HXDLIN(1516)				if (::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->exists(s)) {
HXLINE(1516)					buttonID = ::flixel::input::gamepad::_FlxGamepadInputID::FlxGamepadInputID_Impl__obj::fromStringMap->get_int(s);
            				}
            				else {
HXLINE(1516)					buttonID = -1;
            				}
HXDLIN(1516)				return _this->anyHasState(buttonID,-1);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1514)			 cpp::Reference<lua_State> l88 = this->lua;
HXDLIN(1514)			::llua::Lua_helper_obj::callbacks->set(HX_("anyGamepadReleased",f2,64,c3,0f), ::Dynamic(new _hx_Closure_101()));
HXDLIN(1514)			linc::callbacks::add_callback_function(l88,HX_("anyGamepadReleased",f2,64,c3,0f));
            		}
HXLINE(1519)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_102) HXARGC(2)
            			Float _hx_run(int id, ::Dynamic __o_leftStick){
            		 ::Dynamic leftStick = __o_leftStick;
            		if (::hx::IsNull(__o_leftStick)) leftStick = true;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1520_new)
HXLINE(1521)				 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE(1522)				if (::hx::IsNull( controller )) {
HXLINE(1524)					return ((Float)0.0);
            				}
HXLINE(1526)				int _hx_tmp;
HXDLIN(1526)				if (( (bool)(leftStick) )) {
HXLINE(1526)					_hx_tmp = 19;
            				}
            				else {
HXLINE(1526)					_hx_tmp = 20;
            				}
HXDLIN(1526)				return controller->getAnalogXAxisValue(controller->mapping->getAnalogStick(_hx_tmp));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1519)			 cpp::Reference<lua_State> l89 = this->lua;
HXDLIN(1519)			::llua::Lua_helper_obj::callbacks->set(HX_("gamepadAnalogX",87,a1,7a,a9), ::Dynamic(new _hx_Closure_102()));
HXDLIN(1519)			linc::callbacks::add_callback_function(l89,HX_("gamepadAnalogX",87,a1,7a,a9));
            		}
HXLINE(1528)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_103) HXARGC(2)
            			Float _hx_run(int id, ::Dynamic __o_leftStick){
            		 ::Dynamic leftStick = __o_leftStick;
            		if (::hx::IsNull(__o_leftStick)) leftStick = true;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1529_new)
HXLINE(1530)				 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE(1531)				if (::hx::IsNull( controller )) {
HXLINE(1533)					return ((Float)0.0);
            				}
HXLINE(1535)				int _hx_tmp;
HXDLIN(1535)				if (( (bool)(leftStick) )) {
HXLINE(1535)					_hx_tmp = 19;
            				}
            				else {
HXLINE(1535)					_hx_tmp = 20;
            				}
HXDLIN(1535)				return controller->getYAxisRaw(controller->mapping->getAnalogStick(_hx_tmp));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1528)			 cpp::Reference<lua_State> l90 = this->lua;
HXDLIN(1528)			::llua::Lua_helper_obj::callbacks->set(HX_("gamepadAnalogY",88,a1,7a,a9), ::Dynamic(new _hx_Closure_103()));
HXDLIN(1528)			linc::callbacks::add_callback_function(l90,HX_("gamepadAnalogY",88,a1,7a,a9));
            		}
HXLINE(1537)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_104) HXARGC(2)
            			bool _hx_run(int id,::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1538_new)
HXLINE(1539)				 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE(1540)				if (::hx::IsNull( controller )) {
HXLINE(1542)					return false;
            				}
HXLINE(1544)				return ::hx::IsEq( ::Reflect_obj::getProperty(controller->justPressed,name),true );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1537)			 cpp::Reference<lua_State> l91 = this->lua;
HXDLIN(1537)			::llua::Lua_helper_obj::callbacks->set(HX_("gamepadJustPressed",b5,b6,c3,ba), ::Dynamic(new _hx_Closure_104()));
HXDLIN(1537)			linc::callbacks::add_callback_function(l91,HX_("gamepadJustPressed",b5,b6,c3,ba));
            		}
HXLINE(1546)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_105) HXARGC(2)
            			bool _hx_run(int id,::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1547_new)
HXLINE(1548)				 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE(1549)				if (::hx::IsNull( controller )) {
HXLINE(1551)					return false;
            				}
HXLINE(1553)				return ::hx::IsEq( ::Reflect_obj::getProperty(controller->pressed,name),true );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1546)			 cpp::Reference<lua_State> l92 = this->lua;
HXDLIN(1546)			::llua::Lua_helper_obj::callbacks->set(HX_("gamepadPressed",01,e0,e7,04), ::Dynamic(new _hx_Closure_105()));
HXDLIN(1546)			linc::callbacks::add_callback_function(l92,HX_("gamepadPressed",01,e0,e7,04));
            		}
HXLINE(1555)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_106) HXARGC(2)
            			bool _hx_run(int id,::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1556_new)
HXLINE(1557)				 ::flixel::input::gamepad::FlxGamepad controller = ::flixel::FlxG_obj::gamepads->_activeGamepads->__get(id).StaticCast<  ::flixel::input::gamepad::FlxGamepad >();
HXLINE(1558)				if (::hx::IsNull( controller )) {
HXLINE(1560)					return false;
            				}
HXLINE(1562)				return ::hx::IsEq( ::Reflect_obj::getProperty(controller->justReleased,name),true );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(1555)			 cpp::Reference<lua_State> l93 = this->lua;
HXDLIN(1555)			::llua::Lua_helper_obj::callbacks->set(HX_("gamepadReleased",7e,2e,d2,4c), ::Dynamic(new _hx_Closure_106()));
HXDLIN(1555)			linc::callbacks::add_callback_function(l93,HX_("gamepadReleased",7e,2e,d2,4c));
            		}
HXLINE(1565)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_107) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1565_new)
HXLINE(1566)				bool key = false;
HXLINE(1567)				::String _hx_switch_3 = name;
            				if (  (_hx_switch_3==HX_("accept",08,93,06,0b)) ){
HXLINE(1572)					key = ::PlayState_obj::instance->getControl(HX_("ACCEPT",08,3f,89,bd));
HXDLIN(1572)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("back",27,da,10,41)) ){
HXLINE(1573)					key = ::PlayState_obj::instance->getControl(HX_("BACK",27,a2,d1,2b));
HXDLIN(1573)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("down",62,f8,6d,42)) ){
HXLINE(1569)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_DOWN_P",e0,63,af,91));
HXDLIN(1569)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("left",07,08,b0,47)) ){
HXLINE(1568)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_LEFT_P",c5,66,50,f7));
HXDLIN(1568)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("pause",f6,d6,57,bd)) ){
HXLINE(1574)					key = ::PlayState_obj::instance->getControl(HX_("PAUSE",d6,0e,46,3b));
HXDLIN(1574)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("reset",cf,49,c8,e6)) ){
HXLINE(1575)					key = ::PlayState_obj::instance->getControl(HX_("RESET",af,81,b6,64));
HXDLIN(1575)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("right",dc,0b,64,e9)) ){
HXLINE(1571)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_RIGHT_P",40,79,67,8d));
HXDLIN(1571)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("space",c6,8c,66,81)) ){
HXLINE(1576)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(1576)					key = _this->keyManager->checkStatusUnsafe(32,_this->status);
HXDLIN(1576)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_3==HX_("up",5b,66,00,00)) ){
HXLINE(1570)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_UP_P",d9,58,47,13));
HXDLIN(1570)					goto _hx_goto_13;
            				}
            				_hx_goto_13:;
HXLINE(1578)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1565)			 cpp::Reference<lua_State> l94 = this->lua;
HXDLIN(1565)			::llua::Lua_helper_obj::callbacks->set(HX_("keyJustPressed",77,d2,b7,cd), ::Dynamic(new _hx_Closure_107()));
HXDLIN(1565)			linc::callbacks::add_callback_function(l94,HX_("keyJustPressed",77,d2,b7,cd));
            		}
HXLINE(1580)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_108) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1580_new)
HXLINE(1581)				bool key = false;
HXLINE(1582)				::String _hx_switch_4 = name;
            				if (  (_hx_switch_4==HX_("down",62,f8,6d,42)) ){
HXLINE(1584)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_DOWN",0f,ef,09,08));
HXDLIN(1584)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_4==HX_("left",07,08,b0,47)) ){
HXLINE(1583)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_LEFT",b4,fe,4b,0d));
HXDLIN(1583)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_4==HX_("right",dc,0b,64,e9)) ){
HXLINE(1586)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_RIGHT",6f,ec,3f,0c));
HXDLIN(1586)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_4==HX_("space",c6,8c,66,81)) ){
HXLINE(1587)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(1587)					key = _this->keyManager->checkStatusUnsafe(32,_this->status);
HXDLIN(1587)					goto _hx_goto_14;
            				}
            				if (  (_hx_switch_4==HX_("up",5b,66,00,00)) ){
HXLINE(1585)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_UP",c8,83,48,cd));
HXDLIN(1585)					goto _hx_goto_14;
            				}
            				_hx_goto_14:;
HXLINE(1589)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1580)			 cpp::Reference<lua_State> l95 = this->lua;
HXDLIN(1580)			::llua::Lua_helper_obj::callbacks->set(HX_("keyPressed",c3,72,6e,a8), ::Dynamic(new _hx_Closure_108()));
HXDLIN(1580)			linc::callbacks::add_callback_function(l95,HX_("keyPressed",c3,72,6e,a8));
            		}
HXLINE(1591)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_109) HXARGC(1)
            			bool _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1591_new)
HXLINE(1592)				bool key = false;
HXLINE(1593)				::String _hx_switch_5 = name;
            				if (  (_hx_switch_5==HX_("down",62,f8,6d,42)) ){
HXLINE(1595)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_DOWN_R",e2,63,af,91));
HXDLIN(1595)					goto _hx_goto_15;
            				}
            				if (  (_hx_switch_5==HX_("left",07,08,b0,47)) ){
HXLINE(1594)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_LEFT_R",c7,66,50,f7));
HXDLIN(1594)					goto _hx_goto_15;
            				}
            				if (  (_hx_switch_5==HX_("right",dc,0b,64,e9)) ){
HXLINE(1597)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_RIGHT_R",42,79,67,8d));
HXDLIN(1597)					goto _hx_goto_15;
            				}
            				if (  (_hx_switch_5==HX_("space",c6,8c,66,81)) ){
HXLINE(1598)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXDLIN(1598)					key = _this->keyManager->checkStatusUnsafe(32,_this->status);
HXDLIN(1598)					goto _hx_goto_15;
            				}
            				if (  (_hx_switch_5==HX_("up",5b,66,00,00)) ){
HXLINE(1596)					key = ::PlayState_obj::instance->getControl(HX_("NOTE_UP_R",db,58,47,13));
HXDLIN(1596)					goto _hx_goto_15;
            				}
            				_hx_goto_15:;
HXLINE(1600)				return key;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1591)			 cpp::Reference<lua_State> l96 = this->lua;
HXDLIN(1591)			::llua::Lua_helper_obj::callbacks->set(HX_("keyReleased",7c,05,0c,bf), ::Dynamic(new _hx_Closure_109()));
HXDLIN(1591)			linc::callbacks::add_callback_function(l96,HX_("keyReleased",7c,05,0c,bf));
            		}
HXLINE(1602)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_110) HXARGC(2)
            			void _hx_run(::String name,::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1602_new)
HXLINE(1603)				int charType = 0;
HXLINE(1604)				::String _hx_switch_6 = type.toLowerCase();
            				if (  (_hx_switch_6==HX_("dad",47,36,4c,00)) ){
HXLINE(1605)					charType = 1;
HXDLIN(1605)					goto _hx_goto_16;
            				}
            				if (  (_hx_switch_6==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_6==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1606)					charType = 2;
HXDLIN(1606)					goto _hx_goto_16;
            				}
            				_hx_goto_16:;
HXLINE(1608)				::PlayState_obj::instance->addCharacterToList(name,charType);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1602)			 cpp::Reference<lua_State> l97 = this->lua;
HXDLIN(1602)			::llua::Lua_helper_obj::callbacks->set(HX_("addCharacterToList",e1,1e,4c,45), ::Dynamic(new _hx_Closure_110()));
HXDLIN(1602)			linc::callbacks::add_callback_function(l97,HX_("addCharacterToList",e1,1e,4c,45));
            		}
HXLINE(1610)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_111) HXARGC(1)
            			void _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1611_new)
HXLINE(1611)				::Paths_obj::returnGraphic(name,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1610)			 cpp::Reference<lua_State> l98 = this->lua;
HXDLIN(1610)			::llua::Lua_helper_obj::callbacks->set(HX_("precacheImage",9c,8f,57,a3), ::Dynamic(new _hx_Closure_111()));
HXDLIN(1610)			linc::callbacks::add_callback_function(l98,HX_("precacheImage",9c,8f,57,a3));
            		}
HXLINE(1613)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_112) HXARGC(1)
            			void _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1614_new)
HXLINE(1614)				::CoolUtil_obj::precacheSound(name,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1613)			 cpp::Reference<lua_State> l99 = this->lua;
HXDLIN(1613)			::llua::Lua_helper_obj::callbacks->set(HX_("precacheSound",10,fd,ba,66), ::Dynamic(new _hx_Closure_112()));
HXDLIN(1613)			linc::callbacks::add_callback_function(l99,HX_("precacheSound",10,fd,ba,66));
            		}
HXLINE(1616)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_113) HXARGC(1)
            			void _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1617_new)
HXLINE(1617)				::CoolUtil_obj::precacheMusic(name,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1616)			 cpp::Reference<lua_State> l100 = this->lua;
HXDLIN(1616)			::llua::Lua_helper_obj::callbacks->set(HX_("precacheMusic",e6,40,49,f6), ::Dynamic(new _hx_Closure_113()));
HXDLIN(1616)			linc::callbacks::add_callback_function(l100,HX_("precacheMusic",e6,40,49,f6));
            		}
HXLINE(1619)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_114) HXARGC(3)
            			bool _hx_run(::String name, ::Dynamic arg1, ::Dynamic arg2){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1619_new)
HXLINE(1620)				::String value1 = ( (::String)(arg1) );
HXLINE(1621)				::String value2 = ( (::String)(arg2) );
HXLINE(1622)				::PlayState_obj::instance->triggerEventNote(name,value1,value2);
HXLINE(1624)				return true;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(1619)			 cpp::Reference<lua_State> l101 = this->lua;
HXDLIN(1619)			::llua::Lua_helper_obj::callbacks->set(HX_("triggerEvent",c2,f7,5a,f4), ::Dynamic(new _hx_Closure_114()));
HXDLIN(1619)			linc::callbacks::add_callback_function(l101,HX_("triggerEvent",c2,f7,5a,f4));
            		}
HXLINE(1627)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_115) HXARGC(0)
            			bool _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1627_new)
HXLINE(1628)				::PlayState_obj::instance->startCountdown();
HXLINE(1629)				return true;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(1627)			 cpp::Reference<lua_State> l102 = this->lua;
HXDLIN(1627)			::llua::Lua_helper_obj::callbacks->set(HX_("startCountdown",ef,1f,f0,88), ::Dynamic(new _hx_Closure_115()));
HXDLIN(1627)			linc::callbacks::add_callback_function(l102,HX_("startCountdown",ef,1f,f0,88));
            		}
HXLINE(1631)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_116) HXARGC(0)
            			bool _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1631_new)
HXLINE(1632)				::PlayState_obj::instance->KillNotes();
HXLINE(1633)				::PlayState_obj::instance->endSong();
HXLINE(1634)				return true;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(1631)			 cpp::Reference<lua_State> l103 = this->lua;
HXDLIN(1631)			::llua::Lua_helper_obj::callbacks->set(HX_("endSong",50,dd,7c,2e), ::Dynamic(new _hx_Closure_116()));
HXDLIN(1631)			linc::callbacks::add_callback_function(l103,HX_("endSong",50,dd,7c,2e));
            		}
HXLINE(1636)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_117) HXARGC(1)
            			bool _hx_run( ::Dynamic __o_skipTransition){
            		 ::Dynamic skipTransition = __o_skipTransition;
            		if (::hx::IsNull(__o_skipTransition)) skipTransition = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1636_new)
HXLINE(1637)				::PlayState_obj::instance->persistentUpdate = false;
HXLINE(1638)				::PauseSubState_obj::restartSong(skipTransition);
HXLINE(1639)				return true;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1636)			 cpp::Reference<lua_State> l104 = this->lua;
HXDLIN(1636)			::llua::Lua_helper_obj::callbacks->set(HX_("restartSong",44,ab,b8,45), ::Dynamic(new _hx_Closure_117()));
HXDLIN(1636)			linc::callbacks::add_callback_function(l104,HX_("restartSong",44,ab,b8,45));
            		}
HXLINE(1641)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_118) HXARGC(1)
            			bool _hx_run( ::Dynamic __o_skipTransition){
            		 ::Dynamic skipTransition = __o_skipTransition;
            		if (::hx::IsNull(__o_skipTransition)) skipTransition = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1641_new)
HXLINE(1642)				if (( (bool)(skipTransition) )) {
HXLINE(1644)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(1645)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
            				}
HXLINE(1648)				::PlayState_obj::cancelMusicFadeTween();
HXLINE(1649)				::CustomFadeTransition_obj::nextCamera = ::PlayState_obj::instance->camOther;
HXLINE(1650)				if (::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn) {
HXLINE(1651)					::CustomFadeTransition_obj::nextCamera = null();
            				}
HXLINE(1653)				if (::PlayState_obj::isStoryMode) {
HXLINE(1654)					::MusicBeatState_obj::switchState( ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null()));
            				}
            				else {
HXLINE(1656)					::MusicBeatState_obj::switchState( ::FreeplayState_obj::__alloc( HX_CTX ,null(),null()));
            				}
HXLINE(1658)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1658)				::String library = null();
HXDLIN(1658)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),HX_("freakyMenu",15,c9,93,86),library);
HXDLIN(1658)				_hx_tmp->playMusic(file,null(),null(),null());
HXLINE(1659)				::PlayState_obj::changedDifficulty = false;
HXLINE(1660)				::PlayState_obj::chartingMode = false;
HXLINE(1661)				::PlayState_obj::instance->transitioning = true;
HXLINE(1662)				::WeekData_obj::loadTheFirstEnabledMod();
HXLINE(1663)				return true;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1641)			 cpp::Reference<lua_State> l105 = this->lua;
HXDLIN(1641)			::llua::Lua_helper_obj::callbacks->set(HX_("exitSong",13,2e,1c,0c), ::Dynamic(new _hx_Closure_118()));
HXDLIN(1641)			linc::callbacks::add_callback_function(l105,HX_("exitSong",13,2e,1c,0c));
            		}
HXLINE(1665)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_119) HXARGC(0)
            			Float _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1666_new)
HXLINE(1666)				return ::Conductor_obj::songPosition;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(1665)			 cpp::Reference<lua_State> l106 = this->lua;
HXDLIN(1665)			::llua::Lua_helper_obj::callbacks->set(HX_("getSongPosition",54,33,26,b0), ::Dynamic(new _hx_Closure_119()));
HXDLIN(1665)			linc::callbacks::add_callback_function(l106,HX_("getSongPosition",54,33,26,b0));
            		}
HXLINE(1669)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_120) HXARGC(1)
            			Float _hx_run(::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1670_new)
HXLINE(1670)				::String _hx_switch_7 = type.toLowerCase();
            				if (  (_hx_switch_7==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_7==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1674)					return ::PlayState_obj::instance->gfGroup->x;
HXDLIN(1674)					goto _hx_goto_17;
            				}
            				if (  (_hx_switch_7==HX_("dad",47,36,4c,00)) ||  (_hx_switch_7==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(1672)					return ::PlayState_obj::instance->dadGroup->x;
HXDLIN(1672)					goto _hx_goto_17;
            				}
            				/* default */{
HXLINE(1676)					return ::PlayState_obj::instance->boyfriendGroup->x;
            				}
            				_hx_goto_17:;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1669)			 cpp::Reference<lua_State> l107 = this->lua;
HXDLIN(1669)			::llua::Lua_helper_obj::callbacks->set(HX_("getCharacterX",c5,b4,40,b2), ::Dynamic(new _hx_Closure_120()));
HXDLIN(1669)			linc::callbacks::add_callback_function(l107,HX_("getCharacterX",c5,b4,40,b2));
            		}
HXLINE(1679)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_121) HXARGC(2)
            			void _hx_run(::String type,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1680_new)
HXLINE(1680)				::String _hx_switch_8 = type.toLowerCase();
            				if (  (_hx_switch_8==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_8==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1684)					::PlayState_obj::instance->gfGroup->set_x(value);
HXDLIN(1684)					goto _hx_goto_18;
            				}
            				if (  (_hx_switch_8==HX_("dad",47,36,4c,00)) ||  (_hx_switch_8==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(1682)					::PlayState_obj::instance->dadGroup->set_x(value);
HXDLIN(1682)					goto _hx_goto_18;
            				}
            				/* default */{
HXLINE(1686)					::PlayState_obj::instance->boyfriendGroup->set_x(value);
            				}
            				_hx_goto_18:;
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1679)			 cpp::Reference<lua_State> l108 = this->lua;
HXDLIN(1679)			::llua::Lua_helper_obj::callbacks->set(HX_("setCharacterX",d1,96,46,f7), ::Dynamic(new _hx_Closure_121()));
HXDLIN(1679)			linc::callbacks::add_callback_function(l108,HX_("setCharacterX",d1,96,46,f7));
            		}
HXLINE(1689)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_122) HXARGC(1)
            			Float _hx_run(::String type){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1690_new)
HXLINE(1690)				::String _hx_switch_9 = type.toLowerCase();
            				if (  (_hx_switch_9==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_9==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1694)					return ::PlayState_obj::instance->gfGroup->y;
HXDLIN(1694)					goto _hx_goto_19;
            				}
            				if (  (_hx_switch_9==HX_("dad",47,36,4c,00)) ||  (_hx_switch_9==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(1692)					return ::PlayState_obj::instance->dadGroup->y;
HXDLIN(1692)					goto _hx_goto_19;
            				}
            				/* default */{
HXLINE(1696)					return ::PlayState_obj::instance->boyfriendGroup->y;
            				}
            				_hx_goto_19:;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1689)			 cpp::Reference<lua_State> l109 = this->lua;
HXDLIN(1689)			::llua::Lua_helper_obj::callbacks->set(HX_("getCharacterY",c6,b4,40,b2), ::Dynamic(new _hx_Closure_122()));
HXDLIN(1689)			linc::callbacks::add_callback_function(l109,HX_("getCharacterY",c6,b4,40,b2));
            		}
HXLINE(1699)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_123) HXARGC(2)
            			void _hx_run(::String type,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1700_new)
HXLINE(1700)				::String _hx_switch_10 = type.toLowerCase();
            				if (  (_hx_switch_10==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_10==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1704)					::PlayState_obj::instance->gfGroup->set_y(value);
HXDLIN(1704)					goto _hx_goto_20;
            				}
            				if (  (_hx_switch_10==HX_("dad",47,36,4c,00)) ||  (_hx_switch_10==HX_("opponent",9d,b9,b8,f8)) ){
HXLINE(1702)					::PlayState_obj::instance->dadGroup->set_y(value);
HXDLIN(1702)					goto _hx_goto_20;
            				}
            				/* default */{
HXLINE(1706)					::PlayState_obj::instance->boyfriendGroup->set_y(value);
            				}
            				_hx_goto_20:;
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1699)			 cpp::Reference<lua_State> l110 = this->lua;
HXDLIN(1699)			::llua::Lua_helper_obj::callbacks->set(HX_("setCharacterY",d2,96,46,f7), ::Dynamic(new _hx_Closure_123()));
HXDLIN(1699)			linc::callbacks::add_callback_function(l110,HX_("setCharacterY",d2,96,46,f7));
            		}
HXLINE(1709)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_124) HXARGC(1)
            			bool _hx_run(::String target){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1709_new)
HXLINE(1710)				bool isDad = false;
HXLINE(1711)				if ((target == HX_("dad",47,36,4c,00))) {
HXLINE(1712)					isDad = true;
            				}
HXLINE(1714)				::PlayState_obj::instance->moveCamera(isDad);
HXLINE(1715)				return isDad;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1709)			 cpp::Reference<lua_State> l111 = this->lua;
HXDLIN(1709)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraSetTarget",2e,85,21,cc), ::Dynamic(new _hx_Closure_124()));
HXDLIN(1709)			linc::callbacks::add_callback_function(l111,HX_("cameraSetTarget",2e,85,21,cc));
            		}
HXLINE(1717)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_125, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String camera,Float intensity,Float duration){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1718_new)
HXLINE(1718)				_gthis->cameraFromString(camera)->shake(intensity,duration,null(),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1717)			 cpp::Reference<lua_State> l112 = this->lua;
HXDLIN(1717)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraShake",e1,d1,62,70), ::Dynamic(new _hx_Closure_125(_gthis)));
HXDLIN(1717)			linc::callbacks::add_callback_function(l112,HX_("cameraShake",e1,d1,62,70));
            		}
HXLINE(1721)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_126, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String camera,::String color,Float duration,bool forced){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1721_new)
HXLINE(1722)				Float colorNum = ( (Float)(::Std_obj::parseInt(color)) );
HXLINE(1723)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(1723)					colorNum = ( (Float)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            				}
HXLINE(1724)				 ::flixel::FlxCamera _hx_tmp = _gthis->cameraFromString(camera);
HXDLIN(1724)				_hx_tmp->flash(::Std_obj::_hx_int(colorNum),duration,null(),forced);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1721)			 cpp::Reference<lua_State> l113 = this->lua;
HXDLIN(1721)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraFlash",cb,28,d2,f6), ::Dynamic(new _hx_Closure_126(_gthis)));
HXDLIN(1721)			linc::callbacks::add_callback_function(l113,HX_("cameraFlash",cb,28,d2,f6));
            		}
HXLINE(1726)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_127, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String camera,::String color,Float duration,bool forced){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1726_new)
HXLINE(1727)				Float colorNum = ( (Float)(::Std_obj::parseInt(color)) );
HXLINE(1728)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(1728)					colorNum = ( (Float)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            				}
HXLINE(1729)				 ::flixel::FlxCamera _hx_tmp = _gthis->cameraFromString(camera);
HXDLIN(1729)				_hx_tmp->fade(::Std_obj::_hx_int(colorNum),duration,false,null(),forced);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1726)			 cpp::Reference<lua_State> l114 = this->lua;
HXDLIN(1726)			::llua::Lua_helper_obj::callbacks->set(HX_("cameraFade",c1,de,d3,a9), ::Dynamic(new _hx_Closure_127(_gthis)));
HXDLIN(1726)			linc::callbacks::add_callback_function(l114,HX_("cameraFade",c1,de,d3,a9));
            		}
HXLINE(1731)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_128) HXARGC(1)
            			void _hx_run(Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1732_new)
HXLINE(1732)				::PlayState_obj::instance->ratingPercent = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1731)			 cpp::Reference<lua_State> l115 = this->lua;
HXDLIN(1731)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingPercent",26,a3,29,ea), ::Dynamic(new _hx_Closure_128()));
HXDLIN(1731)			linc::callbacks::add_callback_function(l115,HX_("setRatingPercent",26,a3,29,ea));
            		}
HXLINE(1734)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_129) HXARGC(1)
            			void _hx_run(::String value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1735_new)
HXLINE(1735)				::PlayState_obj::instance->ratingName = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1734)			 cpp::Reference<lua_State> l116 = this->lua;
HXDLIN(1734)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingName",4a,e3,a3,a6), ::Dynamic(new _hx_Closure_129()));
HXDLIN(1734)			linc::callbacks::add_callback_function(l116,HX_("setRatingName",4a,e3,a3,a6));
            		}
HXLINE(1737)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_130) HXARGC(1)
            			void _hx_run(::String value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1738_new)
HXLINE(1738)				::PlayState_obj::instance->ratingFC = value;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1737)			 cpp::Reference<lua_State> l117 = this->lua;
HXDLIN(1737)			::llua::Lua_helper_obj::callbacks->set(HX_("setRatingFC",5c,3c,f6,89), ::Dynamic(new _hx_Closure_130()));
HXDLIN(1737)			linc::callbacks::add_callback_function(l117,HX_("setRatingFC",5c,3c,f6,89));
            		}
HXLINE(1740)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_131, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1740_new)
HXLINE(1741)				 ::flixel::FlxCamera cam = _gthis->cameraFromString(camera);
HXLINE(1742)				return ::flixel::FlxG_obj::mouse->getScreenPosition(cam,null())->x;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1740)			 cpp::Reference<lua_State> l118 = this->lua;
HXDLIN(1740)			::llua::Lua_helper_obj::callbacks->set(HX_("getMouseX",c9,d3,64,48), ::Dynamic(new _hx_Closure_131(_gthis)));
HXDLIN(1740)			linc::callbacks::add_callback_function(l118,HX_("getMouseX",c9,d3,64,48));
            		}
HXLINE(1744)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_132, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String camera){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1744_new)
HXLINE(1745)				 ::flixel::FlxCamera cam = _gthis->cameraFromString(camera);
HXLINE(1746)				return ::flixel::FlxG_obj::mouse->getScreenPosition(cam,null())->y;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1744)			 cpp::Reference<lua_State> l119 = this->lua;
HXDLIN(1744)			::llua::Lua_helper_obj::callbacks->set(HX_("getMouseY",ca,d3,64,48), ::Dynamic(new _hx_Closure_132(_gthis)));
HXDLIN(1744)			linc::callbacks::add_callback_function(l119,HX_("getMouseY",ca,d3,64,48));
            		}
HXLINE(1749)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_133) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1749_new)
HXLINE(1750)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1751)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1752)				if ((killMe->length > 1)) {
HXLINE(1753)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1753)					obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1755)				if (::hx::IsNotNull( obj )) {
HXLINE(1755)					return obj->getMidpoint(null())->x;
            				}
HXLINE(1757)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1749)			 cpp::Reference<lua_State> l120 = this->lua;
HXDLIN(1749)			::llua::Lua_helper_obj::callbacks->set(HX_("getMidpointX",1a,96,61,8b), ::Dynamic(new _hx_Closure_133()));
HXDLIN(1749)			linc::callbacks::add_callback_function(l120,HX_("getMidpointX",1a,96,61,8b));
            		}
HXLINE(1759)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_134) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1759_new)
HXLINE(1760)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1761)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1762)				if ((killMe->length > 1)) {
HXLINE(1763)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1763)					obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1765)				if (::hx::IsNotNull( obj )) {
HXLINE(1765)					return obj->getMidpoint(null())->y;
            				}
HXLINE(1767)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1759)			 cpp::Reference<lua_State> l121 = this->lua;
HXDLIN(1759)			::llua::Lua_helper_obj::callbacks->set(HX_("getMidpointY",1b,96,61,8b), ::Dynamic(new _hx_Closure_134()));
HXDLIN(1759)			linc::callbacks::add_callback_function(l121,HX_("getMidpointY",1b,96,61,8b));
            		}
HXLINE(1769)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_135) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1769_new)
HXLINE(1770)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1771)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1772)				if ((killMe->length > 1)) {
HXLINE(1773)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1773)					obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1775)				if (::hx::IsNotNull( obj )) {
HXLINE(1775)					return obj->getGraphicMidpoint(null())->x;
            				}
HXLINE(1777)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1769)			 cpp::Reference<lua_State> l122 = this->lua;
HXDLIN(1769)			::llua::Lua_helper_obj::callbacks->set(HX_("getGraphicMidpointX",7e,52,20,8a), ::Dynamic(new _hx_Closure_135()));
HXDLIN(1769)			linc::callbacks::add_callback_function(l122,HX_("getGraphicMidpointX",7e,52,20,8a));
            		}
HXLINE(1779)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_136) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1779_new)
HXLINE(1780)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1781)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1782)				if ((killMe->length > 1)) {
HXLINE(1783)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1783)					obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1785)				if (::hx::IsNotNull( obj )) {
HXLINE(1785)					return obj->getGraphicMidpoint(null())->y;
            				}
HXLINE(1787)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1779)			 cpp::Reference<lua_State> l123 = this->lua;
HXDLIN(1779)			::llua::Lua_helper_obj::callbacks->set(HX_("getGraphicMidpointY",7f,52,20,8a), ::Dynamic(new _hx_Closure_136()));
HXDLIN(1779)			linc::callbacks::add_callback_function(l123,HX_("getGraphicMidpointY",7f,52,20,8a));
            		}
HXLINE(1789)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_137) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1789_new)
HXLINE(1790)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1791)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1792)				if ((killMe->length > 1)) {
HXLINE(1793)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1793)					obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1795)				if (::hx::IsNotNull( obj )) {
HXLINE(1795)					return obj->getScreenPosition(null(),null())->x;
            				}
HXLINE(1797)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1789)			 cpp::Reference<lua_State> l124 = this->lua;
HXDLIN(1789)			::llua::Lua_helper_obj::callbacks->set(HX_("getScreenPositionX",8d,6a,f8,d2), ::Dynamic(new _hx_Closure_137()));
HXDLIN(1789)			linc::callbacks::add_callback_function(l124,HX_("getScreenPositionX",8d,6a,f8,d2));
            		}
HXLINE(1799)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_138) HXARGC(1)
            			Float _hx_run(::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1799_new)
HXLINE(1800)				::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(1801)				 ::flixel::FlxSprite obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(1802)				if ((killMe->length > 1)) {
HXLINE(1803)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(1803)					obj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(1805)				if (::hx::IsNotNull( obj )) {
HXLINE(1805)					return obj->getScreenPosition(null(),null())->y;
            				}
HXLINE(1807)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(1799)			 cpp::Reference<lua_State> l125 = this->lua;
HXDLIN(1799)			::llua::Lua_helper_obj::callbacks->set(HX_("getScreenPositionY",8e,6a,f8,d2), ::Dynamic(new _hx_Closure_138()));
HXDLIN(1799)			linc::callbacks::add_callback_function(l125,HX_("getScreenPositionY",8e,6a,f8,d2));
            		}
HXLINE(1809)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_139) HXARGC(1)
            			void _hx_run(::String character){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1810_new)
HXLINE(1810)				::String _hx_switch_11 = character.toLowerCase();
            				if (  (_hx_switch_11==HX_("dad",47,36,4c,00)) ){
HXLINE(1811)					::PlayState_obj::instance->dad->dance();
HXDLIN(1811)					goto _hx_goto_21;
            				}
            				if (  (_hx_switch_11==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_11==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(1812)					if (::hx::IsNotNull( ::PlayState_obj::instance->gf )) {
HXLINE(1812)						::PlayState_obj::instance->gf->dance();
            					}
HXDLIN(1812)					goto _hx_goto_21;
            				}
            				/* default */{
HXLINE(1813)					::PlayState_obj::instance->boyfriend->dance();
            				}
            				_hx_goto_21:;
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1809)			 cpp::Reference<lua_State> l126 = this->lua;
HXDLIN(1809)			::llua::Lua_helper_obj::callbacks->set(HX_("characterDance",ca,32,95,aa), ::Dynamic(new _hx_Closure_139()));
HXDLIN(1809)			linc::callbacks::add_callback_function(l126,HX_("characterDance",ca,32,95,aa));
            		}
HXLINE(1817)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_140, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String tag,::String image,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1817_new)
HXLINE(1818)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE(1819)				_gthis->resetSpriteTag(tag);
HXLINE(1820)				 ::ModchartSprite leSprite =  ::ModchartSprite_obj::__alloc( HX_CTX ,x,y);
HXLINE(1821)				bool _hx_tmp;
HXDLIN(1821)				if (::hx::IsNotNull( image )) {
HXLINE(1821)					_hx_tmp = (image.length > 0);
            				}
            				else {
HXLINE(1821)					_hx_tmp = false;
            				}
HXDLIN(1821)				if (_hx_tmp) {
HXLINE(1823)					::String library = null();
HXDLIN(1823)					 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(image,library);
HXDLIN(1823)					leSprite->loadGraphic(returnAsset,null(),null(),null(),null(),null());
            				}
HXLINE(1825)				leSprite->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(1826)				::PlayState_obj::instance->modchartSprites->set(tag,leSprite);
HXLINE(1827)				leSprite->set_active(true);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1817)			 cpp::Reference<lua_State> l127 = this->lua;
HXDLIN(1817)			::llua::Lua_helper_obj::callbacks->set(HX_("makeLuaSprite",0f,bc,5b,d4), ::Dynamic(new _hx_Closure_140(_gthis)));
HXDLIN(1817)			linc::callbacks::add_callback_function(l127,HX_("makeLuaSprite",0f,bc,5b,d4));
            		}
HXLINE(1829)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_141, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String image,Float x,Float y,::String __o_spriteType){
            		::String spriteType = __o_spriteType;
            		if (::hx::IsNull(__o_spriteType)) spriteType = HX_("sparrow",0c,3c,ac,9b);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1829_new)
HXLINE(1830)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE(1831)				_gthis->resetSpriteTag(tag);
HXLINE(1832)				 ::ModchartSprite leSprite =  ::ModchartSprite_obj::__alloc( HX_CTX ,x,y);
HXLINE(1834)				_gthis->loadFrames(leSprite,image,spriteType);
HXLINE(1835)				leSprite->set_antialiasing(::ClientPrefs_obj::globalAntialiasing);
HXLINE(1836)				::PlayState_obj::instance->modchartSprites->set(tag,leSprite);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1829)			 cpp::Reference<lua_State> l128 = this->lua;
HXDLIN(1829)			::llua::Lua_helper_obj::callbacks->set(HX_("makeAnimatedLuaSprite",ec,be,a6,d0), ::Dynamic(new _hx_Closure_141(_gthis)));
HXDLIN(1829)			linc::callbacks::add_callback_function(l128,HX_("makeAnimatedLuaSprite",ec,be,a6,d0));
            		}
HXLINE(1839)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_142) HXARGC(4)
            			void _hx_run(::String obj,int width,int height,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1839_new)
HXLINE(1840)				Float colorNum = ( (Float)(::Std_obj::parseInt(color)) );
HXLINE(1842)				if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(1842)					colorNum = ( (Float)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            				}
HXLINE(1844)				 ::flixel::FlxSprite spr = ::PlayState_obj::instance->getLuaObject(obj,false);
HXLINE(1845)				if (::hx::IsNotNull( spr )) {
HXLINE(1846)					 ::flixel::FlxSprite _hx_tmp = ::PlayState_obj::instance->getLuaObject(obj,false);
HXDLIN(1846)					_hx_tmp->makeGraphic(width,height,::Std_obj::_hx_int(colorNum),null(),null());
HXLINE(1847)					return;
            				}
HXLINE(1850)				 ::flixel::FlxState object;
HXDLIN(1850)				if (::PlayState_obj::instance->isDead) {
HXLINE(1850)					object = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1850)					object = ::PlayState_obj::instance;
            				}
HXDLIN(1850)				 ::flixel::FlxSprite object1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(object,obj)) );
HXLINE(1851)				if (::hx::IsNotNull( object1 )) {
HXLINE(1852)					object1->makeGraphic(width,height,::Std_obj::_hx_int(colorNum),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1839)			 cpp::Reference<lua_State> l129 = this->lua;
HXDLIN(1839)			::llua::Lua_helper_obj::callbacks->set(HX_("makeGraphic",5a,82,11,b8), ::Dynamic(new _hx_Closure_142()));
HXDLIN(1839)			linc::callbacks::add_callback_function(l129,HX_("makeGraphic",5a,82,11,b8));
            		}
HXLINE(1855)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_143) HXARGC(5)
            			void _hx_run(::String obj,::String name,::String prefix, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		int framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1855_new)
HXLINE(1856)				if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,false) )) {
HXLINE(1857)					 ::flixel::FlxSprite cock = ::PlayState_obj::instance->getLuaObject(obj,false);
HXLINE(1858)					cock->animation->addByPrefix(name,prefix,framerate,loop,null(),null());
HXLINE(1859)					if (::hx::IsNull( cock->animation->_curAnim )) {
HXLINE(1860)						cock->animation->play(name,true,null(),null());
            					}
HXLINE(1862)					return;
            				}
HXLINE(1865)				 ::flixel::FlxState cock1;
HXDLIN(1865)				if (::PlayState_obj::instance->isDead) {
HXLINE(1865)					cock1 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1865)					cock1 = ::PlayState_obj::instance;
            				}
HXDLIN(1865)				 ::flixel::FlxSprite cock2 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(cock1,obj)) );
HXLINE(1866)				if (::hx::IsNotNull( cock2 )) {
HXLINE(1867)					cock2->animation->addByPrefix(name,prefix,framerate,loop,null(),null());
HXLINE(1868)					if (::hx::IsNull( cock2->animation->_curAnim )) {
HXLINE(1869)						cock2->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1855)			 cpp::Reference<lua_State> l130 = this->lua;
HXDLIN(1855)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationByPrefix",8c,c6,c0,2b), ::Dynamic(new _hx_Closure_143()));
HXDLIN(1855)			linc::callbacks::add_callback_function(l130,HX_("addAnimationByPrefix",8c,c6,c0,2b));
            		}
HXLINE(1874)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_144) HXARGC(5)
            			void _hx_run(::String obj,::String name,::Array< int > frames, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		int framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1874_new)
HXLINE(1875)				if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,false) )) {
HXLINE(1876)					 ::flixel::FlxSprite cock = ::PlayState_obj::instance->getLuaObject(obj,false);
HXLINE(1877)					cock->animation->add(name,frames,framerate,loop,null(),null());
HXLINE(1878)					if (::hx::IsNull( cock->animation->_curAnim )) {
HXLINE(1879)						cock->animation->play(name,true,null(),null());
            					}
HXLINE(1881)					return;
            				}
HXLINE(1884)				 ::flixel::FlxState cock1;
HXDLIN(1884)				if (::PlayState_obj::instance->isDead) {
HXLINE(1884)					cock1 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1884)					cock1 = ::PlayState_obj::instance;
            				}
HXDLIN(1884)				 ::flixel::FlxSprite cock2 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(cock1,obj)) );
HXLINE(1885)				if (::hx::IsNotNull( cock2 )) {
HXLINE(1886)					cock2->animation->add(name,frames,framerate,loop,null(),null());
HXLINE(1887)					if (::hx::IsNull( cock2->animation->_curAnim )) {
HXLINE(1888)						cock2->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(1874)			 cpp::Reference<lua_State> l131 = this->lua;
HXDLIN(1874)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimation",a3,10,89,4a), ::Dynamic(new _hx_Closure_144()));
HXDLIN(1874)			linc::callbacks::add_callback_function(l131,HX_("addAnimation",a3,10,89,4a));
            		}
HXLINE(1893)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_145) HXARGC(5)
            			bool _hx_run(::String obj,::String name,::String prefix,::String indices, ::Dynamic __o_framerate){
            		int framerate = __o_framerate.Default(24);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1894_new)
HXLINE(1894)				return ::FunkinLua_obj::addAnimByIndices(obj,name,prefix,indices,framerate,false);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE(1893)			 cpp::Reference<lua_State> l132 = this->lua;
HXDLIN(1893)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationByIndices",ed,b4,f9,ce), ::Dynamic(new _hx_Closure_145()));
HXDLIN(1893)			linc::callbacks::add_callback_function(l132,HX_("addAnimationByIndices",ed,b4,f9,ce));
            		}
HXLINE(1896)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_146) HXARGC(5)
            			bool _hx_run(::String obj,::String name,::String prefix,::String indices, ::Dynamic __o_framerate){
            		int framerate = __o_framerate.Default(24);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1897_new)
HXLINE(1897)				return ::FunkinLua_obj::addAnimByIndices(obj,name,prefix,indices,framerate,true);
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE(1896)			 cpp::Reference<lua_State> l133 = this->lua;
HXDLIN(1896)			::llua::Lua_helper_obj::callbacks->set(HX_("addAnimationByIndicesLoop",f1,01,6c,08), ::Dynamic(new _hx_Closure_146()));
HXDLIN(1896)			linc::callbacks::add_callback_function(l133,HX_("addAnimationByIndicesLoop",f1,01,6c,08));
            		}
HXLINE(1901)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_147) HXARGC(5)
            			bool _hx_run(::String obj,::String name, ::Dynamic __o_forced, ::Dynamic __o_reverse, ::Dynamic __o_startFrame){
            		bool forced = __o_forced.Default(false);
            		 ::Dynamic reverse = __o_reverse;
            		if (::hx::IsNull(__o_reverse)) reverse = false;
            		 ::Dynamic startFrame = __o_startFrame;
            		if (::hx::IsNull(__o_startFrame)) startFrame = 0;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1902_new)
HXLINE(1903)				if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,false) )) {
HXLINE(1904)					 ::flixel::FlxSprite luaObj = ::PlayState_obj::instance->getLuaObject(obj,false);
HXLINE(1905)					if (::hx::IsNotNull( luaObj->animation->_animations->get(name) )) {
HXLINE(1907)						luaObj->animation->play(name,forced,reverse,startFrame);
HXLINE(1908)						if (::Std_obj::isOfType(luaObj,::hx::ClassOf< ::ModchartSprite >())) {
HXLINE(1911)							 ::Dynamic obj1 = luaObj;
HXLINE(1912)							 ::ModchartSprite luaObj1 = ( ( ::ModchartSprite)(obj1) );
HXLINE(1914)							::Array< Float > daOffset = ( (::Array< Float >)(luaObj1->animOffsets->get(name)) );
HXLINE(1915)							if (luaObj1->animOffsets->exists(name)) {
HXLINE(1917)								 ::flixel::math::FlxBasePoint this1 = luaObj1->offset;
HXDLIN(1917)								Float y = (daOffset->__get(1) * luaObj1->scale->y);
HXDLIN(1917)								this1->set_x((daOffset->__get(0) * luaObj1->scale->x));
HXDLIN(1917)								this1->set_y(y);
            							}
            						}
            					}
HXLINE(1921)					return true;
            				}
HXLINE(1924)				 ::flixel::FlxState spr;
HXDLIN(1924)				if (::PlayState_obj::instance->isDead) {
HXLINE(1924)					spr = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1924)					spr = ::PlayState_obj::instance;
            				}
HXDLIN(1924)				 ::flixel::FlxSprite spr1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(spr,obj)) );
HXLINE(1925)				if (::hx::IsNotNull( spr1 )) {
HXLINE(1926)					if (::hx::IsNotNull( spr1->animation->_animations->get(name) )) {
HXLINE(1928)						if (::Std_obj::isOfType(spr1,::hx::ClassOf< ::Character >())) {
HXLINE(1931)							 ::Dynamic obj2 = spr1;
HXLINE(1932)							 ::Character spr2 = ( ( ::Character)(obj2) );
HXLINE(1933)							spr2->playAnim(name,forced,reverse,startFrame);
            						}
            						else {
HXLINE(1936)							spr1->animation->play(name,forced,reverse,startFrame);
            						}
            					}
HXLINE(1938)					return true;
            				}
HXLINE(1940)				return false;
            			}
            			HX_END_LOCAL_FUNC5(return)

HXLINE(1901)			 cpp::Reference<lua_State> l134 = this->lua;
HXDLIN(1901)			::llua::Lua_helper_obj::callbacks->set(HX_("playAnim",25,ea,84,30), ::Dynamic(new _hx_Closure_147()));
HXDLIN(1901)			linc::callbacks::add_callback_function(l134,HX_("playAnim",25,ea,84,30));
            		}
HXLINE(1942)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_148) HXARGC(4)
            			bool _hx_run(::String obj,::String anim,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1942_new)
HXLINE(1943)				if (::PlayState_obj::instance->modchartSprites->exists(obj)) {
HXLINE(1944)					( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(obj)) )->animOffsets->set(anim,::Array_obj< Float >::__new(2)->init(0,x)->init(1,y));
HXLINE(1945)					return true;
            				}
HXLINE(1948)				 ::flixel::FlxState _hx_char;
HXDLIN(1948)				if (::PlayState_obj::instance->isDead) {
HXLINE(1948)					_hx_char = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1948)					_hx_char = ::PlayState_obj::instance;
            				}
HXDLIN(1948)				 ::Character char1 = ( ( ::Character)(::Reflect_obj::getProperty(_hx_char,obj)) );
HXLINE(1949)				if (::hx::IsNotNull( char1 )) {
HXLINE(1950)					char1->addOffset(anim,x,y);
HXLINE(1951)					return true;
            				}
HXLINE(1953)				return false;
            			}
            			HX_END_LOCAL_FUNC4(return)

HXLINE(1942)			 cpp::Reference<lua_State> l135 = this->lua;
HXDLIN(1942)			::llua::Lua_helper_obj::callbacks->set(HX_("addOffset",94,cc,63,18), ::Dynamic(new _hx_Closure_148()));
HXDLIN(1942)			linc::callbacks::add_callback_function(l135,HX_("addOffset",94,cc,63,18));
            		}
HXLINE(1956)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_149) HXARGC(3)
            			void _hx_run(::String obj,Float scrollX,Float scrollY){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1956_new)
HXLINE(1957)				if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,false) )) {
HXLINE(1958)					{
HXLINE(1958)						 ::flixel::math::FlxBasePoint this1 = ::PlayState_obj::instance->getLuaObject(obj,false)->scrollFactor;
HXDLIN(1958)						this1->set_x(scrollX);
HXDLIN(1958)						this1->set_y(scrollY);
            					}
HXLINE(1959)					return;
            				}
HXLINE(1962)				 ::flixel::FlxState object;
HXDLIN(1962)				if (::PlayState_obj::instance->isDead) {
HXLINE(1962)					object = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(1962)					object = ::PlayState_obj::instance;
            				}
HXDLIN(1962)				 ::flixel::FlxObject object1 = ( ( ::flixel::FlxObject)(::Reflect_obj::getProperty(object,obj)) );
HXLINE(1963)				if (::hx::IsNotNull( object1 )) {
HXLINE(1964)					 ::flixel::math::FlxBasePoint this2 = object1->scrollFactor;
HXDLIN(1964)					this2->set_x(scrollX);
HXDLIN(1964)					this2->set_y(scrollY);
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(1956)			 cpp::Reference<lua_State> l136 = this->lua;
HXDLIN(1956)			::llua::Lua_helper_obj::callbacks->set(HX_("setScrollFactor",7e,bf,85,5a), ::Dynamic(new _hx_Closure_149()));
HXDLIN(1956)			linc::callbacks::add_callback_function(l136,HX_("setScrollFactor",7e,bf,85,5a));
            		}
HXLINE(1967)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_150) HXARGC(2)
            			void _hx_run(::String tag, ::Dynamic __o_front){
            		bool front = __o_front.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1968_new)
HXLINE(1968)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(1969)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(1970)					if (!(shit->wasAdded)) {
HXLINE(1971)						if (front) {
HXLINE(1973)							 ::flixel::FlxState _hx_tmp;
HXDLIN(1973)							if (::PlayState_obj::instance->isDead) {
HXLINE(1973)								_hx_tmp = ::GameOverSubstate_obj::instance;
            							}
            							else {
HXLINE(1973)								_hx_tmp = ::PlayState_obj::instance;
            							}
HXDLIN(1973)							_hx_tmp->add(shit).StaticCast<  ::flixel::FlxBasic >();
            						}
            						else {
HXLINE(1977)							if (::PlayState_obj::instance->isDead) {
HXLINE(1979)								 ::GameOverSubstate _hx_tmp1 = ::GameOverSubstate_obj::instance;
HXDLIN(1979)								_hx_tmp1->insert(::GameOverSubstate_obj::instance->members->indexOf(::GameOverSubstate_obj::instance->boyfriend,null()),shit).StaticCast<  ::flixel::FlxBasic >();
            							}
            							else {
HXLINE(1983)								int position = ::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->gfGroup,null());
HXLINE(1984)								if ((::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->boyfriendGroup,null()) < position)) {
HXLINE(1985)									position = ::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->boyfriendGroup,null());
            								}
            								else {
HXLINE(1986)									if ((::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->dadGroup,null()) < position)) {
HXLINE(1987)										position = ::PlayState_obj::instance->members->indexOf(::PlayState_obj::instance->dadGroup,null());
            									}
            								}
HXLINE(1989)								::PlayState_obj::instance->insert(position,shit).StaticCast<  ::flixel::FlxBasic >();
            							}
            						}
HXLINE(1992)						shit->wasAdded = true;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(1967)			 cpp::Reference<lua_State> l137 = this->lua;
HXDLIN(1967)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaSprite",7c,e5,06,db), ::Dynamic(new _hx_Closure_150()));
HXDLIN(1967)			linc::callbacks::add_callback_function(l137,HX_("addLuaSprite",7c,e5,06,db));
            		}
HXLINE(1997)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_151, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String obj,int x, ::Dynamic __o_y, ::Dynamic __o_updateHitbox){
            		int y = __o_y.Default(0);
            		bool updateHitbox = __o_updateHitbox.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_1997_new)
HXLINE(1998)				if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,null()) )) {
HXLINE(1999)					 ::flixel::FlxSprite shit = ::PlayState_obj::instance->getLuaObject(obj,null());
HXLINE(2000)					shit->setGraphicSize(x,y);
HXLINE(2001)					if (updateHitbox) {
HXLINE(2001)						shit->updateHitbox();
            					}
HXLINE(2002)					return;
            				}
HXLINE(2005)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(2006)				 ::flixel::FlxSprite poop = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(2007)				if ((killMe->length > 1)) {
HXLINE(2008)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(2008)					poop = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(2011)				if (::hx::IsNotNull( poop )) {
HXLINE(2012)					poop->setGraphicSize(x,y);
HXLINE(2013)					if (updateHitbox) {
HXLINE(2013)						poop->updateHitbox();
            					}
HXLINE(2014)					return;
            				}
HXLINE(2016)				_gthis->luaTrace((HX_("setGraphicSize: Couldnt find object: ",e6,d0,af,28) + obj),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(1997)			 cpp::Reference<lua_State> l138 = this->lua;
HXDLIN(1997)			::llua::Lua_helper_obj::callbacks->set(HX_("setGraphicSize",07,d7,f8,2d), ::Dynamic(new _hx_Closure_151(_gthis)));
HXDLIN(1997)			linc::callbacks::add_callback_function(l138,HX_("setGraphicSize",07,d7,f8,2d));
            		}
HXLINE(2018)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_152, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String obj,Float x,Float y, ::Dynamic __o_updateHitbox){
            		bool updateHitbox = __o_updateHitbox.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2018_new)
HXLINE(2019)				if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,null()) )) {
HXLINE(2020)					 ::flixel::FlxSprite shit = ::PlayState_obj::instance->getLuaObject(obj,null());
HXLINE(2021)					{
HXLINE(2021)						 ::flixel::math::FlxBasePoint this1 = shit->scale;
HXDLIN(2021)						this1->set_x(x);
HXDLIN(2021)						this1->set_y(y);
            					}
HXLINE(2022)					if (updateHitbox) {
HXLINE(2022)						shit->updateHitbox();
            					}
HXLINE(2023)					return;
            				}
HXLINE(2026)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(2027)				 ::flixel::FlxSprite poop = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(2028)				if ((killMe->length > 1)) {
HXLINE(2029)					 ::Dynamic this2 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(2029)					poop = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this2,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(2032)				if (::hx::IsNotNull( poop )) {
HXLINE(2033)					{
HXLINE(2033)						 ::flixel::math::FlxBasePoint this3 = poop->scale;
HXDLIN(2033)						this3->set_x(x);
HXDLIN(2033)						this3->set_y(y);
            					}
HXLINE(2034)					if (updateHitbox) {
HXLINE(2034)						poop->updateHitbox();
            					}
HXLINE(2035)					return;
            				}
HXLINE(2037)				_gthis->luaTrace((HX_("scaleObject: Couldnt find object: ",44,df,d0,77) + obj),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(2018)			 cpp::Reference<lua_State> l139 = this->lua;
HXDLIN(2018)			::llua::Lua_helper_obj::callbacks->set(HX_("scaleObject",e9,44,43,01), ::Dynamic(new _hx_Closure_152(_gthis)));
HXDLIN(2018)			linc::callbacks::add_callback_function(l139,HX_("scaleObject",e9,44,43,01));
            		}
HXLINE(2039)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_153, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String obj){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2039_new)
HXLINE(2040)				if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,null()) )) {
HXLINE(2041)					 ::flixel::FlxSprite shit = ::PlayState_obj::instance->getLuaObject(obj,null());
HXLINE(2042)					shit->updateHitbox();
HXLINE(2043)					return;
            				}
HXLINE(2046)				 ::flixel::FlxState poop;
HXDLIN(2046)				if (::PlayState_obj::instance->isDead) {
HXLINE(2046)					poop = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(2046)					poop = ::PlayState_obj::instance;
            				}
HXDLIN(2046)				 ::flixel::FlxSprite poop1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(poop,obj)) );
HXLINE(2047)				if (::hx::IsNotNull( poop1 )) {
HXLINE(2048)					poop1->updateHitbox();
HXLINE(2049)					return;
            				}
HXLINE(2051)				_gthis->luaTrace((HX_("updateHitbox: Couldnt find object: ",ac,82,77,e4) + obj),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2039)			 cpp::Reference<lua_State> l140 = this->lua;
HXDLIN(2039)			::llua::Lua_helper_obj::callbacks->set(HX_("updateHitbox",81,94,eb,56), ::Dynamic(new _hx_Closure_153(_gthis)));
HXDLIN(2039)			linc::callbacks::add_callback_function(l140,HX_("updateHitbox",81,94,eb,56));
            		}
HXLINE(2053)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_154) HXARGC(2)
            			void _hx_run(::String group,int index){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2053_new)
HXLINE(2054)				 ::flixel::FlxState _hx_tmp;
HXDLIN(2054)				if (::PlayState_obj::instance->isDead) {
HXLINE(2054)					_hx_tmp = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(2054)					_hx_tmp = ::PlayState_obj::instance;
            				}
HXDLIN(2054)				if (::Std_obj::isOfType(::Reflect_obj::getProperty(_hx_tmp,group),::hx::ClassOf< ::flixel::group::FlxTypedGroup >())) {
HXLINE(2055)					 ::flixel::FlxState _hx_tmp1;
HXDLIN(2055)					if (::PlayState_obj::instance->isDead) {
HXLINE(2055)						_hx_tmp1 = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(2055)						_hx_tmp1 = ::PlayState_obj::instance;
            					}
HXDLIN(2055)					 ::Dynamic(::Reflect_obj::getProperty(_hx_tmp1,group)->__Field(HX_("members",d9,2c,70,1a),::hx::paccDynamic))->__GetItem(index)->__Field(HX_("updateHitbox",81,94,eb,56),::hx::paccDynamic)();
HXLINE(2056)					return;
            				}
HXLINE(2058)				 ::flixel::FlxState _hx_tmp2;
HXDLIN(2058)				if (::PlayState_obj::instance->isDead) {
HXLINE(2058)					_hx_tmp2 = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(2058)					_hx_tmp2 = ::PlayState_obj::instance;
            				}
HXDLIN(2058)				::Reflect_obj::getProperty(_hx_tmp2,group)->__GetItem(index)->__Field(HX_("updateHitbox",81,94,eb,56),::hx::paccDynamic)();
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2053)			 cpp::Reference<lua_State> l141 = this->lua;
HXDLIN(2053)			::llua::Lua_helper_obj::callbacks->set(HX_("updateHitboxFromGroup",b4,d0,d8,d6), ::Dynamic(new _hx_Closure_154()));
HXDLIN(2053)			linc::callbacks::add_callback_function(l141,HX_("updateHitboxFromGroup",b4,d0,d8,d6));
            		}
HXLINE(2061)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_155) HXARGC(2)
            			void _hx_run(::String tag, ::Dynamic __o_destroy){
            		bool destroy = __o_destroy.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2061_new)
HXLINE(2062)				if (!(::PlayState_obj::instance->modchartSprites->exists(tag))) {
HXLINE(2063)					return;
            				}
HXLINE(2066)				 ::ModchartSprite pee = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(2067)				if (destroy) {
HXLINE(2068)					pee->kill();
            				}
HXLINE(2071)				if (pee->wasAdded) {
HXLINE(2072)					 ::flixel::FlxState _hx_tmp;
HXDLIN(2072)					if (::PlayState_obj::instance->isDead) {
HXLINE(2072)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(2072)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN(2072)					_hx_tmp->remove(pee,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2073)					pee->wasAdded = false;
            				}
HXLINE(2076)				if (destroy) {
HXLINE(2077)					pee->destroy();
HXLINE(2078)					::PlayState_obj::instance->modchartSprites->remove(tag);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2061)			 cpp::Reference<lua_State> l142 = this->lua;
HXDLIN(2061)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaSprite",f9,5e,d1,1c), ::Dynamic(new _hx_Closure_155()));
HXDLIN(2061)			linc::callbacks::add_callback_function(l142,HX_("removeLuaSprite",f9,5e,d1,1c));
            		}
HXLINE(2082)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_156) HXARGC(1)
            			bool _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2083_new)
HXLINE(2083)				return ::PlayState_obj::instance->modchartSprites->exists(tag);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2082)			 cpp::Reference<lua_State> l143 = this->lua;
HXDLIN(2082)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteExists",99,19,23,61), ::Dynamic(new _hx_Closure_156()));
HXDLIN(2082)			linc::callbacks::add_callback_function(l143,HX_("luaSpriteExists",99,19,23,61));
            		}
HXLINE(2085)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_157) HXARGC(1)
            			bool _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2086_new)
HXLINE(2086)				return ::PlayState_obj::instance->modchartTexts->exists(tag);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2085)			 cpp::Reference<lua_State> l144 = this->lua;
HXDLIN(2085)			::llua::Lua_helper_obj::callbacks->set(HX_("luaTextExists",41,52,7a,3b), ::Dynamic(new _hx_Closure_157()));
HXDLIN(2085)			linc::callbacks::add_callback_function(l144,HX_("luaTextExists",41,52,7a,3b));
            		}
HXLINE(2088)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_158) HXARGC(1)
            			bool _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2089_new)
HXLINE(2089)				return ::PlayState_obj::instance->modchartSounds->exists(tag);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2088)			 cpp::Reference<lua_State> l145 = this->lua;
HXDLIN(2088)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSoundExists",33,cd,e0,42), ::Dynamic(new _hx_Closure_158()));
HXDLIN(2088)			linc::callbacks::add_callback_function(l145,HX_("luaSoundExists",33,cd,e0,42));
            		}
HXLINE(2092)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_159) HXARGC(2)
            			void _hx_run(::String leftHex,::String rightHex){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2092_new)
HXLINE(2093)				int left = ::Std_obj::_hx_int(( (Float)(::Std_obj::parseInt(leftHex)) ));
HXLINE(2094)				if (!(::StringTools_obj::startsWith(leftHex,HX_("0x",48,2a,00,00)))) {
HXLINE(2094)					left = ::Std_obj::_hx_int(( (Float)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + leftHex))) ));
            				}
HXLINE(2095)				int right = ::Std_obj::_hx_int(( (Float)(::Std_obj::parseInt(rightHex)) ));
HXLINE(2096)				if (!(::StringTools_obj::startsWith(rightHex,HX_("0x",48,2a,00,00)))) {
HXLINE(2096)					right = ::Std_obj::_hx_int(( (Float)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + rightHex))) ));
            				}
HXLINE(2098)				::PlayState_obj::instance->healthBar->createFilledBar(left,right,null(),null());
HXLINE(2099)				::PlayState_obj::instance->healthBar->updateBar();
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2092)			 cpp::Reference<lua_State> l146 = this->lua;
HXDLIN(2092)			::llua::Lua_helper_obj::callbacks->set(HX_("setHealthBarColors",25,22,cf,1f), ::Dynamic(new _hx_Closure_159()));
HXDLIN(2092)			linc::callbacks::add_callback_function(l146,HX_("setHealthBarColors",25,22,cf,1f));
            		}
HXLINE(2101)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_160) HXARGC(2)
            			void _hx_run(::String leftHex,::String rightHex){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2101_new)
HXLINE(2102)				int left = ( (int)(::Std_obj::parseInt(leftHex)) );
HXLINE(2103)				if (!(::StringTools_obj::startsWith(leftHex,HX_("0x",48,2a,00,00)))) {
HXLINE(2103)					left = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + leftHex))) );
            				}
HXLINE(2104)				int right = ( (int)(::Std_obj::parseInt(rightHex)) );
HXLINE(2105)				if (!(::StringTools_obj::startsWith(rightHex,HX_("0x",48,2a,00,00)))) {
HXLINE(2105)					right = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + rightHex))) );
            				}
HXLINE(2107)				::PlayState_obj::instance->timeBar->createFilledBar(right,left,null(),null());
HXLINE(2108)				::PlayState_obj::instance->timeBar->updateBar();
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2101)			 cpp::Reference<lua_State> l147 = this->lua;
HXDLIN(2101)			::llua::Lua_helper_obj::callbacks->set(HX_("setTimeBarColors",14,cd,38,9d), ::Dynamic(new _hx_Closure_160()));
HXDLIN(2101)			linc::callbacks::add_callback_function(l147,HX_("setTimeBarColors",14,cd,38,9d));
            		}
HXLINE(2111)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_161, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String obj,::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2111_new)
HXLINE(2120)				 ::flixel::FlxSprite real = ::PlayState_obj::instance->getLuaObject(obj,null());
HXLINE(2121)				if (::hx::IsNotNull( real )) {
HXLINE(2122)					real->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->cameraFromString(camera)));
HXLINE(2123)					return true;
            				}
HXLINE(2126)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(2127)				 ::flixel::FlxSprite object = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(2128)				if ((killMe->length > 1)) {
HXLINE(2129)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(2129)					object = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(2132)				if (::hx::IsNotNull( object )) {
HXLINE(2133)					object->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->cameraFromString(camera)));
HXLINE(2134)					return true;
            				}
HXLINE(2136)				_gthis->luaTrace(((HX_("setObjectCamera: Object ",35,98,22,91) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2137)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2111)			 cpp::Reference<lua_State> l148 = this->lua;
HXDLIN(2111)			::llua::Lua_helper_obj::callbacks->set(HX_("setObjectCamera",86,25,4c,b0), ::Dynamic(new _hx_Closure_161(_gthis)));
HXDLIN(2111)			linc::callbacks::add_callback_function(l148,HX_("setObjectCamera",86,25,4c,b0));
            		}
HXLINE(2139)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_162, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String obj,::String __o_blend){
            		::String blend = __o_blend;
            		if (::hx::IsNull(__o_blend)) blend = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2139_new)
HXLINE(2140)				 ::flixel::FlxSprite real = ::PlayState_obj::instance->getLuaObject(obj,null());
HXLINE(2141)				if (::hx::IsNotNull( real )) {
HXLINE(2142)					real->set_blend(_gthis->blendModeFromString(blend));
HXLINE(2143)					return true;
            				}
HXLINE(2146)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(2147)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(2148)				if ((killMe->length > 1)) {
HXLINE(2149)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(2149)					spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(2152)				if (::hx::IsNotNull( spr )) {
HXLINE(2153)					spr->set_blend(_gthis->blendModeFromString(blend));
HXLINE(2154)					return true;
            				}
HXLINE(2156)				_gthis->luaTrace(((HX_("setBlendMode: Object ",e9,df,de,93) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2157)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2139)			 cpp::Reference<lua_State> l149 = this->lua;
HXDLIN(2139)			::llua::Lua_helper_obj::callbacks->set(HX_("setBlendMode",52,a4,87,30), ::Dynamic(new _hx_Closure_162(_gthis)));
HXDLIN(2139)			linc::callbacks::add_callback_function(l149,HX_("setBlendMode",52,a4,87,30));
            		}
HXLINE(2159)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_163, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String obj,::String __o_pos){
            		::String pos = __o_pos;
            		if (::hx::IsNull(__o_pos)) pos = HX_("xy",01,69,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2159_new)
HXLINE(2160)				 ::flixel::FlxSprite spr = ::PlayState_obj::instance->getLuaObject(obj,null());
HXLINE(2162)				if (::hx::IsNull( spr )) {
HXLINE(2163)					::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(2164)					spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(2165)					if ((killMe->length > 1)) {
HXLINE(2166)						 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(2166)						spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            					}
            				}
HXLINE(2170)				if (::hx::IsNotNull( spr )) {
HXLINE(2172)					::String _hx_switch_12 = ::StringTools_obj::trim(pos).toLowerCase();
            					if (  (_hx_switch_12==HX_("x",78,00,00,00)) ){
HXLINE(2175)						{
HXLINE(2175)							int axes = 1;
HXDLIN(2175)							bool _hx_tmp;
HXDLIN(2175)							if ((axes != 1)) {
HXLINE(2175)								_hx_tmp = (axes == 17);
            							}
            							else {
HXLINE(2175)								_hx_tmp = true;
            							}
HXDLIN(2175)							if (_hx_tmp) {
HXLINE(2175)								int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(2175)								spr->set_x(((( (Float)(_hx_tmp1) ) - spr->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(2175)							bool _hx_tmp2;
HXDLIN(2175)							if ((axes != 16)) {
HXLINE(2175)								_hx_tmp2 = (axes == 17);
            							}
            							else {
HXLINE(2175)								_hx_tmp2 = true;
            							}
HXDLIN(2175)							if (_hx_tmp2) {
HXLINE(2175)								int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(2175)								spr->set_y(((( (Float)(_hx_tmp3) ) - spr->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE(2176)						return;
HXLINE(2174)						goto _hx_goto_22;
            					}
            					if (  (_hx_switch_12==HX_("y",79,00,00,00)) ){
HXLINE(2178)						{
HXLINE(2178)							int axes1 = 16;
HXDLIN(2178)							bool _hx_tmp4;
HXDLIN(2178)							if ((axes1 != 1)) {
HXLINE(2178)								_hx_tmp4 = (axes1 == 17);
            							}
            							else {
HXLINE(2178)								_hx_tmp4 = true;
            							}
HXDLIN(2178)							if (_hx_tmp4) {
HXLINE(2178)								int _hx_tmp5 = ::flixel::FlxG_obj::width;
HXDLIN(2178)								spr->set_x(((( (Float)(_hx_tmp5) ) - spr->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(2178)							bool _hx_tmp6;
HXDLIN(2178)							if ((axes1 != 16)) {
HXLINE(2178)								_hx_tmp6 = (axes1 == 17);
            							}
            							else {
HXLINE(2178)								_hx_tmp6 = true;
            							}
HXDLIN(2178)							if (_hx_tmp6) {
HXLINE(2178)								int _hx_tmp7 = ::flixel::FlxG_obj::height;
HXDLIN(2178)								spr->set_y(((( (Float)(_hx_tmp7) ) - spr->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE(2179)						return;
HXLINE(2177)						goto _hx_goto_22;
            					}
            					/* default */{
HXLINE(2181)						{
HXLINE(2181)							int axes2 = 17;
HXDLIN(2181)							bool _hx_tmp8;
HXDLIN(2181)							if ((axes2 != 1)) {
HXLINE(2181)								_hx_tmp8 = (axes2 == 17);
            							}
            							else {
HXLINE(2181)								_hx_tmp8 = true;
            							}
HXDLIN(2181)							if (_hx_tmp8) {
HXLINE(2181)								int _hx_tmp9 = ::flixel::FlxG_obj::width;
HXDLIN(2181)								spr->set_x(((( (Float)(_hx_tmp9) ) - spr->get_width()) / ( (Float)(2) )));
            							}
HXDLIN(2181)							bool _hx_tmp10;
HXDLIN(2181)							if ((axes2 != 16)) {
HXLINE(2181)								_hx_tmp10 = (axes2 == 17);
            							}
            							else {
HXLINE(2181)								_hx_tmp10 = true;
            							}
HXDLIN(2181)							if (_hx_tmp10) {
HXLINE(2181)								int _hx_tmp11 = ::flixel::FlxG_obj::height;
HXDLIN(2181)								spr->set_y(((( (Float)(_hx_tmp11) ) - spr->get_height()) / ( (Float)(2) )));
            							}
            						}
HXLINE(2182)						return;
            					}
            					_hx_goto_22:;
            				}
HXLINE(2185)				_gthis->luaTrace(((HX_("screenCenter: Object ",fa,1b,49,f4) + obj) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2159)			 cpp::Reference<lua_State> l150 = this->lua;
HXDLIN(2159)			::llua::Lua_helper_obj::callbacks->set(HX_("screenCenter",61,2e,f9,e2), ::Dynamic(new _hx_Closure_163(_gthis)));
HXDLIN(2159)			linc::callbacks::add_callback_function(l150,HX_("screenCenter",61,2e,f9,e2));
            		}
HXLINE(2187)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_164) HXARGC(2)
            			bool _hx_run(::String obj1,::String obj2){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2187_new)
HXLINE(2188)				::Array< ::String > namesArray = ::Array_obj< ::String >::__new(2)->init(0,obj1)->init(1,obj2);
HXLINE(2189)				::Array< ::Dynamic> objectsArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2190)				{
HXLINE(2190)					int _g = 0;
HXDLIN(2190)					int _g1 = namesArray->length;
HXDLIN(2190)					while((_g < _g1)){
HXLINE(2190)						_g = (_g + 1);
HXDLIN(2190)						int i = (_g - 1);
HXLINE(2192)						 ::flixel::FlxSprite real = ::PlayState_obj::instance->getLuaObject(namesArray->__get(i),null());
HXLINE(2193)						if (::hx::IsNotNull( real )) {
HXLINE(2194)							objectsArray->push(real);
            						}
            						else {
HXLINE(2196)							 ::flixel::FlxState _hx_tmp;
HXDLIN(2196)							if (::PlayState_obj::instance->isDead) {
HXLINE(2196)								_hx_tmp = ::GameOverSubstate_obj::instance;
            							}
            							else {
HXLINE(2196)								_hx_tmp = ::PlayState_obj::instance;
            							}
HXDLIN(2196)							objectsArray->push(::Reflect_obj::getProperty(_hx_tmp,namesArray->__get(i)));
            						}
            					}
            				}
HXLINE(2200)				bool _hx_tmp1;
HXDLIN(2200)				if (!(objectsArray->contains(null()))) {
HXLINE(2200)					_hx_tmp1 = ::flixel::FlxG_obj::overlap(objectsArray->__get(0).StaticCast<  ::flixel::FlxSprite >(),objectsArray->__get(1).StaticCast<  ::flixel::FlxSprite >(),null(),null());
            				}
            				else {
HXLINE(2200)					_hx_tmp1 = false;
            				}
HXDLIN(2200)				if (_hx_tmp1) {
HXLINE(2202)					return true;
            				}
HXLINE(2204)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2187)			 cpp::Reference<lua_State> l151 = this->lua;
HXDLIN(2187)			::llua::Lua_helper_obj::callbacks->set(HX_("objectsOverlap",13,85,15,48), ::Dynamic(new _hx_Closure_164()));
HXDLIN(2187)			linc::callbacks::add_callback_function(l151,HX_("objectsOverlap",13,85,15,48));
            		}
HXLINE(2206)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_165) HXARGC(3)
            			int _hx_run(::String obj,int x,int y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2206_new)
HXLINE(2207)				::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(2208)				 ::flixel::FlxSprite spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(2209)				if ((killMe->length > 1)) {
HXLINE(2210)					 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(2210)					spr = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            				}
HXLINE(2213)				if (::hx::IsNotNull( spr )) {
HXLINE(2215)					if (::hx::IsNotNull( spr->framePixels )) {
HXLINE(2215)						spr->framePixels->getPixel32(x,y);
            					}
HXLINE(2216)					return spr->get_pixels()->getPixel32(x,y);
            				}
HXLINE(2218)				return 0;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2206)			 cpp::Reference<lua_State> l152 = this->lua;
HXDLIN(2206)			::llua::Lua_helper_obj::callbacks->set(HX_("getPixelColor",33,11,bd,45), ::Dynamic(new _hx_Closure_165()));
HXDLIN(2206)			linc::callbacks::add_callback_function(l152,HX_("getPixelColor",33,11,bd,45));
            		}
HXLINE(2220)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_166) HXARGC(3)
            			int _hx_run(int min, ::Dynamic __o_max,::String __o_exclude){
            		int max = __o_max.Default(2147483647);
            		::String exclude = __o_exclude;
            		if (::hx::IsNull(__o_exclude)) exclude = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2220_new)
HXLINE(2221)				::Array< ::String > excludeArray = exclude.split(HX_(",",2c,00,00,00));
HXLINE(2222)				::Array< int > toExclude = ::Array_obj< int >::__new(0);
HXLINE(2223)				{
HXLINE(2223)					int _g = 0;
HXDLIN(2223)					int _g1 = excludeArray->length;
HXDLIN(2223)					while((_g < _g1)){
HXLINE(2223)						_g = (_g + 1);
HXDLIN(2223)						int i = (_g - 1);
HXLINE(2225)						toExclude->push(::Std_obj::parseInt(::StringTools_obj::trim(excludeArray->__get(i))));
            					}
            				}
HXLINE(2227)				return ::flixel::FlxG_obj::random->_hx_int(min,max,toExclude);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2220)			 cpp::Reference<lua_State> l153 = this->lua;
HXDLIN(2220)			::llua::Lua_helper_obj::callbacks->set(HX_("getRandomInt",36,23,9c,b6), ::Dynamic(new _hx_Closure_166()));
HXDLIN(2220)			linc::callbacks::add_callback_function(l153,HX_("getRandomInt",36,23,9c,b6));
            		}
HXLINE(2229)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_167) HXARGC(3)
            			Float _hx_run(Float min, ::Dynamic __o_max,::String __o_exclude){
            		Float max = __o_max.Default(1);
            		::String exclude = __o_exclude;
            		if (::hx::IsNull(__o_exclude)) exclude = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2229_new)
HXLINE(2230)				::Array< ::String > excludeArray = exclude.split(HX_(",",2c,00,00,00));
HXLINE(2231)				::Array< Float > toExclude = ::Array_obj< Float >::__new(0);
HXLINE(2232)				{
HXLINE(2232)					int _g = 0;
HXDLIN(2232)					int _g1 = excludeArray->length;
HXDLIN(2232)					while((_g < _g1)){
HXLINE(2232)						_g = (_g + 1);
HXDLIN(2232)						int i = (_g - 1);
HXLINE(2234)						toExclude->push(::Std_obj::parseFloat(::StringTools_obj::trim(excludeArray->__get(i))));
            					}
            				}
HXLINE(2236)				return ::flixel::FlxG_obj::random->_hx_float(min,max,toExclude);
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2229)			 cpp::Reference<lua_State> l154 = this->lua;
HXDLIN(2229)			::llua::Lua_helper_obj::callbacks->set(HX_("getRandomFloat",a3,3b,ca,f4), ::Dynamic(new _hx_Closure_167()));
HXDLIN(2229)			linc::callbacks::add_callback_function(l154,HX_("getRandomFloat",a3,3b,ca,f4));
            		}
HXLINE(2238)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_168) HXARGC(1)
            			bool _hx_run( ::Dynamic __o_chance){
            		Float chance = __o_chance.Default(50);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2239_new)
HXLINE(2239)				return (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < chance);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2238)			 cpp::Reference<lua_State> l155 = this->lua;
HXDLIN(2238)			::llua::Lua_helper_obj::callbacks->set(HX_("getRandomBool",03,ec,62,0d), ::Dynamic(new _hx_Closure_168()));
HXDLIN(2238)			linc::callbacks::add_callback_function(l155,HX_("getRandomBool",03,ec,62,0d));
            		}
HXLINE(2241)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_169, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String dialogueFile,::String music){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2241_new)
HXLINE(2244)				::String path = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2244)				 ::EReg invalidChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2244)				 ::EReg hideChars =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2244)				::String path1 = invalidChars->split(::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXLINE(2242)				::String path2 = ::Paths_obj::modFolders(((HX_("data/",c5,0e,88,d4) + ((hideChars->split(path1)->join(HX_("",00,00,00,00)).toLowerCase() + HX_("/",2f,00,00,00)) + dialogueFile)) + HX_(".json",56,f1,d6,c2)));
HXLINE(2245)				if (!(::sys::FileSystem_obj::exists(path2))) {
HXLINE(2247)					::String path3 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXDLIN(2247)					 ::EReg invalidChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[~&\\\\;:<>#]",7e,4d,88,67),HX_("",00,00,00,00));
HXDLIN(2247)					 ::EReg hideChars1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("[.,'\"%?!]",ca,d9,c0,ac),HX_("",00,00,00,00));
HXDLIN(2247)					::String path4 = invalidChars1->split(::StringTools_obj::replace(path3,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)))->join(HX_("-",2d,00,00,00));
HXDLIN(2247)					::String library = null();
HXDLIN(2247)					path2 = ::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + ((hideChars1->split(path4)->join(HX_("",00,00,00,00)).toLowerCase() + HX_("/",2f,00,00,00)) + dialogueFile)) + HX_(".json",56,f1,d6,c2)),HX_("TEXT",ad,94,ba,37),library);
            				}
HXLINE(2249)				_gthis->luaTrace((HX_("startDialogue: Trying to load dialogue: ",ec,81,25,2d) + path2),null(),null(),null());
HXLINE(2252)				if (::sys::FileSystem_obj::exists(path2)) {
HXLINE(2257)					 ::Dynamic shit = ::DialogueBoxPsych_obj::parseDialogue(path2);
HXLINE(2258)					if ((( (::Array< ::Dynamic>)(shit->__Field(HX_("dialogue",18,2d,94,a7),::hx::paccDynamic)) )->length > 0)) {
HXLINE(2259)						::PlayState_obj::instance->startDialogue(shit,music);
HXLINE(2260)						_gthis->luaTrace(HX_("startDialogue: Successfully loaded dialogue",ba,12,25,dc),false,false,-16744448);
HXLINE(2261)						return true;
            					}
            					else {
HXLINE(2263)						_gthis->luaTrace(HX_("startDialogue: Your dialogue file is badly formatted!",00,e6,fc,67),false,false,-65536);
            					}
            				}
            				else {
HXLINE(2266)					_gthis->luaTrace(HX_("startDialogue: Dialogue file not found",f9,9d,dd,42),false,false,-65536);
HXLINE(2267)					if (::PlayState_obj::instance->endingSong) {
HXLINE(2268)						::PlayState_obj::instance->endSong();
            					}
            					else {
HXLINE(2270)						::PlayState_obj::instance->startCountdown();
            					}
            				}
HXLINE(2273)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2241)			 cpp::Reference<lua_State> l156 = this->lua;
HXDLIN(2241)			::llua::Lua_helper_obj::callbacks->set(HX_("startDialogue",9a,8f,4f,ac), ::Dynamic(new _hx_Closure_169(_gthis)));
HXDLIN(2241)			linc::callbacks::add_callback_function(l156,HX_("startDialogue",9a,8f,4f,ac));
            		}
HXLINE(2275)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_170, ::FunkinLua,_gthis) HXARGC(1)
            			bool _hx_run(::String videoFile){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2275_new)
HXLINE(2277)				if (::sys::FileSystem_obj::exists(::Paths_obj::video(videoFile))) {
HXLINE(2278)					::PlayState_obj::instance->startVideo(videoFile);
HXLINE(2279)					return true;
            				}
            				else {
HXLINE(2281)					_gthis->luaTrace((HX_("startVideo: Video file not found: ",fb,91,b5,c8) + videoFile),false,false,-65536);
            				}
HXLINE(2283)				return false;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2275)			 cpp::Reference<lua_State> l157 = this->lua;
HXDLIN(2275)			::llua::Lua_helper_obj::callbacks->set(HX_("startVideo",b9,ec,12,53), ::Dynamic(new _hx_Closure_170(_gthis)));
HXDLIN(2275)			linc::callbacks::add_callback_function(l157,HX_("startVideo",b9,ec,12,53));
            		}
HXLINE(2295)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_171) HXARGC(3)
            			void _hx_run(::String sound, ::Dynamic __o_volume, ::Dynamic __o_loop){
            		Float volume = __o_volume.Default(1);
            		bool loop = __o_loop.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2296_new)
HXLINE(2296)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2296)				::String library = null();
HXDLIN(2296)				 ::openfl::media::Sound file = ::Paths_obj::returnSound(HX_("music",a5,d0,5a,10),sound,library);
HXDLIN(2296)				_hx_tmp->playMusic(file,volume,loop,null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(2295)			 cpp::Reference<lua_State> l158 = this->lua;
HXDLIN(2295)			::llua::Lua_helper_obj::callbacks->set(HX_("playMusic",11,fe,3e,31), ::Dynamic(new _hx_Closure_171()));
HXDLIN(2295)			linc::callbacks::add_callback_function(l158,HX_("playMusic",11,fe,3e,31));
            		}
HXLINE(2298)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_173) HXARGC(3)
            			void _hx_run(::String sound, ::Dynamic __o_volume,::String tag){
            		Float volume = __o_volume.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2298_new)
HXLINE(2298)				::Array< ::String > tag1 = ::Array_obj< ::String >::__new(1)->init(0,tag);
HXLINE(2299)				bool _hx_tmp;
HXDLIN(2299)				if (::hx::IsNotNull( tag1->__get(0) )) {
HXLINE(2299)					_hx_tmp = (tag1->__get(0).length > 0);
            				}
            				else {
HXLINE(2299)					_hx_tmp = false;
            				}
HXDLIN(2299)				if (_hx_tmp) {
HXLINE(2300)					tag1[0] = ::StringTools_obj::replace(tag1->__get(0),HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE(2301)					if (::PlayState_obj::instance->modchartSounds->exists(tag1->__get(0))) {
HXLINE(2302)						 ::flixel::sound::FlxSound _this = ( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag1->__get(0))) );
HXDLIN(2302)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2304)					{
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_172,::Array< ::String >,tag1) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2304_new)
HXLINE(2305)							::PlayState_obj::instance->modchartSounds->remove(tag1->__get(0));
HXLINE(2306)							::PlayState_obj::instance->callOnLuas(HX_("onSoundFinished",c2,2a,b1,b9),::cpp::VirtualArray_obj::__new(1)->init(0,tag1->__get(0)),null(),null());
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(2304)						::Dynamic this1 = ::PlayState_obj::instance->modchartSounds;
HXDLIN(2304)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd value = ::flixel::FlxG_obj::sound;
HXDLIN(2304)						 ::flixel::sound::FlxSound value1 = value->play(::Paths_obj::sound(sound,null()),volume,false,null(),null(), ::Dynamic(new _hx_Closure_172(tag1)));
HXDLIN(2304)						( ( ::haxe::ds::StringMap)(this1) )->set(tag1->__get(0),value1);
            					}
HXLINE(2308)					return;
            				}
HXLINE(2310)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(2310)				_hx_tmp1->play(::Paths_obj::sound(sound,null()),volume,null(),null(),null(),null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(2298)			 cpp::Reference<lua_State> l159 = this->lua;
HXDLIN(2298)			::llua::Lua_helper_obj::callbacks->set(HX_("playSound",3b,ba,b0,a1), ::Dynamic(new _hx_Closure_173()));
HXDLIN(2298)			linc::callbacks::add_callback_function(l159,HX_("playSound",3b,ba,b0,a1));
            		}
HXLINE(2312)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_174) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2313_new)
HXLINE(2313)				bool _hx_tmp;
HXDLIN(2313)				bool _hx_tmp1;
HXDLIN(2313)				if (::hx::IsNotNull( tag )) {
HXLINE(2313)					_hx_tmp1 = (tag.length > 1);
            				}
            				else {
HXLINE(2313)					_hx_tmp1 = false;
            				}
HXDLIN(2313)				if (_hx_tmp1) {
HXLINE(2313)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(2313)					_hx_tmp = false;
            				}
HXDLIN(2313)				if (_hx_tmp) {
HXLINE(2314)					{
HXLINE(2314)						 ::flixel::sound::FlxSound _this = ( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXDLIN(2314)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2315)					::PlayState_obj::instance->modchartSounds->remove(tag);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2312)			 cpp::Reference<lua_State> l160 = this->lua;
HXDLIN(2312)			::llua::Lua_helper_obj::callbacks->set(HX_("stopSound",6d,c5,0e,91), ::Dynamic(new _hx_Closure_174()));
HXDLIN(2312)			linc::callbacks::add_callback_function(l160,HX_("stopSound",6d,c5,0e,91));
            		}
HXLINE(2318)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_175) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2319_new)
HXLINE(2319)				bool _hx_tmp;
HXDLIN(2319)				bool _hx_tmp1;
HXDLIN(2319)				if (::hx::IsNotNull( tag )) {
HXLINE(2319)					_hx_tmp1 = (tag.length > 1);
            				}
            				else {
HXLINE(2319)					_hx_tmp1 = false;
            				}
HXDLIN(2319)				if (_hx_tmp1) {
HXLINE(2319)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(2319)					_hx_tmp = false;
            				}
HXDLIN(2319)				if (_hx_tmp) {
HXLINE(2320)					( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->pause();
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2318)			 cpp::Reference<lua_State> l161 = this->lua;
HXDLIN(2318)			::llua::Lua_helper_obj::callbacks->set(HX_("pauseSound",f9,29,45,56), ::Dynamic(new _hx_Closure_175()));
HXDLIN(2318)			linc::callbacks::add_callback_function(l161,HX_("pauseSound",f9,29,45,56));
            		}
HXLINE(2323)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_176) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2324_new)
HXLINE(2324)				bool _hx_tmp;
HXDLIN(2324)				bool _hx_tmp1;
HXDLIN(2324)				if (::hx::IsNotNull( tag )) {
HXLINE(2324)					_hx_tmp1 = (tag.length > 1);
            				}
            				else {
HXLINE(2324)					_hx_tmp1 = false;
            				}
HXDLIN(2324)				if (_hx_tmp1) {
HXLINE(2324)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(2324)					_hx_tmp = false;
            				}
HXDLIN(2324)				if (_hx_tmp) {
HXLINE(2325)					( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->play(null(),null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2323)			 cpp::Reference<lua_State> l162 = this->lua;
HXDLIN(2323)			::llua::Lua_helper_obj::callbacks->set(HX_("resumeSound",e2,5f,96,51), ::Dynamic(new _hx_Closure_176()));
HXDLIN(2323)			linc::callbacks::add_callback_function(l162,HX_("resumeSound",e2,5f,96,51));
            		}
HXLINE(2328)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_177) HXARGC(4)
            			void _hx_run(::String tag,Float duration, ::Dynamic __o_fromValue, ::Dynamic __o_toValue){
            		Float fromValue = __o_fromValue.Default(0);
            		Float toValue = __o_toValue.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2329_new)
HXLINE(2329)				bool _hx_tmp;
HXDLIN(2329)				if (::hx::IsNotNull( tag )) {
HXLINE(2329)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(2329)					_hx_tmp = true;
            				}
HXDLIN(2329)				if (_hx_tmp) {
HXLINE(2330)					 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2330)					 ::Dynamic onComplete = null();
HXDLIN(2330)					if (::hx::IsNull( _this->_channel )) {
HXLINE(2330)						_this->play(null(),null(),null());
            					}
HXDLIN(2330)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(2330)						_this->fadeTween->cancel();
            					}
HXDLIN(2330)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            				else {
HXLINE(2331)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(2332)						 ::flixel::sound::FlxSound _this1 = ( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXDLIN(2332)						 ::Dynamic onComplete1 = null();
HXDLIN(2332)						if (::hx::IsNull( _this1->_channel )) {
HXLINE(2332)							_this1->play(null(),null(),null());
            						}
HXDLIN(2332)						if (::hx::IsNotNull( _this1->fadeTween )) {
HXLINE(2332)							_this1->fadeTween->cancel();
            						}
HXDLIN(2332)						_this1->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete1)),_this1->volumeTween_dyn());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(2328)			 cpp::Reference<lua_State> l163 = this->lua;
HXDLIN(2328)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeIn",b0,52,d8,97), ::Dynamic(new _hx_Closure_177()));
HXDLIN(2328)			linc::callbacks::add_callback_function(l163,HX_("soundFadeIn",b0,52,d8,97));
            		}
HXLINE(2336)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_178) HXARGC(3)
            			void _hx_run(::String tag,Float duration, ::Dynamic __o_toValue){
            		Float toValue = __o_toValue.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2337_new)
HXLINE(2337)				bool _hx_tmp;
HXDLIN(2337)				if (::hx::IsNotNull( tag )) {
HXLINE(2337)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(2337)					_hx_tmp = true;
            				}
HXDLIN(2337)				if (_hx_tmp) {
HXLINE(2338)					 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2338)					 ::Dynamic To = toValue;
HXDLIN(2338)					 ::Dynamic onComplete = null();
HXDLIN(2338)					if (::hx::IsNull( To )) {
HXLINE(2338)						To = 0;
            					}
HXDLIN(2338)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(2338)						_this->fadeTween->cancel();
            					}
HXDLIN(2338)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            				else {
HXLINE(2339)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(2340)						 ::flixel::sound::FlxSound _this1 = ( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXDLIN(2340)						 ::Dynamic To1 = toValue;
HXDLIN(2340)						 ::Dynamic onComplete1 = null();
HXDLIN(2340)						if (::hx::IsNull( To1 )) {
HXLINE(2340)							To1 = 0;
            						}
HXDLIN(2340)						if (::hx::IsNotNull( _this1->fadeTween )) {
HXLINE(2340)							_this1->fadeTween->cancel();
            						}
HXDLIN(2340)						_this1->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this1->_volume,( (Float)(To1) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete1)),_this1->volumeTween_dyn());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(2336)			 cpp::Reference<lua_State> l164 = this->lua;
HXDLIN(2336)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeOut",63,9b,74,45), ::Dynamic(new _hx_Closure_178()));
HXDLIN(2336)			linc::callbacks::add_callback_function(l164,HX_("soundFadeOut",63,9b,74,45));
            		}
HXLINE(2343)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_179) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2344_new)
HXLINE(2344)				bool _hx_tmp;
HXDLIN(2344)				if (::hx::IsNotNull( tag )) {
HXLINE(2344)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(2344)					_hx_tmp = true;
            				}
HXDLIN(2344)				if (_hx_tmp) {
HXLINE(2345)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->fadeTween )) {
HXLINE(2346)						::flixel::FlxG_obj::sound->music->fadeTween->cancel();
            					}
            				}
            				else {
HXLINE(2348)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(2349)						 ::flixel::sound::FlxSound theSound = ( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXLINE(2350)						if (::hx::IsNotNull( theSound->fadeTween )) {
HXLINE(2351)							theSound->fadeTween->cancel();
HXLINE(2352)							::PlayState_obj::instance->modchartSounds->remove(tag);
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2343)			 cpp::Reference<lua_State> l165 = this->lua;
HXDLIN(2343)			::llua::Lua_helper_obj::callbacks->set(HX_("soundFadeCancel",c5,a5,96,fc), ::Dynamic(new _hx_Closure_179()));
HXDLIN(2343)			linc::callbacks::add_callback_function(l165,HX_("soundFadeCancel",c5,a5,96,fc));
            		}
HXLINE(2356)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_180) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2356_new)
HXLINE(2357)				bool _hx_tmp;
HXDLIN(2357)				if (::hx::IsNotNull( tag )) {
HXLINE(2357)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(2357)					_hx_tmp = true;
            				}
HXDLIN(2357)				if (_hx_tmp) {
HXLINE(2358)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2359)						return ::flixel::FlxG_obj::sound->music->_volume;
            					}
            				}
            				else {
HXLINE(2361)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(2362)						return ( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->_volume;
            					}
            				}
HXLINE(2364)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2356)			 cpp::Reference<lua_State> l166 = this->lua;
HXDLIN(2356)			::llua::Lua_helper_obj::callbacks->set(HX_("getSoundVolume",13,83,1e,9a), ::Dynamic(new _hx_Closure_180()));
HXDLIN(2356)			linc::callbacks::add_callback_function(l166,HX_("getSoundVolume",13,83,1e,9a));
            		}
HXLINE(2366)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_181) HXARGC(2)
            			void _hx_run(::String tag,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2367_new)
HXLINE(2367)				bool _hx_tmp;
HXDLIN(2367)				if (::hx::IsNotNull( tag )) {
HXLINE(2367)					_hx_tmp = (tag.length < 1);
            				}
            				else {
HXLINE(2367)					_hx_tmp = true;
            				}
HXDLIN(2367)				if (_hx_tmp) {
HXLINE(2368)					if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2369)						::flixel::FlxG_obj::sound->music->set_volume(value);
            					}
            				}
            				else {
HXLINE(2371)					if (::PlayState_obj::instance->modchartSounds->exists(tag)) {
HXLINE(2372)						( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->set_volume(value);
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2366)			 cpp::Reference<lua_State> l167 = this->lua;
HXDLIN(2366)			::llua::Lua_helper_obj::callbacks->set(HX_("setSoundVolume",87,6b,3e,ba), ::Dynamic(new _hx_Closure_181()));
HXDLIN(2366)			linc::callbacks::add_callback_function(l167,HX_("setSoundVolume",87,6b,3e,ba));
            		}
HXLINE(2375)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_182) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2375_new)
HXLINE(2376)				bool _hx_tmp;
HXDLIN(2376)				bool _hx_tmp1;
HXDLIN(2376)				if (::hx::IsNotNull( tag )) {
HXLINE(2376)					_hx_tmp1 = (tag.length > 0);
            				}
            				else {
HXLINE(2376)					_hx_tmp1 = false;
            				}
HXDLIN(2376)				if (_hx_tmp1) {
HXLINE(2376)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(2376)					_hx_tmp = false;
            				}
HXDLIN(2376)				if (_hx_tmp) {
HXLINE(2377)					return ( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) )->_time;
            				}
HXLINE(2379)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2375)			 cpp::Reference<lua_State> l168 = this->lua;
HXDLIN(2375)			::llua::Lua_helper_obj::callbacks->set(HX_("getSoundTime",06,35,21,67), ::Dynamic(new _hx_Closure_182()));
HXDLIN(2375)			linc::callbacks::add_callback_function(l168,HX_("getSoundTime",06,35,21,67));
            		}
HXLINE(2381)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_183) HXARGC(2)
            			void _hx_run(::String tag,Float value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2382_new)
HXLINE(2382)				bool _hx_tmp;
HXDLIN(2382)				bool _hx_tmp1;
HXDLIN(2382)				if (::hx::IsNotNull( tag )) {
HXLINE(2382)					_hx_tmp1 = (tag.length > 0);
            				}
            				else {
HXLINE(2382)					_hx_tmp1 = false;
            				}
HXDLIN(2382)				if (_hx_tmp1) {
HXLINE(2382)					_hx_tmp = ::PlayState_obj::instance->modchartSounds->exists(tag);
            				}
            				else {
HXLINE(2382)					_hx_tmp = false;
            				}
HXDLIN(2382)				if (_hx_tmp) {
HXLINE(2383)					 ::flixel::sound::FlxSound theSound = ( ( ::flixel::sound::FlxSound)(::PlayState_obj::instance->modchartSounds->get(tag)) );
HXLINE(2384)					if (::hx::IsNotNull( theSound )) {
HXLINE(2385)						bool wasResumed = ::hx::IsNotNull( theSound->_channel );
HXLINE(2386)						theSound->pause();
HXLINE(2387)						theSound->set_time(value);
HXLINE(2388)						if (wasResumed) {
HXLINE(2388)							theSound->play(null(),null(),null());
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2381)			 cpp::Reference<lua_State> l169 = this->lua;
HXDLIN(2381)			::llua::Lua_helper_obj::callbacks->set(HX_("setSoundTime",7a,58,1a,7c), ::Dynamic(new _hx_Closure_183()));
HXDLIN(2381)			linc::callbacks::add_callback_function(l169,HX_("setSoundTime",7a,58,1a,7c));
            		}
HXLINE(2393)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_184, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run( ::Dynamic __o_text1, ::Dynamic __o_text2, ::Dynamic __o_text3, ::Dynamic __o_text4, ::Dynamic __o_text5){
            		 ::Dynamic text1 = __o_text1;
            		if (::hx::IsNull(__o_text1)) text1 = HX_("",00,00,00,00);
            		 ::Dynamic text2 = __o_text2;
            		if (::hx::IsNull(__o_text2)) text2 = HX_("",00,00,00,00);
            		 ::Dynamic text3 = __o_text3;
            		if (::hx::IsNull(__o_text3)) text3 = HX_("",00,00,00,00);
            		 ::Dynamic text4 = __o_text4;
            		if (::hx::IsNull(__o_text4)) text4 = HX_("",00,00,00,00);
            		 ::Dynamic text5 = __o_text5;
            		if (::hx::IsNull(__o_text5)) text5 = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2393_new)
HXLINE(2394)				if (::hx::IsNull( text1 )) {
HXLINE(2394)					text1 = HX_("",00,00,00,00);
            				}
HXLINE(2395)				if (::hx::IsNull( text2 )) {
HXLINE(2395)					text2 = HX_("",00,00,00,00);
            				}
HXLINE(2396)				if (::hx::IsNull( text3 )) {
HXLINE(2396)					text3 = HX_("",00,00,00,00);
            				}
HXLINE(2397)				if (::hx::IsNull( text4 )) {
HXLINE(2397)					text4 = HX_("",00,00,00,00);
            				}
HXLINE(2398)				if (::hx::IsNull( text5 )) {
HXLINE(2398)					text5 = HX_("",00,00,00,00);
            				}
HXLINE(2399)				 ::FunkinLua _gthis1 = _gthis;
HXDLIN(2399)				::String _hx_tmp = (HX_("",00,00,00,00) + ::Std_obj::string(text1));
HXDLIN(2399)				::String _hx_tmp1 = (_hx_tmp + ::Std_obj::string(text2));
HXDLIN(2399)				::String _hx_tmp2 = (_hx_tmp1 + ::Std_obj::string(text3));
HXDLIN(2399)				::String _hx_tmp3 = (_hx_tmp2 + ::Std_obj::string(text4));
HXDLIN(2399)				_gthis1->luaTrace((_hx_tmp3 + ::Std_obj::string(text5)),true,false,null());
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(2393)			 cpp::Reference<lua_State> l170 = this->lua;
HXDLIN(2393)			::llua::Lua_helper_obj::callbacks->set(HX_("debugPrint",da,28,6f,c7), ::Dynamic(new _hx_Closure_184(_gthis)));
HXDLIN(2393)			linc::callbacks::add_callback_function(l170,HX_("debugPrint",da,28,6f,c7));
            		}
HXLINE(2402)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_185, ::FunkinLua,_gthis) HXARGC(0)
            			bool _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2402_new)
HXLINE(2403)				_gthis->closed = true;
HXLINE(2404)				return _gthis->closed;
            			}
            			HX_END_LOCAL_FUNC0(return)

HXLINE(2402)			 cpp::Reference<lua_State> l171 = this->lua;
HXDLIN(2402)			::llua::Lua_helper_obj::callbacks->set(HX_("close",b8,17,63,48), ::Dynamic(new _hx_Closure_185(_gthis)));
HXDLIN(2402)			linc::callbacks::add_callback_function(l171,HX_("close",b8,17,63,48));
            		}
HXLINE(2407)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_186) HXARGC(5)
            			void _hx_run(::String details,::String state,::String smallImageKey, ::Dynamic hasStartTimestamp, ::Dynamic endTimestamp){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2409_new)
HXLINE(2409)				::DiscordClient_obj::changePresence(details,state,smallImageKey,hasStartTimestamp,endTimestamp);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(2407)			 cpp::Reference<lua_State> l172 = this->lua;
HXDLIN(2407)			::llua::Lua_helper_obj::callbacks->set(HX_("changePresence",cb,8f,12,c0), ::Dynamic(new _hx_Closure_186()));
HXDLIN(2407)			linc::callbacks::add_callback_function(l172,HX_("changePresence",cb,8f,12,c0));
            		}
HXLINE(2415)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_187, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String text,int width,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2415_new)
HXLINE(2416)				tag = ::StringTools_obj::replace(tag,HX_(".",2e,00,00,00),HX_("",00,00,00,00));
HXLINE(2417)				_gthis->resetTextTag(tag);
HXLINE(2418)				 ::ModchartText leText =  ::ModchartText_obj::__alloc( HX_CTX ,x,y,text,( (Float)(width) ));
HXLINE(2419)				::PlayState_obj::instance->modchartTexts->set(tag,leText);
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(2415)			 cpp::Reference<lua_State> l173 = this->lua;
HXDLIN(2415)			::llua::Lua_helper_obj::callbacks->set(HX_("makeLuaText",37,b6,8a,a8), ::Dynamic(new _hx_Closure_187(_gthis)));
HXDLIN(2415)			linc::callbacks::add_callback_function(l173,HX_("makeLuaText",37,b6,8a,a8));
            		}
HXLINE(2422)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_188, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,::String text){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2422_new)
HXLINE(2423)				 ::flixel::text::FlxText obj;
HXDLIN(2423)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2423)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2423)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2424)				if (::hx::IsNotNull( obj )) {
HXLINE(2426)					obj->set_text(text);
HXLINE(2427)					return true;
            				}
HXLINE(2429)				_gthis->luaTrace(((HX_("setTextString: Object ",db,c2,bd,c4) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2430)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2422)			 cpp::Reference<lua_State> l174 = this->lua;
HXDLIN(2422)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextString",a0,e7,98,e9), ::Dynamic(new _hx_Closure_188(_gthis)));
HXDLIN(2422)			linc::callbacks::add_callback_function(l174,HX_("setTextString",a0,e7,98,e9));
            		}
HXLINE(2432)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_189, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,int size){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2432_new)
HXLINE(2433)				 ::flixel::text::FlxText obj;
HXDLIN(2433)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2433)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2433)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2434)				if (::hx::IsNotNull( obj )) {
HXLINE(2436)					obj->set_size(size);
HXLINE(2437)					return true;
            				}
HXLINE(2439)				_gthis->luaTrace(((HX_("setTextSize: Object ",ab,a6,12,0a) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2440)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2432)			 cpp::Reference<lua_State> l175 = this->lua;
HXDLIN(2432)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextSize",d0,bd,af,7f), ::Dynamic(new _hx_Closure_189(_gthis)));
HXDLIN(2432)			linc::callbacks::add_callback_function(l175,HX_("setTextSize",d0,bd,af,7f));
            		}
HXLINE(2442)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_190, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,Float width){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2442_new)
HXLINE(2443)				 ::flixel::text::FlxText obj;
HXDLIN(2443)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2443)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2443)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2444)				if (::hx::IsNotNull( obj )) {
HXLINE(2446)					obj->set_fieldWidth(width);
HXLINE(2447)					return true;
            				}
HXLINE(2449)				_gthis->luaTrace(((HX_("setTextWidth: Object ",84,9d,80,ca) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2450)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2442)			 cpp::Reference<lua_State> l176 = this->lua;
HXDLIN(2442)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextWidth",17,06,a0,87), ::Dynamic(new _hx_Closure_190(_gthis)));
HXDLIN(2442)			linc::callbacks::add_callback_function(l176,HX_("setTextWidth",17,06,a0,87));
            		}
HXLINE(2452)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_191, ::FunkinLua,_gthis) HXARGC(3)
            			bool _hx_run(::String tag,int size,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2452_new)
HXLINE(2453)				 ::flixel::text::FlxText obj;
HXDLIN(2453)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2453)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2453)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2454)				if (::hx::IsNotNull( obj )) {
HXLINE(2456)					Float colorNum = ( (Float)(::Std_obj::parseInt(color)) );
HXLINE(2457)					if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(2457)						colorNum = ( (Float)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            					}
HXLINE(2459)					obj->set_borderSize(( (Float)(size) ));
HXLINE(2460)					obj->set_borderColor(::Std_obj::_hx_int(colorNum));
HXLINE(2461)					return true;
            				}
HXLINE(2463)				_gthis->luaTrace(((HX_("setTextBorder: Object ",60,c3,49,85) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2464)				return false;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2452)			 cpp::Reference<lua_State> l177 = this->lua;
HXDLIN(2452)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextBorder",bb,0b,83,3c), ::Dynamic(new _hx_Closure_191(_gthis)));
HXDLIN(2452)			linc::callbacks::add_callback_function(l177,HX_("setTextBorder",bb,0b,83,3c));
            		}
HXLINE(2466)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_192, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2466_new)
HXLINE(2467)				 ::flixel::text::FlxText obj;
HXDLIN(2467)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2467)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2467)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2468)				if (::hx::IsNotNull( obj )) {
HXLINE(2470)					Float colorNum = ( (Float)(::Std_obj::parseInt(color)) );
HXLINE(2471)					if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(2471)						colorNum = ( (Float)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            					}
HXLINE(2473)					obj->set_color(::Std_obj::_hx_int(colorNum));
HXLINE(2474)					return true;
            				}
HXLINE(2476)				_gthis->luaTrace(((HX_("setTextColor: Object ",87,0e,05,44) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2477)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2466)			 cpp::Reference<lua_State> l178 = this->lua;
HXDLIN(2466)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextColor",74,c1,99,07), ::Dynamic(new _hx_Closure_192(_gthis)));
HXDLIN(2466)			linc::callbacks::add_callback_function(l178,HX_("setTextColor",74,c1,99,07));
            		}
HXLINE(2479)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_193, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,::String newFont){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2479_new)
HXLINE(2480)				 ::flixel::text::FlxText obj;
HXDLIN(2480)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2480)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2480)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2481)				if (::hx::IsNotNull( obj )) {
HXLINE(2483)					::String file = ::Paths_obj::modFolders((HX_("fonts/",eb,13,ef,fa) + newFont));
HXDLIN(2483)					::String _hx_tmp;
HXDLIN(2483)					if (::sys::FileSystem_obj::exists(file)) {
HXLINE(2483)						_hx_tmp = file;
            					}
            					else {
HXLINE(2483)						_hx_tmp = (HX_("assets/fonts/",37,ff,a5,9c) + newFont);
            					}
HXDLIN(2483)					obj->set_font(_hx_tmp);
HXLINE(2484)					return true;
            				}
HXLINE(2486)				_gthis->luaTrace(((HX_("setTextFont: Object ",dd,d7,b8,43) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2487)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2479)			 cpp::Reference<lua_State> l179 = this->lua;
HXDLIN(2479)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextFont",de,7a,1c,77), ::Dynamic(new _hx_Closure_193(_gthis)));
HXDLIN(2479)			linc::callbacks::add_callback_function(l179,HX_("setTextFont",de,7a,1c,77));
            		}
HXLINE(2489)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_194, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,bool italic){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2489_new)
HXLINE(2490)				 ::flixel::text::FlxText obj;
HXDLIN(2490)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2490)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2490)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2491)				if (::hx::IsNotNull( obj )) {
HXLINE(2493)					obj->set_italic(italic);
HXLINE(2494)					return true;
            				}
HXLINE(2496)				_gthis->luaTrace(((HX_("setTextItalic: Object ",dc,80,dd,90) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2497)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2489)			 cpp::Reference<lua_State> l180 = this->lua;
HXDLIN(2489)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextItalic",bf,ed,cc,de), ::Dynamic(new _hx_Closure_194(_gthis)));
HXDLIN(2489)			linc::callbacks::add_callback_function(l180,HX_("setTextItalic",bf,ed,cc,de));
            		}
HXLINE(2499)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_195, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,::String __o_alignment){
            		::String alignment = __o_alignment;
            		if (::hx::IsNull(__o_alignment)) alignment = HX_("left",07,08,b0,47);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2499_new)
HXLINE(2500)				 ::flixel::text::FlxText obj;
HXDLIN(2500)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2500)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2500)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2501)				if (::hx::IsNotNull( obj )) {
HXLINE(2503)					obj->set_alignment(HX_("left",07,08,b0,47));
HXLINE(2504)					::String _hx_switch_13 = ::StringTools_obj::trim(alignment).toLowerCase();
            					if (  (_hx_switch_13==HX_("center",d5,25,db,05)) ){
HXLINE(2509)						obj->set_alignment(HX_("center",d5,25,db,05));
HXDLIN(2509)						goto _hx_goto_26;
            					}
            					if (  (_hx_switch_13==HX_("right",dc,0b,64,e9)) ){
HXLINE(2507)						obj->set_alignment(HX_("right",dc,0b,64,e9));
HXDLIN(2507)						goto _hx_goto_26;
            					}
            					_hx_goto_26:;
HXLINE(2511)					return true;
            				}
HXLINE(2513)				_gthis->luaTrace(((HX_("setTextAlignment: Object ",87,00,d2,fe) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2514)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2499)			 cpp::Reference<lua_State> l181 = this->lua;
HXDLIN(2499)			::llua::Lua_helper_obj::callbacks->set(HX_("setTextAlignment",74,0f,33,62), ::Dynamic(new _hx_Closure_195(_gthis)));
HXDLIN(2499)			linc::callbacks::add_callback_function(l181,HX_("setTextAlignment",74,0f,33,62));
            		}
HXLINE(2517)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_196, ::FunkinLua,_gthis) HXARGC(1)
            			::String _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2517_new)
HXLINE(2518)				 ::flixel::text::FlxText obj;
HXDLIN(2518)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2518)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2518)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2519)				bool _hx_tmp;
HXDLIN(2519)				if (::hx::IsNotNull( obj )) {
HXLINE(2519)					_hx_tmp = ::hx::IsNotNull( obj->text );
            				}
            				else {
HXLINE(2519)					_hx_tmp = false;
            				}
HXDLIN(2519)				if (_hx_tmp) {
HXLINE(2521)					return obj->text;
            				}
HXLINE(2523)				_gthis->luaTrace(((HX_("getTextString: Object ",67,46,12,91) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2524)				lua_pushnil(_gthis->lua);
HXLINE(2525)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2517)			 cpp::Reference<lua_State> l182 = this->lua;
HXDLIN(2517)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextString",94,05,93,a4), ::Dynamic(new _hx_Closure_196(_gthis)));
HXDLIN(2517)			linc::callbacks::add_callback_function(l182,HX_("getTextString",94,05,93,a4));
            		}
HXLINE(2527)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_197, ::FunkinLua,_gthis) HXARGC(1)
            			int _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2527_new)
HXLINE(2528)				 ::flixel::text::FlxText obj;
HXDLIN(2528)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2528)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2528)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2529)				if (::hx::IsNotNull( obj )) {
HXLINE(2531)					return ::Std_obj::_hx_int(( (Float)(obj->_defaultFormat->size) ));
            				}
HXLINE(2533)				_gthis->luaTrace(((HX_("getTextSize: Object ",37,ef,5a,3d) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2534)				return -1;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2527)			 cpp::Reference<lua_State> l183 = this->lua;
HXDLIN(2527)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextSize",c4,b6,42,75), ::Dynamic(new _hx_Closure_197(_gthis)));
HXDLIN(2527)			linc::callbacks::add_callback_function(l183,HX_("getTextSize",c4,b6,42,75));
            		}
HXLINE(2536)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_198, ::FunkinLua,_gthis) HXARGC(1)
            			::String _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2536_new)
HXLINE(2537)				 ::flixel::text::FlxText obj;
HXDLIN(2537)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2537)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2537)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2538)				if (::hx::IsNotNull( obj )) {
HXLINE(2540)					return obj->_font;
            				}
HXLINE(2542)				_gthis->luaTrace(((HX_("getTextFont: Object ",69,20,01,77) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2543)				lua_pushnil(_gthis->lua);
HXLINE(2544)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2536)			 cpp::Reference<lua_State> l184 = this->lua;
HXDLIN(2536)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextFont",d2,73,af,6c), ::Dynamic(new _hx_Closure_198(_gthis)));
HXDLIN(2536)			linc::callbacks::add_callback_function(l184,HX_("getTextFont",d2,73,af,6c));
            		}
HXLINE(2546)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_199, ::FunkinLua,_gthis) HXARGC(1)
            			Float _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2546_new)
HXLINE(2547)				 ::flixel::text::FlxText obj;
HXDLIN(2547)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2547)					obj = ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
            				}
            				else {
HXLINE(2547)					obj = ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,tag)) );
            				}
HXLINE(2548)				if (::hx::IsNotNull( obj )) {
HXLINE(2550)					return obj->get_fieldWidth();
            				}
HXLINE(2552)				_gthis->luaTrace(((HX_("getTextWidth: Object ",78,cf,77,76) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),false,false,-65536);
HXLINE(2553)				return ( (Float)(0) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2546)			 cpp::Reference<lua_State> l185 = this->lua;
HXDLIN(2546)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextWidth",a3,e2,a6,72), ::Dynamic(new _hx_Closure_199(_gthis)));
HXDLIN(2546)			linc::callbacks::add_callback_function(l185,HX_("getTextWidth",a3,e2,a6,72));
            		}
HXLINE(2556)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_200) HXARGC(1)
            			void _hx_run(::String tag){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2557_new)
HXLINE(2557)				if (::PlayState_obj::instance->modchartTexts->exists(tag)) {
HXLINE(2558)					 ::ModchartText shit = ( ( ::ModchartText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
HXLINE(2559)					if (!(shit->wasAdded)) {
HXLINE(2560)						 ::flixel::FlxState _hx_tmp;
HXDLIN(2560)						if (::PlayState_obj::instance->isDead) {
HXLINE(2560)							_hx_tmp = ::GameOverSubstate_obj::instance;
            						}
            						else {
HXLINE(2560)							_hx_tmp = ::PlayState_obj::instance;
            						}
HXDLIN(2560)						_hx_tmp->add(shit).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2561)						shit->wasAdded = true;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2556)			 cpp::Reference<lua_State> l186 = this->lua;
HXDLIN(2556)			::llua::Lua_helper_obj::callbacks->set(HX_("addLuaText",64,ba,0a,cc), ::Dynamic(new _hx_Closure_200()));
HXDLIN(2556)			linc::callbacks::add_callback_function(l186,HX_("addLuaText",64,ba,0a,cc));
            		}
HXLINE(2566)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_201) HXARGC(2)
            			void _hx_run(::String tag, ::Dynamic __o_destroy){
            		bool destroy = __o_destroy.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2566_new)
HXLINE(2567)				if (!(::PlayState_obj::instance->modchartTexts->exists(tag))) {
HXLINE(2568)					return;
            				}
HXLINE(2571)				 ::ModchartText pee = ( ( ::ModchartText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
HXLINE(2572)				if (destroy) {
HXLINE(2573)					pee->kill();
            				}
HXLINE(2576)				if (pee->wasAdded) {
HXLINE(2577)					 ::flixel::FlxState _hx_tmp;
HXDLIN(2577)					if (::PlayState_obj::instance->isDead) {
HXLINE(2577)						_hx_tmp = ::GameOverSubstate_obj::instance;
            					}
            					else {
HXLINE(2577)						_hx_tmp = ::PlayState_obj::instance;
            					}
HXDLIN(2577)					_hx_tmp->remove(pee,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2578)					pee->wasAdded = false;
            				}
HXLINE(2581)				if (destroy) {
HXLINE(2582)					pee->destroy();
HXLINE(2583)					::PlayState_obj::instance->modchartTexts->remove(tag);
            				}
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2566)			 cpp::Reference<lua_State> l187 = this->lua;
HXDLIN(2566)			::llua::Lua_helper_obj::callbacks->set(HX_("removeLuaText",a1,ea,3a,3d), ::Dynamic(new _hx_Closure_201()));
HXDLIN(2566)			linc::callbacks::add_callback_function(l187,HX_("removeLuaText",a1,ea,3a,3d));
            		}
HXLINE(2587)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_202, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(::String name,::String __o_folder){
            		::String folder = __o_folder;
            		if (::hx::IsNull(__o_folder)) folder = HX_("psychenginemods",2e,c5,21,5f);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2587_new)
HXLINE(2588)				if (!(::PlayState_obj::instance->modchartSaves->exists(name))) {
HXLINE(2590)					 ::flixel::util::FlxSave save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE(2591)					save->bind(name,folder);
HXLINE(2592)					::PlayState_obj::instance->modchartSaves->set(name,save);
HXLINE(2593)					return;
            				}
HXLINE(2595)				_gthis->luaTrace((HX_("initSaveData: Save file already initialized: ",74,cc,1d,f7) + name),null(),null(),null());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2587)			 cpp::Reference<lua_State> l188 = this->lua;
HXDLIN(2587)			::llua::Lua_helper_obj::callbacks->set(HX_("initSaveData",37,77,d3,9a), ::Dynamic(new _hx_Closure_202(_gthis)));
HXDLIN(2587)			linc::callbacks::add_callback_function(l188,HX_("initSaveData",37,77,d3,9a));
            		}
HXLINE(2597)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_203, ::FunkinLua,_gthis) HXARGC(1)
            			void _hx_run(::String name){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2597_new)
HXLINE(2598)				if (::PlayState_obj::instance->modchartSaves->exists(name)) {
HXLINE(2600)					( ( ::flixel::util::FlxSave)(::PlayState_obj::instance->modchartSaves->get(name)) )->flush(null());
HXLINE(2601)					return;
            				}
HXLINE(2603)				_gthis->luaTrace((HX_("flushSaveData: Save file not initialized: ",fb,e1,d2,08) + name),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2597)			 cpp::Reference<lua_State> l189 = this->lua;
HXDLIN(2597)			::llua::Lua_helper_obj::callbacks->set(HX_("flushSaveData",eb,72,70,50), ::Dynamic(new _hx_Closure_203(_gthis)));
HXDLIN(2597)			linc::callbacks::add_callback_function(l189,HX_("flushSaveData",eb,72,70,50));
            		}
HXLINE(2605)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_204, ::FunkinLua,_gthis) HXARGC(3)
            			 ::Dynamic _hx_run(::String name,::String field, ::Dynamic defaultValue){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2605_new)
HXLINE(2606)				if (::PlayState_obj::instance->modchartSaves->exists(name)) {
HXLINE(2608)					 ::Dynamic retVal = ::Reflect_obj::field(( ( ::flixel::util::FlxSave)(::PlayState_obj::instance->modchartSaves->get(name)) )->data,field);
HXLINE(2609)					return retVal;
            				}
HXLINE(2611)				_gthis->luaTrace((HX_("getDataFromSave: Save file not initialized: ",9f,87,e4,dc) + name),false,false,-65536);
HXLINE(2612)				return defaultValue;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2605)			 cpp::Reference<lua_State> l190 = this->lua;
HXDLIN(2605)			::llua::Lua_helper_obj::callbacks->set(HX_("getDataFromSave",c7,fb,f9,38), ::Dynamic(new _hx_Closure_204(_gthis)));
HXDLIN(2605)			linc::callbacks::add_callback_function(l190,HX_("getDataFromSave",c7,fb,f9,38));
            		}
HXLINE(2614)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_205, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String name,::String field, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2614_new)
HXLINE(2615)				if (::PlayState_obj::instance->modchartSaves->exists(name)) {
HXLINE(2617)					::Reflect_obj::setField(( ( ::flixel::util::FlxSave)(::PlayState_obj::instance->modchartSaves->get(name)) )->data,field,value);
HXLINE(2618)					return;
            				}
HXLINE(2620)				_gthis->luaTrace((HX_("setDataFromSave: Save file not initialized: ",13,fb,0f,19) + name),false,false,-65536);
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(2614)			 cpp::Reference<lua_State> l191 = this->lua;
HXDLIN(2614)			::llua::Lua_helper_obj::callbacks->set(HX_("setDataFromSave",d3,78,c5,34), ::Dynamic(new _hx_Closure_205(_gthis)));
HXDLIN(2614)			linc::callbacks::add_callback_function(l191,HX_("setDataFromSave",d3,78,c5,34));
            		}
HXLINE(2623)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_206) HXARGC(2)
            			bool _hx_run(::String filename, ::Dynamic __o_absolute){
            		 ::Dynamic absolute = __o_absolute;
            		if (::hx::IsNull(__o_absolute)) absolute = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2623_new)
HXLINE(2625)				if (( (bool)(absolute) )) {
HXLINE(2627)					return ::sys::FileSystem_obj::exists(filename);
            				}
HXLINE(2630)				::String path = ::Paths_obj::modFolders(filename);
HXLINE(2631)				if (::sys::FileSystem_obj::exists(path)) {
HXLINE(2633)					return true;
            				}
HXLINE(2635)				return ::sys::FileSystem_obj::exists(::Paths_obj::getPath((HX_("assets/",4c,2a,dc,36) + filename),HX_("TEXT",ad,94,ba,37),null()));
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2623)			 cpp::Reference<lua_State> l192 = this->lua;
HXDLIN(2623)			::llua::Lua_helper_obj::callbacks->set(HX_("checkFileExists",60,cc,bd,19), ::Dynamic(new _hx_Closure_206()));
HXDLIN(2623)			linc::callbacks::add_callback_function(l192,HX_("checkFileExists",60,cc,bd,19));
            		}
HXLINE(2644)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_207, ::FunkinLua,_gthis) HXARGC(3)
            			bool _hx_run(::String path,::String content, ::Dynamic __o_absolute){
            		 ::Dynamic absolute = __o_absolute;
            		if (::hx::IsNull(__o_absolute)) absolute = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2645_new)
HXLINE(2646)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(2648)					if (!(( (bool)(absolute) ))) {
HXLINE(2649)						::String key = path;
HXDLIN(2649)						if (::hx::IsNull( key )) {
HXLINE(2649)							key = HX_("",00,00,00,00);
            						}
HXDLIN(2649)						::sys::io::File_obj::saveContent((HX_("mods/",9e,2f,58,0c) + key),content);
            					}
            					else {
HXLINE(2652)						::sys::io::File_obj::saveContent(path,content);
            					}
HXLINE(2654)					return true;
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(2655)						 ::Dynamic e = _g;
HXLINE(2656)						{
HXLINE(2656)							 ::FunkinLua _gthis1 = _gthis;
HXDLIN(2656)							_gthis1->luaTrace((((HX_("saveFile: Error trying to save ",80,c0,7a,68) + path) + HX_(": ",a6,32,00,00)) + ::Std_obj::string(e)),false,false,-65536);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE(2658)				return false;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2644)			 cpp::Reference<lua_State> l193 = this->lua;
HXDLIN(2644)			::llua::Lua_helper_obj::callbacks->set(HX_("saveFile",59,68,75,f7), ::Dynamic(new _hx_Closure_207(_gthis)));
HXDLIN(2644)			linc::callbacks::add_callback_function(l193,HX_("saveFile",59,68,75,f7));
            		}
HXLINE(2660)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_208, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String path, ::Dynamic __o_ignoreModFolders){
            		 ::Dynamic ignoreModFolders = __o_ignoreModFolders;
            		if (::hx::IsNull(__o_ignoreModFolders)) ignoreModFolders = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2661_new)
HXLINE(2662)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(2664)					if (!(( (bool)(ignoreModFolders) ))) {
HXLINE(2666)						::String lePath = ::Paths_obj::modFolders(path);
HXLINE(2667)						if (::sys::FileSystem_obj::exists(lePath)) {
HXLINE(2669)							::sys::FileSystem_obj::deleteFile(lePath);
HXLINE(2670)							return true;
            						}
            					}
HXLINE(2675)					::String lePath1 = ::Paths_obj::getPath(path,HX_("TEXT",ad,94,ba,37),null());
HXLINE(2676)					if (::openfl::utils::Assets_obj::exists(lePath1,null())) {
HXLINE(2678)						::sys::FileSystem_obj::deleteFile(lePath1);
HXLINE(2679)						return true;
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(2681)						 ::Dynamic e = _g;
HXLINE(2682)						{
HXLINE(2682)							 ::FunkinLua _gthis1 = _gthis;
HXDLIN(2682)							_gthis1->luaTrace((((HX_("deleteFile: Error trying to delete ",64,b7,b2,b0) + path) + HX_(": ",a6,32,00,00)) + ::Std_obj::string(e)),false,false,-65536);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE(2684)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2660)			 cpp::Reference<lua_State> l194 = this->lua;
HXDLIN(2660)			::llua::Lua_helper_obj::callbacks->set(HX_("deleteFile",47,ac,08,97), ::Dynamic(new _hx_Closure_208(_gthis)));
HXDLIN(2660)			linc::callbacks::add_callback_function(l194,HX_("deleteFile",47,ac,08,97));
            		}
HXLINE(2686)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_209) HXARGC(2)
            			::String _hx_run(::String path, ::Dynamic __o_ignoreModFolders){
            		 ::Dynamic ignoreModFolders = __o_ignoreModFolders;
            		if (::hx::IsNull(__o_ignoreModFolders)) ignoreModFolders = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2687_new)
HXLINE(2687)				return ::Paths_obj::getTextFromFile(path,ignoreModFolders);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2686)			 cpp::Reference<lua_State> l195 = this->lua;
HXDLIN(2686)			::llua::Lua_helper_obj::callbacks->set(HX_("getTextFromFile",89,70,ed,f8), ::Dynamic(new _hx_Closure_209()));
HXDLIN(2686)			linc::callbacks::add_callback_function(l195,HX_("getTextFromFile",89,70,ed,f8));
            		}
HXLINE(2691)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_210, ::FunkinLua,_gthis) HXARGC(4)
            			bool _hx_run(::String obj,::String name, ::Dynamic __o_forced, ::Dynamic __o_startFrame){
            		bool forced = __o_forced.Default(false);
            		 ::Dynamic startFrame = __o_startFrame;
            		if (::hx::IsNull(__o_startFrame)) startFrame = 0;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2691_new)
HXLINE(2692)				_gthis->luaTrace(HX_("objectPlayAnimation is deprecated! Use playAnim instead",39,99,1a,ad),false,true,null());
HXLINE(2693)				if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,false) )) {
HXLINE(2694)					::PlayState_obj::instance->getLuaObject(obj,false)->animation->play(name,forced,false,startFrame);
HXLINE(2695)					return true;
            				}
HXLINE(2698)				 ::flixel::FlxState spr;
HXDLIN(2698)				if (::PlayState_obj::instance->isDead) {
HXLINE(2698)					spr = ::GameOverSubstate_obj::instance;
            				}
            				else {
HXLINE(2698)					spr = ::PlayState_obj::instance;
            				}
HXDLIN(2698)				 ::flixel::FlxSprite spr1 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(spr,obj)) );
HXLINE(2699)				if (::hx::IsNotNull( spr1 )) {
HXLINE(2700)					spr1->animation->play(name,forced,false,startFrame);
HXLINE(2701)					return true;
            				}
HXLINE(2703)				return false;
            			}
            			HX_END_LOCAL_FUNC4(return)

HXLINE(2691)			 cpp::Reference<lua_State> l196 = this->lua;
HXDLIN(2691)			::llua::Lua_helper_obj::callbacks->set(HX_("objectPlayAnimation",31,88,25,0b), ::Dynamic(new _hx_Closure_210(_gthis)));
HXDLIN(2691)			linc::callbacks::add_callback_function(l196,HX_("objectPlayAnimation",31,88,25,0b));
            		}
HXLINE(2705)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_211, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String character,::String anim, ::Dynamic __o_forced){
            		 ::Dynamic forced = __o_forced;
            		if (::hx::IsNull(__o_forced)) forced = false;
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2705_new)
HXLINE(2706)				_gthis->luaTrace(HX_("characterPlayAnim is deprecated! Use playAnim instead",76,9a,11,c8),false,true,null());
HXLINE(2707)				::String _hx_switch_14 = character.toLowerCase();
            				if (  (_hx_switch_14==HX_("dad",47,36,4c,00)) ){
HXLINE(2709)					if (::PlayState_obj::instance->dad->animOffsets->exists(anim)) {
HXLINE(2710)						::PlayState_obj::instance->dad->playAnim(anim,forced,null(),null());
            					}
HXLINE(2709)					goto _hx_goto_27;
            				}
            				if (  (_hx_switch_14==HX_("gf",1f,5a,00,00)) ||  (_hx_switch_14==HX_("girlfriend",ba,91,48,98)) ){
HXLINE(2712)					bool _hx_tmp;
HXDLIN(2712)					if (::hx::IsNotNull( ::PlayState_obj::instance->gf )) {
HXLINE(2712)						_hx_tmp = ::PlayState_obj::instance->gf->animOffsets->exists(anim);
            					}
            					else {
HXLINE(2712)						_hx_tmp = false;
            					}
HXDLIN(2712)					if (_hx_tmp) {
HXLINE(2713)						::PlayState_obj::instance->gf->playAnim(anim,forced,null(),null());
            					}
HXLINE(2712)					goto _hx_goto_27;
            				}
            				/* default */{
HXLINE(2715)					if (::PlayState_obj::instance->boyfriend->animOffsets->exists(anim)) {
HXLINE(2716)						::PlayState_obj::instance->boyfriend->playAnim(anim,forced,null(),null());
            					}
            				}
            				_hx_goto_27:;
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(2705)			 cpp::Reference<lua_State> l197 = this->lua;
HXDLIN(2705)			::llua::Lua_helper_obj::callbacks->set(HX_("characterPlayAnim",ee,d2,39,cb), ::Dynamic(new _hx_Closure_211(_gthis)));
HXDLIN(2705)			linc::callbacks::add_callback_function(l197,HX_("characterPlayAnim",ee,d2,39,cb));
            		}
HXLINE(2719)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_212, ::FunkinLua,_gthis) HXARGC(4)
            			void _hx_run(::String tag,int width,int height,::String color){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2719_new)
HXLINE(2720)				_gthis->luaTrace(HX_("luaSpriteMakeGraphic is deprecated! Use makeGraphic instead",7e,b6,57,cc),false,true,null());
HXLINE(2721)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2722)					int colorNum = ( (int)(::Std_obj::parseInt(color)) );
HXLINE(2723)					if (!(::StringTools_obj::startsWith(color,HX_("0x",48,2a,00,00)))) {
HXLINE(2723)						colorNum = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + color))) );
            					}
HXLINE(2725)					( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) )->makeGraphic(width,height,colorNum,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC4((void))

HXLINE(2719)			 cpp::Reference<lua_State> l198 = this->lua;
HXDLIN(2719)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteMakeGraphic",7d,d9,93,6c), ::Dynamic(new _hx_Closure_212(_gthis)));
HXDLIN(2719)			linc::callbacks::add_callback_function(l198,HX_("luaSpriteMakeGraphic",7d,d9,93,6c));
            		}
HXLINE(2728)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_213, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String name,::String prefix, ::Dynamic __o_framerate, ::Dynamic __o_loop){
            		int framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(true);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2728_new)
HXLINE(2729)				_gthis->luaTrace(HX_("luaSpriteAddAnimationByPrefix is deprecated! Use addAnimationByPrefix instead",78,72,70,61),false,true,null());
HXLINE(2730)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2731)					 ::ModchartSprite cock = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(2732)					cock->animation->addByPrefix(name,prefix,framerate,loop,null(),null());
HXLINE(2733)					if (::hx::IsNull( cock->animation->_curAnim )) {
HXLINE(2734)						cock->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(2728)			 cpp::Reference<lua_State> l199 = this->lua;
HXDLIN(2728)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteAddAnimationByPrefix",09,f3,e9,6f), ::Dynamic(new _hx_Closure_213(_gthis)));
HXDLIN(2728)			linc::callbacks::add_callback_function(l199,HX_("luaSpriteAddAnimationByPrefix",09,f3,e9,6f));
            		}
HXLINE(2738)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_214, ::FunkinLua,_gthis) HXARGC(5)
            			void _hx_run(::String tag,::String name,::String prefix,::String indices, ::Dynamic __o_framerate){
            		int framerate = __o_framerate.Default(24);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2738_new)
HXLINE(2739)				_gthis->luaTrace(HX_("luaSpriteAddAnimationByIndices is deprecated! Use addAnimationByIndices instead",de,64,41,01),false,true,null());
HXLINE(2740)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2741)					::Array< ::String > strIndices = ::StringTools_obj::trim(indices).split(HX_(",",2c,00,00,00));
HXLINE(2742)					::Array< int > die = ::Array_obj< int >::__new(0);
HXLINE(2743)					{
HXLINE(2743)						int _g = 0;
HXDLIN(2743)						int _g1 = strIndices->length;
HXDLIN(2743)						while((_g < _g1)){
HXLINE(2743)							_g = (_g + 1);
HXDLIN(2743)							int i = (_g - 1);
HXLINE(2744)							die->push(::Std_obj::parseInt(strIndices->__get(i)));
            						}
            					}
HXLINE(2746)					 ::ModchartSprite pussy = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(2747)					pussy->animation->addByIndices(name,prefix,die,HX_("",00,00,00,00),framerate,false,null(),null());
HXLINE(2748)					if (::hx::IsNull( pussy->animation->_curAnim )) {
HXLINE(2749)						pussy->animation->play(name,true,null(),null());
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC5((void))

HXLINE(2738)			 cpp::Reference<lua_State> l200 = this->lua;
HXDLIN(2738)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpriteAddAnimationByIndices",d0,75,d7,2e), ::Dynamic(new _hx_Closure_214(_gthis)));
HXDLIN(2738)			linc::callbacks::add_callback_function(l200,HX_("luaSpriteAddAnimationByIndices",d0,75,d7,2e));
            		}
HXLINE(2753)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_215, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(::String tag,::String name, ::Dynamic __o_forced){
            		bool forced = __o_forced.Default(false);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2753_new)
HXLINE(2754)				_gthis->luaTrace(HX_("luaSpritePlayAnimation is deprecated! Use playAnim instead",5b,7a,2f,85),false,true,null());
HXLINE(2755)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2756)					( ( ::flixel::FlxSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) )->animation->play(name,forced,null(),null());
            				}
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(2753)			 cpp::Reference<lua_State> l201 = this->lua;
HXDLIN(2753)			::llua::Lua_helper_obj::callbacks->set(HX_("luaSpritePlayAnimation",53,e8,9a,80), ::Dynamic(new _hx_Closure_215(_gthis)));
HXDLIN(2753)			linc::callbacks::add_callback_function(l201,HX_("luaSpritePlayAnimation",53,e8,9a,80));
            		}
HXLINE(2759)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_216, ::FunkinLua,_gthis) HXARGC(2)
            			bool _hx_run(::String tag,::String __o_camera){
            		::String camera = __o_camera;
            		if (::hx::IsNull(__o_camera)) camera = HX_("",00,00,00,00);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2759_new)
HXLINE(2760)				_gthis->luaTrace(HX_("setLuaSpriteCamera is deprecated! Use setObjectCamera instead",27,8c,42,42),false,true,null());
HXLINE(2761)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2762)					 ::ModchartSprite _hx_tmp = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXDLIN(2762)					_hx_tmp->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,_gthis->cameraFromString(camera)));
HXLINE(2763)					return true;
            				}
HXLINE(2765)				_gthis->luaTrace(((HX_("Lua sprite with tag: ",99,05,27,20) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null(),null());
HXLINE(2766)				return false;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2759)			 cpp::Reference<lua_State> l202 = this->lua;
HXDLIN(2759)			::llua::Lua_helper_obj::callbacks->set(HX_("setLuaSpriteCamera",e0,14,44,e8), ::Dynamic(new _hx_Closure_216(_gthis)));
HXDLIN(2759)			linc::callbacks::add_callback_function(l202,HX_("setLuaSpriteCamera",e0,14,44,e8));
            		}
HXLINE(2768)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_217, ::FunkinLua,_gthis) HXARGC(3)
            			bool _hx_run(::String tag,Float scrollX,Float scrollY){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2768_new)
HXLINE(2769)				_gthis->luaTrace(HX_("setLuaSpriteScrollFactor is deprecated! Use setScrollFactor instead",28,df,47,75),false,true,null());
HXLINE(2770)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2771)					{
HXLINE(2771)						 ::flixel::math::FlxBasePoint this1 = ( ( ::flixel::FlxObject)(::PlayState_obj::instance->modchartSprites->get(tag)) )->scrollFactor;
HXDLIN(2771)						this1->set_x(scrollX);
HXDLIN(2771)						this1->set_y(scrollY);
            					}
HXLINE(2772)					return true;
            				}
HXLINE(2774)				return false;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2768)			 cpp::Reference<lua_State> l203 = this->lua;
HXDLIN(2768)			::llua::Lua_helper_obj::callbacks->set(HX_("setLuaSpriteScrollFactor",37,99,c8,2a), ::Dynamic(new _hx_Closure_217(_gthis)));
HXDLIN(2768)			linc::callbacks::add_callback_function(l203,HX_("setLuaSpriteScrollFactor",37,99,c8,2a));
            		}
HXLINE(2776)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_218, ::FunkinLua,_gthis) HXARGC(3)
            			bool _hx_run(::String tag,Float x,Float y){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2776_new)
HXLINE(2777)				_gthis->luaTrace(HX_("scaleLuaSprite is deprecated! Use scaleObject instead",57,88,a4,6e),false,true,null());
HXLINE(2778)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2779)					 ::ModchartSprite shit = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(2780)					{
HXLINE(2780)						 ::flixel::math::FlxBasePoint this1 = shit->scale;
HXDLIN(2780)						this1->set_x(x);
HXDLIN(2780)						this1->set_y(y);
            					}
HXLINE(2781)					shit->updateHitbox();
HXLINE(2782)					return true;
            				}
HXLINE(2784)				return false;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2776)			 cpp::Reference<lua_State> l204 = this->lua;
HXDLIN(2776)			::llua::Lua_helper_obj::callbacks->set(HX_("scaleLuaSprite",f3,b3,91,0f), ::Dynamic(new _hx_Closure_218(_gthis)));
HXDLIN(2776)			linc::callbacks::add_callback_function(l204,HX_("scaleLuaSprite",f3,b3,91,0f));
            		}
HXLINE(2786)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_219, ::FunkinLua,_gthis) HXARGC(2)
            			 ::Dynamic _hx_run(::String tag,::String variable){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2786_new)
HXLINE(2787)				_gthis->luaTrace(HX_("getPropertyLuaSprite is deprecated! Use getProperty instead",fa,f2,3a,c7),false,true,null());
HXLINE(2788)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2789)					::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(2790)					if ((killMe->length > 1)) {
HXLINE(2791)						 ::ModchartSprite coverMeInPiss = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXDLIN(2791)						 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE(2792)						{
HXLINE(2792)							int _g = 1;
HXDLIN(2792)							int _g1 = (killMe->length - 1);
HXDLIN(2792)							while((_g < _g1)){
HXLINE(2792)								_g = (_g + 1);
HXDLIN(2792)								int i = (_g - 1);
HXLINE(2793)								coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            							}
            						}
HXLINE(2795)						return ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)));
            					}
HXLINE(2797)					return ::Reflect_obj::getProperty(::PlayState_obj::instance->modchartSprites->get(tag),variable);
            				}
HXLINE(2799)				return null();
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2786)			 cpp::Reference<lua_State> l205 = this->lua;
HXDLIN(2786)			::llua::Lua_helper_obj::callbacks->set(HX_("getPropertyLuaSprite",52,5f,33,7c), ::Dynamic(new _hx_Closure_219(_gthis)));
HXDLIN(2786)			linc::callbacks::add_callback_function(l205,HX_("getPropertyLuaSprite",52,5f,33,7c));
            		}
HXLINE(2801)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_220, ::FunkinLua,_gthis) HXARGC(3)
            			bool _hx_run(::String tag,::String variable, ::Dynamic value){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2801_new)
HXLINE(2802)				_gthis->luaTrace(HX_("setPropertyLuaSprite is deprecated! Use setProperty instead",12,75,58,14),false,true,null());
HXLINE(2803)				if (::PlayState_obj::instance->modchartSprites->exists(tag)) {
HXLINE(2804)					::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(2805)					if ((killMe->length > 1)) {
HXLINE(2806)						 ::ModchartSprite coverMeInPiss = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXDLIN(2806)						 ::Dynamic coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(0));
HXLINE(2807)						{
HXLINE(2807)							int _g = 1;
HXDLIN(2807)							int _g1 = (killMe->length - 1);
HXDLIN(2807)							while((_g < _g1)){
HXLINE(2807)								_g = (_g + 1);
HXDLIN(2807)								int i = (_g - 1);
HXLINE(2808)								coverMeInPiss1 = ::Reflect_obj::getProperty(coverMeInPiss1,killMe->__get(i));
            							}
            						}
HXLINE(2810)						::Reflect_obj::setProperty(coverMeInPiss1,killMe->__get((killMe->length - 1)),value);
HXLINE(2811)						return true;
            					}
HXLINE(2813)					::Reflect_obj::setProperty(::PlayState_obj::instance->modchartSprites->get(tag),variable,value);
HXLINE(2814)					return true;
            				}
HXLINE(2816)				_gthis->luaTrace(((HX_("setPropertyLuaSprite: Lua sprite with tag: ",2d,cf,3e,9c) + tag) + HX_(" doesn't exist!",c8,8e,40,5e)),null(),null(),null());
HXLINE(2817)				return false;
            			}
            			HX_END_LOCAL_FUNC3(return)

HXLINE(2801)			 cpp::Reference<lua_State> l206 = this->lua;
HXDLIN(2801)			::llua::Lua_helper_obj::callbacks->set(HX_("setPropertyLuaSprite",c6,16,eb,48), ::Dynamic(new _hx_Closure_220(_gthis)));
HXDLIN(2801)			linc::callbacks::add_callback_function(l206,HX_("setPropertyLuaSprite",c6,16,eb,48));
            		}
HXLINE(2819)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_221, ::FunkinLua,_gthis) HXARGC(3)
            			void _hx_run(Float duration, ::Dynamic __o_fromValue, ::Dynamic __o_toValue){
            		Float fromValue = __o_fromValue.Default(0);
            		Float toValue = __o_toValue.Default(1);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2819_new)
HXLINE(2820)				{
HXLINE(2820)					 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2820)					 ::Dynamic onComplete = null();
HXDLIN(2820)					if (::hx::IsNull( _this->_channel )) {
HXLINE(2820)						_this->play(null(),null(),null());
            					}
HXDLIN(2820)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(2820)						_this->fadeTween->cancel();
            					}
HXDLIN(2820)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(fromValue,toValue,duration, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
HXLINE(2821)				_gthis->luaTrace(HX_("musicFadeIn is deprecated! Use soundFadeIn instead.",63,a3,e0,ef),false,true,null());
            			}
            			HX_END_LOCAL_FUNC3((void))

HXLINE(2819)			 cpp::Reference<lua_State> l207 = this->lua;
HXDLIN(2819)			::llua::Lua_helper_obj::callbacks->set(HX_("musicFadeIn",06,1b,ec,26), ::Dynamic(new _hx_Closure_221(_gthis)));
HXDLIN(2819)			linc::callbacks::add_callback_function(l207,HX_("musicFadeIn",06,1b,ec,26));
            		}
HXLINE(2824)		{
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_222, ::FunkinLua,_gthis) HXARGC(2)
            			void _hx_run(Float duration, ::Dynamic __o_toValue){
            		Float toValue = __o_toValue.Default(0);
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2824_new)
HXLINE(2825)				{
HXLINE(2825)					 ::flixel::sound::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2825)					 ::Dynamic To = toValue;
HXDLIN(2825)					 ::Dynamic onComplete = null();
HXDLIN(2825)					if (::hx::IsNull( To )) {
HXLINE(2825)						To = 0;
            					}
HXDLIN(2825)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(2825)						_this->fadeTween->cancel();
            					}
HXDLIN(2825)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),duration, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
HXLINE(2826)				_gthis->luaTrace(HX_("musicFadeOut is deprecated! Use soundFadeOut instead.",3b,a5,4f,13),false,true,null());
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(2824)			 cpp::Reference<lua_State> l208 = this->lua;
HXDLIN(2824)			::llua::Lua_helper_obj::callbacks->set(HX_("musicFadeOut",4d,1e,b0,e7), ::Dynamic(new _hx_Closure_222(_gthis)));
HXDLIN(2824)			linc::callbacks::add_callback_function(l208,HX_("musicFadeOut",4d,1e,b0,e7));
            		}
HXLINE(2830)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_223) HXARGC(2)
            			bool _hx_run(::String str,::String start){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2831_new)
HXLINE(2831)				return ::StringTools_obj::startsWith(str,start);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2830)			 cpp::Reference<lua_State> l209 = this->lua;
HXDLIN(2830)			::llua::Lua_helper_obj::callbacks->set(HX_("stringStartsWith",a8,7c,08,54), ::Dynamic(new _hx_Closure_223()));
HXDLIN(2830)			linc::callbacks::add_callback_function(l209,HX_("stringStartsWith",a8,7c,08,54));
            		}
HXLINE(2833)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_224) HXARGC(2)
            			bool _hx_run(::String str,::String end){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2834_new)
HXLINE(2834)				return ::StringTools_obj::endsWith(str,end);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2833)			 cpp::Reference<lua_State> l210 = this->lua;
HXDLIN(2833)			::llua::Lua_helper_obj::callbacks->set(HX_("stringEndsWith",4f,18,17,66), ::Dynamic(new _hx_Closure_224()));
HXDLIN(2833)			linc::callbacks::add_callback_function(l210,HX_("stringEndsWith",4f,18,17,66));
            		}
HXLINE(2836)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_225) HXARGC(2)
            			::Array< ::String > _hx_run(::String str,::String split){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2837_new)
HXLINE(2837)				return str.split(split);
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(2836)			 cpp::Reference<lua_State> l211 = this->lua;
HXDLIN(2836)			::llua::Lua_helper_obj::callbacks->set(HX_("stringSplit",49,9c,71,8c), ::Dynamic(new _hx_Closure_225()));
HXDLIN(2836)			linc::callbacks::add_callback_function(l211,HX_("stringSplit",49,9c,71,8c));
            		}
HXLINE(2839)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_226) HXARGC(1)
            			::String _hx_run(::String str){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2840_new)
HXLINE(2840)				return ::StringTools_obj::trim(str);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2839)			 cpp::Reference<lua_State> l212 = this->lua;
HXDLIN(2839)			::llua::Lua_helper_obj::callbacks->set(HX_("stringTrim",53,2e,00,ff), ::Dynamic(new _hx_Closure_226()));
HXDLIN(2839)			linc::callbacks::add_callback_function(l212,HX_("stringTrim",53,2e,00,ff));
            		}
HXLINE(2843)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_227) HXARGC(1)
            			::Array< ::String > _hx_run(::String folder){
            				HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2843_new)
HXLINE(2844)				::Array< ::String > list = ::Array_obj< ::String >::__new(0);
HXLINE(2846)				if (::sys::FileSystem_obj::exists(folder)) {
HXLINE(2847)					int _g = 0;
HXDLIN(2847)					::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(folder);
HXDLIN(2847)					while((_g < _g1->length)){
HXLINE(2847)						::String folder1 = _g1->__get(_g);
HXDLIN(2847)						_g = (_g + 1);
HXLINE(2848)						if (!(list->contains(folder1))) {
HXLINE(2849)							list->push(folder1);
            						}
            					}
            				}
HXLINE(2854)				return list;
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(2843)			 cpp::Reference<lua_State> l213 = this->lua;
HXDLIN(2843)			::llua::Lua_helper_obj::callbacks->set(HX_("directoryFileList",87,68,f9,34), ::Dynamic(new _hx_Closure_227()));
HXDLIN(2843)			linc::callbacks::add_callback_function(l213,HX_("directoryFileList",87,68,f9,34));
            		}
HXLINE(2857)		this->call(HX_("onCreate",7b,5d,bc,5b),::cpp::VirtualArray_obj::__new(0));
            	}

Dynamic FunkinLua_obj::__CreateEmpty() { return new FunkinLua_obj; }

void *FunkinLua_obj::_hx_vtable = 0;

Dynamic FunkinLua_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunkinLua_obj > _hx_result = new FunkinLua_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FunkinLua_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x574d0d5f;
}

void FunkinLua_obj::initHaxeModule(){
            	HX_GC_STACKFRAME(&_hx_pos_ac4b451d003459d8_2873_initHaxeModule)
HXDLIN(2873)		if (::hx::IsNull( ::FunkinLua_obj::hscript )) {
HXLINE(2875)			::haxe::Log_obj::trace((HX_("initializing haxe interp for: ",8a,18,b6,6f) + this->scriptName),::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),2875,HX_("FunkinLua",e7,f3,7b,36),HX_("initHaxeModule",a2,30,89,5d)));
HXLINE(2876)			::FunkinLua_obj::hscript =  ::HScript_obj::__alloc( HX_CTX );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunkinLua_obj,initHaxeModule,(void))

 ::flixel::addons::display::FlxRuntimeShader FunkinLua_obj::getShader(::String obj){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_2958_getShader)
HXLINE(2959)		::Array< ::String > killMe = obj.split(HX_(".",2e,00,00,00));
HXLINE(2960)		 ::flixel::FlxSprite leObj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getObjectDirectly(killMe->__get(0),null())) );
HXLINE(2961)		if ((killMe->length > 1)) {
HXLINE(2962)			 ::Dynamic this1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(killMe,null(),null());
HXDLIN(2962)			leObj = ( ( ::flixel::FlxSprite)(::FunkinLua_obj::getVarInArray(this1,killMe->__get((killMe->length - 1)))) );
            		}
HXLINE(2965)		if (::hx::IsNotNull( leObj )) {
HXLINE(2966)			 ::Dynamic shader = leObj->shader;
HXLINE(2967)			 ::flixel::addons::display::FlxRuntimeShader shader1 = ( ( ::flixel::addons::display::FlxRuntimeShader)(shader) );
HXLINE(2968)			return shader1;
            		}
HXLINE(2970)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getShader,return )

bool FunkinLua_obj::initLuaShader(::String name, ::Dynamic __o_glslVersion){
            		 ::Dynamic glslVersion = __o_glslVersion;
            		if (::hx::IsNull(__o_glslVersion)) glslVersion = 120;
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_2975_initLuaShader)
HXLINE(2976)		if (!(::ClientPrefs_obj::shaders)) {
HXLINE(2976)			return false;
            		}
HXLINE(2978)		if (::PlayState_obj::instance->runtimeShaders->exists(name)) {
HXLINE(2980)			this->luaTrace(((HX_("Shader ",3b,a9,d7,2c) + name) + HX_(" was already initialized!",8c,8e,cf,cf)),null(),null(),null());
HXLINE(2981)			return true;
            		}
HXLINE(2984)		::String key = HX_("shaders/",c1,f6,2a,36);
HXDLIN(2984)		if (::hx::IsNull( key )) {
HXLINE(2984)			key = HX_("",00,00,00,00);
            		}
HXDLIN(2984)		::Array< ::String > foldersToCheck = ::Array_obj< ::String >::__new(1)->init(0,(HX_("mods/",9e,2f,58,0c) + key));
HXLINE(2985)		bool _hx_tmp;
HXDLIN(2985)		if (::hx::IsNotNull( ::Paths_obj::currentModDirectory )) {
HXLINE(2985)			_hx_tmp = (::Paths_obj::currentModDirectory.length > 0);
            		}
            		else {
HXLINE(2985)			_hx_tmp = false;
            		}
HXDLIN(2985)		if (_hx_tmp) {
HXLINE(2986)			::String key1 = (::Paths_obj::currentModDirectory + HX_("/shaders/",f0,3d,7d,f0));
HXDLIN(2986)			if (::hx::IsNull( key1 )) {
HXLINE(2986)				key1 = HX_("",00,00,00,00);
            			}
HXDLIN(2986)			foldersToCheck->insert(0,(HX_("mods/",9e,2f,58,0c) + key1));
            		}
HXLINE(2988)		{
HXLINE(2988)			int _g = 0;
HXDLIN(2988)			::Array< ::String > _g1 = ::Paths_obj::getGlobalMods();
HXDLIN(2988)			while((_g < _g1->length)){
HXLINE(2988)				::String mod = _g1->__get(_g);
HXDLIN(2988)				_g = (_g + 1);
HXLINE(2989)				::String key2 = (mod + HX_("/shaders/",f0,3d,7d,f0));
HXDLIN(2989)				if (::hx::IsNull( key2 )) {
HXLINE(2989)					key2 = HX_("",00,00,00,00);
            				}
HXDLIN(2989)				foldersToCheck->insert(0,(HX_("mods/",9e,2f,58,0c) + key2));
            			}
            		}
HXLINE(2991)		{
HXLINE(2991)			int _g2 = 0;
HXDLIN(2991)			while((_g2 < foldersToCheck->length)){
HXLINE(2991)				::String folder = foldersToCheck->__get(_g2);
HXDLIN(2991)				_g2 = (_g2 + 1);
HXLINE(2993)				if (::sys::FileSystem_obj::exists(folder)) {
HXLINE(2995)					::String frag = ((folder + name) + HX_(".frag",60,48,31,c0));
HXLINE(2996)					::String vert = ((folder + name) + HX_(".vert",df,e3,ba,ca));
HXLINE(2997)					bool found = false;
HXLINE(2998)					if (::sys::FileSystem_obj::exists(frag)) {
HXLINE(3000)						frag = ::sys::io::File_obj::getContent(frag);
HXLINE(3001)						found = true;
            					}
            					else {
HXLINE(3003)						frag = null();
            					}
HXLINE(3005)					if (::sys::FileSystem_obj::exists(vert)) {
HXLINE(3007)						vert = ::sys::io::File_obj::getContent(vert);
HXLINE(3008)						found = true;
            					}
            					else {
HXLINE(3010)						vert = null();
            					}
HXLINE(3012)					if (found) {
HXLINE(3014)						::PlayState_obj::instance->runtimeShaders->set(name,::Array_obj< ::String >::__new(2)->init(0,frag)->init(1,vert));
HXLINE(3016)						return true;
            					}
            				}
            			}
            		}
HXLINE(3020)		this->luaTrace(((HX_("Missing shader ",81,62,6c,67) + name) + HX_(" .frag AND .vert files!",d4,1e,ab,6a)),false,false,-65536);
HXLINE(3021)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,initLuaShader,return )

 ::Dynamic FunkinLua_obj::getGroupStuff( ::Dynamic leArray,::String variable){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3025_getGroupStuff)
HXLINE(3026)		::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(3027)		if ((killMe->length > 1)) {
HXLINE(3028)			 ::Dynamic coverMeInPiss = ::Reflect_obj::getProperty(leArray,killMe->__get(0));
HXLINE(3029)			{
HXLINE(3029)				int _g = 1;
HXDLIN(3029)				int _g1 = (killMe->length - 1);
HXDLIN(3029)				while((_g < _g1)){
HXLINE(3029)					_g = (_g + 1);
HXDLIN(3029)					int i = (_g - 1);
HXLINE(3030)					coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(i));
            				}
            			}
HXLINE(3032)			 ::ValueType _g2 = ::Type_obj::_hx_typeof(coverMeInPiss);
HXDLIN(3032)			if ((_g2->_hx_getIndex() == 6)) {
HXLINE(3033)				::hx::Class _hx_switch_0 = _g2->_hx_getObject(0).StaticCast< ::hx::Class >();
            				if (  (_hx_switch_0==::hx::ClassOf< ::haxe::ds::EnumValueMap >()) ||  (_hx_switch_0==::hx::ClassOf< ::haxe::ds::IntMap >()) ||  (_hx_switch_0==::hx::ClassOf< ::haxe::ds::ObjectMap >()) ||  (_hx_switch_0==::hx::ClassOf< ::haxe::ds::StringMap >()) ){
HXLINE(3034)					return coverMeInPiss->__Field(HX_("get",96,80,4e,00),::hx::paccDynamic)(killMe->__get((killMe->length - 1)));
HXDLIN(3034)					goto _hx_goto_267;
            				}
            				/* default */{
HXLINE(3036)					return ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get((killMe->length - 1)));
            				}
            				_hx_goto_267:;
            			}
            			else {
HXLINE(3036)				return ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get((killMe->length - 1)));
            			}
            		}
HXLINE(3039)		 ::ValueType _g3 = ::Type_obj::_hx_typeof(leArray);
HXDLIN(3039)		if ((_g3->_hx_getIndex() == 6)) {
HXLINE(3040)			::hx::Class _hx_switch_1 = _g3->_hx_getObject(0).StaticCast< ::hx::Class >();
            			if (  (_hx_switch_1==::hx::ClassOf< ::haxe::ds::EnumValueMap >()) ||  (_hx_switch_1==::hx::ClassOf< ::haxe::ds::IntMap >()) ||  (_hx_switch_1==::hx::ClassOf< ::haxe::ds::ObjectMap >()) ||  (_hx_switch_1==::hx::ClassOf< ::haxe::ds::StringMap >()) ){
HXLINE(3041)				return leArray->__Field(HX_("get",96,80,4e,00),::hx::paccDynamic)(variable);
HXDLIN(3041)				goto _hx_goto_268;
            			}
            			/* default */{
HXLINE(3043)				return ::Reflect_obj::getProperty(leArray,variable);
            			}
            			_hx_goto_268:;
            		}
            		else {
HXLINE(3043)			return ::Reflect_obj::getProperty(leArray,variable);
            		}
HXLINE(3039)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,getGroupStuff,return )

void FunkinLua_obj::loadFrames( ::flixel::FlxSprite spr,::String image,::String spriteType){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3049_loadFrames)
HXDLIN(3049)		::String _hx_switch_0 = ::StringTools_obj::trim(spriteType.toLowerCase());
            		if (  (_hx_switch_0==HX_("pac",52,51,55,00)) ||  (_hx_switch_0==HX_("packer",86,57,98,e3)) ||  (_hx_switch_0==HX_("packeratlas",05,f0,7b,dc)) ){
HXLINE(3058)			::String library = null();
HXDLIN(3058)			 ::flixel::graphics::FlxGraphic imageLoaded = ::Paths_obj::returnGraphic(image,null());
HXDLIN(3058)			bool txtExists = false;
HXDLIN(3058)			if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".txt",02,3f,c0,1e))))) {
HXLINE(3058)				txtExists = true;
            			}
HXDLIN(3058)			 ::Dynamic _hx_tmp;
HXDLIN(3058)			if (::hx::IsNotNull( imageLoaded )) {
HXLINE(3058)				_hx_tmp = imageLoaded;
            			}
            			else {
HXLINE(3058)				 ::flixel::graphics::FlxGraphic returnAsset = ::Paths_obj::returnGraphic(image,library);
HXDLIN(3058)				_hx_tmp = returnAsset;
            			}
HXDLIN(3058)			::String _hx_tmp1;
HXDLIN(3058)			if (txtExists) {
HXLINE(3058)				_hx_tmp1 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".txt",02,3f,c0,1e))));
            			}
            			else {
HXLINE(3058)				_hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + image) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library);
            			}
HXDLIN(3058)			spr->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSpriteSheetPacker(_hx_tmp,_hx_tmp1));
HXDLIN(3058)			goto _hx_goto_270;
            		}
            		if (  (_hx_switch_0==HX_("tex",e7,5d,58,00)) ||  (_hx_switch_0==HX_("texture",db,c8,e0,9e)) ||  (_hx_switch_0==HX_("textureatlas",90,8a,4f,8c)) ){
HXLINE(3052)			spr->set_frames(::animateatlas::AtlasFrameMaker_obj::construct(image,null(),null()));
HXDLIN(3052)			goto _hx_goto_270;
            		}
            		if (  (_hx_switch_0==HX_("tex_noaa",f9,ff,c1,49)) ||  (_hx_switch_0==HX_("texture_noaa",85,60,8d,61)) ||  (_hx_switch_0==HX_("textureatlas_noaa",b0,4e,9b,44)) ){
HXLINE(3055)			spr->set_frames(::animateatlas::AtlasFrameMaker_obj::construct(image,null(),true));
HXDLIN(3055)			goto _hx_goto_270;
            		}
            		/* default */{
HXLINE(3061)			::String library1 = null();
HXDLIN(3061)			 ::flixel::graphics::FlxGraphic imageLoaded1 = ::Paths_obj::returnGraphic(image,null());
HXDLIN(3061)			bool xmlExists = false;
HXDLIN(3061)			if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e))))) {
HXLINE(3061)				xmlExists = true;
            			}
HXDLIN(3061)			 ::Dynamic _hx_tmp2;
HXDLIN(3061)			if (::hx::IsNotNull( imageLoaded1 )) {
HXLINE(3061)				_hx_tmp2 = imageLoaded1;
            			}
            			else {
HXLINE(3061)				 ::flixel::graphics::FlxGraphic returnAsset1 = ::Paths_obj::returnGraphic(image,library1);
HXDLIN(3061)				_hx_tmp2 = returnAsset1;
            			}
HXDLIN(3061)			 ::Dynamic _hx_tmp3;
HXDLIN(3061)			if (xmlExists) {
HXLINE(3061)				_hx_tmp3 = ::sys::io::File_obj::getContent(::Paths_obj::modFolders(((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e))));
            			}
            			else {
HXLINE(3061)				_hx_tmp3 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + image) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library1);
            			}
HXDLIN(3061)			spr->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp2,_hx_tmp3));
            		}
            		_hx_goto_270:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FunkinLua_obj,loadFrames,(void))

void FunkinLua_obj::setGroupStuff( ::Dynamic leArray,::String variable, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3065_setGroupStuff)
HXLINE(3066)		::Array< ::String > killMe = variable.split(HX_(".",2e,00,00,00));
HXLINE(3067)		if ((killMe->length > 1)) {
HXLINE(3068)			 ::Dynamic coverMeInPiss = ::Reflect_obj::getProperty(leArray,killMe->__get(0));
HXLINE(3069)			{
HXLINE(3069)				int _g = 1;
HXDLIN(3069)				int _g1 = (killMe->length - 1);
HXDLIN(3069)				while((_g < _g1)){
HXLINE(3069)					_g = (_g + 1);
HXDLIN(3069)					int i = (_g - 1);
HXLINE(3070)					coverMeInPiss = ::Reflect_obj::getProperty(coverMeInPiss,killMe->__get(i));
            				}
            			}
HXLINE(3072)			::Reflect_obj::setProperty(coverMeInPiss,killMe->__get((killMe->length - 1)),value);
HXLINE(3073)			return;
            		}
HXLINE(3075)		::Reflect_obj::setProperty(leArray,variable,value);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FunkinLua_obj,setGroupStuff,(void))

void FunkinLua_obj::resetTextTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3078_resetTextTag)
HXLINE(3079)		if (!(::PlayState_obj::instance->modchartTexts->exists(tag))) {
HXLINE(3080)			return;
            		}
HXLINE(3083)		 ::ModchartText pee = ( ( ::ModchartText)(::PlayState_obj::instance->modchartTexts->get(tag)) );
HXLINE(3084)		pee->kill();
HXLINE(3085)		if (pee->wasAdded) {
HXLINE(3086)			::PlayState_obj::instance->remove(pee,true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(3088)		pee->destroy();
HXLINE(3089)		::PlayState_obj::instance->modchartTexts->remove(tag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,resetTextTag,(void))

void FunkinLua_obj::resetSpriteTag(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3092_resetSpriteTag)
HXLINE(3093)		if (!(::PlayState_obj::instance->modchartSprites->exists(tag))) {
HXLINE(3094)			return;
            		}
HXLINE(3097)		 ::ModchartSprite pee = ( ( ::ModchartSprite)(::PlayState_obj::instance->modchartSprites->get(tag)) );
HXLINE(3098)		pee->kill();
HXLINE(3099)		if (pee->wasAdded) {
HXLINE(3100)			::PlayState_obj::instance->remove(pee,true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(3102)		pee->destroy();
HXLINE(3103)		::PlayState_obj::instance->modchartSprites->remove(tag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,resetSpriteTag,(void))

void FunkinLua_obj::cancelTween(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3107_cancelTween)
HXDLIN(3107)		if (::PlayState_obj::instance->modchartTweens->exists(tag)) {
HXLINE(3108)			( ( ::flixel::tweens::FlxTween)(::PlayState_obj::instance->modchartTweens->get(tag)) )->cancel();
HXLINE(3109)			( ( ::flixel::tweens::FlxTween)(::PlayState_obj::instance->modchartTweens->get(tag)) )->destroy();
HXLINE(3110)			::PlayState_obj::instance->modchartTweens->remove(tag);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cancelTween,(void))

 ::Dynamic FunkinLua_obj::tweenShit(::String tag,::String vars){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3114_tweenShit)
HXLINE(3115)		this->cancelTween(tag);
HXLINE(3116)		::Array< ::String > variables = vars.split(HX_(".",2e,00,00,00));
HXLINE(3117)		 ::Dynamic sexyProp = ::FunkinLua_obj::getObjectDirectly(variables->__get(0),null());
HXLINE(3118)		if ((variables->length > 1)) {
HXLINE(3119)			 ::Dynamic sexyProp1 = ::FunkinLua_obj::getPropertyLoopThingWhatever(variables,null(),null());
HXDLIN(3119)			sexyProp = ::FunkinLua_obj::getVarInArray(sexyProp1,variables->__get((variables->length - 1)));
            		}
HXLINE(3121)		return sexyProp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,tweenShit,return )

void FunkinLua_obj::cancelTimer(::String tag){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3125_cancelTimer)
HXDLIN(3125)		if (::PlayState_obj::instance->modchartTimers->exists(tag)) {
HXLINE(3126)			 ::flixel::util::FlxTimer theTimer = ( ( ::flixel::util::FlxTimer)(::PlayState_obj::instance->modchartTimers->get(tag)) );
HXLINE(3127)			theTimer->cancel();
HXLINE(3128)			theTimer->destroy();
HXLINE(3129)			::PlayState_obj::instance->modchartTimers->remove(tag);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cancelTimer,(void))

 ::Dynamic FunkinLua_obj::getFlxEaseByString(::String __o_ease){
            		::String ease = __o_ease;
            		if (::hx::IsNull(__o_ease)) ease = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3134_getFlxEaseByString)
HXLINE(3135)		::String _hx_switch_0 = ::StringTools_obj::trim(ease.toLowerCase());
            		if (  (_hx_switch_0==HX_("backin",cc,4d,99,4a)) ){
HXLINE(3136)			return ::flixel::tweens::FlxEase_obj::backIn_dyn();
HXDLIN(3136)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("backinout",42,fa,a0,07)) ){
HXLINE(3137)			return ::flixel::tweens::FlxEase_obj::backInOut_dyn();
HXDLIN(3137)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("backout",c7,58,8f,fb)) ){
HXLINE(3138)			return ::flixel::tweens::FlxEase_obj::backOut_dyn();
HXDLIN(3138)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("bouncein",6d,53,b0,4c)) ){
HXLINE(3139)			return ::flixel::tweens::FlxEase_obj::bounceIn_dyn();
HXDLIN(3139)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("bounceinout",41,6f,66,e6)) ){
HXLINE(3140)			return ::flixel::tweens::FlxEase_obj::bounceInOut_dyn();
HXDLIN(3140)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("bounceout",06,40,9d,cd)) ){
HXLINE(3141)			return ::flixel::tweens::FlxEase_obj::bounceOut_dyn();
HXDLIN(3141)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("circin",7c,6f,0d,56)) ){
HXLINE(3142)			return ::flixel::tweens::FlxEase_obj::circIn_dyn();
HXDLIN(3142)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("circinout",92,06,0d,e1)) ){
HXLINE(3143)			return ::flixel::tweens::FlxEase_obj::circInOut_dyn();
HXDLIN(3143)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("circout",17,b1,b8,f5)) ){
HXLINE(3144)			return ::flixel::tweens::FlxEase_obj::circOut_dyn();
HXDLIN(3144)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("cubein",1a,80,4a,34)) ){
HXLINE(3145)			return ::flixel::tweens::FlxEase_obj::cubeIn_dyn();
HXDLIN(3145)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("cubeinout",b4,ac,c9,c2)) ){
HXLINE(3146)			return ::flixel::tweens::FlxEase_obj::cubeInOut_dyn();
HXDLIN(3146)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("cubeout",b9,2a,ea,8c)) ){
HXLINE(3147)			return ::flixel::tweens::FlxEase_obj::cubeOut_dyn();
HXDLIN(3147)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("elasticin",fa,3c,61,27)) ){
HXLINE(3148)			return ::flixel::tweens::FlxEase_obj::elasticIn_dyn();
HXDLIN(3148)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("elasticinout",d4,3b,a0,39)) ){
HXLINE(3149)			return ::flixel::tweens::FlxEase_obj::elasticInOut_dyn();
HXDLIN(3149)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("elasticout",d9,b1,b8,4d)) ){
HXLINE(3150)			return ::flixel::tweens::FlxEase_obj::elasticOut_dyn();
HXDLIN(3150)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("expoin",97,89,7d,c4)) ){
HXLINE(3151)			return ::flixel::tweens::FlxEase_obj::expoIn_dyn();
HXDLIN(3151)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("expoinout",57,ef,01,5a)) ){
HXLINE(3152)			return ::flixel::tweens::FlxEase_obj::expoInOut_dyn();
HXDLIN(3152)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("expoout",9c,6e,5f,29)) ){
HXLINE(3153)			return ::flixel::tweens::FlxEase_obj::expoOut_dyn();
HXDLIN(3153)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quadin",6c,94,9f,cc)) ){
HXLINE(3154)			return ::flixel::tweens::FlxEase_obj::quadIn_dyn();
HXDLIN(3154)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quadinout",a2,97,0c,bc)) ){
HXLINE(3155)			return ::flixel::tweens::FlxEase_obj::quadInOut_dyn();
HXDLIN(3155)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quadout",27,de,06,3f)) ){
HXLINE(3156)			return ::flixel::tweens::FlxEase_obj::quadOut_dyn();
HXDLIN(3156)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quartin",a4,9b,4b,48)) ){
HXLINE(3157)			return ::flixel::tweens::FlxEase_obj::quartIn_dyn();
HXDLIN(3157)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quartinout",6a,e3,62,99)) ){
HXLINE(3158)			return ::flixel::tweens::FlxEase_obj::quartInOut_dyn();
HXDLIN(3158)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quartout",ef,27,e1,f9)) ){
HXLINE(3159)			return ::flixel::tweens::FlxEase_obj::quartOut_dyn();
HXDLIN(3159)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quintin",30,65,db,e0)) ){
HXLINE(3160)			return ::flixel::tweens::FlxEase_obj::quintIn_dyn();
HXDLIN(3160)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quintinout",5e,99,a0,bc)) ){
HXLINE(3161)			return ::flixel::tweens::FlxEase_obj::quintInOut_dyn();
HXDLIN(3161)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("quintout",e3,b8,21,df)) ){
HXLINE(3162)			return ::flixel::tweens::FlxEase_obj::quintOut_dyn();
HXDLIN(3162)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("sinein",72,df,1f,b9)) ){
HXLINE(3163)			return ::flixel::tweens::FlxEase_obj::sineIn_dyn();
HXDLIN(3163)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("sineinout",5c,74,84,36)) ){
HXLINE(3164)			return ::flixel::tweens::FlxEase_obj::sineInOut_dyn();
HXDLIN(3164)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("sineout",61,38,c8,42)) ){
HXLINE(3165)			return ::flixel::tweens::FlxEase_obj::sineOut_dyn();
HXDLIN(3165)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepin",8c,7c,27,7b)) ){
HXLINE(3169)			return ::flixel::tweens::FlxEase_obj::smootherStepIn_dyn();
HXDLIN(3169)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepinout",82,83,8c,0a)) ){
HXLINE(3170)			return ::flixel::tweens::FlxEase_obj::smootherStepInOut_dyn();
HXDLIN(3170)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("smootherstepout",07,12,6a,47)) ){
HXLINE(3171)			return ::flixel::tweens::FlxEase_obj::smootherStepOut_dyn();
HXDLIN(3171)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepin",df,0c,da,16)) ){
HXLINE(3166)			return ::flixel::tweens::FlxEase_obj::smoothStepIn_dyn();
HXDLIN(3166)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepinout",0f,a9,b0,af)) ){
HXLINE(3167)			return ::flixel::tweens::FlxEase_obj::smoothStepInOut_dyn();
HXDLIN(3167)			goto _hx_goto_279;
            		}
            		if (  (_hx_switch_0==HX_("smoothstepout",54,ca,f5,e7)) ){
HXLINE(3168)			return ::flixel::tweens::FlxEase_obj::smoothStepInOut_dyn();
HXDLIN(3168)			goto _hx_goto_279;
            		}
            		_hx_goto_279:;
HXLINE(3173)		return ::flixel::tweens::FlxEase_obj::linear_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getFlxEaseByString,return )

 ::Dynamic FunkinLua_obj::blendModeFromString(::String blend){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3176_blendModeFromString)
HXLINE(3177)		::String _hx_switch_0 = ::StringTools_obj::trim(blend.toLowerCase());
            		if (  (_hx_switch_0==HX_("add",21,f2,49,00)) ){
HXLINE(3178)			return 0;
HXDLIN(3178)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("alpha",5e,a7,96,21)) ){
HXLINE(3179)			return 1;
HXDLIN(3179)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("darken",5f,36,3a,21)) ){
HXLINE(3180)			return 2;
HXDLIN(3180)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("difference",fd,9b,91,46)) ){
HXLINE(3181)			return 3;
HXDLIN(3181)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("erase",e6,e8,1c,73)) ){
HXLINE(3182)			return 4;
HXDLIN(3182)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("hardlight",0b,6e,6b,53)) ){
HXLINE(3183)			return 5;
HXDLIN(3183)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("invert",16,e7,d8,9f)) ){
HXLINE(3184)			return 6;
HXDLIN(3184)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("layer",d1,81,c0,6f)) ){
HXLINE(3185)			return 7;
HXDLIN(3185)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("lighten",bf,4a,e3,19)) ){
HXLINE(3186)			return 8;
HXDLIN(3186)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("multiply",24,e2,8c,9a)) ){
HXLINE(3187)			return 9;
HXDLIN(3187)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("overlay",90,43,10,a9)) ){
HXLINE(3188)			return 11;
HXDLIN(3188)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("screen",6c,3b,5d,47)) ){
HXLINE(3189)			return 12;
HXDLIN(3189)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("shader",25,bf,20,1d)) ){
HXLINE(3190)			return 13;
HXDLIN(3190)			goto _hx_goto_281;
            		}
            		if (  (_hx_switch_0==HX_("subtract",14,75,11,f8)) ){
HXLINE(3191)			return 14;
HXDLIN(3191)			goto _hx_goto_281;
            		}
            		_hx_goto_281:;
HXLINE(3193)		return 10;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,blendModeFromString,return )

 ::flixel::FlxCamera FunkinLua_obj::cameraFromString(::String cam){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3196_cameraFromString)
HXLINE(3197)		::String _hx_switch_0 = cam.toLowerCase();
            		if (  (_hx_switch_0==HX_("camhud",08,90,8e,b7)) ||  (_hx_switch_0==HX_("hud",b7,50,4f,00)) ){
HXLINE(3198)			return ::PlayState_obj::instance->camHUD;
HXDLIN(3198)			goto _hx_goto_283;
            		}
            		if (  (_hx_switch_0==HX_("camother",61,dc,80,ab)) ||  (_hx_switch_0==HX_("other",d0,66,76,36)) ){
HXLINE(3199)			return ::PlayState_obj::instance->camOther;
HXDLIN(3199)			goto _hx_goto_283;
            		}
            		_hx_goto_283:;
HXLINE(3201)		return ::PlayState_obj::instance->camGame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,cameraFromString,return )

void FunkinLua_obj::luaTrace(::String text,::hx::Null< bool >  __o_ignoreCheck,::hx::Null< bool >  __o_deprecated,::hx::Null< int >  __o_color){
            		bool ignoreCheck = __o_ignoreCheck.Default(false);
            		bool deprecated = __o_deprecated.Default(false);
            		int color = __o_color.Default(-1);
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3206_luaTrace)
HXDLIN(3206)		bool _hx_tmp;
HXDLIN(3206)		if (!(ignoreCheck)) {
HXDLIN(3206)			_hx_tmp = this->getBool(HX_("luaDebugMode",7e,06,20,4c));
            		}
            		else {
HXDLIN(3206)			_hx_tmp = true;
            		}
HXDLIN(3206)		if (_hx_tmp) {
HXLINE(3207)			bool _hx_tmp1;
HXDLIN(3207)			if (deprecated) {
HXLINE(3207)				_hx_tmp1 = !(this->getBool(HX_("luaDeprecatedWarnings",02,69,36,70)));
            			}
            			else {
HXLINE(3207)				_hx_tmp1 = false;
            			}
HXDLIN(3207)			if (_hx_tmp1) {
HXLINE(3208)				return;
            			}
HXLINE(3210)			::PlayState_obj::instance->addTextToDebug(text,color);
HXLINE(3211)			::haxe::Log_obj::trace(text,::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),3211,HX_("FunkinLua",e7,f3,7b,36),HX_("luaTrace",ad,69,82,94)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FunkinLua_obj,luaTrace,(void))

::String FunkinLua_obj::getErrorMessage(int status){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3217_getErrorMessage)
HXLINE(3219)		::String v = linc::lua::tostring(this->lua,-1);
HXLINE(3220)		lua_pop(this->lua,1);
HXLINE(3222)		if (::hx::IsNotNull( v )) {
HXLINE(3223)			v = ::StringTools_obj::trim(v);
            		}
HXLINE(3224)		bool _hx_tmp;
HXDLIN(3224)		if (::hx::IsNotNull( v )) {
HXLINE(3224)			_hx_tmp = (v == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(3224)			_hx_tmp = true;
            		}
HXDLIN(3224)		if (_hx_tmp) {
HXLINE(3226)			switch((int)(status)){
            				case (int)2: {
HXLINE(3229)					return HX_("Runtime Error",40,fe,ae,fe);
            				}
            				break;
            				case (int)4: {
HXLINE(3231)					return HX_("Memory Allocation Error",a7,0d,34,8f);
            				}
            				break;
            				case (int)5: {
HXLINE(3233)					return HX_("Critical Error",87,29,36,da);
            				}
            				break;
            			}
HXLINE(3235)			return HX_("Unknown Error",72,7e,3c,a3);
            		}
HXLINE(3238)		return v;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getErrorMessage,return )

 ::Dynamic FunkinLua_obj::getResult( cpp::Reference<lua_State> l,int result){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3243_getResult)
HXLINE(3245)		 ::Dynamic ret = null();
HXLINE(3247)		switch((int)(lua_type(l,result))){
            			case (int)0: {
HXLINE(3249)				ret = null();
            			}
            			break;
            			case (int)1: {
HXLINE(3251)				ret = (lua_toboolean(l,-1) != 0);
            			}
            			break;
            			case (int)3: {
HXLINE(3253)				ret = lua_tonumber(l,-1);
            			}
            			break;
            			case (int)4: {
HXLINE(3255)				ret = linc::lua::tostring(l,-1);
            			}
            			break;
            		}
HXLINE(3258)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,getResult,return )

::String FunkinLua_obj::typeToString(int type){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3265_typeToString)
HXLINE(3267)		switch((int)(type)){
            			case (int)1: {
HXLINE(3270)				return HX_("boolean",a8,ea,fe,7d);
            			}
            			break;
            			case (int)3: {
HXLINE(3272)				return HX_("number",c9,86,7a,a1);
            			}
            			break;
            			case (int)4: {
HXLINE(3274)				return HX_("string",d1,28,30,11);
            			}
            			break;
            			case (int)5: {
HXLINE(3276)				return HX_("table",0e,b8,e3,0a);
            			}
            			break;
            			case (int)6: {
HXLINE(3278)				return HX_("function",18,ab,52,14);
            			}
            			break;
            		}
HXLINE(3280)		if ((type <= 0)) {
HXLINE(3281)			return HX_("nil",d1,d3,53,00);
            		}
HXLINE(3283)		return HX_("unknown",8a,23,7b,e1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,typeToString,return )

 ::Dynamic FunkinLua_obj::call(::String func,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3287_call)
HXLINE(3289)		if (this->closed) {
HXLINE(3289)			return ::FunkinLua_obj::Function_Continue;
            		}
HXLINE(3291)		this->lastCalledFunction = func;
HXLINE(3292)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(3293)			if (::hx::IsNull( this->lua )) {
HXLINE(3293)				return ::FunkinLua_obj::Function_Continue;
            			}
HXLINE(3295)			lua_getglobal(this->lua,func);
HXLINE(3296)			int type = lua_type(this->lua,-1);
HXLINE(3298)			if ((type != 6)) {
HXLINE(3299)				if ((type > 0)) {
HXLINE(3300)					this->luaTrace(((((HX_("ERROR (",b0,59,de,69) + func) + HX_("): attempt to call a ",3e,66,c9,81)) + this->typeToString(type)) + HX_(" value",51,0b,24,fd)),false,false,-65536);
            				}
HXLINE(3302)				lua_pop(this->lua,1);
HXLINE(3303)				return ::FunkinLua_obj::Function_Continue;
            			}
HXLINE(3306)			{
HXLINE(3306)				int _g = 0;
HXDLIN(3306)				while((_g < args->get_length())){
HXLINE(3306)					 ::Dynamic arg = args->__get(_g);
HXDLIN(3306)					_g = (_g + 1);
HXDLIN(3306)					::llua::Convert_obj::toLua(this->lua,arg);
            				}
            			}
HXLINE(3307)			int status = lua_pcall(this->lua,args->get_length(),1,0);
HXLINE(3310)			if ((status != 0)) {
HXLINE(3311)				::String error = this->getErrorMessage(status);
HXLINE(3312)				this->luaTrace((((HX_("ERROR (",b0,59,de,69) + func) + HX_("): ",0f,4f,1f,00)) + error),false,false,-65536);
HXLINE(3313)				return ::FunkinLua_obj::Function_Continue;
            			}
HXLINE(3317)			 ::Dynamic result = ::llua::Convert_obj::fromLua(this->lua,-1);
HXLINE(3318)			if (::hx::IsNull( result )) {
HXLINE(3318)				result = ::FunkinLua_obj::Function_Continue;
            			}
HXLINE(3320)			lua_pop(this->lua,1);
HXLINE(3321)			return result;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE(3323)				{
HXLINE(3323)					null();
            				}
HXDLIN(3323)				 ::Dynamic e = _g1;
HXLINE(3324)				::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("source/FunkinLua.hx",2b,26,2f,05),3324,HX_("FunkinLua",e7,f3,7b,36),HX_("call",9e,18,ba,41)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(3327)		return ::FunkinLua_obj::Function_Continue;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,call,return )

bool FunkinLua_obj::resultIsAllowed( cpp::Reference<lua_State> leLua, ::Dynamic leResult){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3381_resultIsAllowed)
HXLINE(3382)		int type = lua_type(leLua,( (int)(leResult) ));
HXLINE(3383)		bool _hx_tmp;
HXDLIN(3383)		if ((type >= 0)) {
HXLINE(3383)			_hx_tmp = (type < 5);
            		}
            		else {
HXLINE(3383)			_hx_tmp = false;
            		}
HXDLIN(3383)		if (_hx_tmp) {
HXLINE(3383)			return (type != 2);
            		}
            		else {
HXLINE(3383)			return false;
            		}
HXDLIN(3383)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,resultIsAllowed,return )

bool FunkinLua_obj::isErrorAllowed(::String error){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3386_isErrorAllowed)
HXLINE(3387)		::String _hx_switch_0 = error;
            		if (  (_hx_switch_0==HX_("C++ exception",92,52,cd,44)) ||  (_hx_switch_0==HX_("attempt to call a nil value",93,04,85,54)) ){
HXLINE(3390)			return false;
HXDLIN(3390)			goto _hx_goto_292;
            		}
            		_hx_goto_292:;
HXLINE(3392)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,isErrorAllowed,return )

void FunkinLua_obj::set(::String variable, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3396_set)
HXLINE(3398)		if (::hx::IsNull( this->lua )) {
HXLINE(3399)			return;
            		}
HXLINE(3402)		::llua::Convert_obj::toLua(this->lua,data);
HXLINE(3403)		lua_setglobal(this->lua,variable);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,set,(void))

bool FunkinLua_obj::getBool(::String variable){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3408_getBool)
HXLINE(3409)		::String result = null();
HXLINE(3410)		lua_getglobal(this->lua,variable);
HXLINE(3411)		result = ( (::String)(::llua::Convert_obj::fromLua(this->lua,-1)) );
HXLINE(3412)		lua_pop(this->lua,1);
HXLINE(3414)		if (::hx::IsNull( result )) {
HXLINE(3415)			return false;
            		}
HXLINE(3417)		return (result == HX_("true",4e,a7,03,4d));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getBool,return )

void FunkinLua_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3421_stop)
HXLINE(3423)		if (::hx::IsNull( this->lua )) {
HXLINE(3424)			return;
            		}
HXLINE(3427)		lua_close(this->lua);
HXLINE(3428)		this->lua = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunkinLua_obj,stop,(void))

 ::Dynamic FunkinLua_obj::Function_Stop;

 ::Dynamic FunkinLua_obj::Function_Continue;

 ::Dynamic FunkinLua_obj::Function_StopLua;

 ::HScript FunkinLua_obj::hscript;

bool FunkinLua_obj::isOfTypes( ::Dynamic value,::cpp::VirtualArray types){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_2862_isOfTypes)
HXLINE(2863)		{
HXLINE(2863)			int _g = 0;
HXDLIN(2863)			while((_g < types->get_length())){
HXLINE(2863)				 ::Dynamic type = types->__get(_g);
HXDLIN(2863)				_g = (_g + 1);
HXLINE(2865)				if (::Std_obj::isOfType(value,type)) {
HXLINE(2865)					return true;
            				}
            			}
            		}
HXLINE(2867)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,isOfTypes,return )

 ::Dynamic FunkinLua_obj::setVarInArray( ::Dynamic instance,::String variable, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_2882_setVarInArray)
HXLINE(2883)		::Array< ::String > shit = variable.split(HX_("[",5b,00,00,00));
HXLINE(2884)		if ((shit->length > 1)) {
HXLINE(2886)			 ::Dynamic blah = null();
HXLINE(2887)			if (::PlayState_obj::instance->variables->exists(shit->__get(0))) {
HXLINE(2889)				 ::Dynamic retVal = ::PlayState_obj::instance->variables->get(shit->__get(0));
HXLINE(2890)				if (::hx::IsNotNull( retVal )) {
HXLINE(2891)					blah = retVal;
            				}
            			}
            			else {
HXLINE(2894)				blah = ::Reflect_obj::getProperty(instance,shit->__get(0));
            			}
HXLINE(2896)			{
HXLINE(2896)				int _g = 1;
HXDLIN(2896)				int _g1 = shit->length;
HXDLIN(2896)				while((_g < _g1)){
HXLINE(2896)					_g = (_g + 1);
HXDLIN(2896)					int i = (_g - 1);
HXLINE(2898)					 ::Dynamic leNum = shit->__get(i).substr(0,(shit->__get(i).length - 1));
HXLINE(2899)					if ((i >= (shit->length - 1))) {
HXLINE(2900)						blah->__SetItem(( (int)(leNum) ),value);
            					}
            					else {
HXLINE(2902)						blah = blah->__GetItem(( (int)(leNum) ));
            					}
            				}
            			}
HXLINE(2904)			return blah;
            		}
HXLINE(2910)		if (::PlayState_obj::instance->variables->exists(variable)) {
HXLINE(2912)			::PlayState_obj::instance->variables->set(variable,value);
HXLINE(2913)			return true;
            		}
HXLINE(2916)		::Reflect_obj::setProperty(instance,variable,value);
HXLINE(2917)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FunkinLua_obj,setVarInArray,return )

 ::Dynamic FunkinLua_obj::getVarInArray( ::Dynamic instance,::String variable){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_2920_getVarInArray)
HXLINE(2921)		::Array< ::String > shit = variable.split(HX_("[",5b,00,00,00));
HXLINE(2922)		if ((shit->length > 1)) {
HXLINE(2924)			 ::Dynamic blah = null();
HXLINE(2925)			if (::PlayState_obj::instance->variables->exists(shit->__get(0))) {
HXLINE(2927)				 ::Dynamic retVal = ::PlayState_obj::instance->variables->get(shit->__get(0));
HXLINE(2928)				if (::hx::IsNotNull( retVal )) {
HXLINE(2929)					blah = retVal;
            				}
            			}
            			else {
HXLINE(2932)				blah = ::Reflect_obj::getProperty(instance,shit->__get(0));
            			}
HXLINE(2934)			{
HXLINE(2934)				int _g = 1;
HXDLIN(2934)				int _g1 = shit->length;
HXDLIN(2934)				while((_g < _g1)){
HXLINE(2934)					_g = (_g + 1);
HXDLIN(2934)					int i = (_g - 1);
HXLINE(2936)					 ::Dynamic leNum = shit->__get(i).substr(0,(shit->__get(i).length - 1));
HXLINE(2937)					blah = blah->__GetItem(( (int)(leNum) ));
            				}
            			}
HXLINE(2939)			return blah;
            		}
HXLINE(2942)		if (::PlayState_obj::instance->variables->exists(variable)) {
HXLINE(2944)			 ::Dynamic retVal1 = ::PlayState_obj::instance->variables->get(variable);
HXLINE(2945)			if (::hx::IsNotNull( retVal1 )) {
HXLINE(2946)				return retVal1;
            			}
            		}
HXLINE(2949)		return ::Reflect_obj::getProperty(instance,variable);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,getVarInArray,return )

 ::flixel::text::FlxText FunkinLua_obj::getTextObject(::String name){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_2954_getTextObject)
HXDLIN(2954)		if (::PlayState_obj::instance->modchartTexts->exists(name)) {
HXDLIN(2954)			return ( ( ::flixel::text::FlxText)(::PlayState_obj::instance->modchartTexts->get(name)) );
            		}
            		else {
HXDLIN(2954)			return ( ( ::flixel::text::FlxText)(::Reflect_obj::getProperty(::PlayState_obj::instance,name)) );
            		}
HXDLIN(2954)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FunkinLua_obj,getTextObject,return )

bool FunkinLua_obj::addAnimByIndices(::String obj,::String name,::String prefix,::String indices,::hx::Null< int >  __o_framerate,::hx::Null< bool >  __o_loop){
            		int framerate = __o_framerate.Default(24);
            		bool loop = __o_loop.Default(false);
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3331_addAnimByIndices)
HXLINE(3332)		::Array< ::String > strIndices = ::StringTools_obj::trim(indices).split(HX_(",",2c,00,00,00));
HXLINE(3333)		::Array< int > die = ::Array_obj< int >::__new(0);
HXLINE(3334)		{
HXLINE(3334)			int _g = 0;
HXDLIN(3334)			int _g1 = strIndices->length;
HXDLIN(3334)			while((_g < _g1)){
HXLINE(3334)				_g = (_g + 1);
HXDLIN(3334)				int i = (_g - 1);
HXLINE(3335)				die->push(::Std_obj::parseInt(strIndices->__get(i)));
            			}
            		}
HXLINE(3338)		if (::hx::IsNotNull( ::PlayState_obj::instance->getLuaObject(obj,false) )) {
HXLINE(3339)			 ::flixel::FlxSprite pussy = ::PlayState_obj::instance->getLuaObject(obj,false);
HXLINE(3340)			pussy->animation->addByIndices(name,prefix,die,HX_("",00,00,00,00),framerate,loop,null(),null());
HXLINE(3341)			if (::hx::IsNull( pussy->animation->_curAnim )) {
HXLINE(3342)				pussy->animation->play(name,true,null(),null());
            			}
HXLINE(3344)			return true;
            		}
HXLINE(3347)		 ::flixel::FlxState pussy1;
HXDLIN(3347)		if (::PlayState_obj::instance->isDead) {
HXLINE(3347)			pussy1 = ::GameOverSubstate_obj::instance;
            		}
            		else {
HXLINE(3347)			pussy1 = ::PlayState_obj::instance;
            		}
HXDLIN(3347)		 ::flixel::FlxSprite pussy2 = ( ( ::flixel::FlxSprite)(::Reflect_obj::getProperty(pussy1,obj)) );
HXLINE(3348)		if (::hx::IsNotNull( pussy2 )) {
HXLINE(3349)			pussy2->animation->addByIndices(name,prefix,die,HX_("",00,00,00,00),framerate,loop,null(),null());
HXLINE(3350)			if (::hx::IsNull( pussy2->animation->_curAnim )) {
HXLINE(3351)				pussy2->animation->play(name,true,null(),null());
            			}
HXLINE(3353)			return true;
            		}
HXLINE(3355)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FunkinLua_obj,addAnimByIndices,return )

 ::Dynamic FunkinLua_obj::getPropertyLoopThingWhatever(::Array< ::String > killMe, ::Dynamic __o_checkForTextsToo, ::Dynamic __o_getProperty){
            		 ::Dynamic checkForTextsToo = __o_checkForTextsToo;
            		if (::hx::IsNull(__o_checkForTextsToo)) checkForTextsToo = true;
            		 ::Dynamic getProperty = __o_getProperty;
            		if (::hx::IsNull(__o_getProperty)) getProperty = true;
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3359_getPropertyLoopThingWhatever)
HXLINE(3360)		 ::Dynamic coverMeInPiss = ::FunkinLua_obj::getObjectDirectly(killMe->__get(0),checkForTextsToo);
HXLINE(3361)		int end = killMe->length;
HXLINE(3362)		if (( (bool)(getProperty) )) {
HXLINE(3362)			end = (killMe->length - 1);
            		}
HXLINE(3364)		{
HXLINE(3364)			int _g = 1;
HXDLIN(3364)			int _g1 = end;
HXDLIN(3364)			while((_g < _g1)){
HXLINE(3364)				_g = (_g + 1);
HXDLIN(3364)				int i = (_g - 1);
HXLINE(3365)				coverMeInPiss = ::FunkinLua_obj::getVarInArray(coverMeInPiss,killMe->__get(i));
            			}
            		}
HXLINE(3367)		return coverMeInPiss;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FunkinLua_obj,getPropertyLoopThingWhatever,return )

 ::Dynamic FunkinLua_obj::getObjectDirectly(::String objectName, ::Dynamic __o_checkForTextsToo){
            		 ::Dynamic checkForTextsToo = __o_checkForTextsToo;
            		if (::hx::IsNull(__o_checkForTextsToo)) checkForTextsToo = true;
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3371_getObjectDirectly)
HXLINE(3372)		 ::Dynamic coverMeInPiss = ::PlayState_obj::instance->getLuaObject(objectName,checkForTextsToo);
HXLINE(3373)		if (::hx::IsNull( coverMeInPiss )) {
HXLINE(3374)			 ::flixel::FlxState coverMeInPiss1;
HXDLIN(3374)			if (::PlayState_obj::instance->isDead) {
HXLINE(3374)				coverMeInPiss1 = ::GameOverSubstate_obj::instance;
            			}
            			else {
HXLINE(3374)				coverMeInPiss1 = ::PlayState_obj::instance;
            			}
HXDLIN(3374)			coverMeInPiss = ::FunkinLua_obj::getVarInArray(coverMeInPiss1,objectName);
            		}
HXLINE(3376)		return coverMeInPiss;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FunkinLua_obj,getObjectDirectly,return )

 ::flixel::FlxState FunkinLua_obj::getInstance(){
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_3434_getInstance)
HXDLIN(3434)		if (::PlayState_obj::instance->isDead) {
HXDLIN(3434)			return ::GameOverSubstate_obj::instance;
            		}
            		else {
HXDLIN(3434)			return ::PlayState_obj::instance;
            		}
HXDLIN(3434)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FunkinLua_obj,getInstance,return )


::hx::ObjectPtr< FunkinLua_obj > FunkinLua_obj::__new(::String script) {
	::hx::ObjectPtr< FunkinLua_obj > __this = new FunkinLua_obj();
	__this->__construct(script);
	return __this;
}

::hx::ObjectPtr< FunkinLua_obj > FunkinLua_obj::__alloc(::hx::Ctx *_hx_ctx,::String script) {
	FunkinLua_obj *__this = (FunkinLua_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunkinLua_obj), true, "FunkinLua"));
	*(void **)__this = FunkinLua_obj::_hx_vtable;
	__this->__construct(script);
	return __this;
}

FunkinLua_obj::FunkinLua_obj()
{
}

void FunkinLua_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunkinLua);
	HX_MARK_MEMBER_NAME(lua,"lua");
	HX_MARK_MEMBER_NAME(camTarget,"camTarget");
	HX_MARK_MEMBER_NAME(scriptName,"scriptName");
	HX_MARK_MEMBER_NAME(closed,"closed");
	HX_MARK_MEMBER_NAME(lastCalledFunction,"lastCalledFunction");
	HX_MARK_END_CLASS();
}

void FunkinLua_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lua,"lua");
	HX_VISIT_MEMBER_NAME(camTarget,"camTarget");
	HX_VISIT_MEMBER_NAME(scriptName,"scriptName");
	HX_VISIT_MEMBER_NAME(closed,"closed");
	HX_VISIT_MEMBER_NAME(lastCalledFunction,"lastCalledFunction");
}

::hx::Val FunkinLua_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { return ::hx::Val( lua ); }
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"closed") ) { return ::hx::Val( closed ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getBool") ) { return ::hx::Val( getBool_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"luaTrace") ) { return ::hx::Val( luaTrace_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camTarget") ) { return ::hx::Val( camTarget ); }
		if (HX_FIELD_EQ(inName,"getShader") ) { return ::hx::Val( getShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenShit") ) { return ::hx::Val( tweenShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"getResult") ) { return ::hx::Val( getResult_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptName") ) { return ::hx::Val( scriptName ); }
		if (HX_FIELD_EQ(inName,"loadFrames") ) { return ::hx::Val( loadFrames_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cancelTween") ) { return ::hx::Val( cancelTween_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancelTimer") ) { return ::hx::Val( cancelTimer_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resetTextTag") ) { return ::hx::Val( resetTextTag_dyn() ); }
		if (HX_FIELD_EQ(inName,"typeToString") ) { return ::hx::Val( typeToString_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initLuaShader") ) { return ::hx::Val( initLuaShader_dyn() ); }
		if (HX_FIELD_EQ(inName,"getGroupStuff") ) { return ::hx::Val( getGroupStuff_dyn() ); }
		if (HX_FIELD_EQ(inName,"setGroupStuff") ) { return ::hx::Val( setGroupStuff_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"initHaxeModule") ) { return ::hx::Val( initHaxeModule_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSpriteTag") ) { return ::hx::Val( resetSpriteTag_dyn() ); }
		if (HX_FIELD_EQ(inName,"isErrorAllowed") ) { return ::hx::Val( isErrorAllowed_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getErrorMessage") ) { return ::hx::Val( getErrorMessage_dyn() ); }
		if (HX_FIELD_EQ(inName,"resultIsAllowed") ) { return ::hx::Val( resultIsAllowed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cameraFromString") ) { return ::hx::Val( cameraFromString_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getFlxEaseByString") ) { return ::hx::Val( getFlxEaseByString_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastCalledFunction") ) { return ::hx::Val( lastCalledFunction ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"blendModeFromString") ) { return ::hx::Val( blendModeFromString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FunkinLua_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"hscript") ) { outValue = ( hscript ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isOfTypes") ) { outValue = isOfTypes_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getInstance") ) { outValue = getInstance_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"Function_Stop") ) { outValue = ( Function_Stop ); return true; }
		if (HX_FIELD_EQ(inName,"setVarInArray") ) { outValue = setVarInArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVarInArray") ) { outValue = getVarInArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTextObject") ) { outValue = getTextObject_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"Function_StopLua") ) { outValue = ( Function_StopLua ); return true; }
		if (HX_FIELD_EQ(inName,"addAnimByIndices") ) { outValue = addAnimByIndices_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"Function_Continue") ) { outValue = ( Function_Continue ); return true; }
		if (HX_FIELD_EQ(inName,"getObjectDirectly") ) { outValue = getObjectDirectly_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"getPropertyLoopThingWhatever") ) { outValue = getPropertyLoopThingWhatever_dyn(); return true; }
	}
	return false;
}

::hx::Val FunkinLua_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lua") ) { lua=inValue.Cast<  cpp::Reference<lua_State> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"closed") ) { closed=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"camTarget") ) { camTarget=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scriptName") ) { scriptName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastCalledFunction") ) { lastCalledFunction=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FunkinLua_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"hscript") ) { hscript=ioValue.Cast<  ::HScript >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"Function_Stop") ) { Function_Stop=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"Function_StopLua") ) { Function_StopLua=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"Function_Continue") ) { Function_Continue=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void FunkinLua_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lua",b8,59,52,00));
	outFields->push(HX_("camTarget",c0,d0,9d,af));
	outFields->push(HX_("scriptName",f6,4d,e0,41));
	outFields->push(HX_("closed",ac,a9,51,0e));
	outFields->push(HX_("lastCalledFunction",ab,c9,c8,0a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunkinLua_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  cpp::Reference<lua_State> */ ,(int)offsetof(FunkinLua_obj,lua),HX_("lua",b8,59,52,00)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(FunkinLua_obj,camTarget),HX_("camTarget",c0,d0,9d,af)},
	{::hx::fsString,(int)offsetof(FunkinLua_obj,scriptName),HX_("scriptName",f6,4d,e0,41)},
	{::hx::fsBool,(int)offsetof(FunkinLua_obj,closed),HX_("closed",ac,a9,51,0e)},
	{::hx::fsString,(int)offsetof(FunkinLua_obj,lastCalledFunction),HX_("lastCalledFunction",ab,c9,c8,0a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FunkinLua_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &FunkinLua_obj::Function_Stop,HX_("Function_Stop",c9,a5,e8,d3)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &FunkinLua_obj::Function_Continue,HX_("Function_Continue",ae,85,11,8b)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &FunkinLua_obj::Function_StopLua,HX_("Function_StopLua",6f,6f,62,22)},
	{::hx::fsObject /*  ::HScript */ ,(void *) &FunkinLua_obj::hscript,HX_("hscript",73,8c,18,2c)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FunkinLua_obj_sMemberFields[] = {
	HX_("lua",b8,59,52,00),
	HX_("camTarget",c0,d0,9d,af),
	HX_("scriptName",f6,4d,e0,41),
	HX_("closed",ac,a9,51,0e),
	HX_("initHaxeModule",a2,30,89,5d),
	HX_("getShader",5b,48,77,99),
	HX_("initLuaShader",cd,69,3d,b0),
	HX_("getGroupStuff",6b,8b,58,57),
	HX_("loadFrames",6c,de,b0,61),
	HX_("setGroupStuff",77,6d,5e,9c),
	HX_("resetTextTag",9e,f5,a5,10),
	HX_("resetSpriteTag",86,2b,7a,b0),
	HX_("cancelTween",91,12,99,b7),
	HX_("tweenShit",cb,b7,19,83),
	HX_("cancelTimer",eb,27,5e,ae),
	HX_("getFlxEaseByString",b2,e7,5d,b6),
	HX_("blendModeFromString",4f,47,9d,c2),
	HX_("cameraFromString",e0,18,60,4a),
	HX_("luaTrace",ad,69,82,94),
	HX_("getErrorMessage",95,70,2b,6e),
	HX_("getResult",13,f2,da,84),
	HX_("typeToString",86,c9,d1,1f),
	HX_("lastCalledFunction",ab,c9,c8,0a),
	HX_("call",9e,18,ba,41),
	HX_("resultIsAllowed",c1,61,f6,16),
	HX_("isErrorAllowed",4a,b5,fe,10),
	HX_("set",a2,9b,57,00),
	HX_("getBool",e0,33,9e,13),
	HX_("stop",02,f0,5b,4c),
	::String(null()) };

static void FunkinLua_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunkinLua_obj::Function_Stop,"Function_Stop");
	HX_MARK_MEMBER_NAME(FunkinLua_obj::Function_Continue,"Function_Continue");
	HX_MARK_MEMBER_NAME(FunkinLua_obj::Function_StopLua,"Function_StopLua");
	HX_MARK_MEMBER_NAME(FunkinLua_obj::hscript,"hscript");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunkinLua_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::Function_Stop,"Function_Stop");
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::Function_Continue,"Function_Continue");
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::Function_StopLua,"Function_StopLua");
	HX_VISIT_MEMBER_NAME(FunkinLua_obj::hscript,"hscript");
};

#endif

::hx::Class FunkinLua_obj::__mClass;

static ::String FunkinLua_obj_sStaticFields[] = {
	HX_("Function_Stop",c9,a5,e8,d3),
	HX_("Function_Continue",ae,85,11,8b),
	HX_("Function_StopLua",6f,6f,62,22),
	HX_("hscript",73,8c,18,2c),
	HX_("isOfTypes",18,a9,2c,82),
	HX_("setVarInArray",8f,85,58,39),
	HX_("getVarInArray",83,a3,52,f4),
	HX_("getTextObject",82,5b,a2,a8),
	HX_("addAnimByIndices",de,fe,08,84),
	HX_("getPropertyLoopThingWhatever",e1,f9,70,33),
	HX_("getObjectDirectly",0b,c7,22,d0),
	HX_("getInstance",4b,e2,d4,7f),
	::String(null())
};

void FunkinLua_obj::__register()
{
	FunkinLua_obj _hx_dummy;
	FunkinLua_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FunkinLua",e7,f3,7b,36);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FunkinLua_obj::__GetStatic;
	__mClass->mSetStaticField = &FunkinLua_obj::__SetStatic;
	__mClass->mMarkFunc = FunkinLua_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FunkinLua_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunkinLua_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunkinLua_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunkinLua_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunkinLua_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunkinLua_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FunkinLua_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_70_boot)
HXDLIN(  70)		Function_Stop = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_71_boot)
HXDLIN(  71)		Function_Continue = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_72_boot)
HXDLIN(  72)		Function_StopLua = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ac4b451d003459d8_83_boot)
HXDLIN(  83)		hscript = null();
            	}
}

