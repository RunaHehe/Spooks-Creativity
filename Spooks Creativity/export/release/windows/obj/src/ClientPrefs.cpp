// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Achievements
#include <Achievements.h>
#endif
#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FPS
#include <openfl/display/FPS.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_121_loadDefaultKeys,"ClientPrefs","loadDefaultKeys",0x2cdfb226,"ClientPrefs.loadDefaultKeys","ClientPrefs.hx",121,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_125_saveSettings,"ClientPrefs","saveSettings",0xab8c0989,"ClientPrefs.saveSettings","ClientPrefs.hx",125,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_192_loadPrefs,"ClientPrefs","loadPrefs",0x58c63c41,"ClientPrefs.loadPrefs","ClientPrefs.hx",192,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_375_getGameplaySetting,"ClientPrefs","getGameplaySetting",0x56c38c5d,"ClientPrefs.getGameplaySetting","ClientPrefs.hx",375,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_380_reloadControls,"ClientPrefs","reloadControls",0xe353bb78,"ClientPrefs.reloadControls","ClientPrefs.hx",380,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_390_copyKey,"ClientPrefs","copyKey",0x7112a941,"ClientPrefs.copyKey","ClientPrefs.hx",390,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_406_resetSaves,"ClientPrefs","resetSaves",0x50f4ee50,"ClientPrefs.resetSaves","ClientPrefs.hx",406,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_10_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",10,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_11_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",11,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_12_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",12,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_16_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",16,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_17_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",17,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_18_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",18,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_19_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",19,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_20_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",20,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_21_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",21,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_22_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",22,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_23_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",23,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_24_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",24,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_25_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",25,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_26_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",26,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_27_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",27,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_28_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",28,0x329d1619)
static const int _hx_array_data_8ae055c5_26[] = {
	(int)0,(int)0,(int)0,
};
static const int _hx_array_data_8ae055c5_27[] = {
	(int)0,(int)0,(int)0,
};
static const int _hx_array_data_8ae055c5_28[] = {
	(int)0,(int)0,(int)0,
};
static const int _hx_array_data_8ae055c5_29[] = {
	(int)0,(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_29_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",29,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_30_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",30,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_31_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",31,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_32_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",32,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_33_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",33,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_34_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",34,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_35_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",35,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_36_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",36,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_37_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",37,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_38_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",38,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_39_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",39,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_63_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",63,0x329d1619)
static const int _hx_array_data_8ae055c5_43[] = {
	(int)0,(int)0,(int)0,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_64_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",64,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_65_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",65,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_66_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",66,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_67_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",67,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_68_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",68,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_71_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",71,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_72_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",72,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_73_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",73,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_74_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",74,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_75_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",75,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_76_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",76,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_77_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",77,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_78_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",78,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_79_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",79,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_80_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",80,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_81_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",81,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_82_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",82,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_84_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",84,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_85_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",85,0x329d1619)
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_89_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",89,0x329d1619)
static const int _hx_array_data_8ae055c5_64[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_8ae055c5_65[] = {
	(int)83,(int)40,
};
static const int _hx_array_data_8ae055c5_66[] = {
	(int)87,(int)38,
};
static const int _hx_array_data_8ae055c5_67[] = {
	(int)68,(int)39,
};
static const int _hx_array_data_8ae055c5_68[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_8ae055c5_69[] = {
	(int)83,(int)40,
};
static const int _hx_array_data_8ae055c5_70[] = {
	(int)87,(int)38,
};
static const int _hx_array_data_8ae055c5_71[] = {
	(int)68,(int)39,
};
static const int _hx_array_data_8ae055c5_72[] = {
	(int)32,(int)13,
};
static const int _hx_array_data_8ae055c5_73[] = {
	(int)8,(int)27,
};
static const int _hx_array_data_8ae055c5_74[] = {
	(int)13,(int)27,
};
static const int _hx_array_data_8ae055c5_75[] = {
	(int)82,(int)-1,
};
static const int _hx_array_data_8ae055c5_76[] = {
	(int)48,(int)-1,
};
static const int _hx_array_data_8ae055c5_77[] = {
	(int)107,(int)187,
};
static const int _hx_array_data_8ae055c5_78[] = {
	(int)109,(int)189,
};
static const int _hx_array_data_8ae055c5_79[] = {
	(int)55,(int)-1,
};
static const int _hx_array_data_8ae055c5_80[] = {
	(int)56,(int)-1,
};
static const int _hx_array_data_8ae055c5_81[] = {
	(int)49,(int)-1,
};
static const int _hx_array_data_8ae055c5_82[] = {
	(int)50,(int)-1,
};
static const int _hx_array_data_8ae055c5_83[] = {
	(int)51,(int)-1,
};
static const int _hx_array_data_8ae055c5_84[] = {
	(int)52,(int)-1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1453641688f31b8d_118_boot,"ClientPrefs","boot",0xe0a3d37b,"ClientPrefs.boot","ClientPrefs.hx",118,0x329d1619)

void ClientPrefs_obj::__construct() { }

Dynamic ClientPrefs_obj::__CreateEmpty() { return new ClientPrefs_obj; }

void *ClientPrefs_obj::_hx_vtable = 0;

Dynamic ClientPrefs_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ClientPrefs_obj > _hx_result = new ClientPrefs_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ClientPrefs_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3ddb9b05;
}

bool ClientPrefs_obj::downScroll;

bool ClientPrefs_obj::middleScroll;

bool ClientPrefs_obj::opponentStrums;

bool ClientPrefs_obj::showFPS;

bool ClientPrefs_obj::flashing;

bool ClientPrefs_obj::globalAntialiasing;

bool ClientPrefs_obj::noteSplashes;

bool ClientPrefs_obj::lowQuality;

bool ClientPrefs_obj::shaders;

int ClientPrefs_obj::framerate;

bool ClientPrefs_obj::cursing;

bool ClientPrefs_obj::violence;

bool ClientPrefs_obj::camZooms;

bool ClientPrefs_obj::hideHud;

int ClientPrefs_obj::noteOffset;

::Array< ::Dynamic> ClientPrefs_obj::arrowHSV;

bool ClientPrefs_obj::ghostTapping;

::String ClientPrefs_obj::timeBarType;

bool ClientPrefs_obj::scoreZoom;

bool ClientPrefs_obj::noReset;

Float ClientPrefs_obj::healthBarAlpha;

bool ClientPrefs_obj::controllerMode;

Float ClientPrefs_obj::hitsoundVolume;

::String ClientPrefs_obj::pauseMusic;

bool ClientPrefs_obj::checkForUpdates;

bool ClientPrefs_obj::comboStacking;

 ::haxe::ds::StringMap ClientPrefs_obj::gameplaySettings;

::Array< int > ClientPrefs_obj::comboOffset;

int ClientPrefs_obj::ratingOffset;

int ClientPrefs_obj::sickWindow;

int ClientPrefs_obj::goodWindow;

int ClientPrefs_obj::badWindow;

Float ClientPrefs_obj::safeFrames;

::String ClientPrefs_obj::aDifficulty;

bool ClientPrefs_obj::mechanics;

bool ClientPrefs_obj::specialNotes;

bool ClientPrefs_obj::filterCurses;

bool ClientPrefs_obj::reduceShakiness;

bool ClientPrefs_obj::hardMode;

bool ClientPrefs_obj::cute;

bool ClientPrefs_obj::sillybop;

bool ClientPrefs_obj::nopromotion;

bool ClientPrefs_obj::developer;

::Array< ::String > ClientPrefs_obj::badges;

bool ClientPrefs_obj::hideunused;

Float ClientPrefs_obj::progress;

::String ClientPrefs_obj::prevVersion;

 ::haxe::ds::StringMap ClientPrefs_obj::keyBinds;

 ::haxe::ds::StringMap ClientPrefs_obj::defaultKeys;

void ClientPrefs_obj::loadDefaultKeys(){
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_121_loadDefaultKeys)
HXDLIN( 121)		::ClientPrefs_obj::defaultKeys = ::ClientPrefs_obj::keyBinds->copy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,loadDefaultKeys,(void))

void ClientPrefs_obj::saveSettings(){
            	HX_GC_STACKFRAME(&_hx_pos_1453641688f31b8d_125_saveSettings)
HXLINE( 126)		::flixel::FlxG_obj::save->data->__SetField(HX_("downScroll",0f,ba,68,84),::ClientPrefs_obj::downScroll,::hx::paccDynamic);
HXLINE( 127)		::flixel::FlxG_obj::save->data->__SetField(HX_("middleScroll",42,cd,58,62),::ClientPrefs_obj::middleScroll,::hx::paccDynamic);
HXLINE( 128)		::flixel::FlxG_obj::save->data->__SetField(HX_("opponentStrums",87,04,01,1c),::ClientPrefs_obj::opponentStrums,::hx::paccDynamic);
HXLINE( 132)		::flixel::FlxG_obj::save->data->__SetField(HX_("showFPS",ec,0a,9a,7b),::ClientPrefs_obj::showFPS,::hx::paccDynamic);
HXLINE( 133)		::flixel::FlxG_obj::save->data->__SetField(HX_("flashing",32,85,e8,99),::ClientPrefs_obj::flashing,::hx::paccDynamic);
HXLINE( 134)		::flixel::FlxG_obj::save->data->__SetField(HX_("globalAntialiasing",f7,9c,ed,4c),::ClientPrefs_obj::globalAntialiasing,::hx::paccDynamic);
HXLINE( 135)		::flixel::FlxG_obj::save->data->__SetField(HX_("noteSplashes",a7,57,29,8d),::ClientPrefs_obj::noteSplashes,::hx::paccDynamic);
HXLINE( 136)		::flixel::FlxG_obj::save->data->__SetField(HX_("lowQuality",8b,52,27,3e),::ClientPrefs_obj::lowQuality,::hx::paccDynamic);
HXLINE( 137)		::flixel::FlxG_obj::save->data->__SetField(HX_("shaders",ae,81,86,5f),::ClientPrefs_obj::shaders,::hx::paccDynamic);
HXLINE( 138)		::flixel::FlxG_obj::save->data->__SetField(HX_("framerate",8d,e5,4b,4e),::ClientPrefs_obj::framerate,::hx::paccDynamic);
HXLINE( 141)		::flixel::FlxG_obj::save->data->__SetField(HX_("camZooms",71,f3,cd,90),::ClientPrefs_obj::camZooms,::hx::paccDynamic);
HXLINE( 142)		::flixel::FlxG_obj::save->data->__SetField(HX_("noteOffset",25,a5,53,fe),::ClientPrefs_obj::noteOffset,::hx::paccDynamic);
HXLINE( 143)		::flixel::FlxG_obj::save->data->__SetField(HX_("hideHud",15,b9,3c,b7),::ClientPrefs_obj::hideHud,::hx::paccDynamic);
HXLINE( 144)		::flixel::FlxG_obj::save->data->__SetField(HX_("arrowHSV",c2,f4,b4,fd),::ClientPrefs_obj::arrowHSV,::hx::paccDynamic);
HXLINE( 145)		::flixel::FlxG_obj::save->data->__SetField(HX_("ghostTapping",c6,6a,da,10),::ClientPrefs_obj::ghostTapping,::hx::paccDynamic);
HXLINE( 146)		::flixel::FlxG_obj::save->data->__SetField(HX_("timeBarType",a0,5d,bb,01),::ClientPrefs_obj::timeBarType,::hx::paccDynamic);
HXLINE( 147)		::flixel::FlxG_obj::save->data->__SetField(HX_("scoreZoom",85,53,bc,e0),::ClientPrefs_obj::scoreZoom,::hx::paccDynamic);
HXLINE( 148)		::flixel::FlxG_obj::save->data->__SetField(HX_("noReset",ce,cd,cb,b9),::ClientPrefs_obj::noReset,::hx::paccDynamic);
HXLINE( 149)		::flixel::FlxG_obj::save->data->__SetField(HX_("healthBarAlpha",47,c9,a0,80),::ClientPrefs_obj::healthBarAlpha,::hx::paccDynamic);
HXLINE( 150)		::flixel::FlxG_obj::save->data->__SetField(HX_("comboOffset",81,62,09,89),::ClientPrefs_obj::comboOffset,::hx::paccDynamic);
HXLINE( 151)		::flixel::FlxG_obj::save->data->__SetField(HX_("achievementsMap",d8,6f,d5,91),::Achievements_obj::achievementsMap,::hx::paccDynamic);
HXLINE( 152)		::flixel::FlxG_obj::save->data->__SetField(HX_("henchmenDeath",f4,76,2a,dd),::Achievements_obj::henchmenDeath,::hx::paccDynamic);
HXLINE( 154)		::flixel::FlxG_obj::save->data->__SetField(HX_("ratingOffset",90,b3,eb,a5),::ClientPrefs_obj::ratingOffset,::hx::paccDynamic);
HXLINE( 155)		::flixel::FlxG_obj::save->data->__SetField(HX_("sickWindow",4e,b7,93,ed),::ClientPrefs_obj::sickWindow,::hx::paccDynamic);
HXLINE( 156)		::flixel::FlxG_obj::save->data->__SetField(HX_("goodWindow",0d,a9,05,67),::ClientPrefs_obj::goodWindow,::hx::paccDynamic);
HXLINE( 157)		::flixel::FlxG_obj::save->data->__SetField(HX_("badWindow",95,db,0a,32),::ClientPrefs_obj::badWindow,::hx::paccDynamic);
HXLINE( 158)		::flixel::FlxG_obj::save->data->__SetField(HX_("safeFrames",d3,18,18,62),::ClientPrefs_obj::safeFrames,::hx::paccDynamic);
HXLINE( 159)		::flixel::FlxG_obj::save->data->__SetField(HX_("gameplaySettings",e9,91,4c,17),::ClientPrefs_obj::gameplaySettings,::hx::paccDynamic);
HXLINE( 160)		::flixel::FlxG_obj::save->data->__SetField(HX_("controllerMode",1f,16,a7,29),::ClientPrefs_obj::controllerMode,::hx::paccDynamic);
HXLINE( 161)		::flixel::FlxG_obj::save->data->__SetField(HX_("hitsoundVolume",96,34,9b,8f),::ClientPrefs_obj::hitsoundVolume,::hx::paccDynamic);
HXLINE( 162)		::flixel::FlxG_obj::save->data->__SetField(HX_("pauseMusic",cf,6d,d3,e5),::ClientPrefs_obj::pauseMusic,::hx::paccDynamic);
HXLINE( 163)		::flixel::FlxG_obj::save->data->__SetField(HX_("checkForUpdates",29,6d,49,71),::ClientPrefs_obj::checkForUpdates,::hx::paccDynamic);
HXLINE( 164)		::flixel::FlxG_obj::save->data->__SetField(HX_("comboStacking",08,45,bb,e0),::ClientPrefs_obj::comboStacking,::hx::paccDynamic);
HXLINE( 166)		::flixel::FlxG_obj::save->data->__SetField(HX_("aDifficulty",fc,f5,85,12),::ClientPrefs_obj::aDifficulty,::hx::paccDynamic);
HXLINE( 167)		::flixel::FlxG_obj::save->data->__SetField(HX_("mechanics",6f,ef,7e,2e),::ClientPrefs_obj::mechanics,::hx::paccDynamic);
HXLINE( 168)		::flixel::FlxG_obj::save->data->__SetField(HX_("specialNotes",48,23,e0,f3),::ClientPrefs_obj::specialNotes,::hx::paccDynamic);
HXLINE( 169)		::flixel::FlxG_obj::save->data->__SetField(HX_("filterCurses",f9,b3,40,4b),::ClientPrefs_obj::filterCurses,::hx::paccDynamic);
HXLINE( 170)		::flixel::FlxG_obj::save->data->__SetField(HX_("reduceShakiness",db,59,2c,0e),::ClientPrefs_obj::reduceShakiness,::hx::paccDynamic);
HXLINE( 171)		::flixel::FlxG_obj::save->data->__SetField(HX_("hardMode",ee,7f,1b,5a),::ClientPrefs_obj::hardMode,::hx::paccDynamic);
HXLINE( 172)		::flixel::FlxG_obj::save->data->__SetField(HX_("cute",a3,4c,c9,41),::ClientPrefs_obj::cute,::hx::paccDynamic);
HXLINE( 173)		::flixel::FlxG_obj::save->data->__SetField(HX_("badges",f0,77,3f,4b),::ClientPrefs_obj::badges,::hx::paccDynamic);
HXLINE( 175)		::flixel::FlxG_obj::save->data->__SetField(HX_("sillybop",c0,26,0e,6e),::ClientPrefs_obj::sillybop,::hx::paccDynamic);
HXLINE( 176)		::flixel::FlxG_obj::save->data->__SetField(HX_("nopromotion",c2,d5,1c,55),::ClientPrefs_obj::nopromotion,::hx::paccDynamic);
HXLINE( 177)		::flixel::FlxG_obj::save->data->__SetField(HX_("developer",4a,e3,1e,fd),::ClientPrefs_obj::developer,::hx::paccDynamic);
HXLINE( 178)		::flixel::FlxG_obj::save->data->__SetField(HX_("hideunused",58,cb,73,ce),::ClientPrefs_obj::hideunused,::hx::paccDynamic);
HXLINE( 180)		::flixel::FlxG_obj::save->data->__SetField(HX_("progress",ad,f7,2a,86),::ClientPrefs_obj::progress,::hx::paccDynamic);
HXLINE( 181)		::flixel::FlxG_obj::save->data->__SetField(HX_("prevVersion",65,64,3a,e3),::ClientPrefs_obj::prevVersion,::hx::paccDynamic);
HXLINE( 183)		::flixel::FlxG_obj::save->flush(null());
HXLINE( 185)		 ::flixel::util::FlxSave save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 186)		save->bind(HX_("controls_v2",65,e4,a2,26),HX_("ninjamuffin99/AnAmmar",8d,68,e0,df));
HXLINE( 187)		save->data->__SetField(HX_("customControls",47,63,49,5a),::ClientPrefs_obj::keyBinds,::hx::paccDynamic);
HXLINE( 188)		save->flush(null());
HXLINE( 189)		::flixel::FlxG_obj::log->advanced(HX_("Settings saved!",37,01,d5,e3),::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,saveSettings,(void))

void ClientPrefs_obj::loadPrefs(){
            	HX_GC_STACKFRAME(&_hx_pos_1453641688f31b8d_192_loadPrefs)
HXLINE( 193)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("downScroll",0f,ba,68,84),::hx::paccDynamic) )) {
HXLINE( 194)			::ClientPrefs_obj::downScroll = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downScroll",0f,ba,68,84),::hx::paccDynamic)) );
            		}
HXLINE( 196)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic) )) {
HXLINE( 197)			::ClientPrefs_obj::middleScroll = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("middleScroll",42,cd,58,62),::hx::paccDynamic)) );
            		}
HXLINE( 199)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("opponentStrums",87,04,01,1c),::hx::paccDynamic) )) {
HXLINE( 200)			::ClientPrefs_obj::opponentStrums = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("opponentStrums",87,04,01,1c),::hx::paccDynamic)) );
            		}
HXLINE( 207)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("showFPS",ec,0a,9a,7b),::hx::paccDynamic) )) {
HXLINE( 208)			::ClientPrefs_obj::showFPS = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("showFPS",ec,0a,9a,7b),::hx::paccDynamic)) );
HXLINE( 209)			if (::hx::IsNotNull( ::Main_obj::fpsVar )) {
HXLINE( 210)				::Main_obj::fpsVar->set_visible(::ClientPrefs_obj::showFPS);
            			}
            		}
HXLINE( 213)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic) )) {
HXLINE( 214)			::ClientPrefs_obj::flashing = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) );
            		}
HXLINE( 216)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("globalAntialiasing",f7,9c,ed,4c),::hx::paccDynamic) )) {
HXLINE( 217)			::ClientPrefs_obj::globalAntialiasing = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("globalAntialiasing",f7,9c,ed,4c),::hx::paccDynamic)) );
            		}
HXLINE( 219)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("noteSplashes",a7,57,29,8d),::hx::paccDynamic) )) {
HXLINE( 220)			::ClientPrefs_obj::noteSplashes = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("noteSplashes",a7,57,29,8d),::hx::paccDynamic)) );
            		}
HXLINE( 222)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("lowQuality",8b,52,27,3e),::hx::paccDynamic) )) {
HXLINE( 223)			::ClientPrefs_obj::lowQuality = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("lowQuality",8b,52,27,3e),::hx::paccDynamic)) );
            		}
HXLINE( 225)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("shaders",ae,81,86,5f),::hx::paccDynamic) )) {
HXLINE( 226)			::ClientPrefs_obj::shaders = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("shaders",ae,81,86,5f),::hx::paccDynamic)) );
            		}
HXLINE( 228)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("framerate",8d,e5,4b,4e),::hx::paccDynamic) )) {
HXLINE( 229)			::ClientPrefs_obj::framerate = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("framerate",8d,e5,4b,4e),::hx::paccDynamic)) );
HXLINE( 230)			if ((::ClientPrefs_obj::framerate > ::flixel::FlxG_obj::drawFramerate)) {
HXLINE( 231)				::flixel::FlxG_obj::set_updateFramerate(::ClientPrefs_obj::framerate);
HXLINE( 232)				::flixel::FlxG_obj::set_drawFramerate(::ClientPrefs_obj::framerate);
            			}
            			else {
HXLINE( 234)				::flixel::FlxG_obj::set_drawFramerate(::ClientPrefs_obj::framerate);
HXLINE( 235)				::flixel::FlxG_obj::set_updateFramerate(::ClientPrefs_obj::framerate);
            			}
            		}
HXLINE( 244)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("camZooms",71,f3,cd,90),::hx::paccDynamic) )) {
HXLINE( 245)			::ClientPrefs_obj::camZooms = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("camZooms",71,f3,cd,90),::hx::paccDynamic)) );
            		}
HXLINE( 247)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("hideHud",15,b9,3c,b7),::hx::paccDynamic) )) {
HXLINE( 248)			::ClientPrefs_obj::hideHud = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("hideHud",15,b9,3c,b7),::hx::paccDynamic)) );
            		}
HXLINE( 250)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("noteOffset",25,a5,53,fe),::hx::paccDynamic) )) {
HXLINE( 251)			::ClientPrefs_obj::noteOffset = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteOffset",25,a5,53,fe),::hx::paccDynamic)) );
            		}
HXLINE( 253)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("arrowHSV",c2,f4,b4,fd),::hx::paccDynamic) )) {
HXLINE( 254)			::ClientPrefs_obj::arrowHSV = ( (::Array< ::Dynamic>)(::flixel::FlxG_obj::save->data->__Field(HX_("arrowHSV",c2,f4,b4,fd),::hx::paccDynamic)) );
            		}
HXLINE( 256)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("ghostTapping",c6,6a,da,10),::hx::paccDynamic) )) {
HXLINE( 257)			::ClientPrefs_obj::ghostTapping = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghostTapping",c6,6a,da,10),::hx::paccDynamic)) );
            		}
HXLINE( 259)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("timeBarType",a0,5d,bb,01),::hx::paccDynamic) )) {
HXLINE( 260)			::ClientPrefs_obj::timeBarType = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("timeBarType",a0,5d,bb,01),::hx::paccDynamic)) );
            		}
HXLINE( 262)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("scoreZoom",85,53,bc,e0),::hx::paccDynamic) )) {
HXLINE( 263)			::ClientPrefs_obj::scoreZoom = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreZoom",85,53,bc,e0),::hx::paccDynamic)) );
            		}
HXLINE( 265)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("noReset",ce,cd,cb,b9),::hx::paccDynamic) )) {
HXLINE( 266)			::ClientPrefs_obj::noReset = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("noReset",ce,cd,cb,b9),::hx::paccDynamic)) );
            		}
HXLINE( 268)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("healthBarAlpha",47,c9,a0,80),::hx::paccDynamic) )) {
HXLINE( 269)			::ClientPrefs_obj::healthBarAlpha = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("healthBarAlpha",47,c9,a0,80),::hx::paccDynamic)) );
            		}
HXLINE( 271)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("comboOffset",81,62,09,89),::hx::paccDynamic) )) {
HXLINE( 272)			::ClientPrefs_obj::comboOffset = ( (::Array< int >)(::flixel::FlxG_obj::save->data->__Field(HX_("comboOffset",81,62,09,89),::hx::paccDynamic)) );
            		}
HXLINE( 275)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("ratingOffset",90,b3,eb,a5),::hx::paccDynamic) )) {
HXLINE( 276)			::ClientPrefs_obj::ratingOffset = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("ratingOffset",90,b3,eb,a5),::hx::paccDynamic)) );
            		}
HXLINE( 278)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("sickWindow",4e,b7,93,ed),::hx::paccDynamic) )) {
HXLINE( 279)			::ClientPrefs_obj::sickWindow = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("sickWindow",4e,b7,93,ed),::hx::paccDynamic)) );
            		}
HXLINE( 281)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("goodWindow",0d,a9,05,67),::hx::paccDynamic) )) {
HXLINE( 282)			::ClientPrefs_obj::goodWindow = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("goodWindow",0d,a9,05,67),::hx::paccDynamic)) );
            		}
HXLINE( 284)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("badWindow",95,db,0a,32),::hx::paccDynamic) )) {
HXLINE( 285)			::ClientPrefs_obj::badWindow = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("badWindow",95,db,0a,32),::hx::paccDynamic)) );
            		}
HXLINE( 287)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("safeFrames",d3,18,18,62),::hx::paccDynamic) )) {
HXLINE( 288)			::ClientPrefs_obj::safeFrames = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("safeFrames",d3,18,18,62),::hx::paccDynamic)) );
            		}
HXLINE( 290)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("controllerMode",1f,16,a7,29),::hx::paccDynamic) )) {
HXLINE( 291)			::ClientPrefs_obj::controllerMode = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("controllerMode",1f,16,a7,29),::hx::paccDynamic)) );
            		}
HXLINE( 293)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("hitsoundVolume",96,34,9b,8f),::hx::paccDynamic) )) {
HXLINE( 294)			::ClientPrefs_obj::hitsoundVolume = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("hitsoundVolume",96,34,9b,8f),::hx::paccDynamic)) );
            		}
HXLINE( 296)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("pauseMusic",cf,6d,d3,e5),::hx::paccDynamic) )) {
HXLINE( 297)			::ClientPrefs_obj::pauseMusic = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("pauseMusic",cf,6d,d3,e5),::hx::paccDynamic)) );
            		}
HXLINE( 299)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("gameplaySettings",e9,91,4c,17),::hx::paccDynamic) )) {
HXLINE( 301)			 ::haxe::ds::StringMap savedMap = ( ( ::haxe::ds::StringMap)(::flixel::FlxG_obj::save->data->__Field(HX_("gameplaySettings",e9,91,4c,17),::hx::paccDynamic)) );
HXLINE( 302)			{
HXLINE( 302)				::Dynamic map = savedMap;
HXDLIN( 302)				::Dynamic _g_map = map;
HXDLIN( 302)				 ::Dynamic _g_keys = ::haxe::IMap_obj::keys(map);
HXDLIN( 302)				while(( (bool)(_g_keys->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 302)					::String key = ( (::String)(_g_keys->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 302)					 ::Dynamic _g_value = ::haxe::IMap_obj::get(_g_map,key);
HXDLIN( 302)					::String _g_key = key;
HXDLIN( 302)					::String name = _g_key;
HXDLIN( 302)					 ::Dynamic value = _g_value;
HXLINE( 304)					::ClientPrefs_obj::gameplaySettings->set(name,value);
            				}
            			}
            		}
HXLINE( 309)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("volume",da,29,53,5f),::hx::paccDynamic) )) {
HXLINE( 311)			::flixel::FlxG_obj::sound->set_volume(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("volume",da,29,53,5f),::hx::paccDynamic)) ));
            		}
HXLINE( 313)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("mute",d9,6e,65,48),::hx::paccDynamic) )) {
HXLINE( 315)			::flixel::FlxG_obj::sound->muted = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("mute",d9,6e,65,48),::hx::paccDynamic)) );
            		}
HXLINE( 317)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("checkForUpdates",29,6d,49,71),::hx::paccDynamic) )) {
HXLINE( 319)			::ClientPrefs_obj::checkForUpdates = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("checkForUpdates",29,6d,49,71),::hx::paccDynamic)) );
            		}
HXLINE( 321)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("comboStacking",08,45,bb,e0),::hx::paccDynamic) )) {
HXLINE( 322)			::ClientPrefs_obj::comboStacking = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("comboStacking",08,45,bb,e0),::hx::paccDynamic)) );
            		}
HXLINE( 324)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("mechanics",6f,ef,7e,2e),::hx::paccDynamic) )) {
HXLINE( 325)			::ClientPrefs_obj::mechanics = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("mechanics",6f,ef,7e,2e),::hx::paccDynamic)) );
            		}
HXLINE( 327)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("specialNotes",48,23,e0,f3),::hx::paccDynamic) )) {
HXLINE( 328)			::ClientPrefs_obj::specialNotes = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("specialNotes",48,23,e0,f3),::hx::paccDynamic)) );
            		}
HXLINE( 330)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("filterCurses",f9,b3,40,4b),::hx::paccDynamic) )) {
HXLINE( 331)			::ClientPrefs_obj::filterCurses = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("filterCurses",f9,b3,40,4b),::hx::paccDynamic)) );
            		}
HXLINE( 333)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("reduceShakiness",db,59,2c,0e),::hx::paccDynamic) )) {
HXLINE( 334)			::ClientPrefs_obj::reduceShakiness = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("reduceShakiness",db,59,2c,0e),::hx::paccDynamic)) );
            		}
HXLINE( 336)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("hardMode",ee,7f,1b,5a),::hx::paccDynamic) )) {
HXLINE( 337)			::ClientPrefs_obj::hardMode = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("hardMode",ee,7f,1b,5a),::hx::paccDynamic)) );
            		}
HXLINE( 339)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("cute",a3,4c,c9,41),::hx::paccDynamic) )) {
HXLINE( 340)			::ClientPrefs_obj::cute = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cute",a3,4c,c9,41),::hx::paccDynamic)) );
            		}
HXLINE( 342)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("badges",f0,77,3f,4b),::hx::paccDynamic) )) {
HXLINE( 343)			::ClientPrefs_obj::badges = ( (::Array< ::String >)(::flixel::FlxG_obj::save->data->__Field(HX_("badges",f0,77,3f,4b),::hx::paccDynamic)) );
            		}
HXLINE( 345)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("sillybop",c0,26,0e,6e),::hx::paccDynamic) )) {
HXLINE( 346)			::ClientPrefs_obj::sillybop = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("sillybop",c0,26,0e,6e),::hx::paccDynamic)) );
            		}
HXLINE( 348)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("nopromotion",c2,d5,1c,55),::hx::paccDynamic) )) {
HXLINE( 349)			::ClientPrefs_obj::nopromotion = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("nopromotion",c2,d5,1c,55),::hx::paccDynamic)) );
            		}
HXLINE( 351)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("developer",4a,e3,1e,fd),::hx::paccDynamic) )) {
HXLINE( 352)			::ClientPrefs_obj::developer = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("developer",4a,e3,1e,fd),::hx::paccDynamic)) );
            		}
HXLINE( 354)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("progress",ad,f7,2a,86),::hx::paccDynamic) )) {
HXLINE( 355)			::ClientPrefs_obj::progress = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("progress",ad,f7,2a,86),::hx::paccDynamic)) );
            		}
HXLINE( 357)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("prevVersion",65,64,3a,e3),::hx::paccDynamic) )) {
HXLINE( 358)			::ClientPrefs_obj::progress = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("prevVersion",65,64,3a,e3),::hx::paccDynamic)) );
            		}
HXLINE( 360)		if (::hx::IsNotNull( ::flixel::FlxG_obj::save->data->__Field(HX_("hideunused",58,cb,73,ce),::hx::paccDynamic) )) {
HXLINE( 361)			::ClientPrefs_obj::progress = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("hideunused",58,cb,73,ce),::hx::paccDynamic)) );
            		}
HXLINE( 364)		 ::flixel::util::FlxSave save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 365)		save->bind(HX_("controls_v2",65,e4,a2,26),HX_("ninjamuffin99/AnAmmar",8d,68,e0,df));
HXLINE( 366)		bool _hx_tmp;
HXDLIN( 366)		if (::hx::IsNotNull( save )) {
HXLINE( 366)			_hx_tmp = ::hx::IsNotNull( save->data->__Field(HX_("customControls",47,63,49,5a),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 366)			_hx_tmp = false;
            		}
HXDLIN( 366)		if (_hx_tmp) {
HXLINE( 367)			 ::haxe::ds::StringMap loadedControls = ( ( ::haxe::ds::StringMap)(save->data->__Field(HX_("customControls",47,63,49,5a),::hx::paccDynamic)) );
HXLINE( 368)			{
HXLINE( 368)				::Dynamic map1 = loadedControls;
HXDLIN( 368)				::Dynamic _g_map1 = map1;
HXDLIN( 368)				 ::Dynamic _g_keys1 = ::haxe::IMap_obj::keys(map1);
HXDLIN( 368)				while(( (bool)(_g_keys1->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 368)					::String key1 = ( (::String)(_g_keys1->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 368)					::Array< int > _g_value1 = ( (::Array< int >)(::haxe::IMap_obj::get(_g_map1,key1)) );
HXDLIN( 368)					::String _g_key1 = key1;
HXDLIN( 368)					::String control = _g_key1;
HXDLIN( 368)					::Array< int > keys = _g_value1;
HXLINE( 369)					::ClientPrefs_obj::keyBinds->set(control,keys);
            				}
            			}
HXLINE( 371)			::ClientPrefs_obj::reloadControls();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,loadPrefs,(void))

 ::Dynamic ClientPrefs_obj::getGameplaySetting(::String name, ::Dynamic defaultValue){
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_375_getGameplaySetting)
HXLINE( 376)		if (::PlayState_obj::isStoryMode) {
HXLINE( 376)			return defaultValue;
            		}
HXLINE( 377)		if (::ClientPrefs_obj::gameplaySettings->exists(name)) {
HXLINE( 377)			return ::ClientPrefs_obj::gameplaySettings->get(name);
            		}
            		else {
HXLINE( 377)			return defaultValue;
            		}
HXDLIN( 377)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ClientPrefs_obj,getGameplaySetting,return )

void ClientPrefs_obj::reloadControls(){
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_380_reloadControls)
HXLINE( 381)		::PlayerSettings_obj::player1->controls->setKeyboardScheme(::KeyboardScheme_obj::Solo_dyn(),null());
HXLINE( 383)		::TitleState_obj::muteKeys = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("volume_mute",9e,6a,db,fa))) ));
HXLINE( 384)		::TitleState_obj::volumeDownKeys = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("volume_down",27,f4,e3,f4))) ));
HXLINE( 385)		::TitleState_obj::volumeUpKeys = ::ClientPrefs_obj::copyKey(( (::Array< int >)(::ClientPrefs_obj::keyBinds->get(HX_("volume_up",e0,76,ad,60))) ));
HXLINE( 386)		::flixel::FlxG_obj::sound->muteKeys = ::TitleState_obj::muteKeys;
HXLINE( 387)		::flixel::FlxG_obj::sound->volumeDownKeys = ::TitleState_obj::volumeDownKeys;
HXLINE( 388)		::flixel::FlxG_obj::sound->volumeUpKeys = ::TitleState_obj::volumeUpKeys;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,reloadControls,(void))

::Array< int > ClientPrefs_obj::copyKey(::Array< int > arrayToCopy){
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_390_copyKey)
HXLINE( 391)		::Array< int > copiedArray = arrayToCopy->copy();
HXLINE( 392)		int i = 0;
HXLINE( 393)		int len = copiedArray->length;
HXLINE( 395)		while((i < len)){
HXLINE( 396)			if ((copiedArray->__get(i) == -1)) {
HXLINE( 397)				copiedArray->remove(-1);
HXLINE( 398)				i = (i - 1);
            			}
HXLINE( 400)			i = (i + 1);
HXLINE( 401)			len = copiedArray->length;
            		}
HXLINE( 403)		return copiedArray;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ClientPrefs_obj,copyKey,return )

void ClientPrefs_obj::resetSaves(){
            	HX_GC_STACKFRAME(&_hx_pos_1453641688f31b8d_406_resetSaves)
HXLINE( 407)		::haxe::Log_obj::trace(HX_("!!!!!!!!!!!!!!!!delete save!!!!!!!!!!!!",92,a0,36,3d),::hx::SourceInfo(HX_("source/ClientPrefs.hx",0d,e8,36,fc),407,HX_("ClientPrefs",c5,55,e0,8a),HX_("resetSaves",47,82,28,60)));
HXLINE( 408)		::ClientPrefs_obj::aDifficulty = HX_("normal",27,72,69,30);
HXLINE( 409)		::ClientPrefs_obj::cute = false;
HXLINE( 410)		::ClientPrefs_obj::badges = ::Array_obj< ::String >::__new(0);
HXLINE( 411)		::ClientPrefs_obj::progress = ( (Float)(0) );
HXLINE( 413)		::flixel::FlxG_obj::save->data->__SetField(HX_("aDifficulty",fc,f5,85,12),::ClientPrefs_obj::aDifficulty,::hx::paccDynamic);
HXLINE( 414)		::flixel::FlxG_obj::save->data->__SetField(HX_("cute",a3,4c,c9,41),::ClientPrefs_obj::cute,::hx::paccDynamic);
HXLINE( 415)		::flixel::FlxG_obj::save->data->__SetField(HX_("badges",f0,77,3f,4b),::ClientPrefs_obj::badges,::hx::paccDynamic);
HXLINE( 416)		::flixel::FlxG_obj::save->data->__SetField(HX_("progress",ad,f7,2a,86),::ClientPrefs_obj::progress,::hx::paccDynamic);
HXLINE( 418)		::flixel::FlxG_obj::save->data->__SetField(HX_("songHighscore",1b,52,b1,27),null(),::hx::paccDynamic);
HXLINE( 419)		::flixel::FlxG_obj::save->data->__SetField(HX_("weekHighscore",1c,1a,91,26),null(),::hx::paccDynamic);
HXLINE( 422)		::Highscore_obj::songHighscore =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 423)		::Highscore_obj::weekHighscore =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ClientPrefs_obj,resetSaves,(void))


ClientPrefs_obj::ClientPrefs_obj()
{
}

bool ClientPrefs_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"cute") ) { outValue = ( cute ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"badges") ) { outValue = ( badges ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"showFPS") ) { outValue = ( showFPS ); return true; }
		if (HX_FIELD_EQ(inName,"shaders") ) { outValue = ( shaders ); return true; }
		if (HX_FIELD_EQ(inName,"cursing") ) { outValue = ( cursing ); return true; }
		if (HX_FIELD_EQ(inName,"hideHud") ) { outValue = ( hideHud ); return true; }
		if (HX_FIELD_EQ(inName,"noReset") ) { outValue = ( noReset ); return true; }
		if (HX_FIELD_EQ(inName,"copyKey") ) { outValue = copyKey_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"flashing") ) { outValue = ( flashing ); return true; }
		if (HX_FIELD_EQ(inName,"violence") ) { outValue = ( violence ); return true; }
		if (HX_FIELD_EQ(inName,"camZooms") ) { outValue = ( camZooms ); return true; }
		if (HX_FIELD_EQ(inName,"arrowHSV") ) { outValue = ( arrowHSV ); return true; }
		if (HX_FIELD_EQ(inName,"hardMode") ) { outValue = ( hardMode ); return true; }
		if (HX_FIELD_EQ(inName,"sillybop") ) { outValue = ( sillybop ); return true; }
		if (HX_FIELD_EQ(inName,"progress") ) { outValue = ( progress ); return true; }
		if (HX_FIELD_EQ(inName,"keyBinds") ) { outValue = ( keyBinds ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"framerate") ) { outValue = ( framerate ); return true; }
		if (HX_FIELD_EQ(inName,"scoreZoom") ) { outValue = ( scoreZoom ); return true; }
		if (HX_FIELD_EQ(inName,"badWindow") ) { outValue = ( badWindow ); return true; }
		if (HX_FIELD_EQ(inName,"mechanics") ) { outValue = ( mechanics ); return true; }
		if (HX_FIELD_EQ(inName,"developer") ) { outValue = ( developer ); return true; }
		if (HX_FIELD_EQ(inName,"loadPrefs") ) { outValue = loadPrefs_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"downScroll") ) { outValue = ( downScroll ); return true; }
		if (HX_FIELD_EQ(inName,"lowQuality") ) { outValue = ( lowQuality ); return true; }
		if (HX_FIELD_EQ(inName,"noteOffset") ) { outValue = ( noteOffset ); return true; }
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { outValue = ( pauseMusic ); return true; }
		if (HX_FIELD_EQ(inName,"sickWindow") ) { outValue = ( sickWindow ); return true; }
		if (HX_FIELD_EQ(inName,"goodWindow") ) { outValue = ( goodWindow ); return true; }
		if (HX_FIELD_EQ(inName,"safeFrames") ) { outValue = ( safeFrames ); return true; }
		if (HX_FIELD_EQ(inName,"hideunused") ) { outValue = ( hideunused ); return true; }
		if (HX_FIELD_EQ(inName,"resetSaves") ) { outValue = resetSaves_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"timeBarType") ) { outValue = ( timeBarType ); return true; }
		if (HX_FIELD_EQ(inName,"comboOffset") ) { outValue = ( comboOffset ); return true; }
		if (HX_FIELD_EQ(inName,"aDifficulty") ) { outValue = ( aDifficulty ); return true; }
		if (HX_FIELD_EQ(inName,"nopromotion") ) { outValue = ( nopromotion ); return true; }
		if (HX_FIELD_EQ(inName,"prevVersion") ) { outValue = ( prevVersion ); return true; }
		if (HX_FIELD_EQ(inName,"defaultKeys") ) { outValue = ( defaultKeys ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"middleScroll") ) { outValue = ( middleScroll ); return true; }
		if (HX_FIELD_EQ(inName,"noteSplashes") ) { outValue = ( noteSplashes ); return true; }
		if (HX_FIELD_EQ(inName,"ghostTapping") ) { outValue = ( ghostTapping ); return true; }
		if (HX_FIELD_EQ(inName,"ratingOffset") ) { outValue = ( ratingOffset ); return true; }
		if (HX_FIELD_EQ(inName,"specialNotes") ) { outValue = ( specialNotes ); return true; }
		if (HX_FIELD_EQ(inName,"filterCurses") ) { outValue = ( filterCurses ); return true; }
		if (HX_FIELD_EQ(inName,"saveSettings") ) { outValue = saveSettings_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"comboStacking") ) { outValue = ( comboStacking ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { outValue = ( opponentStrums ); return true; }
		if (HX_FIELD_EQ(inName,"healthBarAlpha") ) { outValue = ( healthBarAlpha ); return true; }
		if (HX_FIELD_EQ(inName,"controllerMode") ) { outValue = ( controllerMode ); return true; }
		if (HX_FIELD_EQ(inName,"hitsoundVolume") ) { outValue = ( hitsoundVolume ); return true; }
		if (HX_FIELD_EQ(inName,"reloadControls") ) { outValue = reloadControls_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"checkForUpdates") ) { outValue = ( checkForUpdates ); return true; }
		if (HX_FIELD_EQ(inName,"reduceShakiness") ) { outValue = ( reduceShakiness ); return true; }
		if (HX_FIELD_EQ(inName,"loadDefaultKeys") ) { outValue = loadDefaultKeys_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gameplaySettings") ) { outValue = ( gameplaySettings ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"globalAntialiasing") ) { outValue = ( globalAntialiasing ); return true; }
		if (HX_FIELD_EQ(inName,"getGameplaySetting") ) { outValue = getGameplaySetting_dyn(); return true; }
	}
	return false;
}

bool ClientPrefs_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"cute") ) { cute=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"badges") ) { badges=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"showFPS") ) { showFPS=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"shaders") ) { shaders=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"cursing") ) { cursing=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hideHud") ) { hideHud=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"noReset") ) { noReset=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"flashing") ) { flashing=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"violence") ) { violence=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"camZooms") ) { camZooms=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"arrowHSV") ) { arrowHSV=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"hardMode") ) { hardMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"sillybop") ) { sillybop=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"progress") ) { progress=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"keyBinds") ) { keyBinds=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"framerate") ) { framerate=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"scoreZoom") ) { scoreZoom=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"badWindow") ) { badWindow=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"mechanics") ) { mechanics=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"developer") ) { developer=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"downScroll") ) { downScroll=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"lowQuality") ) { lowQuality=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"noteOffset") ) { noteOffset=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"pauseMusic") ) { pauseMusic=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"sickWindow") ) { sickWindow=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"goodWindow") ) { goodWindow=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"safeFrames") ) { safeFrames=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"hideunused") ) { hideunused=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"timeBarType") ) { timeBarType=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"comboOffset") ) { comboOffset=ioValue.Cast< ::Array< int > >(); return true; }
		if (HX_FIELD_EQ(inName,"aDifficulty") ) { aDifficulty=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"nopromotion") ) { nopromotion=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"prevVersion") ) { prevVersion=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"defaultKeys") ) { defaultKeys=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"middleScroll") ) { middleScroll=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"noteSplashes") ) { noteSplashes=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"ghostTapping") ) { ghostTapping=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"ratingOffset") ) { ratingOffset=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"specialNotes") ) { specialNotes=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"filterCurses") ) { filterCurses=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"comboStacking") ) { comboStacking=ioValue.Cast< bool >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"opponentStrums") ) { opponentStrums=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"healthBarAlpha") ) { healthBarAlpha=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"controllerMode") ) { controllerMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"hitsoundVolume") ) { hitsoundVolume=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"checkForUpdates") ) { checkForUpdates=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"reduceShakiness") ) { reduceShakiness=ioValue.Cast< bool >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gameplaySettings") ) { gameplaySettings=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"globalAntialiasing") ) { globalAntialiasing=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ClientPrefs_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ClientPrefs_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &ClientPrefs_obj::downScroll,HX_("downScroll",0f,ba,68,84)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::middleScroll,HX_("middleScroll",42,cd,58,62)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::opponentStrums,HX_("opponentStrums",87,04,01,1c)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::showFPS,HX_("showFPS",ec,0a,9a,7b)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::flashing,HX_("flashing",32,85,e8,99)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::globalAntialiasing,HX_("globalAntialiasing",f7,9c,ed,4c)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::noteSplashes,HX_("noteSplashes",a7,57,29,8d)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::lowQuality,HX_("lowQuality",8b,52,27,3e)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::shaders,HX_("shaders",ae,81,86,5f)},
	{::hx::fsInt,(void *) &ClientPrefs_obj::framerate,HX_("framerate",8d,e5,4b,4e)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::cursing,HX_("cursing",cf,db,8f,cc)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::violence,HX_("violence",5b,5e,88,3f)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::camZooms,HX_("camZooms",71,f3,cd,90)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::hideHud,HX_("hideHud",15,b9,3c,b7)},
	{::hx::fsInt,(void *) &ClientPrefs_obj::noteOffset,HX_("noteOffset",25,a5,53,fe)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &ClientPrefs_obj::arrowHSV,HX_("arrowHSV",c2,f4,b4,fd)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::ghostTapping,HX_("ghostTapping",c6,6a,da,10)},
	{::hx::fsString,(void *) &ClientPrefs_obj::timeBarType,HX_("timeBarType",a0,5d,bb,01)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::scoreZoom,HX_("scoreZoom",85,53,bc,e0)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::noReset,HX_("noReset",ce,cd,cb,b9)},
	{::hx::fsFloat,(void *) &ClientPrefs_obj::healthBarAlpha,HX_("healthBarAlpha",47,c9,a0,80)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::controllerMode,HX_("controllerMode",1f,16,a7,29)},
	{::hx::fsFloat,(void *) &ClientPrefs_obj::hitsoundVolume,HX_("hitsoundVolume",96,34,9b,8f)},
	{::hx::fsString,(void *) &ClientPrefs_obj::pauseMusic,HX_("pauseMusic",cf,6d,d3,e5)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::checkForUpdates,HX_("checkForUpdates",29,6d,49,71)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::comboStacking,HX_("comboStacking",08,45,bb,e0)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ClientPrefs_obj::gameplaySettings,HX_("gameplaySettings",e9,91,4c,17)},
	{::hx::fsObject /* ::Array< int > */ ,(void *) &ClientPrefs_obj::comboOffset,HX_("comboOffset",81,62,09,89)},
	{::hx::fsInt,(void *) &ClientPrefs_obj::ratingOffset,HX_("ratingOffset",90,b3,eb,a5)},
	{::hx::fsInt,(void *) &ClientPrefs_obj::sickWindow,HX_("sickWindow",4e,b7,93,ed)},
	{::hx::fsInt,(void *) &ClientPrefs_obj::goodWindow,HX_("goodWindow",0d,a9,05,67)},
	{::hx::fsInt,(void *) &ClientPrefs_obj::badWindow,HX_("badWindow",95,db,0a,32)},
	{::hx::fsFloat,(void *) &ClientPrefs_obj::safeFrames,HX_("safeFrames",d3,18,18,62)},
	{::hx::fsString,(void *) &ClientPrefs_obj::aDifficulty,HX_("aDifficulty",fc,f5,85,12)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::mechanics,HX_("mechanics",6f,ef,7e,2e)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::specialNotes,HX_("specialNotes",48,23,e0,f3)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::filterCurses,HX_("filterCurses",f9,b3,40,4b)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::reduceShakiness,HX_("reduceShakiness",db,59,2c,0e)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::hardMode,HX_("hardMode",ee,7f,1b,5a)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::cute,HX_("cute",a3,4c,c9,41)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::sillybop,HX_("sillybop",c0,26,0e,6e)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::nopromotion,HX_("nopromotion",c2,d5,1c,55)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::developer,HX_("developer",4a,e3,1e,fd)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &ClientPrefs_obj::badges,HX_("badges",f0,77,3f,4b)},
	{::hx::fsBool,(void *) &ClientPrefs_obj::hideunused,HX_("hideunused",58,cb,73,ce)},
	{::hx::fsFloat,(void *) &ClientPrefs_obj::progress,HX_("progress",ad,f7,2a,86)},
	{::hx::fsString,(void *) &ClientPrefs_obj::prevVersion,HX_("prevVersion",65,64,3a,e3)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ClientPrefs_obj::keyBinds,HX_("keyBinds",f7,b5,69,f7)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &ClientPrefs_obj::defaultKeys,HX_("defaultKeys",55,db,c5,18)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ClientPrefs_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::downScroll,"downScroll");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::middleScroll,"middleScroll");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::opponentStrums,"opponentStrums");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::showFPS,"showFPS");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::flashing,"flashing");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::globalAntialiasing,"globalAntialiasing");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::noteSplashes,"noteSplashes");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::lowQuality,"lowQuality");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::shaders,"shaders");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::framerate,"framerate");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::cursing,"cursing");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::violence,"violence");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::camZooms,"camZooms");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::hideHud,"hideHud");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::noteOffset,"noteOffset");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::arrowHSV,"arrowHSV");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::ghostTapping,"ghostTapping");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::timeBarType,"timeBarType");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::scoreZoom,"scoreZoom");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::noReset,"noReset");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::healthBarAlpha,"healthBarAlpha");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::controllerMode,"controllerMode");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::hitsoundVolume,"hitsoundVolume");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::pauseMusic,"pauseMusic");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::checkForUpdates,"checkForUpdates");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::comboStacking,"comboStacking");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::gameplaySettings,"gameplaySettings");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::comboOffset,"comboOffset");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::ratingOffset,"ratingOffset");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::sickWindow,"sickWindow");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::goodWindow,"goodWindow");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::badWindow,"badWindow");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::safeFrames,"safeFrames");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::aDifficulty,"aDifficulty");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::mechanics,"mechanics");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::specialNotes,"specialNotes");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::filterCurses,"filterCurses");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::reduceShakiness,"reduceShakiness");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::hardMode,"hardMode");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::cute,"cute");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::sillybop,"sillybop");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::nopromotion,"nopromotion");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::developer,"developer");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::badges,"badges");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::hideunused,"hideunused");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::progress,"progress");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::prevVersion,"prevVersion");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::keyBinds,"keyBinds");
	HX_MARK_MEMBER_NAME(ClientPrefs_obj::defaultKeys,"defaultKeys");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ClientPrefs_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::downScroll,"downScroll");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::middleScroll,"middleScroll");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::opponentStrums,"opponentStrums");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::showFPS,"showFPS");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::flashing,"flashing");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::globalAntialiasing,"globalAntialiasing");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::noteSplashes,"noteSplashes");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::lowQuality,"lowQuality");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::shaders,"shaders");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::framerate,"framerate");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::cursing,"cursing");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::violence,"violence");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::camZooms,"camZooms");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::hideHud,"hideHud");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::noteOffset,"noteOffset");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::arrowHSV,"arrowHSV");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::ghostTapping,"ghostTapping");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::timeBarType,"timeBarType");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::scoreZoom,"scoreZoom");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::noReset,"noReset");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::healthBarAlpha,"healthBarAlpha");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::controllerMode,"controllerMode");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::hitsoundVolume,"hitsoundVolume");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::pauseMusic,"pauseMusic");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::checkForUpdates,"checkForUpdates");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::comboStacking,"comboStacking");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::gameplaySettings,"gameplaySettings");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::comboOffset,"comboOffset");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::ratingOffset,"ratingOffset");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::sickWindow,"sickWindow");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::goodWindow,"goodWindow");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::badWindow,"badWindow");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::safeFrames,"safeFrames");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::aDifficulty,"aDifficulty");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::mechanics,"mechanics");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::specialNotes,"specialNotes");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::filterCurses,"filterCurses");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::reduceShakiness,"reduceShakiness");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::hardMode,"hardMode");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::cute,"cute");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::sillybop,"sillybop");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::nopromotion,"nopromotion");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::developer,"developer");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::badges,"badges");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::hideunused,"hideunused");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::progress,"progress");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::prevVersion,"prevVersion");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::keyBinds,"keyBinds");
	HX_VISIT_MEMBER_NAME(ClientPrefs_obj::defaultKeys,"defaultKeys");
};

#endif

::hx::Class ClientPrefs_obj::__mClass;

static ::String ClientPrefs_obj_sStaticFields[] = {
	HX_("downScroll",0f,ba,68,84),
	HX_("middleScroll",42,cd,58,62),
	HX_("opponentStrums",87,04,01,1c),
	HX_("showFPS",ec,0a,9a,7b),
	HX_("flashing",32,85,e8,99),
	HX_("globalAntialiasing",f7,9c,ed,4c),
	HX_("noteSplashes",a7,57,29,8d),
	HX_("lowQuality",8b,52,27,3e),
	HX_("shaders",ae,81,86,5f),
	HX_("framerate",8d,e5,4b,4e),
	HX_("cursing",cf,db,8f,cc),
	HX_("violence",5b,5e,88,3f),
	HX_("camZooms",71,f3,cd,90),
	HX_("hideHud",15,b9,3c,b7),
	HX_("noteOffset",25,a5,53,fe),
	HX_("arrowHSV",c2,f4,b4,fd),
	HX_("ghostTapping",c6,6a,da,10),
	HX_("timeBarType",a0,5d,bb,01),
	HX_("scoreZoom",85,53,bc,e0),
	HX_("noReset",ce,cd,cb,b9),
	HX_("healthBarAlpha",47,c9,a0,80),
	HX_("controllerMode",1f,16,a7,29),
	HX_("hitsoundVolume",96,34,9b,8f),
	HX_("pauseMusic",cf,6d,d3,e5),
	HX_("checkForUpdates",29,6d,49,71),
	HX_("comboStacking",08,45,bb,e0),
	HX_("gameplaySettings",e9,91,4c,17),
	HX_("comboOffset",81,62,09,89),
	HX_("ratingOffset",90,b3,eb,a5),
	HX_("sickWindow",4e,b7,93,ed),
	HX_("goodWindow",0d,a9,05,67),
	HX_("badWindow",95,db,0a,32),
	HX_("safeFrames",d3,18,18,62),
	HX_("aDifficulty",fc,f5,85,12),
	HX_("mechanics",6f,ef,7e,2e),
	HX_("specialNotes",48,23,e0,f3),
	HX_("filterCurses",f9,b3,40,4b),
	HX_("reduceShakiness",db,59,2c,0e),
	HX_("hardMode",ee,7f,1b,5a),
	HX_("cute",a3,4c,c9,41),
	HX_("sillybop",c0,26,0e,6e),
	HX_("nopromotion",c2,d5,1c,55),
	HX_("developer",4a,e3,1e,fd),
	HX_("badges",f0,77,3f,4b),
	HX_("hideunused",58,cb,73,ce),
	HX_("progress",ad,f7,2a,86),
	HX_("prevVersion",65,64,3a,e3),
	HX_("keyBinds",f7,b5,69,f7),
	HX_("defaultKeys",55,db,c5,18),
	HX_("loadDefaultKeys",cf,5e,fd,5c),
	HX_("saveSettings",40,c9,c5,9d),
	HX_("loadPrefs",2a,94,bf,e3),
	HX_("getGameplaySetting",54,6f,2e,77),
	HX_("reloadControls",ef,16,46,27),
	HX_("copyKey",ea,04,7f,43),
	HX_("resetSaves",47,82,28,60),
	::String(null())
};

void ClientPrefs_obj::__register()
{
	ClientPrefs_obj _hx_dummy;
	ClientPrefs_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ClientPrefs",c5,55,e0,8a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ClientPrefs_obj::__GetStatic;
	__mClass->mSetStaticField = &ClientPrefs_obj::__SetStatic;
	__mClass->mMarkFunc = ClientPrefs_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ClientPrefs_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ClientPrefs_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ClientPrefs_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ClientPrefs_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ClientPrefs_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ClientPrefs_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_10_boot)
HXDLIN(  10)		downScroll = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_11_boot)
HXDLIN(  11)		middleScroll = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_12_boot)
HXDLIN(  12)		opponentStrums = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_16_boot)
HXDLIN(  16)		showFPS = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_17_boot)
HXDLIN(  17)		flashing = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_18_boot)
HXDLIN(  18)		globalAntialiasing = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_19_boot)
HXDLIN(  19)		noteSplashes = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_20_boot)
HXDLIN(  20)		lowQuality = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_21_boot)
HXDLIN(  21)		shaders = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_22_boot)
HXDLIN(  22)		framerate = 60;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_23_boot)
HXDLIN(  23)		cursing = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_24_boot)
HXDLIN(  24)		violence = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_25_boot)
HXDLIN(  25)		camZooms = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_26_boot)
HXDLIN(  26)		hideHud = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_27_boot)
HXDLIN(  27)		noteOffset = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_28_boot)
HXDLIN(  28)		arrowHSV = ::Array_obj< ::Dynamic>::__new(4)->init(0,::Array_obj< int >::fromData( _hx_array_data_8ae055c5_26,3))->init(1,::Array_obj< int >::fromData( _hx_array_data_8ae055c5_27,3))->init(2,::Array_obj< int >::fromData( _hx_array_data_8ae055c5_28,3))->init(3,::Array_obj< int >::fromData( _hx_array_data_8ae055c5_29,3));
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_29_boot)
HXDLIN(  29)		ghostTapping = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_30_boot)
HXDLIN(  30)		timeBarType = HX_("Time Left",fa,08,f2,62);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_31_boot)
HXDLIN(  31)		scoreZoom = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_32_boot)
HXDLIN(  32)		noReset = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_33_boot)
HXDLIN(  33)		healthBarAlpha = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_34_boot)
HXDLIN(  34)		controllerMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_35_boot)
HXDLIN(  35)		hitsoundVolume = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_36_boot)
HXDLIN(  36)		pauseMusic = HX_("Tea Time",9d,d4,cb,99);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_37_boot)
HXDLIN(  37)		checkForUpdates = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_38_boot)
HXDLIN(  38)		comboStacking = true;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1453641688f31b8d_39_boot)
HXDLIN(  39)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  39)			_g->set(HX_("scrollspeed",5a,70,19,38),((Float)1.0));
HXDLIN(  39)			_g->set(HX_("scrolltype",47,55,ef,1f),HX_("multiplicative",96,7a,3f,fa));
HXDLIN(  39)			_g->set(HX_("songspeed",92,6f,b6,1d),((Float)1.0));
HXDLIN(  39)			_g->set(HX_("healthgain",1b,97,1b,16),((Float)1.0));
HXDLIN(  39)			_g->set(HX_("healthloss",7f,50,74,19),((Float)1.0));
HXDLIN(  39)			_g->set(HX_("mechanics",6f,ef,7e,2e),true);
HXDLIN(  39)			_g->set(HX_("specialnotes",68,b3,b2,60),true);
HXDLIN(  39)			_g->set(HX_("instakill",f9,72,23,49),false);
HXDLIN(  39)			_g->set(HX_("practice",bb,00,e7,a0),false);
HXDLIN(  39)			_g->set(HX_("botplay",7b,fb,a9,61),false);
HXDLIN(  39)			_g->set(HX_("opponentplay",11,7a,4c,86),false);
HXDLIN(  39)			_g->set(HX_("modchart",dc,c6,ac,a3),true);
HXDLIN(  39)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_39_boot)
HXDLIN(  39)		gameplaySettings = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_63_boot)
HXDLIN(  63)		comboOffset = ::Array_obj< int >::fromData( _hx_array_data_8ae055c5_43,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_64_boot)
HXDLIN(  64)		ratingOffset = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_65_boot)
HXDLIN(  65)		sickWindow = 45;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_66_boot)
HXDLIN(  66)		goodWindow = 90;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_67_boot)
HXDLIN(  67)		badWindow = 135;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_68_boot)
HXDLIN(  68)		safeFrames = ((Float)10);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_71_boot)
HXDLIN(  71)		aDifficulty = HX_("classic",12,52,91,69);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_72_boot)
HXDLIN(  72)		mechanics = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_73_boot)
HXDLIN(  73)		specialNotes = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_74_boot)
HXDLIN(  74)		filterCurses = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_75_boot)
HXDLIN(  75)		reduceShakiness = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_76_boot)
HXDLIN(  76)		hardMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_77_boot)
HXDLIN(  77)		cute = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_78_boot)
HXDLIN(  78)		sillybop = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_79_boot)
HXDLIN(  79)		nopromotion = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_80_boot)
HXDLIN(  80)		developer = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_81_boot)
HXDLIN(  81)		badges = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_82_boot)
HXDLIN(  82)		hideunused = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_84_boot)
HXDLIN(  84)		progress = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_85_boot)
HXDLIN(  85)		prevVersion = HX_("",00,00,00,00);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::StringMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_1453641688f31b8d_89_boot)
HXDLIN(  89)			 ::haxe::ds::StringMap _g =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXDLIN(  89)			_g->set(HX_("note_left",b4,fe,20,a5),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_64,2));
HXDLIN(  89)			_g->set(HX_("note_down",0f,ef,de,9f),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_65,2));
HXDLIN(  89)			_g->set(HX_("note_up",c8,67,5c,4d),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_66,2));
HXDLIN(  89)			_g->set(HX_("note_right",8f,ec,ca,4e),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_67,2));
HXDLIN(  89)			_g->set(HX_("ui_left",12,4d,89,f7),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_68,2));
HXDLIN(  89)			_g->set(HX_("ui_down",6d,3d,47,f2),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_69,2));
HXDLIN(  89)			_g->set(HX_("ui_up",a6,c2,91,a3),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_70,2));
HXDLIN(  89)			_g->set(HX_("ui_right",71,30,a7,17),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_71,2));
HXDLIN(  89)			_g->set(HX_("accept",08,93,06,0b),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_72,2));
HXDLIN(  89)			_g->set(HX_("back",27,da,10,41),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_73,2));
HXDLIN(  89)			_g->set(HX_("pause",f6,d6,57,bd),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_74,2));
HXDLIN(  89)			_g->set(HX_("reset",cf,49,c8,e6),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_75,2));
HXDLIN(  89)			_g->set(HX_("volume_mute",9e,6a,db,fa),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_76,2));
HXDLIN(  89)			_g->set(HX_("volume_up",e0,76,ad,60),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_77,2));
HXDLIN(  89)			_g->set(HX_("volume_down",27,f4,e3,f4),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_78,2));
HXDLIN(  89)			_g->set(HX_("debug_1",05,20,57,5b),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_79,2));
HXDLIN(  89)			_g->set(HX_("debug_2",06,20,57,5b),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_80,2));
HXDLIN(  89)			_g->set(HX_("vocal_aa",aa,8b,ed,1b),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_81,2));
HXDLIN(  89)			_g->set(HX_("vocal_ee",2a,8f,ed,1b),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_82,2));
HXDLIN(  89)			_g->set(HX_("vocal_oo",ea,97,ed,1b),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_83,2));
HXDLIN(  89)			_g->set(HX_("vocal_eh",2d,8f,ed,1b),::Array_obj< int >::fromData( _hx_array_data_8ae055c5_84,2));
HXDLIN(  89)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_89_boot)
HXDLIN(  89)		keyBinds = ( ( ::haxe::ds::StringMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_1453641688f31b8d_118_boot)
HXDLIN( 118)		defaultKeys = null();
            	}
}

